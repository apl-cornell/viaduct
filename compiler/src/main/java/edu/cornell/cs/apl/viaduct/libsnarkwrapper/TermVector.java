/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cornell.cs.apl.viaduct.libsnarkwrapper;

public class TermVector extends java.util.AbstractList<Term> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected TermVector(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(TermVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsnarkwrapperJNI.delete_TermVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public TermVector(Term[] initialElements) {
    this();
    reserve(initialElements.length);

    for (Term element : initialElements) {
      add(element);
    }
  }

  public TermVector(Iterable<Term> initialElements) {
    this();
    for (Term element : initialElements) {
      add(element);
    }
  }

  public Term get(int index) {
    return doGet(index);
  }

  public Term set(int index, Term e) {
    return doSet(index, e);
  }

  public boolean add(Term e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, Term e) {
    modCount++;
    doAdd(index, e);
  }

  public Term remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public TermVector() {
    this(libsnarkwrapperJNI.new_TermVector__SWIG_0(), true);
  }

  public TermVector(TermVector other) {
    this(libsnarkwrapperJNI.new_TermVector__SWIG_1(TermVector.getCPtr(other), other), true);
  }

  public long capacity() {
    return libsnarkwrapperJNI.TermVector_capacity(swigCPtr, this);
  }

  public void reserve(long n) {
    libsnarkwrapperJNI.TermVector_reserve(swigCPtr, this, n);
  }

  public boolean isEmpty() {
    return libsnarkwrapperJNI.TermVector_isEmpty(swigCPtr, this);
  }

  public void clear() {
    libsnarkwrapperJNI.TermVector_clear(swigCPtr, this);
  }

  public TermVector(int count, Term value) {
    this(libsnarkwrapperJNI.new_TermVector__SWIG_2(count, Term.getCPtr(value), value), true);
  }

  private int doSize() {
    return libsnarkwrapperJNI.TermVector_doSize(swigCPtr, this);
  }

  private void doAdd(Term x) {
    libsnarkwrapperJNI.TermVector_doAdd__SWIG_0(swigCPtr, this, Term.getCPtr(x), x);
  }

  private void doAdd(int index, Term x) {
    libsnarkwrapperJNI.TermVector_doAdd__SWIG_1(swigCPtr, this, index, Term.getCPtr(x), x);
  }

  private Term doRemove(int index) {
    return new Term(libsnarkwrapperJNI.TermVector_doRemove(swigCPtr, this, index), true);
  }

  private Term doGet(int index) {
    return new Term(libsnarkwrapperJNI.TermVector_doGet(swigCPtr, this, index), false);
  }

  private Term doSet(int index, Term val) {
    return new Term(
        libsnarkwrapperJNI.TermVector_doSet(swigCPtr, this, index, Term.getCPtr(val), val), true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    libsnarkwrapperJNI.TermVector_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }
}
