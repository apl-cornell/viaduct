/* biometric matching example from HyCC paper */

fun match(db1: int{A & B<-}, db2: int{A & B<-}, s1: int{B & A<-}, s2: int{B & A<-}, res: out int{A & B}) {
    val dist1: int{db1 & s1} = db1 - s1;
    val dist2: int{db2 & s2} = db2 - s2;
    out res = (dist1 * dist1) + (dist2 * dist2);
}

fun main() {
    val n: int{A ⊓ B} = 128;
    val d: int{A ⊓ B} = 2;

    val a_db = Array[int]{Alice & Bob<-}(n * d);
    val b_sample = Array[int]{Bob & Alice<-}(d);

    for (var i: int{A ⊓ B} = 0; i < n*d; i += 1) {
        a_db[i] = endorse (input int from Alice) to {A & B<-} from {A & B<-};
    }

    for (var i: int{A ⊓ B} = 0; i < d; i += 1) {
        b_sample[i] = endorse (input int from Bob) to {B & A<-} from {B & A<-};
    }

    match(a_db[0], a_db[1], b_sample[0], b_sample[1], val init_min);
    var min_dist: int{A & B} = init_min;

    for (var i: int{A ⊓ B} = 0; i < n; i += 1) {
        match(a_db[(i*d)], a_db[(i*d)+1], b_sample[0], b_sample[1], val dist);

        if (dist < min_dist) {
            min_dist = dist;
        }
    }

    val result: int{Alice ⊓ Bob}  = declassify min_dist to {Alice ⊓ Bob};
    output result to Alice;
    output result to Bob;
}

hosts: Alice, Bob
assume: Alice<- <=> Bob<-
