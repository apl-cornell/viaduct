host alice : {(A & B<-)}

host bob : {(B & A<-)}

process main {
    val storeCount: int{(A ⊓ B)}@Replication(hosts = {alice, bob}) = 500;
    var a_rev: int{(A & B<-)}@YaoABY(client = bob, server = alice) = 0;
    var b_rev: int{(B & A<-)}@YaoABY(client = bob, server = alice) = 0;
    var i: int{(A ⊓ B)}@Replication(hosts = {alice, bob}) = 0;
    loop {
        let $tmp@Replication(hosts = {alice, bob}) = i;
        let $tmp_1@Replication(hosts = {alice, bob}) = storeCount;
        let $tmp_2@Replication(hosts = {alice, bob}) = ($tmp < $tmp_1);
        if ($tmp_2) {
            let $tmp_3@Local(host = alice) = input int from alice;
            a_rev += $tmp_3;
            let $tmp_4@Local(host = bob) = input int from bob;
            b_rev += $tmp_4;
            i += 1;
        } else {
            break;
        }
    }
    let $tmp_5@YaoABY(client = bob, server = alice) = a_rev;
    let $tmp_6@YaoABY(client = bob, server = alice) = b_rev;
    let $tmp_7@YaoABY(client = bob, server = alice) = ($tmp_5 + $tmp_6);
    val total_market: int{(A & B)}@YaoABY(client = bob, server = alice) = $tmp_7;
    let $tmp_8@YaoABY(client = bob, server = alice) = a_rev;
    let $tmp_9@YaoABY(client = bob, server = alice) = (100 * $tmp_8);
    let $tmp_10@YaoABY(client = bob, server = alice) = total_market;
    let $tmp_11@YaoABY(client = bob, server = alice) = ($tmp_9 / $tmp_10);
    val a_share: int{(A & B)}@YaoABY(client = bob, server = alice) = $tmp_11;
    let $tmp_12@YaoABY(client = bob, server = alice) = b_rev;
    let $tmp_13@YaoABY(client = bob, server = alice) = (100 * $tmp_12);
    let $tmp_14@YaoABY(client = bob, server = alice) = total_market;
    let $tmp_15@YaoABY(client = bob, server = alice) = ($tmp_13 / $tmp_14);
    val b_share: int{(A & B)}@YaoABY(client = bob, server = alice) = $tmp_15;
    let $tmp_16@YaoABY(client = bob, server = alice) = a_share;
    let $tmp_17@YaoABY(client = bob, server = alice) = a_share;
    let $tmp_18@YaoABY(client = bob, server = alice) = ($tmp_16 * $tmp_17);
    let $tmp_19@YaoABY(client = bob, server = alice) = b_share;
    let $tmp_20@YaoABY(client = bob, server = alice) = b_share;
    let $tmp_21@YaoABY(client = bob, server = alice) = ($tmp_19 * $tmp_20);
    let $tmp_22@YaoABY(client = bob, server = alice) = ($tmp_18 + $tmp_21);
    let $tmp_23@Replication(hosts = {alice, bob}) = declassify $tmp_22 to {(A ⊓ B)};
    val hhi: int{(A ⊓ B)}@Replication(hosts = {alice, bob}) = $tmp_23;
    let $tmp_24@Replication(hosts = {alice, bob}) = hhi;
    output $tmp_24 to alice;
    let $tmp_25@Replication(hosts = {alice, bob}) = hhi;
    output $tmp_25 to bob;
}
