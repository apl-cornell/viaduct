host alice
host bob

/* Biometric matching */
circuit fun <n, d> biometric@YaoABY(client = bob, server = alice)(database: int[n, d], sample: int[d]) → dist: int[] {
    val dists[i < n]: int[] = reduce(::+, 0) { j < d -> (database[i, j] - sample[j]) * (database[i, j] - sample[j]) }
    val result[]: int[] = reduce(::min, 999999) { i < n -> dists[i] }
    return result
}

/* Calculates the Herfindahl-Hirschman index for market competitiveness. */
circuit fun <stores> hhi@YaoABY(client = bob, server = alice)(a_sales: int[stores], b_sales: int[stores]) → hhi: int[] {
    val revenues[i < 2]: int[] = reduce(::+, 0) { j < stores -> mux(i == 0, a_sales[j], b_sales[j]) }
    val total[]: int[] = reduce(::+, 0) { i < n -> revenues[i] }
    val result[]: int[] = reduce(::+, 0) { i < n -> ((100 * revenues[i]) / total[]) * ((100 * revenues[i]) / total[]) }
    return result
}

/* Historical millionaires */
circuit fun <n> historical@YaoABY(client = bob, server = alice)(a: int[n], b: int[n]) → a_wins: bool[] {
    val a_min[]: int[] = reduce(::min, 999999) { i < n -> a[i] }
    val b_min[]: int[] = reduce(::min, 999999) { i < n -> b[i] }
    val result[]: bool[] = a_min[] > b_min[]
    return result
}

/* One-round bidding for n items; not two-rounds because inputs/outputs not permitted in circuits */
circuit fun <n> bidding@YaoABY(client = bob, server = alice)(a: int[n], b: int[n]) → a_wins: bool[n] {
    val a_wins[i < n]: int[] = a[i] < b[i]
    return a_wins
}
