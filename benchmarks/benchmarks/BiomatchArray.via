/* biometric matching example from HyCC paper */

host alice: {A & B<-}
host bob: {B & A<-}

/** Computes the match between [s] and the [i]th entry of [db]. */
fun match(db: int[m]{A & B<-}, s: int[n]{B & A<-}, i: int, res: out int{A & B}) {
    val dist[j: n] = db[i * n + j] - s[j];
    out res = reduce(0, +){k -> dist[k] * dist[k]};
}

fun mul(a: int[m, n], b: int[n, p], out res: int[m, p]) {
    res[i, j] = reduce(0, +){k -> a[i, k] * b[k, j]}
}

fun main() {
    val n: int{A ⊓ B} = 128;
    val d: int{A ⊓ B} = 2;

    val a_db = int[n * d]{A & B<-};
    val b_sample = int[d]{B & A<-};

    a_db = input int[n * d] from alice;
    b_sample = input int[d] from bob;

    match(&a_db, &b_sample, 0, val init_min)
    var min_dist: int{A & B} = init_min;

    for (var i: int{A ⊓ B} = 0; i < n; i += 1) {
        match(&a_db, &b_sample, i, val dist)
        if (dist < min_dist) {
            min_dist = dist;
        }
    }

    val result: int{A ⊓ B}  = declassify min_dist to {A ⊓ B};
    output result to alice;
    output result to bob;
}
