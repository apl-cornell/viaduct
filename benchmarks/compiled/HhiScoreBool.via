host companyA : {(A & B<-)}

host companyB : {(B & A<-)}

fun main() {
    val storeCount: int{(A ⊓ B)}@Replication(hosts = {companyA, companyB}) = 500;
    var a_rev: int{(A & B<-)}@BoolABY(client = companyB, server = companyA) = 0;
    var b_rev: int{(B & A<-)}@BoolABY(client = companyB, server = companyA) = 0;
    var i: int{(A ⊓ B)}@Replication(hosts = {companyA, companyB}) = 0;
    loop {
        let $tmp@Replication(hosts = {companyA, companyB}) = i;
        let $tmp_1@Replication(hosts = {companyA, companyB}) = storeCount;
        let $tmp_2@Replication(hosts = {companyA, companyB}) = ($tmp < $tmp_1);
        if ($tmp_2) {
            let $tmp_3@Local(host = companyA) = input int from companyA;
            a_rev += $tmp_3;
            let $tmp_4@Local(host = companyB) = input int from companyB;
            b_rev += $tmp_4;
            i += 1;
        } else {
            break;
        }
    }
    let $tmp_5@BoolABY(client = companyB, server = companyA) = a_rev;
    let $tmp_6@BoolABY(client = companyB, server = companyA) = b_rev;
    let $tmp_7@BoolABY(client = companyB, server = companyA) = ($tmp_5 + $tmp_6);
    val total_market: int{(A & B)}@BoolABY(client = companyB, server = companyA) = $tmp_7;
    let $tmp_8@BoolABY(client = companyB, server = companyA) = a_rev;
    let $tmp_9@BoolABY(client = companyB, server = companyA) = (100 * $tmp_8);
    let $tmp_10@BoolABY(client = companyB, server = companyA) = total_market;
    let $tmp_11@BoolABY(client = companyB, server = companyA) = ($tmp_9 / $tmp_10);
    val a_share: int{(A & B)}@BoolABY(client = companyB, server = companyA) = $tmp_11;
    let $tmp_12@BoolABY(client = companyB, server = companyA) = b_rev;
    let $tmp_13@BoolABY(client = companyB, server = companyA) = (100 * $tmp_12);
    let $tmp_14@BoolABY(client = companyB, server = companyA) = total_market;
    let $tmp_15@BoolABY(client = companyB, server = companyA) = ($tmp_13 / $tmp_14);
    val b_share: int{(A & B)}@BoolABY(client = companyB, server = companyA) = $tmp_15;
    let $tmp_16@BoolABY(client = companyB, server = companyA) = a_share;
    let $tmp_17@BoolABY(client = companyB, server = companyA) = a_share;
    let $tmp_18@BoolABY(client = companyB, server = companyA) = ($tmp_16 * $tmp_17);
    let $tmp_19@BoolABY(client = companyB, server = companyA) = b_share;
    let $tmp_20@BoolABY(client = companyB, server = companyA) = b_share;
    let $tmp_21@BoolABY(client = companyB, server = companyA) = ($tmp_19 * $tmp_20);
    let $tmp_22@BoolABY(client = companyB, server = companyA) = ($tmp_18 + $tmp_21);
    let $tmp_23@Replication(hosts = {companyA, companyB}) = declassify $tmp_22 to {(A ⊓ B)};
    val hhi: int{(A ⊓ B)}@Replication(hosts = {companyA, companyB}) = $tmp_23;
    let $tmp_24@Replication(hosts = {companyA, companyB}) = hhi;
    output $tmp_24 to companyA;
    let $tmp_25@Replication(hosts = {companyA, companyB}) = hhi;
    output $tmp_25 to companyB;
}
