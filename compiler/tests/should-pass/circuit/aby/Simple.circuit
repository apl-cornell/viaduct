host alice
host bob

/* Simple test */
circuit fun <> f@Local(host = alice)(a: int[], b: int[m, n]) -> c: int[] {
    val tmp[]: int[] = a[] + b[0, 0]
    return tmp
}

/* Add the sizes */
circuit fun <i, j> sumSizes@YaoABY(client = bob, server = alice)() → res: int[] {
    val r[]: int[] = i + j
    return r
}

/* No returns reduce with literal on RHS */
circuit fun <> g@Local(host = alice)() -> {
    val fivetimesthree[]: int[] = reduce(::+, 0) { i < 3 -> 5 }
    return
}

/* Multiple indexing parameters in let statement. Returning arrays */
circuit fun <m, n, p> multiply@Local(host = alice)(a: int[m, n], b: int[n, p]) → res: int[m, p] {
    val r[i < m, j < p]: int[m, p] = reduce(::+, 0){ k < n -> a[i, k] * b[k, j] }
    return r
}

/* Produces zero in O(n) time. */
circuit fun <n> slowZero@Local(host = alice)() → zero: int[] {
    val a[i < n]: int[n] = i
    val b[i < n]: int[n] = -1 * (n - i)
    val line[i < n]: int[n] = a[i] + b[i]
    val result[]: int[] = reduce(::+, 0) { i < n -> line[i] }
    return result
}

/* Multiple returns. N-dimensional lookup */
circuit fun <> h@Local(host = alice)() -> a:int[], b:int[], c:int[] {
    val arr[i < 10, j < 10]: int[10, 10] = i * 31 + j * 19
    val a[]:int[] = arr[1, 4]
    val b[]:int[] = arr[3, 2]
    val c[]:int[] = arr[8, 9]
    return a, b, c
}

/* Just a return statement */
circuit fun <> k@Local(host = alice)() -> a:int[], b:int[], c:int[] {
    val a[]:int[] = 3
    val b[]:int[] = 0
    val c[]:int[] = 1
    return a, b, c
}

/* Empty */
circuit fun <> empty@Local(host = alice)() -> {
    return
}

/* Find min */
circuit fun <n> findMin@Local(host = alice)(a: int[n]) → res: int[] {
    val result[]: int[] = reduce(::min, 999999){ i < n -> a[i] }
    return result
}

fun <> main() -> {
  return
}
