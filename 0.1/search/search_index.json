{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Viaduct \u00b6 Viaduct is an extensible, optimizing compiler for secure distributed programs. It lets developers write programs in a simple sequential language that embeds high-level security policies using information flow labels. Viaduct then compiles the source program into a distributed implementation that employs cryptography to defend the security policy. Viaduct is extensible : it provides a set of well-defined interfaces that developers can implement to add support for new cryptographic mechanisms. Because of its novel design, Viaduct does not place limitations on the source programs it can compile, such as the number of participants or trust assumptions between participants. Viaduct uses a cost model to generate efficient distributed programs, avoiding the use of expensive cryptography unless necessary. Our prototype compiler and runtime, written in Kotlin, can be found on Github . It currently supports the following cryptographic mechanisms: multiparty computation (via ABY ) zero-knowledge proofs (via libsnark ) commitments (SHA256 hash + nonce) More details about the compiler can be found in our PLDI 2021 paper .","title":"Viaduct"},{"location":"#viaduct","text":"Viaduct is an extensible, optimizing compiler for secure distributed programs. It lets developers write programs in a simple sequential language that embeds high-level security policies using information flow labels. Viaduct then compiles the source program into a distributed implementation that employs cryptography to defend the security policy. Viaduct is extensible : it provides a set of well-defined interfaces that developers can implement to add support for new cryptographic mechanisms. Because of its novel design, Viaduct does not place limitations on the source programs it can compile, such as the number of participants or trust assumptions between participants. Viaduct uses a cost model to generate efficient distributed programs, avoiding the use of expensive cryptography unless necessary. Our prototype compiler and runtime, written in Kotlin, can be found on Github . It currently supports the following cryptographic mechanisms: multiparty computation (via ABY ) zero-knowledge proofs (via libsnark ) commitments (SHA256 hash + nonce) More details about the compiler can be found in our PLDI 2021 paper .","title":"Viaduct"},{"location":"api/-modules/","text":"// Modules All modules: \u00b6 cli The command line interface. compiler runtime shared test-utilities Utilities used during testing.","title":"Modules"},{"location":"api/-modules/#all-modules","text":"cli The command line interface. compiler runtime shared test-utilities Utilities used during testing.","title":"All modules:"},{"location":"api/cli/cli/","text":"// cli cli \u00b6 [jvm] The command line interface. Packages \u00b6 Name Summary edu.cornell.cs.apl.viaduct edu.cornell.cs.apl.viaduct.cli","title":"Command Line Interface"},{"location":"api/cli/cli/#cli","text":"[jvm] The command line interface.","title":"cli"},{"location":"api/cli/cli/#packages","text":"Name Summary edu.cornell.cs.apl.viaduct edu.cornell.cs.apl.viaduct.cli","title":"Packages"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct/","text":"// cli / edu.cornell.cs.apl.viaduct Package edu.cornell.cs.apl.viaduct \u00b6 Functions \u00b6 Name Summary main [jvm] Content fun main (args: Array < String >) More info Runs the compiler.","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct/#package-educornellcsaplviaduct","text":"","title":"Package edu.cornell.cs.apl.viaduct"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct/#functions","text":"Name Summary main [jvm] Content fun main (args: Array < String >) More info Runs the compiler.","title":"Functions"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct/main/","text":"// cli / edu.cornell.cs.apl.viaduct / main main \u00b6 [jvm] Content fun main (args: Array < String >) More info Runs the compiler.","title":"Main"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct/main/#main","text":"[jvm] Content fun main (args: Array < String >) More info Runs the compiler.","title":"main"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/","text":"// cli / edu.cornell.cs.apl.viaduct.cli Package edu.cornell.cs.apl.viaduct.cli \u00b6 Types \u00b6 Name Summary Compile [jvm] Content class Compile : CliktCommand Format [jvm] Content class Format : CliktCommand Interpret [jvm] Content class Interpret : CliktCommand Run [jvm] Content class Run : CliktCommand Specification [jvm] Content class Specification : CliktCommand Viaduct [jvm] Content class Viaduct : NoOpCliktCommand","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/#package-educornellcsaplviaductcli","text":"","title":"Package edu.cornell.cs.apl.viaduct.cli"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/#types","text":"Name Summary Compile [jvm] Content class Compile : CliktCommand Format [jvm] Content class Format : CliktCommand Interpret [jvm] Content class Interpret : CliktCommand Run [jvm] Content class Run : CliktCommand Specification [jvm] Content class Specification : CliktCommand Viaduct [jvm] Content class Viaduct : NoOpCliktCommand","title":"Types"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile Compile \u00b6 [jvm] class Compile : CliktCommand Functions \u00b6 Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String constraintGraphOutput [jvm] val constraintGraphOutput : File ? currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean labelOutput [jvm] val labelOutput : File ? maximizeCost [jvm] val maximizeCost : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean protocolSelectionOutput [jvm] val protocolSelectionOutput : File ? wanCost [jvm] val wanCost : Boolean","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/#compile","text":"[jvm] class Compile : CliktCommand","title":"Compile"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/#functions","text":"Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/#properties","text":"Name Summary commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String constraintGraphOutput [jvm] val constraintGraphOutput : File ? currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean labelOutput [jvm] val labelOutput : File ? maximizeCost [jvm] val maximizeCost : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean protocolSelectionOutput [jvm] val protocolSelectionOutput : File ? wanCost [jvm] val wanCost : Boolean","title":"Properties"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/-compile/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / Compile Compile \u00b6 [jvm] Content fun Compile ()","title":" compile"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/-compile/#compile","text":"[jvm] Content fun Compile ()","title":"Compile"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/constraint-graph-output/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / constraintGraphOutput constraintGraphOutput \u00b6 [jvm] Content val constraintGraphOutput : File ?","title":"Constraint graph output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/constraint-graph-output/#constraintgraphoutput","text":"[jvm] Content val constraintGraphOutput : File ?","title":"constraintGraphOutput"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/input/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / input input \u00b6 [jvm] Content val input : File ?","title":"Input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/input/#input","text":"[jvm] Content val input : File ?","title":"input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/label-output/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / labelOutput labelOutput \u00b6 [jvm] Content val labelOutput : File ?","title":"Label output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/label-output/#labeloutput","text":"[jvm] Content val labelOutput : File ?","title":"labelOutput"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/maximize-cost/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / maximizeCost maximizeCost \u00b6 [jvm] Content val maximizeCost : Boolean","title":"Maximize cost"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/maximize-cost/#maximizecost","text":"[jvm] Content val maximizeCost : Boolean","title":"maximizeCost"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/output/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / output output \u00b6 [jvm] Content val output : File ?","title":"Output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/output/#output","text":"[jvm] Content val output : File ?","title":"output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/protocol-selection-output/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / protocolSelectionOutput protocolSelectionOutput \u00b6 [jvm] Content val protocolSelectionOutput : File ?","title":"Protocol selection output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/protocol-selection-output/#protocolselectionoutput","text":"[jvm] Content val protocolSelectionOutput : File ?","title":"protocolSelectionOutput"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/run/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / run run \u00b6 [jvm] Content open override fun run ()","title":"Run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/run/#run","text":"[jvm] Content open override fun run ()","title":"run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/wan-cost/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Compile / wanCost wanCost \u00b6 [jvm] Content val wanCost : Boolean","title":"Wan cost"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-compile/wan-cost/#wancost","text":"[jvm] Content val wanCost : Boolean","title":"wanCost"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Format Format \u00b6 [jvm] class Format : CliktCommand Functions \u00b6 Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary check [jvm] val check : Boolean commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context elaborate [jvm] val elaborate : Boolean helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/#format","text":"[jvm] class Format : CliktCommand","title":"Format"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/#functions","text":"Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/#properties","text":"Name Summary check [jvm] val check : Boolean commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context elaborate [jvm] val elaborate : Boolean helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Properties"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/-format/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Format / Format Format \u00b6 [jvm] Content fun Format ()","title":" format"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/-format/#format","text":"[jvm] Content fun Format ()","title":"Format"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/check/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Format / check check \u00b6 [jvm] Content val check : Boolean","title":"Check"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/check/#check","text":"[jvm] Content val check : Boolean","title":"check"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/elaborate/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Format / elaborate elaborate \u00b6 [jvm] Content val elaborate : Boolean","title":"Elaborate"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/elaborate/#elaborate","text":"[jvm] Content val elaborate : Boolean","title":"elaborate"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/input/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Format / input input \u00b6 [jvm] Content val input : File ?","title":"Input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/input/#input","text":"[jvm] Content val input : File ?","title":"input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/output/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Format / output output \u00b6 [jvm] Content val output : File ?","title":"Output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/output/#output","text":"[jvm] Content val output : File ?","title":"output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/run/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Format / run run \u00b6 [jvm] Content open override fun run ()","title":"Run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-format/run/#run","text":"[jvm] Content open override fun run ()","title":"run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Interpret Interpret \u00b6 [jvm] class Interpret : CliktCommand Functions \u00b6 Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/#interpret","text":"[jvm] class Interpret : CliktCommand","title":"Interpret"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/#functions","text":"Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/#properties","text":"Name Summary commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Properties"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/-interpret/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Interpret / Interpret Interpret \u00b6 [jvm] Content fun Interpret ()","title":" interpret"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/-interpret/#interpret","text":"[jvm] Content fun Interpret ()","title":"Interpret"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/input/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Interpret / input input \u00b6 [jvm] Content val input : File ?","title":"Input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/input/#input","text":"[jvm] Content val input : File ?","title":"input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/output/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Interpret / output output \u00b6 [jvm] Content val output : File ?","title":"Output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/output/#output","text":"[jvm] Content val output : File ?","title":"output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/run/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Interpret / run run \u00b6 [jvm] Content open override fun run ()","title":"Run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-interpret/run/#run","text":"[jvm] Content open override fun run ()","title":"run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Run Run \u00b6 [jvm] class Run : CliktCommand Functions \u00b6 Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary abyPort [jvm] val abyPort : Int ? commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > hostAddress [jvm] val hostAddress : List < Pair < String , String >> input [jvm] val input : File ? inputStrategy [jvm] val inputStrategy : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/#run","text":"[jvm] class Run : CliktCommand","title":"Run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/#functions","text":"Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/#properties","text":"Name Summary abyPort [jvm] val abyPort : Int ? commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > hostAddress [jvm] val hostAddress : List < Pair < String , String >> input [jvm] val input : File ? inputStrategy [jvm] val inputStrategy : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Properties"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/-run/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Run / Run Run \u00b6 [jvm] Content fun Run ()","title":" run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/-run/#run","text":"[jvm] Content fun Run ()","title":"Run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/aby-port/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Run / abyPort abyPort \u00b6 [jvm] Content val abyPort : Int ?","title":"Aby port"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/aby-port/#abyport","text":"[jvm] Content val abyPort : Int ?","title":"abyPort"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/host-address/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Run / hostAddress hostAddress \u00b6 [jvm] Content val hostAddress : List < Pair < String , String >>","title":"Host address"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/host-address/#hostaddress","text":"[jvm] Content val hostAddress : List < Pair < String , String >>","title":"hostAddress"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/input-strategy/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Run / inputStrategy inputStrategy \u00b6 [jvm] Content val inputStrategy : File ?","title":"Input strategy"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/input-strategy/#inputstrategy","text":"[jvm] Content val inputStrategy : File ?","title":"inputStrategy"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/input/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Run / input input \u00b6 [jvm] Content val input : File ?","title":"Input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/input/#input","text":"[jvm] Content val input : File ?","title":"input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/run/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Run / run run \u00b6 [jvm] Content open override fun run ()","title":"Run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-run/run/#run","text":"[jvm] Content open override fun run ()","title":"run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Specification Specification \u00b6 [jvm] class Specification : CliktCommand Functions \u00b6 Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary adversary [jvm] val adversary : String commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/#specification","text":"[jvm] class Specification : CliktCommand","title":"Specification"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/#functions","text":"Name Summary aliases [jvm] Content open fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/#properties","text":"Name Summary adversary [jvm] val adversary : String commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > input [jvm] val input : File ? invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > output [jvm] val output : File ? printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean","title":"Properties"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/-specification/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Specification / Specification Specification \u00b6 [jvm] Content fun Specification ()","title":" specification"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/-specification/#specification","text":"[jvm] Content fun Specification ()","title":"Specification"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/adversary/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Specification / adversary adversary \u00b6 [jvm] Content val adversary : String","title":"Adversary"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/adversary/#adversary","text":"[jvm] Content val adversary : String","title":"adversary"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/input/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Specification / input input \u00b6 [jvm] Content val input : File ?","title":"Input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/input/#input","text":"[jvm] Content val input : File ?","title":"input"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/output/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Specification / output output \u00b6 [jvm] Content val output : File ?","title":"Output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/output/#output","text":"[jvm] Content val output : File ?","title":"output"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/run/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Specification / run run \u00b6 [jvm] Content open override fun run ()","title":"Run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-specification/run/#run","text":"[jvm] Content open override fun run ()","title":"run"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Viaduct Viaduct \u00b6 [jvm] class Viaduct : NoOpCliktCommand Functions \u00b6 Name Summary aliases [jvm] Content open override fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean verbose [jvm] val verbose : Int","title":"Index"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/#viaduct","text":"[jvm] class Viaduct : NoOpCliktCommand","title":"Viaduct"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/#functions","text":"Name Summary aliases [jvm] Content open override fun aliases (): Map < String , List < String >> equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFormattedHelp [jvm] Content open fun getFormattedHelp (): String getFormattedUsage [jvm] Content open fun getFormattedUsage (): String hashCode [jvm] Content open fun hashCode (): Int issueMessage [jvm] Content fun issueMessage (message: String ) main [jvm] Content fun main (argv: Array String >) fun main (argv: List < String >) parse [jvm] Content fun parse (argv: Array < String >, parentContext: Context?) fun parse (argv: List < String >, parentContext: Context?) registerArgument [jvm] Content fun registerArgument (argument: Argument) registeredArguments [jvm] Content fun registeredArguments (): List registeredOptions [jvm] Content fun registeredOptions (): List registeredParameterGroups [jvm] Content fun registeredParameterGroups (): List registeredSubcommandNames [jvm] Content fun registeredSubcommandNames (): List < String > registeredSubcommands [jvm] Content fun registeredSubcommands (): List registerOption [jvm] Content open override fun registerOption (option: GroupableOption) fun registerOption (option: Option) registerOptionGroup [jvm] Content fun registerOptionGroup (group: ParameterGroup) run [jvm] Content open override fun run () toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/#properties","text":"Name Summary commandHelp [jvm] open val commandHelp : String commandHelpEpilog [jvm] open val commandHelpEpilog : String commandName [jvm] val commandName : String currentContext [jvm] val currentContext : Context helpTags [jvm] val helpTags : Map < String , String > invokeWithoutSubcommand [jvm] val invokeWithoutSubcommand : Boolean messages [jvm] val messages : List < String > printHelpOnEmptyArgs [jvm] val printHelpOnEmptyArgs : Boolean verbose [jvm] val verbose : Int","title":"Properties"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/-viaduct/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Viaduct / Viaduct Viaduct \u00b6 [jvm] Content fun Viaduct ()","title":" viaduct"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/-viaduct/#viaduct","text":"[jvm] Content fun Viaduct ()","title":"Viaduct"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/aliases/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Viaduct / aliases aliases \u00b6 [jvm] Content open override fun aliases (): Map < String , List < String >>","title":"Aliases"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/aliases/#aliases","text":"[jvm] Content open override fun aliases (): Map < String , List < String >>","title":"aliases"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/verbose/","text":"// cli / edu.cornell.cs.apl.viaduct.cli / Viaduct / verbose verbose \u00b6 [jvm] Content val verbose : Int","title":"Verbose"},{"location":"api/cli/cli/edu.cornell.cs.apl.viaduct.cli/-viaduct/verbose/#verbose","text":"[jvm] Content val verbose : Int","title":"verbose"},{"location":"api/compiler/compiler/","text":"// compiler compiler \u00b6 Packages \u00b6 Name Summary edu.cornell.cs.apl.viaduct.algebra edu.cornell.cs.apl.viaduct.algebra.solver edu.cornell.cs.apl.viaduct.analysis edu.cornell.cs.apl.viaduct.errors edu.cornell.cs.apl.viaduct.parsing edu.cornell.cs.apl.viaduct.passes edu.cornell.cs.apl.viaduct.protocols edu.cornell.cs.apl.viaduct.security edu.cornell.cs.apl.viaduct.security.solver edu.cornell.cs.apl.viaduct.selection edu.cornell.cs.apl.viaduct.syntax edu.cornell.cs.apl.viaduct.syntax.datatypes edu.cornell.cs.apl.viaduct.syntax.intermediate The abstract syntax of the internal language. edu.cornell.cs.apl.viaduct.syntax.operators edu.cornell.cs.apl.viaduct.syntax.surface The abstract syntax of the surface language. edu.cornell.cs.apl.viaduct.syntax.types edu.cornell.cs.apl.viaduct.syntax.util edu.cornell.cs.apl.viaduct.syntax.values edu.cornell.cs.apl.viaduct.util edu.cornell.cs.apl.viaduct.util.dataflow","title":"Compiler"},{"location":"api/compiler/compiler/#compiler","text":"","title":"compiler"},{"location":"api/compiler/compiler/#packages","text":"Name Summary edu.cornell.cs.apl.viaduct.algebra edu.cornell.cs.apl.viaduct.algebra.solver edu.cornell.cs.apl.viaduct.analysis edu.cornell.cs.apl.viaduct.errors edu.cornell.cs.apl.viaduct.parsing edu.cornell.cs.apl.viaduct.passes edu.cornell.cs.apl.viaduct.protocols edu.cornell.cs.apl.viaduct.security edu.cornell.cs.apl.viaduct.security.solver edu.cornell.cs.apl.viaduct.selection edu.cornell.cs.apl.viaduct.syntax edu.cornell.cs.apl.viaduct.syntax.datatypes edu.cornell.cs.apl.viaduct.syntax.intermediate The abstract syntax of the internal language. edu.cornell.cs.apl.viaduct.syntax.operators edu.cornell.cs.apl.viaduct.syntax.surface The abstract syntax of the surface language. edu.cornell.cs.apl.viaduct.syntax.types edu.cornell.cs.apl.viaduct.syntax.util edu.cornell.cs.apl.viaduct.syntax.values edu.cornell.cs.apl.viaduct.util edu.cornell.cs.apl.viaduct.util.dataflow","title":"Packages"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra Package edu.cornell.cs.apl.viaduct.algebra \u00b6 Types \u00b6 Name Summary FreeDistributiveLattice [jvm] Content class FreeDistributiveLattice < A > : HeytingAlgebra < FreeDistributiveLattice < A >> More info The free distributive lattice over an arbitrary set A of elements. HeytingAlgebra [jvm] Content interface HeytingAlgebra < T : HeytingAlgebra < T >> : Lattice < T > More info A Heyting algebra is a bounded lattice that supports an implication operation \u2192 where A \u2192 B is the greatest element x that satisfies A \u2227 x \u2264 B. JoinSemiLattice [jvm] Content interface JoinSemiLattice < T : JoinSemiLattice < T >> : PartialOrder < T > More info A set that supports binary least upper bounds. Lattice [jvm] Content interface Lattice < T : Lattice < T >> : MeetSemiLattice < T > , JoinSemiLattice < T > More info A set with unique least upper and greatest lower bounds. MeetSemiLattice [jvm] Content interface MeetSemiLattice < T : MeetSemiLattice < T >> : PartialOrder < T > More info A set that supports binary greatest lower bounds. PartialOrder [jvm] Content interface PartialOrder < T > More info Like Comparable , but not all pairs of elements have to be ordered.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/#package-educornellcsaplviaductalgebra","text":"","title":"Package edu.cornell.cs.apl.viaduct.algebra"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/#types","text":"Name Summary FreeDistributiveLattice [jvm] Content class FreeDistributiveLattice < A > : HeytingAlgebra < FreeDistributiveLattice < A >> More info The free distributive lattice over an arbitrary set A of elements. HeytingAlgebra [jvm] Content interface HeytingAlgebra < T : HeytingAlgebra < T >> : Lattice < T > More info A Heyting algebra is a bounded lattice that supports an implication operation \u2192 where A \u2192 B is the greatest element x that satisfies A \u2227 x \u2264 B. JoinSemiLattice [jvm] Content interface JoinSemiLattice < T : JoinSemiLattice < T >> : PartialOrder < T > More info A set that supports binary least upper bounds. Lattice [jvm] Content interface Lattice < T : Lattice < T >> : MeetSemiLattice < T > , JoinSemiLattice < T > More info A set with unique least upper and greatest lower bounds. MeetSemiLattice [jvm] Content interface MeetSemiLattice < T : MeetSemiLattice < T >> : PartialOrder < T > More info A set that supports binary greatest lower bounds. PartialOrder [jvm] Content interface PartialOrder < T > More info Like Comparable , but not all pairs of elements have to be ordered.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice FreeDistributiveLattice \u00b6 [jvm] class FreeDistributiveLattice < A > : HeytingAlgebra < FreeDistributiveLattice < A >> The free distributive lattice over an arbitrary set A of elements. In addition to lattice identities, the following hold: a / (b \\/ c) == (a / b) \\/ (a / c) a \\/ (b / c) == (a \\/ b) / (a \\/ c) Constructors \u00b6 Name Summary FreeDistributiveLattice [jvm] fun < A > FreeDistributiveLattice (element: A ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int imply [jvm] Content open override fun imply (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info Returns the relative pseudocomplement of this relative to that. join [jvm] Content open override fun join (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content open override fun lessThanOrEqualTo (that: FreeDistributiveLattice < A >): Boolean meet [jvm] Content open override fun meet (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The greatest lower bound of this and that. toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/#freedistributivelattice","text":"[jvm] class FreeDistributiveLattice < A > : HeytingAlgebra < FreeDistributiveLattice < A >> The free distributive lattice over an arbitrary set A of elements. In addition to lattice identities, the following hold: a / (b \\/ c) == (a / b) \\/ (a / c) a \\/ (b / c) == (a \\/ b) / (a \\/ c)","title":"FreeDistributiveLattice"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/#constructors","text":"Name Summary FreeDistributiveLattice [jvm] fun < A > FreeDistributiveLattice (element: A )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int imply [jvm] Content open override fun imply (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info Returns the relative pseudocomplement of this relative to that. join [jvm] Content open override fun join (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content open override fun lessThanOrEqualTo (that: FreeDistributiveLattice < A >): Boolean meet [jvm] Content open override fun meet (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The greatest lower bound of this and that. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-free-distributive-lattice/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / FreeDistributiveLattice FreeDistributiveLattice \u00b6 [jvm] Content fun < A > FreeDistributiveLattice (element: A )","title":" free distributive lattice"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-free-distributive-lattice/#freedistributivelattice","text":"[jvm] Content fun < A > FreeDistributiveLattice (element: A )","title":"FreeDistributiveLattice"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/hash-code/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/imply/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / imply imply \u00b6 [jvm] Content open override fun imply (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info Returns the relative pseudocomplement of this relative to that. the relative pseudocomplement is greatest x s.t. this & x <= that. How does this work? we are dealing with constraints of the form (A1 | ... | Am) & x <= B1 | ... | Bn which can be rewritten as (A1&x) | ... | (Am&x) <= B1 | ... | Bn This inequality only holds true if every meet on the left can be \"covered\" on the right s.t. a meet on the right side is a subset of the meet in the left side. For every meet on the left Ai, we complement it with every meet on the right Bj. because we want the greatest solution, we join these complements together, arriving at an upper bound for x: x <= Ci1 | ... | Cin where Cij = Bj Ai. But we have to do the same process for all meets on the left, so we get m upper bounds. these have to be all simultaneously satisfied, so we take the meet of the upper bounds: x = (C11 | ... | C1n) & ... & (Cm1 | ... | Cmn) The algorithm below computes exactly this solution.","title":"Imply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/imply/#imply","text":"[jvm] Content open override fun imply (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info Returns the relative pseudocomplement of this relative to that. the relative pseudocomplement is greatest x s.t. this & x <= that. How does this work? we are dealing with constraints of the form (A1 | ... | Am) & x <= B1 | ... | Bn which can be rewritten as (A1&x) | ... | (Am&x) <= B1 | ... | Bn This inequality only holds true if every meet on the left can be \"covered\" on the right s.t. a meet on the right side is a subset of the meet in the left side. For every meet on the left Ai, we complement it with every meet on the right Bj. because we want the greatest solution, we join these complements together, arriving at an upper bound for x: x <= Ci1 | ... | Cin where Cij = Bj Ai. But we have to do the same process for all meets on the left, so we get m upper bounds. these have to be all simultaneously satisfied, so we take the meet of the upper bounds: x = (C11 | ... | C1n) & ... & (Cm1 | ... | Cmn) The algorithm below computes exactly this solution.","title":"imply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / join join \u00b6 [jvm] Content open override fun join (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The least upper bound of this and that.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/join/#join","text":"[jvm] Content open override fun join (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The least upper bound of this and that.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/less-than-or-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / lessThanOrEqualTo lessThanOrEqualTo \u00b6 [jvm] Content open override fun lessThanOrEqualTo (that: FreeDistributiveLattice < A >): Boolean","title":"Less than or equal to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/less-than-or-equal-to/#lessthanorequalto","text":"[jvm] Content open override fun lessThanOrEqualTo (that: FreeDistributiveLattice < A >): Boolean","title":"lessThanOrEqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / meet meet \u00b6 [jvm] Content open override fun meet (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The greatest lower bound of this and that.","title":"Meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/meet/#meet","text":"[jvm] Content open override fun meet (that: FreeDistributiveLattice < A >): FreeDistributiveLattice < A > More info The greatest lower bound of this and that.","title":"meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary bottom [jvm] Content @ JvmStatic () fun < A > bottom (): FreeDistributiveLattice < A > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int top [jvm] Content @ JvmStatic () fun < A > top (): FreeDistributiveLattice < A > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-companion/#functions","text":"Name Summary bottom [jvm] Content @ JvmStatic () fun < A > bottom (): FreeDistributiveLattice < A > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int top [jvm] Content @ JvmStatic () fun < A > top (): FreeDistributiveLattice < A > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-companion/bottom/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / Companion / bottom bottom \u00b6 [jvm] Content @ JvmStatic () fun < A > bottom (): FreeDistributiveLattice < A >","title":"Bottom"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-companion/bottom/#bottom","text":"[jvm] Content @ JvmStatic () fun < A > bottom (): FreeDistributiveLattice < A >","title":"bottom"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-companion/top/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / FreeDistributiveLattice / Companion / top top \u00b6 [jvm] Content @ JvmStatic () fun < A > top (): FreeDistributiveLattice < A >","title":"Top"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-free-distributive-lattice/-companion/top/#top","text":"[jvm] Content @ JvmStatic () fun < A > top (): FreeDistributiveLattice < A >","title":"top"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-heyting-algebra/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / HeytingAlgebra HeytingAlgebra \u00b6 [jvm] interface HeytingAlgebra < T : HeytingAlgebra < T >> : Lattice < T > A Heyting algebra is a bounded lattice that supports an implication operation \u2192 where A \u2192 B is the greatest element x that satisfies A \u2227 x \u2264 B. This is also called an implicated lattice. See also \u00b6 jvm Name Summary Wikipedia page on pseudocomplement Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int imply [jvm] Content abstract fun imply (that: T ): T More info this.imply(that) is the greatest solution to this.meet(x) \u2264 that. join [jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. meet [jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that. toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name FreeDistributiveLattice","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-heyting-algebra/#heytingalgebra","text":"[jvm] interface HeytingAlgebra < T : HeytingAlgebra < T >> : Lattice < T > A Heyting algebra is a bounded lattice that supports an implication operation \u2192 where A \u2192 B is the greatest element x that satisfies A \u2227 x \u2264 B. This is also called an implicated lattice.","title":"HeytingAlgebra"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-heyting-algebra/#see-also","text":"jvm Name Summary Wikipedia page on pseudocomplement","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-heyting-algebra/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int imply [jvm] Content abstract fun imply (that: T ): T More info this.imply(that) is the greatest solution to this.meet(x) \u2264 that. join [jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. meet [jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-heyting-algebra/#inheritors","text":"Name FreeDistributiveLattice","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-heyting-algebra/imply/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / HeytingAlgebra / imply imply \u00b6 [jvm] Content abstract fun imply (that: T ): T More info this.imply(that) is the greatest solution to this.meet(x) \u2264 that.","title":"Imply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-heyting-algebra/imply/#imply","text":"[jvm] Content abstract fun imply (that: T ): T More info this.imply(that) is the greatest solution to this.meet(x) \u2264 that.","title":"imply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-join-semi-lattice/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / JoinSemiLattice JoinSemiLattice \u00b6 [jvm] interface JoinSemiLattice < T : JoinSemiLattice < T >> : PartialOrder < T > A set that supports binary least upper bounds. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name Lattice","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-join-semi-lattice/#joinsemilattice","text":"[jvm] interface JoinSemiLattice < T : JoinSemiLattice < T >> : PartialOrder < T > A set that supports binary least upper bounds.","title":"JoinSemiLattice"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-join-semi-lattice/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-join-semi-lattice/#inheritors","text":"Name Lattice","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-join-semi-lattice/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / JoinSemiLattice / join join \u00b6 [jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-join-semi-lattice/join/#join","text":"[jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-lattice/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / Lattice Lattice \u00b6 [jvm] interface Lattice < T : Lattice < T >> : MeetSemiLattice < T > , JoinSemiLattice < T > A set with unique least upper and greatest lower bounds. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. meet [jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that. toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name HeytingAlgebra Label","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-lattice/#lattice","text":"[jvm] interface Lattice < T : Lattice < T >> : MeetSemiLattice < T > , JoinSemiLattice < T > A set with unique least upper and greatest lower bounds.","title":"Lattice"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-lattice/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content abstract fun join (that: T ): T More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. meet [jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-lattice/#inheritors","text":"Name HeytingAlgebra Label","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-meet-semi-lattice/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / MeetSemiLattice MeetSemiLattice \u00b6 [jvm] interface MeetSemiLattice < T : MeetSemiLattice < T >> : PartialOrder < T > A set that supports binary greatest lower bounds. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. meet [jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that. toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name Lattice","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-meet-semi-lattice/#meetsemilattice","text":"[jvm] interface MeetSemiLattice < T : MeetSemiLattice < T >> : PartialOrder < T > A set that supports binary greatest lower bounds.","title":"MeetSemiLattice"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-meet-semi-lattice/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. meet [jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-meet-semi-lattice/#inheritors","text":"Name Lattice","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-meet-semi-lattice/meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / MeetSemiLattice / meet meet \u00b6 [jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that.","title":"Meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-meet-semi-lattice/meet/#meet","text":"[jvm] Content abstract fun meet (that: T ): T More info The greatest lower bound of this and that.","title":"meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-partial-order/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / PartialOrder PartialOrder \u00b6 [jvm] interface PartialOrder < T > Like Comparable , but not all pairs of elements have to be ordered. Parameters \u00b6 jvm Name Summary T the type of objects this object may be compared to. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name JoinSemiLattice MeetSemiLattice","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-partial-order/#partialorder","text":"[jvm] interface PartialOrder < T > Like Comparable , but not all pairs of elements have to be ordered.","title":"PartialOrder"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-partial-order/#parameters","text":"jvm Name Summary T the type of objects this object may be compared to.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-partial-order/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int lessThanOrEqualTo [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-partial-order/#inheritors","text":"Name JoinSemiLattice MeetSemiLattice","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-partial-order/less-than-or-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra / PartialOrder / lessThanOrEqualTo lessThanOrEqualTo \u00b6 [jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. It is not necessary that either this.lessThanOrEqualTo(that) or that.lessThanOrEqualTo(this).","title":"Less than or equal to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra/-partial-order/less-than-or-equal-to/#lessthanorequalto","text":"[jvm] Content abstract fun lessThanOrEqualTo (that: T ): Boolean More info Returns true if this is ordered before that. It is not necessary that either this.lessThanOrEqualTo(that) or that.lessThanOrEqualTo(this).","title":"lessThanOrEqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver Package edu.cornell.cs.apl.viaduct.algebra.solver \u00b6 Types \u00b6 Name Summary AtomicTerm [jvm] Content abstract class AtomicTerm < A : HeytingAlgebra < A >> : LeftHandTerm < A > , RightHandTerm < A > , DataFlowNode < A > More info Constraint terms that are fully evaluated. ConstantTerm [jvm] Content data class ConstantTerm < A : HeytingAlgebra < A >>( value : A ) : AtomicTerm < A > More info Term representing a constant element. ConstraintSolution [jvm] Content typealias ConstraintSolution < A > = Map < VariableTerm < A >, A > ConstraintSystem [jvm] Content class ConstraintSystem < A : HeytingAlgebra < A >, T : Throwable >( top : A ) More info Given a set of constraints of the form t1 \u2264 t2, finds the unique maximum solution if it exists. ConstraintTerm [jvm] Content interface ConstraintTerm < A : HeytingAlgebra < A >> More info Terms that appear in constraints. LeftHandTerm [jvm] Content interface LeftHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > More info Terms that can appear on the left-hand side of constraints. RightHandTerm [jvm] Content interface RightHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > More info Terms that can appear on the right-hand side of constraints. VariableTerm [jvm] Content class VariableTerm < A : HeytingAlgebra < A >> : AtomicTerm < A > More info A variable for the solver to find a value for.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/#package-educornellcsaplviaductalgebrasolver","text":"","title":"Package edu.cornell.cs.apl.viaduct.algebra.solver"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/#types","text":"Name Summary AtomicTerm [jvm] Content abstract class AtomicTerm < A : HeytingAlgebra < A >> : LeftHandTerm < A > , RightHandTerm < A > , DataFlowNode < A > More info Constraint terms that are fully evaluated. ConstantTerm [jvm] Content data class ConstantTerm < A : HeytingAlgebra < A >>( value : A ) : AtomicTerm < A > More info Term representing a constant element. ConstraintSolution [jvm] Content typealias ConstraintSolution < A > = Map < VariableTerm < A >, A > ConstraintSystem [jvm] Content class ConstraintSystem < A : HeytingAlgebra < A >, T : Throwable >( top : A ) More info Given a set of constraints of the form t1 \u2264 t2, finds the unique maximum solution if it exists. ConstraintTerm [jvm] Content interface ConstraintTerm < A : HeytingAlgebra < A >> More info Terms that appear in constraints. LeftHandTerm [jvm] Content interface LeftHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > More info Terms that can appear on the left-hand side of constraints. RightHandTerm [jvm] Content interface RightHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > More info Terms that can appear on the right-hand side of constraints. VariableTerm [jvm] Content class VariableTerm < A : HeytingAlgebra < A >> : AtomicTerm < A > More info A variable for the solver to find a value for.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / AtomicTerm AtomicTerm \u00b6 [jvm] abstract class AtomicTerm < A : HeytingAlgebra < A >> : LeftHandTerm < A > , RightHandTerm < A > , DataFlowNode < A > Constraint terms that are fully evaluated. For example, constants and variables, but not expressions. Constructors \u00b6 Name Summary AtomicTerm [jvm] fun AtomicTerm () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content abstract fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant. meet [jvm] Content abstract fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant. toString [jvm] Content open fun toString (): String transfer [jvm] Content abstract fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. Properties \u00b6 Name Summary inEdge [jvm] open override val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] open override val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] open override val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. Inheritors \u00b6 Name ConstantTerm VariableTerm","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/#atomicterm","text":"[jvm] abstract class AtomicTerm < A : HeytingAlgebra < A >> : LeftHandTerm < A > , RightHandTerm < A > , DataFlowNode < A > Constraint terms that are fully evaluated. For example, constants and variables, but not expressions.","title":"AtomicTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/#constructors","text":"Name Summary AtomicTerm [jvm] fun AtomicTerm ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content abstract fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant. meet [jvm] Content abstract fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant. toString [jvm] Content open fun toString (): String transfer [jvm] Content abstract fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/#properties","text":"Name Summary inEdge [jvm] open override val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] open override val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] open override val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/#inheritors","text":"Name ConstantTerm VariableTerm","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/-atomic-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / AtomicTerm / AtomicTerm AtomicTerm \u00b6 [jvm] Content fun AtomicTerm ()","title":" atomic term"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/-atomic-term/#atomicterm","text":"[jvm] Content fun AtomicTerm ()","title":"AtomicTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/in-edge/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / AtomicTerm / inEdge inEdge \u00b6 [jvm] Content open override val inEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an incoming edge of node .","title":"In edge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/in-edge/#inedge","text":"[jvm] Content open override val inEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an incoming edge of node .","title":"inEdge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / AtomicTerm / join join \u00b6 [jvm] Content abstract fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/join/#join","text":"[jvm] Content abstract fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / AtomicTerm / meet meet \u00b6 [jvm] Content abstract fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant.","title":"Meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/meet/#meet","text":"[jvm] Content abstract fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant.","title":"meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/node/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / AtomicTerm / node node \u00b6 [jvm] Content open override val node : AtomicTerm < A > More info Return the node that will represent this term in the constraint graph.","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/node/#node","text":"[jvm] Content open override val node : AtomicTerm < A > More info Return the node that will represent this term in the constraint graph.","title":"node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/out-edge/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / AtomicTerm / outEdge outEdge \u00b6 [jvm] Content open override val outEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an outgoing edge of node .","title":"Out edge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-atomic-term/out-edge/#outedge","text":"[jvm] Content open override val outEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an outgoing edge of node .","title":"outEdge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm ConstantTerm \u00b6 [jvm] data class ConstantTerm < A : HeytingAlgebra < A >>( value : A ) : AtomicTerm < A > Term representing a constant element. Constructors \u00b6 Name Summary ConstantTerm [jvm] fun < A : HeytingAlgebra < A >> ConstantTerm (value: A ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): A copy [jvm] Content fun copy (value: A ): ConstantTerm < A > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A hashCode [jvm] Content open override fun hashCode (): Int join [jvm] Content open override fun join (that: A ): ConstantTerm < A > More info Return a term that represents the join of this with a constant. meet [jvm] Content open override fun meet (that: A ): ConstantTerm < A > More info Return a term that represents the meet of this with a constant. toString [jvm] Content open override fun toString (): String transfer [jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. Properties \u00b6 Name Summary inEdge [jvm] open override val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] open override val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] open override val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. value [jvm] val value : A","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/#constantterm","text":"[jvm] data class ConstantTerm < A : HeytingAlgebra < A >>( value : A ) : AtomicTerm < A > Term representing a constant element.","title":"ConstantTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/#constructors","text":"Name Summary ConstantTerm [jvm] fun < A : HeytingAlgebra < A >> ConstantTerm (value: A )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): A copy [jvm] Content fun copy (value: A ): ConstantTerm < A > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A hashCode [jvm] Content open override fun hashCode (): Int join [jvm] Content open override fun join (that: A ): ConstantTerm < A > More info Return a term that represents the join of this with a constant. meet [jvm] Content open override fun meet (that: A ): ConstantTerm < A > More info Return a term that represents the meet of this with a constant. toString [jvm] Content open override fun toString (): String transfer [jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/#properties","text":"Name Summary inEdge [jvm] open override val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] open override val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] open override val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. value [jvm] val value : A","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/-constant-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / ConstantTerm ConstantTerm \u00b6 [jvm] Content fun < A : HeytingAlgebra < A >> ConstantTerm (value: A )","title":" constant term"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/-constant-term/#constantterm","text":"[jvm] Content fun < A : HeytingAlgebra < A >> ConstantTerm (value: A )","title":"ConstantTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / component1 component1 \u00b6 [jvm] Content operator fun component1 (): A","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/component1/#component1","text":"[jvm] Content operator fun component1 (): A","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / copy copy \u00b6 [jvm] Content fun copy (value: A ): ConstantTerm < A >","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/copy/#copy","text":"[jvm] Content fun copy (value: A ): ConstantTerm < A >","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/get-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / getValue getValue \u00b6 [jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A","title":"Get value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/get-value/#getvalue","text":"[jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A","title":"getValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / join join \u00b6 [jvm] Content open override fun join (that: A ): ConstantTerm < A > More info Return a term that represents the join of this with a constant.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/join/#join","text":"[jvm] Content open override fun join (that: A ): ConstantTerm < A > More info Return a term that represents the join of this with a constant.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / meet meet \u00b6 [jvm] Content open override fun meet (that: A ): ConstantTerm < A > More info Return a term that represents the meet of this with a constant.","title":"Meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/meet/#meet","text":"[jvm] Content open override fun meet (that: A ): ConstantTerm < A > More info Return a term that represents the meet of this with a constant.","title":"meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/transfer/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / transfer transfer \u00b6 [jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. The incoming values might only be upper bounds rather than being exact, in which case this function should return an upper bound. When the incoming values are exact, this function should also return an exact answer.","title":"Transfer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/transfer/#transfer","text":"[jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. The incoming values might only be upper bounds rather than being exact, in which case this function should return an upper bound. When the incoming values are exact, this function should also return an exact answer.","title":"transfer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstantTerm / value value \u00b6 [jvm] Content val value : A","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constant-term/value/#value","text":"[jvm] Content val value : A","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintSystem ConstraintSystem \u00b6 [jvm] class ConstraintSystem < A : HeytingAlgebra < A >, T : Throwable >( top : A ) Given a set of constraints of the form t1 \u2264 t2, finds the unique maximum solution if it exists. A solution to a set of constraints is an assignment of values to all variables in the system. A maximum solution assigns the greatest possible value to each variable, where greatest is with respect to PartialOrder.lessThanOrEqualTo . Parameters \u00b6 jvm Name Summary A domain of values T type of exceptions thrown when there are unsatisfiable constraints top greatest element of A Constructors \u00b6 Name Summary ConstraintSystem [jvm] fun < A : HeytingAlgebra < A >> ConstraintSystem (top: A )domain of values Functions \u00b6 Name Summary addLessThanOrEqualToConstraint [jvm] Content fun addLessThanOrEqualToConstraint (lhs: AtomicTerm < A >, rhs: RightHandTerm < A >, failWith: ( A , A ) -> T ) fun addLessThanOrEqualToConstraint (lhs: LeftHandTerm < A >, rhs: AtomicTerm < A >, failWith: ( A , A ) -> T ) More info Add the constraint lhs <= rhs to the system. addNewVariable [jvm] Content fun addNewVariable (label: Any ): VariableTerm < A > More info Creates a fresh variable and add it to the system. equals [jvm] Content open operator fun equals (other: Any ?): Boolean exportDotGraph [jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraint system as a DOT graph. hashCode [jvm] Content open fun hashCode (): Int solve [jvm] Content fun solve (): ConstraintSolution < A > More info Returns the greatest solution to the set of constraints in the system. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/#constraintsystem","text":"[jvm] class ConstraintSystem < A : HeytingAlgebra < A >, T : Throwable >( top : A ) Given a set of constraints of the form t1 \u2264 t2, finds the unique maximum solution if it exists. A solution to a set of constraints is an assignment of values to all variables in the system. A maximum solution assigns the greatest possible value to each variable, where greatest is with respect to PartialOrder.lessThanOrEqualTo .","title":"ConstraintSystem"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/#parameters","text":"jvm Name Summary A domain of values T type of exceptions thrown when there are unsatisfiable constraints top greatest element of A","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/#constructors","text":"Name Summary ConstraintSystem [jvm] fun < A : HeytingAlgebra < A >> ConstraintSystem (top: A )domain of values","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/#functions","text":"Name Summary addLessThanOrEqualToConstraint [jvm] Content fun addLessThanOrEqualToConstraint (lhs: AtomicTerm < A >, rhs: RightHandTerm < A >, failWith: ( A , A ) -> T ) fun addLessThanOrEqualToConstraint (lhs: LeftHandTerm < A >, rhs: AtomicTerm < A >, failWith: ( A , A ) -> T ) More info Add the constraint lhs <= rhs to the system. addNewVariable [jvm] Content fun addNewVariable (label: Any ): VariableTerm < A > More info Creates a fresh variable and add it to the system. equals [jvm] Content open operator fun equals (other: Any ?): Boolean exportDotGraph [jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraint system as a DOT graph. hashCode [jvm] Content open fun hashCode (): Int solve [jvm] Content fun solve (): ConstraintSolution < A > More info Returns the greatest solution to the set of constraints in the system. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/-constraint-system/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintSystem / ConstraintSystem ConstraintSystem \u00b6 [jvm] Content fun < A : HeytingAlgebra < A >> ConstraintSystem (top: A ) More info Parameters \u00b6 jvm Name Summary A domain of values T type of exceptions thrown when there are unsatisfiable constraints top greatest element of A","title":" constraint system"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/-constraint-system/#constraintsystem","text":"[jvm] Content fun < A : HeytingAlgebra < A >> ConstraintSystem (top: A ) More info","title":"ConstraintSystem"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/-constraint-system/#parameters","text":"jvm Name Summary A domain of values T type of exceptions thrown when there are unsatisfiable constraints top greatest element of A","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-less-than-or-equal-to-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintSystem / addLessThanOrEqualToConstraint addLessThanOrEqualToConstraint \u00b6 [jvm] Content fun addLessThanOrEqualToConstraint (lhs: AtomicTerm < A >, rhs: RightHandTerm < A >, failWith: ( A , A ) -> T ) More info Add the constraint lhs <= rhs to the system. Parameters \u00b6 jvm Name Summary failWith a function that generates the exception to throw if this constraint is unsatisfiable. The function will be given the best estimates for the values of lhs and rhs. [jvm] Content fun addLessThanOrEqualToConstraint (lhs: LeftHandTerm < A >, rhs: AtomicTerm < A >, failWith: ( A , A ) -> T ) More info Add the constraint lhs <= rhs to the system. Parameters \u00b6 jvm Name Summary failWith same as in addLessThanOrEqualToConstraint","title":"Add less than or equal to constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-less-than-or-equal-to-constraint/#addlessthanorequaltoconstraint","text":"[jvm] Content fun addLessThanOrEqualToConstraint (lhs: AtomicTerm < A >, rhs: RightHandTerm < A >, failWith: ( A , A ) -> T ) More info Add the constraint lhs <= rhs to the system.","title":"addLessThanOrEqualToConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-less-than-or-equal-to-constraint/#parameters","text":"jvm Name Summary failWith a function that generates the exception to throw if this constraint is unsatisfiable. The function will be given the best estimates for the values of lhs and rhs. [jvm] Content fun addLessThanOrEqualToConstraint (lhs: LeftHandTerm < A >, rhs: AtomicTerm < A >, failWith: ( A , A ) -> T ) More info Add the constraint lhs <= rhs to the system.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-less-than-or-equal-to-constraint/#parameters_1","text":"jvm Name Summary failWith same as in addLessThanOrEqualToConstraint","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-new-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintSystem / addNewVariable addNewVariable \u00b6 [jvm] Content fun addNewVariable (label: Any ): VariableTerm < A > More info Creates a fresh variable and add it to the system. Return \u00b6 the freshly created variable Parameters \u00b6 jvm Name Summary label an arbitrary object to use as a label during debugging","title":"Add new variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-new-variable/#addnewvariable","text":"[jvm] Content fun addNewVariable (label: Any ): VariableTerm < A > More info Creates a fresh variable and add it to the system.","title":"addNewVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-new-variable/#return","text":"the freshly created variable","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/add-new-variable/#parameters","text":"jvm Name Summary label an arbitrary object to use as a label during debugging","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/export-dot-graph/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintSystem / exportDotGraph exportDotGraph \u00b6 [jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraint system as a DOT graph.","title":"Export dot graph"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/export-dot-graph/#exportdotgraph","text":"[jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraint system as a DOT graph.","title":"exportDotGraph"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/solve/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintSystem / solve solve \u00b6 [jvm] Content fun solve (): ConstraintSolution < A > More info Returns the greatest solution to the set of constraints in the system. Return \u00b6 mapping from variables to the greatest values that satisfy all constraints Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.algebra.solver.ConstraintSystem if there are unsatisfiable constraints","title":"Solve"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/solve/#solve","text":"[jvm] Content fun solve (): ConstraintSolution < A > More info Returns the greatest solution to the set of constraints in the system.","title":"solve"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/solve/#return","text":"mapping from variables to the greatest values that satisfy all constraints","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-system/solve/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.algebra.solver.ConstraintSystem if there are unsatisfiable constraints","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintTerm ConstraintTerm \u00b6 [jvm] interface ConstraintTerm < A : HeytingAlgebra < A >> Terms that appear in constraints. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary node [jvm] abstract val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. Inheritors \u00b6 Name LeftHandTerm RightHandTerm","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/#constraintterm","text":"[jvm] interface ConstraintTerm < A : HeytingAlgebra < A >> Terms that appear in constraints.","title":"ConstraintTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/#properties","text":"Name Summary node [jvm] abstract val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/#inheritors","text":"Name LeftHandTerm RightHandTerm","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/get-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintTerm / getValue getValue \u00b6 [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term.","title":"Get value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/get-value/#getvalue","text":"[jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term.","title":"getValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/node/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / ConstraintTerm / node node \u00b6 [jvm] Content abstract val node : AtomicTerm < A > More info Return the node that will represent this term in the constraint graph.","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-constraint-term/node/#node","text":"[jvm] Content abstract val node : AtomicTerm < A > More info Return the node that will represent this term in the constraint graph.","title":"node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-left-hand-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / LeftHandTerm LeftHandTerm \u00b6 [jvm] interface LeftHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > Terms that can appear on the left-hand side of constraints. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary inEdge [jvm] abstract val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] abstract val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. Inheritors \u00b6 Name AtomicTerm","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-left-hand-term/#lefthandterm","text":"[jvm] interface LeftHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > Terms that can appear on the left-hand side of constraints.","title":"LeftHandTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-left-hand-term/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-left-hand-term/#properties","text":"Name Summary inEdge [jvm] abstract val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] abstract val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-left-hand-term/#inheritors","text":"Name AtomicTerm","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-left-hand-term/in-edge/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / LeftHandTerm / inEdge inEdge \u00b6 [jvm] Content abstract val inEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an incoming edge of node .","title":"In edge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-left-hand-term/in-edge/#inedge","text":"[jvm] Content abstract val inEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an incoming edge of node .","title":"inEdge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-right-hand-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / RightHandTerm RightHandTerm \u00b6 [jvm] interface RightHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > Terms that can appear on the right-hand side of constraints. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary node [jvm] abstract val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] abstract val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. Inheritors \u00b6 Name AtomicTerm","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-right-hand-term/#righthandterm","text":"[jvm] interface RightHandTerm < A : HeytingAlgebra < A >> : ConstraintTerm < A > Terms that can appear on the right-hand side of constraints.","title":"RightHandTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-right-hand-term/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution < A >): A More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-right-hand-term/#properties","text":"Name Summary node [jvm] abstract val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] abstract val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-right-hand-term/#inheritors","text":"Name AtomicTerm","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-right-hand-term/out-edge/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / RightHandTerm / outEdge outEdge \u00b6 [jvm] Content abstract val outEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an outgoing edge of node .","title":"Out edge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-right-hand-term/out-edge/#outedge","text":"[jvm] Content abstract val outEdge : DataFlowEdge < A > More info Return an edge that captures the operation preformed by this term. In the constraint graph, this will become an outgoing edge of node .","title":"outEdge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / VariableTerm VariableTerm \u00b6 [jvm] class VariableTerm < A : HeytingAlgebra < A >> : AtomicTerm < A > A variable for the solver to find a value for. See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.algebra.solver.ConstraintSystem Parameters \u00b6 jvm Name Summary label an arbitrary object to use as a label (useful for debugging) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content open override fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant. meet [jvm] Content open override fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant. toString [jvm] Content open override fun toString (): String transfer [jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. Properties \u00b6 Name Summary inEdge [jvm] open override val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] open override val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] open override val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/#variableterm","text":"[jvm] class VariableTerm < A : HeytingAlgebra < A >> : AtomicTerm < A > A variable for the solver to find a value for.","title":"VariableTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.algebra.solver.ConstraintSystem","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/#parameters","text":"jvm Name Summary label an arbitrary object to use as a label (useful for debugging)","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A hashCode [jvm] Content open fun hashCode (): Int join [jvm] Content open override fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant. meet [jvm] Content open override fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant. toString [jvm] Content open override fun toString (): String transfer [jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/#properties","text":"Name Summary inEdge [jvm] open override val inEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term. node [jvm] open override val node : AtomicTerm < A >Return the node that will represent this term in the constraint graph. outEdge [jvm] open override val outEdge : DataFlowEdge < A >Return an edge that captures the operation preformed by this term.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/get-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / VariableTerm / getValue getValue \u00b6 [jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A","title":"Get value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/get-value/#getvalue","text":"[jvm] Content open override fun getValue (solution: ConstraintSolution < A >): A","title":"getValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / VariableTerm / join join \u00b6 [jvm] Content open override fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/join/#join","text":"[jvm] Content open override fun join (that: A ): RightHandTerm < A > More info Return a term that represents the join of this with a constant.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / VariableTerm / meet meet \u00b6 [jvm] Content open override fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant.","title":"Meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/meet/#meet","text":"[jvm] Content open override fun meet (that: A ): LeftHandTerm < A > More info Return a term that represents the meet of this with a constant.","title":"meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / VariableTerm / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/transfer/","text":"// compiler / edu.cornell.cs.apl.viaduct.algebra.solver / VariableTerm / transfer transfer \u00b6 [jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. The incoming values might only be upper bounds rather than being exact, in which case this function should return an upper bound. When the incoming values are exact, this function should also return an exact answer.","title":"Transfer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.algebra.solver/-variable-term/transfer/#transfer","text":"[jvm] Content open override fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. The incoming values might only be upper bounds rather than being exact, in which case this function should return an upper bound. When the incoming values are exact, this function should also return an exact answer.","title":"transfer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis Package edu.cornell.cs.apl.viaduct.analysis \u00b6 Types \u00b6 Name Summary AnalysisProvider [jvm] Content interface AnalysisProvider < Analysis > InformationFlowAnalysis [jvm] Content class InformationFlowAnalysis More info Associates Variable s with their Label s. NameAnalysis [jvm] Content class NameAnalysis More info Associates each use of a Name with its declaration, and every Name declaration with the set of its uses. OutParameterInitializationAnalysis [jvm] Content class OutParameterInitializationAnalysis More info Analysis to ensure all out parameters have been initialized before they are used and before the function returns. ProtocolAnalysis [jvm] Content class ProtocolAnalysis ( program : ProgramNode , protocolComposer : ProtocolComposer ) More info Associates each StatementNode with the Protocol s involved in its execution. TypeAnalysis [jvm] Content class TypeAnalysis More info Associates Variable s with their Type s. Functions \u00b6 Name Summary breakNodes [jvm] Content fun Node . breakNodes (): List < BreakNode > More info Returns all BreakNode s contained in this node. createdVariables [jvm] Content fun StatementNode . createdVariables (): List < Variable > declarationNodes [jvm] Content fun Node . declarationNodes (): List < DeclarationNode > More info Returns all DeclarationNode s contained in this node. freshVariableNameGenerator [jvm] Content fun Node . freshVariableNameGenerator (): FreshNameGenerator More info A FreshNameGenerator that will avoid all Variable names in this node. functionCallNodes [jvm] Content fun Node . functionCallNodes (): List < FunctionCallNode > More info Returns all FunctionCallNode s contained in this node. ifNodes [jvm] Content fun Node . ifNodes (): List < IfNode > More info Returns all IfNode s contained in this node. immediateRHS [jvm] Content fun StatementNode . immediateRHS (): List < ExpressionNode > More info Recursively traverses the children of this node, then applies f to this node. infiniteLoopNodes [jvm] Content fun Node . infiniteLoopNodes (): List < InfiniteLoopNode > More info Returns all InfiniteLoopNode s contained in this node. involvedVariables [jvm] Content fun ExpressionNode . involvedVariables (): List < Variable > letNodes [jvm] Content fun Node . letNodes (): List < LetNode > More info Returns all LetNode s contained in this node. objectDeclarationArgumentNodes [jvm] Content fun Node . objectDeclarationArgumentNodes (): List < ObjectDeclarationArgumentNode > More info Returns all ObjectDeclarationArgumentNode s contained in this node. outputNodes [jvm] Content fun Node . outputNodes (): List < OutputNode > More info Returns all OutputNode s contained in this node. parameterNodes [jvm] Content fun Node . parameterNodes (): List < ParameterNode > More info Returns all ParameterNode s contained in this node. queryNodes [jvm] Content fun Node . queryNodes (): List < QueryNode > More info Returns all QueryNode s contained in this node. updateNodes [jvm] Content fun Node . updateNodes (): List < UpdateNode > More info Returns all UpdateNode s contained in this node. Properties \u00b6 Name Summary hasMain [jvm] val ProgramNode . hasMain : Boolean main [jvm] val ProgramNode . main : ProcessDeclarationNode Returns the declaration of the MainProtocol in this program. tree [jvm] val ProgramNode . tree : Tree< Node , ProgramNode >Returns the Tree instance for the program.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/#package-educornellcsaplviaductanalysis","text":"","title":"Package edu.cornell.cs.apl.viaduct.analysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/#types","text":"Name Summary AnalysisProvider [jvm] Content interface AnalysisProvider < Analysis > InformationFlowAnalysis [jvm] Content class InformationFlowAnalysis More info Associates Variable s with their Label s. NameAnalysis [jvm] Content class NameAnalysis More info Associates each use of a Name with its declaration, and every Name declaration with the set of its uses. OutParameterInitializationAnalysis [jvm] Content class OutParameterInitializationAnalysis More info Analysis to ensure all out parameters have been initialized before they are used and before the function returns. ProtocolAnalysis [jvm] Content class ProtocolAnalysis ( program : ProgramNode , protocolComposer : ProtocolComposer ) More info Associates each StatementNode with the Protocol s involved in its execution. TypeAnalysis [jvm] Content class TypeAnalysis More info Associates Variable s with their Type s.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/#functions","text":"Name Summary breakNodes [jvm] Content fun Node . breakNodes (): List < BreakNode > More info Returns all BreakNode s contained in this node. createdVariables [jvm] Content fun StatementNode . createdVariables (): List < Variable > declarationNodes [jvm] Content fun Node . declarationNodes (): List < DeclarationNode > More info Returns all DeclarationNode s contained in this node. freshVariableNameGenerator [jvm] Content fun Node . freshVariableNameGenerator (): FreshNameGenerator More info A FreshNameGenerator that will avoid all Variable names in this node. functionCallNodes [jvm] Content fun Node . functionCallNodes (): List < FunctionCallNode > More info Returns all FunctionCallNode s contained in this node. ifNodes [jvm] Content fun Node . ifNodes (): List < IfNode > More info Returns all IfNode s contained in this node. immediateRHS [jvm] Content fun StatementNode . immediateRHS (): List < ExpressionNode > More info Recursively traverses the children of this node, then applies f to this node. infiniteLoopNodes [jvm] Content fun Node . infiniteLoopNodes (): List < InfiniteLoopNode > More info Returns all InfiniteLoopNode s contained in this node. involvedVariables [jvm] Content fun ExpressionNode . involvedVariables (): List < Variable > letNodes [jvm] Content fun Node . letNodes (): List < LetNode > More info Returns all LetNode s contained in this node. objectDeclarationArgumentNodes [jvm] Content fun Node . objectDeclarationArgumentNodes (): List < ObjectDeclarationArgumentNode > More info Returns all ObjectDeclarationArgumentNode s contained in this node. outputNodes [jvm] Content fun Node . outputNodes (): List < OutputNode > More info Returns all OutputNode s contained in this node. parameterNodes [jvm] Content fun Node . parameterNodes (): List < ParameterNode > More info Returns all ParameterNode s contained in this node. queryNodes [jvm] Content fun Node . queryNodes (): List < QueryNode > More info Returns all QueryNode s contained in this node. updateNodes [jvm] Content fun Node . updateNodes (): List < UpdateNode > More info Returns all UpdateNode s contained in this node.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/#properties","text":"Name Summary hasMain [jvm] val ProgramNode . hasMain : Boolean main [jvm] val ProgramNode . main : ProcessDeclarationNode Returns the declaration of the MainProtocol in this program. tree [jvm] val ProgramNode . tree : Tree< Node , ProgramNode >Returns the Tree instance for the program.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/break-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / breakNodes breakNodes \u00b6 [jvm] Content fun Node . breakNodes (): List < BreakNode > More info Returns all BreakNode s contained in this node.","title":"Break nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/break-nodes/#breaknodes","text":"[jvm] Content fun Node . breakNodes (): List < BreakNode > More info Returns all BreakNode s contained in this node.","title":"breakNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/created-variables/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / createdVariables createdVariables \u00b6 [jvm] Content fun StatementNode . createdVariables (): List < Variable >","title":"Created variables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/created-variables/#createdvariables","text":"[jvm] Content fun StatementNode . createdVariables (): List < Variable >","title":"createdVariables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/declaration-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / declarationNodes declarationNodes \u00b6 [jvm] Content fun Node . declarationNodes (): List < DeclarationNode > More info Returns all DeclarationNode s contained in this node.","title":"Declaration nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/declaration-nodes/#declarationnodes","text":"[jvm] Content fun Node . declarationNodes (): List < DeclarationNode > More info Returns all DeclarationNode s contained in this node.","title":"declarationNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/fresh-variable-name-generator/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / freshVariableNameGenerator freshVariableNameGenerator \u00b6 [jvm] Content fun Node . freshVariableNameGenerator (): FreshNameGenerator More info A FreshNameGenerator that will avoid all Variable names in this node.","title":"Fresh variable name generator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/fresh-variable-name-generator/#freshvariablenamegenerator","text":"[jvm] Content fun Node . freshVariableNameGenerator (): FreshNameGenerator More info A FreshNameGenerator that will avoid all Variable names in this node.","title":"freshVariableNameGenerator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/function-call-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / functionCallNodes functionCallNodes \u00b6 [jvm] Content fun Node . functionCallNodes (): List < FunctionCallNode > More info Returns all FunctionCallNode s contained in this node.","title":"Function call nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/function-call-nodes/#functioncallnodes","text":"[jvm] Content fun Node . functionCallNodes (): List < FunctionCallNode > More info Returns all FunctionCallNode s contained in this node.","title":"functionCallNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/has-main/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / hasMain hasMain \u00b6 [jvm] Content val ProgramNode . hasMain : Boolean","title":"Has main"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/has-main/#hasmain","text":"[jvm] Content val ProgramNode . hasMain : Boolean","title":"hasMain"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/if-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ifNodes ifNodes \u00b6 [jvm] Content fun Node . ifNodes (): List < IfNode > More info Returns all IfNode s contained in this node.","title":"If nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/if-nodes/#ifnodes","text":"[jvm] Content fun Node . ifNodes (): List < IfNode > More info Returns all IfNode s contained in this node.","title":"ifNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/immediate-r-h-s/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / immediateRHS immediateRHS \u00b6 [jvm] Content fun StatementNode . immediateRHS (): List < ExpressionNode > More info Recursively traverses the children of this node, then applies f to this node.","title":"Immediate r h s"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/immediate-r-h-s/#immediaterhs","text":"[jvm] Content fun StatementNode . immediateRHS (): List < ExpressionNode > More info Recursively traverses the children of this node, then applies f to this node.","title":"immediateRHS"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/infinite-loop-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / infiniteLoopNodes infiniteLoopNodes \u00b6 [jvm] Content fun Node . infiniteLoopNodes (): List < InfiniteLoopNode > More info Returns all InfiniteLoopNode s contained in this node.","title":"Infinite loop nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/infinite-loop-nodes/#infiniteloopnodes","text":"[jvm] Content fun Node . infiniteLoopNodes (): List < InfiniteLoopNode > More info Returns all InfiniteLoopNode s contained in this node.","title":"infiniteLoopNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/involved-variables/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / involvedVariables involvedVariables \u00b6 [jvm] Content fun ExpressionNode . involvedVariables (): List < Variable >","title":"Involved variables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/involved-variables/#involvedvariables","text":"[jvm] Content fun ExpressionNode . involvedVariables (): List < Variable >","title":"involvedVariables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/let-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / letNodes letNodes \u00b6 [jvm] Content fun Node . letNodes (): List < LetNode > More info Returns all LetNode s contained in this node.","title":"Let nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/let-nodes/#letnodes","text":"[jvm] Content fun Node . letNodes (): List < LetNode > More info Returns all LetNode s contained in this node.","title":"letNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/main/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / main main \u00b6 [jvm] Content val ProgramNode . main : ProcessDeclarationNode More info Returns the declaration of the MainProtocol in this program. Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.NoMainError if the program has no such declaration.","title":"Main"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/main/#main","text":"[jvm] Content val ProgramNode . main : ProcessDeclarationNode More info Returns the declaration of the MainProtocol in this program.","title":"main"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/main/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.NoMainError if the program has no such declaration.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/object-declaration-argument-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / objectDeclarationArgumentNodes objectDeclarationArgumentNodes \u00b6 [jvm] Content fun Node . objectDeclarationArgumentNodes (): List < ObjectDeclarationArgumentNode > More info Returns all ObjectDeclarationArgumentNode s contained in this node.","title":"Object declaration argument nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/object-declaration-argument-nodes/#objectdeclarationargumentnodes","text":"[jvm] Content fun Node . objectDeclarationArgumentNodes (): List < ObjectDeclarationArgumentNode > More info Returns all ObjectDeclarationArgumentNode s contained in this node.","title":"objectDeclarationArgumentNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/output-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / outputNodes outputNodes \u00b6 [jvm] Content fun Node . outputNodes (): List < OutputNode > More info Returns all OutputNode s contained in this node.","title":"Output nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/output-nodes/#outputnodes","text":"[jvm] Content fun Node . outputNodes (): List < OutputNode > More info Returns all OutputNode s contained in this node.","title":"outputNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/parameter-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / parameterNodes parameterNodes \u00b6 [jvm] Content fun Node . parameterNodes (): List < ParameterNode > More info Returns all ParameterNode s contained in this node.","title":"Parameter nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/parameter-nodes/#parameternodes","text":"[jvm] Content fun Node . parameterNodes (): List < ParameterNode > More info Returns all ParameterNode s contained in this node.","title":"parameterNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/query-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / queryNodes queryNodes \u00b6 [jvm] Content fun Node . queryNodes (): List < QueryNode > More info Returns all QueryNode s contained in this node.","title":"Query nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/query-nodes/#querynodes","text":"[jvm] Content fun Node . queryNodes (): List < QueryNode > More info Returns all QueryNode s contained in this node.","title":"queryNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/tree/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / tree tree \u00b6 [jvm] Content val ProgramNode . tree : Tree< Node , ProgramNode > More info Returns the Tree instance for the program.","title":"Tree"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/tree/#tree","text":"[jvm] Content val ProgramNode . tree : Tree< Node , ProgramNode > More info Returns the Tree instance for the program.","title":"tree"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/update-nodes/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / updateNodes updateNodes \u00b6 [jvm] Content fun Node . updateNodes (): List < UpdateNode > More info Returns all UpdateNode s contained in this node.","title":"Update nodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/update-nodes/#updatenodes","text":"[jvm] Content fun Node . updateNodes (): List < UpdateNode > More info Returns all UpdateNode s contained in this node.","title":"updateNodes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-analysis-provider/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / AnalysisProvider AnalysisProvider \u00b6 [jvm] interface AnalysisProvider < Analysis > Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content abstract fun get (program: ProgramNode ): Analysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name InformationFlowAnalysis NameAnalysis OutParameterInitializationAnalysis TypeAnalysis","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-analysis-provider/#analysisprovider","text":"[jvm] interface AnalysisProvider < Analysis >","title":"AnalysisProvider"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-analysis-provider/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content abstract fun get (program: ProgramNode ): Analysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-analysis-provider/#inheritors","text":"Name InformationFlowAnalysis NameAnalysis OutParameterInitializationAnalysis TypeAnalysis","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-analysis-provider/get/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / AnalysisProvider / get get \u00b6 [jvm] Content abstract fun get (program: ProgramNode ): Analysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-analysis-provider/get/#get","text":"[jvm] Content abstract fun get (program: ProgramNode ): Analysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / InformationFlowAnalysis InformationFlowAnalysis \u00b6 [jvm] class InformationFlowAnalysis Associates Variable s with their Label s. Types \u00b6 Name Summary Companion [jvm] Content object Companion : AnalysisProvider < InformationFlowAnalysis > Functions \u00b6 Name Summary check [jvm] Content fun check () More info Asserts that the program does not violate information flow security, and throws (a subclass of) InformationFlowError otherwise. [jvm] Content fun ExpressionNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for an expression. [jvm] Content fun StatementNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for a statement. equals [jvm] Content open operator fun equals (other: Any ?): Boolean exportConstraintGraph [jvm] Content fun exportConstraintGraph (output: Writer ) More info Outputs a DOT representation of the program's constraint graph to output. hashCode [jvm] Content open fun hashCode (): Int label [jvm] Content fun label (node: DeclarationNode ): Label fun label (node: ObjectDeclarationArgumentNode ): Label fun label (node: ParameterNode ): Label More info Returns the inferred security label of the ObjectVariable declared by node. [jvm] Content fun label (node: ExpressionNode ): Label More info Returns the inferred security label of the result of node. [jvm] Content fun label (node: LetNode ): Label More info Returns the inferred security label of the Temporary defined by node. pcLabel [jvm] Content fun pcLabel (node: Node ): Label More info Returns the label of the program counter at the node's program point. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/#informationflowanalysis","text":"[jvm] class InformationFlowAnalysis Associates Variable s with their Label s.","title":"InformationFlowAnalysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/#types","text":"Name Summary Companion [jvm] Content object Companion : AnalysisProvider < InformationFlowAnalysis >","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/#functions","text":"Name Summary check [jvm] Content fun check () More info Asserts that the program does not violate information flow security, and throws (a subclass of) InformationFlowError otherwise. [jvm] Content fun ExpressionNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for an expression. [jvm] Content fun StatementNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for a statement. equals [jvm] Content open operator fun equals (other: Any ?): Boolean exportConstraintGraph [jvm] Content fun exportConstraintGraph (output: Writer ) More info Outputs a DOT representation of the program's constraint graph to output. hashCode [jvm] Content open fun hashCode (): Int label [jvm] Content fun label (node: DeclarationNode ): Label fun label (node: ObjectDeclarationArgumentNode ): Label fun label (node: ParameterNode ): Label More info Returns the inferred security label of the ObjectVariable declared by node. [jvm] Content fun label (node: ExpressionNode ): Label More info Returns the inferred security label of the result of node. [jvm] Content fun label (node: LetNode ): Label More info Returns the inferred security label of the Temporary defined by node. pcLabel [jvm] Content fun pcLabel (node: Node ): Label More info Returns the label of the program counter at the node's program point. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/check/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / InformationFlowAnalysis / check check \u00b6 [jvm] Content fun ExpressionNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for an expression. [jvm] Content fun StatementNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for a statement. [jvm] Content fun check () More info Asserts that the program does not violate information flow security, and throws (a subclass of) InformationFlowError otherwise.","title":"Check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/check/#check","text":"[jvm] Content fun ExpressionNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for an expression. [jvm] Content fun StatementNode . check (solver: ConstraintSolver < InformationFlowError >, parameterMap: Map < String , Label >, pcLabel: AtomicLabelTerm ) More info Generate information flow constraints for a statement. [jvm] Content fun check () More info Asserts that the program does not violate information flow security, and throws (a subclass of) InformationFlowError otherwise.","title":"check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/export-constraint-graph/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / InformationFlowAnalysis / exportConstraintGraph exportConstraintGraph \u00b6 [jvm] Content fun exportConstraintGraph (output: Writer ) More info Outputs a DOT representation of the program's constraint graph to output.","title":"Export constraint graph"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/export-constraint-graph/#exportconstraintgraph","text":"[jvm] Content fun exportConstraintGraph (output: Writer ) More info Outputs a DOT representation of the program's constraint graph to output.","title":"exportConstraintGraph"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/label/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / InformationFlowAnalysis / label label \u00b6 [jvm] Content fun label (node: LetNode ): Label More info Returns the inferred security label of the Temporary defined by node. [jvm] Content fun label (node: DeclarationNode ): Label fun label (node: ParameterNode ): Label fun label (node: ObjectDeclarationArgumentNode ): Label More info Returns the inferred security label of the ObjectVariable declared by node. [jvm] Content fun label (node: ExpressionNode ): Label More info Returns the inferred security label of the result of node.","title":"Label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/label/#label","text":"[jvm] Content fun label (node: LetNode ): Label More info Returns the inferred security label of the Temporary defined by node. [jvm] Content fun label (node: DeclarationNode ): Label fun label (node: ParameterNode ): Label fun label (node: ObjectDeclarationArgumentNode ): Label More info Returns the inferred security label of the ObjectVariable declared by node. [jvm] Content fun label (node: ExpressionNode ): Label More info Returns the inferred security label of the result of node.","title":"label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/pc-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / InformationFlowAnalysis / pcLabel pcLabel \u00b6 [jvm] Content fun pcLabel (node: Node ): Label More info Returns the label of the program counter at the node's program point.","title":"Pc label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/pc-label/#pclabel","text":"[jvm] Content fun pcLabel (node: Node ): Label More info Returns the label of the program counter at the node's program point.","title":"pcLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / InformationFlowAnalysis / Companion Companion \u00b6 [jvm] object Companion : AnalysisProvider < InformationFlowAnalysis > Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): InformationFlowAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/-companion/#companion","text":"[jvm] object Companion : AnalysisProvider < InformationFlowAnalysis >","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): InformationFlowAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/-companion/get/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / InformationFlowAnalysis / Companion / get get \u00b6 [jvm] Content open override fun get (program: ProgramNode ): InformationFlowAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-information-flow-analysis/-companion/get/#get","text":"[jvm] Content open override fun get (program: ProgramNode ): InformationFlowAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis NameAnalysis \u00b6 [jvm] class NameAnalysis Associates each use of a Name with its declaration, and every Name declaration with the set of its uses. For example, Temporary variables are associated with LetNode s, ObjectVariable s with DeclarationNode s, and JumpLabel s with InfiniteLoopNode s. Types \u00b6 Name Summary Companion [jvm] Content object Companion : AnalysisProvider < NameAnalysis > Functions \u00b6 Name Summary argumentUses [jvm] Content fun argumentUses (node: DeclarationNode ): Set < FunctionArgumentNode > fun argumentUses (node: ObjectDeclarationArgumentNode ): Set < FunctionArgumentNode > fun argumentUses (node: ParameterNode ): Set < FunctionArgumentNode > More info Returns the set of arguments where node is used. asObjectDeclaration [jvm] Content fun asObjectDeclaration (node: ObjectDeclarationArgumentNode ): ObjectDeclaration calls [jvm] Content fun calls (function: FunctionDeclarationNode ): Set < FunctionCallNode > More info Returns the set of calls to the given function declaration. check [jvm] Content fun check () More info Asserts that every referenced Name has a declaration, and that no Name is declared multiple times in the same scope. correspondingBreaks [jvm] Content fun correspondingBreaks (node: InfiniteLoopNode ): Set < BreakNode > More info Returns the set of BreakNode s that reference node. correspondingLet [jvm] Content fun correspondingLet (query: QueryNode ): LetNode correspondingLoop [jvm] Content fun correspondingLoop (node: BreakNode ): InfiniteLoopNode More info Returns the loop that node is breaking out of. declaration [jvm] Content fun declaration (node: ExternalCommunicationNode ): HostDeclarationNode More info Returns the declaration of the Host in node. [jvm] Content fun declaration (node: FunctionCallNode ): FunctionDeclarationNode More info Returns the declaration of the function being called in node. [jvm] Content fun declaration (node: InternalCommunicationNode ): ProcessDeclarationNode More info Returns the declaration of the Protocol in node. [jvm] Content fun declaration (node: ObjectReferenceArgumentNode ): ObjectDeclaration fun declaration (node: OutParameterArgumentNode ): ParameterNode More info Returns the object referenced by the node function argument. [jvm] Content fun declaration (node: OutParameterInitializationNode ): ParameterNode More info Returns the declaration of the out parameter in node. [jvm] Content fun declaration (node: QueryNode ): ObjectDeclaration fun declaration (node: UpdateNode ): ObjectDeclaration More info Returns the statement that declares the ObjectVariable in node. [jvm] Content fun declaration (node: ReadNode ): LetNode More info Returns the statement that defines the Temporary in node. enclosingBlock [jvm] Content fun enclosingBlock (stmt: StatementNode ): BlockNode More info Get the block that encloses this statement. enclosingFunctionName [jvm] Content fun enclosingFunctionName (node: ExpressionNode ): FunctionName fun enclosingFunctionName (node: FunctionArgumentNode ): FunctionName fun enclosingFunctionName (node: StatementNode ): FunctionName enclosingStatement [jvm] Content fun enclosingStatement (read: ReadNode ): StatementNode More info Return the statement enclosing the read node. equals [jvm] Content open operator fun equals (other: Any ?): Boolean functionDeclaration [jvm] Content fun functionDeclaration (parameter: ParameterNode ): FunctionDeclarationNode hashCode [jvm] Content open fun hashCode (): Int involvedLoops [jvm] Content fun involvedLoops (node: Node ): List < InfiniteLoopNode > More info Returns the list of InfiniteLoopNode s node is contained in. parameter [jvm] Content fun parameter (node: FunctionArgumentNode ): ParameterNode More info Returns the parameter for which node is the argument. parameterUsers [jvm] Content fun parameterUsers (parameter: ParameterNode ): Set < FunctionArgumentNode > More info Returns the set of arguments for ParameterNode . parameterUses [jvm] Content fun parameterUses (node: DeclarationNode ): Set < ParameterNode > fun parameterUses (node: ObjectDeclarationArgumentNode ): Set < ParameterNode > fun parameterUses (node: ParameterNode ): Set < ParameterNode > More info Returns the set of parameters for which node is used as an argument. queriers [jvm] Content fun queriers (node: DeclarationNode ): Set < QueryNode > fun queriers (node: ObjectDeclarationArgumentNode ): Set < QueryNode > fun queriers (node: ParameterNode ): Set < QueryNode > More info Returns the set of QueryNode s that reference the ObjectVariable declared by node. reachableFunctions [jvm] Content fun reachableFunctions (node: Node ): PersistentSet< FunctionName > More info Returns the set of functions transitively reachable from a statement node. readers [jvm] Content fun readers (node: LetNode ): Set < StatementNode > More info Returns the set of StatementNode s that read the Temporary defined by node. reads [jvm] Content fun reads (node: Node ): Set < ReadNode > toString [jvm] Content open fun toString (): String updaters [jvm] Content fun updaters (node: DeclarationNode ): Set < UpdateNode > fun updaters (node: ObjectDeclarationArgumentNode ): Set < UpdateNode > fun updaters (node: ParameterNode ): Set < UpdateNode > More info Returns the set of UpdateNode s that reference the ObjectVariable declared by node. users [jvm] Content fun users (node: DeclarationNode ): Set < Node > fun users (node: ObjectDeclarationArgumentNode ): Set < Node > fun users (node: ParameterNode ): Set < Node > More info Returns the set of QueryNode s and UpdateNode s that reference the ObjectVariable declared by node. variables [jvm] Content fun variables (node: StatementNode ): Set < FunctionVariable > More info Returns the variables used of a node.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/#nameanalysis","text":"[jvm] class NameAnalysis Associates each use of a Name with its declaration, and every Name declaration with the set of its uses. For example, Temporary variables are associated with LetNode s, ObjectVariable s with DeclarationNode s, and JumpLabel s with InfiniteLoopNode s.","title":"NameAnalysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/#types","text":"Name Summary Companion [jvm] Content object Companion : AnalysisProvider < NameAnalysis >","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/#functions","text":"Name Summary argumentUses [jvm] Content fun argumentUses (node: DeclarationNode ): Set < FunctionArgumentNode > fun argumentUses (node: ObjectDeclarationArgumentNode ): Set < FunctionArgumentNode > fun argumentUses (node: ParameterNode ): Set < FunctionArgumentNode > More info Returns the set of arguments where node is used. asObjectDeclaration [jvm] Content fun asObjectDeclaration (node: ObjectDeclarationArgumentNode ): ObjectDeclaration calls [jvm] Content fun calls (function: FunctionDeclarationNode ): Set < FunctionCallNode > More info Returns the set of calls to the given function declaration. check [jvm] Content fun check () More info Asserts that every referenced Name has a declaration, and that no Name is declared multiple times in the same scope. correspondingBreaks [jvm] Content fun correspondingBreaks (node: InfiniteLoopNode ): Set < BreakNode > More info Returns the set of BreakNode s that reference node. correspondingLet [jvm] Content fun correspondingLet (query: QueryNode ): LetNode correspondingLoop [jvm] Content fun correspondingLoop (node: BreakNode ): InfiniteLoopNode More info Returns the loop that node is breaking out of. declaration [jvm] Content fun declaration (node: ExternalCommunicationNode ): HostDeclarationNode More info Returns the declaration of the Host in node. [jvm] Content fun declaration (node: FunctionCallNode ): FunctionDeclarationNode More info Returns the declaration of the function being called in node. [jvm] Content fun declaration (node: InternalCommunicationNode ): ProcessDeclarationNode More info Returns the declaration of the Protocol in node. [jvm] Content fun declaration (node: ObjectReferenceArgumentNode ): ObjectDeclaration fun declaration (node: OutParameterArgumentNode ): ParameterNode More info Returns the object referenced by the node function argument. [jvm] Content fun declaration (node: OutParameterInitializationNode ): ParameterNode More info Returns the declaration of the out parameter in node. [jvm] Content fun declaration (node: QueryNode ): ObjectDeclaration fun declaration (node: UpdateNode ): ObjectDeclaration More info Returns the statement that declares the ObjectVariable in node. [jvm] Content fun declaration (node: ReadNode ): LetNode More info Returns the statement that defines the Temporary in node. enclosingBlock [jvm] Content fun enclosingBlock (stmt: StatementNode ): BlockNode More info Get the block that encloses this statement. enclosingFunctionName [jvm] Content fun enclosingFunctionName (node: ExpressionNode ): FunctionName fun enclosingFunctionName (node: FunctionArgumentNode ): FunctionName fun enclosingFunctionName (node: StatementNode ): FunctionName enclosingStatement [jvm] Content fun enclosingStatement (read: ReadNode ): StatementNode More info Return the statement enclosing the read node. equals [jvm] Content open operator fun equals (other: Any ?): Boolean functionDeclaration [jvm] Content fun functionDeclaration (parameter: ParameterNode ): FunctionDeclarationNode hashCode [jvm] Content open fun hashCode (): Int involvedLoops [jvm] Content fun involvedLoops (node: Node ): List < InfiniteLoopNode > More info Returns the list of InfiniteLoopNode s node is contained in. parameter [jvm] Content fun parameter (node: FunctionArgumentNode ): ParameterNode More info Returns the parameter for which node is the argument. parameterUsers [jvm] Content fun parameterUsers (parameter: ParameterNode ): Set < FunctionArgumentNode > More info Returns the set of arguments for ParameterNode . parameterUses [jvm] Content fun parameterUses (node: DeclarationNode ): Set < ParameterNode > fun parameterUses (node: ObjectDeclarationArgumentNode ): Set < ParameterNode > fun parameterUses (node: ParameterNode ): Set < ParameterNode > More info Returns the set of parameters for which node is used as an argument. queriers [jvm] Content fun queriers (node: DeclarationNode ): Set < QueryNode > fun queriers (node: ObjectDeclarationArgumentNode ): Set < QueryNode > fun queriers (node: ParameterNode ): Set < QueryNode > More info Returns the set of QueryNode s that reference the ObjectVariable declared by node. reachableFunctions [jvm] Content fun reachableFunctions (node: Node ): PersistentSet< FunctionName > More info Returns the set of functions transitively reachable from a statement node. readers [jvm] Content fun readers (node: LetNode ): Set < StatementNode > More info Returns the set of StatementNode s that read the Temporary defined by node. reads [jvm] Content fun reads (node: Node ): Set < ReadNode > toString [jvm] Content open fun toString (): String updaters [jvm] Content fun updaters (node: DeclarationNode ): Set < UpdateNode > fun updaters (node: ObjectDeclarationArgumentNode ): Set < UpdateNode > fun updaters (node: ParameterNode ): Set < UpdateNode > More info Returns the set of UpdateNode s that reference the ObjectVariable declared by node. users [jvm] Content fun users (node: DeclarationNode ): Set < Node > fun users (node: ObjectDeclarationArgumentNode ): Set < Node > fun users (node: ParameterNode ): Set < Node > More info Returns the set of QueryNode s and UpdateNode s that reference the ObjectVariable declared by node. variables [jvm] Content fun variables (node: StatementNode ): Set < FunctionVariable > More info Returns the variables used of a node.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/argument-uses/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / argumentUses argumentUses \u00b6 [jvm] Content fun argumentUses (node: DeclarationNode ): Set < FunctionArgumentNode > fun argumentUses (node: ParameterNode ): Set < FunctionArgumentNode > fun argumentUses (node: ObjectDeclarationArgumentNode ): Set < FunctionArgumentNode > More info Returns the set of arguments where node is used.","title":"Argument uses"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/argument-uses/#argumentuses","text":"[jvm] Content fun argumentUses (node: DeclarationNode ): Set < FunctionArgumentNode > fun argumentUses (node: ParameterNode ): Set < FunctionArgumentNode > fun argumentUses (node: ObjectDeclarationArgumentNode ): Set < FunctionArgumentNode > More info Returns the set of arguments where node is used.","title":"argumentUses"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/as-object-declaration/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / asObjectDeclaration asObjectDeclaration \u00b6 [jvm] Content fun asObjectDeclaration (node: ObjectDeclarationArgumentNode ): ObjectDeclaration","title":"As object declaration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/as-object-declaration/#asobjectdeclaration","text":"[jvm] Content fun asObjectDeclaration (node: ObjectDeclarationArgumentNode ): ObjectDeclaration","title":"asObjectDeclaration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/calls/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / calls calls \u00b6 [jvm] Content fun calls (function: FunctionDeclarationNode ): Set < FunctionCallNode > More info Returns the set of calls to the given function declaration.","title":"Calls"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/calls/#calls","text":"[jvm] Content fun calls (function: FunctionDeclarationNode ): Set < FunctionCallNode > More info Returns the set of calls to the given function declaration.","title":"calls"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/check/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / check check \u00b6 [jvm] Content fun check () More info Asserts that every referenced Name has a declaration, and that no Name is declared multiple times in the same scope. Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if a referenced Name is not in scope. edu.cornell.cs.apl.viaduct.errors.NameClashError if a Name is declared multiple times in the same scope.","title":"Check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/check/#check","text":"[jvm] Content fun check () More info Asserts that every referenced Name has a declaration, and that no Name is declared multiple times in the same scope.","title":"check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/check/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if a referenced Name is not in scope. edu.cornell.cs.apl.viaduct.errors.NameClashError if a Name is declared multiple times in the same scope.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/corresponding-breaks/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / correspondingBreaks correspondingBreaks \u00b6 [jvm] Content fun correspondingBreaks (node: InfiniteLoopNode ): Set < BreakNode > More info Returns the set of BreakNode s that reference node.","title":"Corresponding breaks"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/corresponding-breaks/#correspondingbreaks","text":"[jvm] Content fun correspondingBreaks (node: InfiniteLoopNode ): Set < BreakNode > More info Returns the set of BreakNode s that reference node.","title":"correspondingBreaks"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/corresponding-let/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / correspondingLet correspondingLet \u00b6 [jvm] Content fun correspondingLet (query: QueryNode ): LetNode","title":"Corresponding let"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/corresponding-let/#correspondinglet","text":"[jvm] Content fun correspondingLet (query: QueryNode ): LetNode","title":"correspondingLet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/corresponding-loop/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / correspondingLoop correspondingLoop \u00b6 [jvm] Content fun correspondingLoop (node: BreakNode ): InfiniteLoopNode More info Returns the loop that node is breaking out of.","title":"Corresponding loop"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/corresponding-loop/#correspondingloop","text":"[jvm] Content fun correspondingLoop (node: BreakNode ): InfiniteLoopNode More info Returns the loop that node is breaking out of.","title":"correspondingLoop"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/declaration/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / declaration declaration \u00b6 [jvm] Content fun declaration (node: ReadNode ): LetNode More info Returns the statement that defines the Temporary in node. [jvm] Content fun declaration (node: QueryNode ): ObjectDeclaration fun declaration (node: UpdateNode ): ObjectDeclaration More info Returns the statement that declares the ObjectVariable in node. [jvm] Content fun declaration (node: ExternalCommunicationNode ): HostDeclarationNode More info Returns the declaration of the Host in node. [jvm] Content fun declaration (node: InternalCommunicationNode ): ProcessDeclarationNode More info Returns the declaration of the Protocol in node. [jvm] Content fun declaration (node: OutParameterInitializationNode ): ParameterNode More info Returns the declaration of the out parameter in node. [jvm] Content fun declaration (node: FunctionCallNode ): FunctionDeclarationNode More info Returns the declaration of the function being called in node. [jvm] Content fun declaration (node: ObjectReferenceArgumentNode ): ObjectDeclaration fun declaration (node: OutParameterArgumentNode ): ParameterNode More info Returns the object referenced by the node function argument.","title":"Declaration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/declaration/#declaration","text":"[jvm] Content fun declaration (node: ReadNode ): LetNode More info Returns the statement that defines the Temporary in node. [jvm] Content fun declaration (node: QueryNode ): ObjectDeclaration fun declaration (node: UpdateNode ): ObjectDeclaration More info Returns the statement that declares the ObjectVariable in node. [jvm] Content fun declaration (node: ExternalCommunicationNode ): HostDeclarationNode More info Returns the declaration of the Host in node. [jvm] Content fun declaration (node: InternalCommunicationNode ): ProcessDeclarationNode More info Returns the declaration of the Protocol in node. [jvm] Content fun declaration (node: OutParameterInitializationNode ): ParameterNode More info Returns the declaration of the out parameter in node. [jvm] Content fun declaration (node: FunctionCallNode ): FunctionDeclarationNode More info Returns the declaration of the function being called in node. [jvm] Content fun declaration (node: ObjectReferenceArgumentNode ): ObjectDeclaration fun declaration (node: OutParameterArgumentNode ): ParameterNode More info Returns the object referenced by the node function argument.","title":"declaration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/enclosing-block/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / enclosingBlock enclosingBlock \u00b6 [jvm] Content fun enclosingBlock (stmt: StatementNode ): BlockNode More info Get the block that encloses this statement.","title":"Enclosing block"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/enclosing-block/#enclosingblock","text":"[jvm] Content fun enclosingBlock (stmt: StatementNode ): BlockNode More info Get the block that encloses this statement.","title":"enclosingBlock"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/enclosing-function-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / enclosingFunctionName enclosingFunctionName \u00b6 [jvm] Content fun enclosingFunctionName (node: StatementNode ): FunctionName fun enclosingFunctionName (node: ExpressionNode ): FunctionName fun enclosingFunctionName (node: FunctionArgumentNode ): FunctionName","title":"Enclosing function name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/enclosing-function-name/#enclosingfunctionname","text":"[jvm] Content fun enclosingFunctionName (node: StatementNode ): FunctionName fun enclosingFunctionName (node: ExpressionNode ): FunctionName fun enclosingFunctionName (node: FunctionArgumentNode ): FunctionName","title":"enclosingFunctionName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/enclosing-statement/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / enclosingStatement enclosingStatement \u00b6 [jvm] Content fun enclosingStatement (read: ReadNode ): StatementNode More info Return the statement enclosing the read node.","title":"Enclosing statement"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/enclosing-statement/#enclosingstatement","text":"[jvm] Content fun enclosingStatement (read: ReadNode ): StatementNode More info Return the statement enclosing the read node.","title":"enclosingStatement"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/function-declaration/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / functionDeclaration functionDeclaration \u00b6 [jvm] Content fun functionDeclaration (parameter: ParameterNode ): FunctionDeclarationNode","title":"Function declaration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/function-declaration/#functiondeclaration","text":"[jvm] Content fun functionDeclaration (parameter: ParameterNode ): FunctionDeclarationNode","title":"functionDeclaration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/involved-loops/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / involvedLoops involvedLoops \u00b6 [jvm] Content fun involvedLoops (node: Node ): List < InfiniteLoopNode > More info Returns the list of InfiniteLoopNode s node is contained in.","title":"Involved loops"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/involved-loops/#involvedloops","text":"[jvm] Content fun involvedLoops (node: Node ): List < InfiniteLoopNode > More info Returns the list of InfiniteLoopNode s node is contained in.","title":"involvedLoops"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/parameter-users/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / parameterUsers parameterUsers \u00b6 [jvm] Content fun parameterUsers (parameter: ParameterNode ): Set < FunctionArgumentNode > More info Returns the set of arguments for ParameterNode .","title":"Parameter users"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/parameter-users/#parameterusers","text":"[jvm] Content fun parameterUsers (parameter: ParameterNode ): Set < FunctionArgumentNode > More info Returns the set of arguments for ParameterNode .","title":"parameterUsers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/parameter-uses/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / parameterUses parameterUses \u00b6 [jvm] Content fun parameterUses (node: DeclarationNode ): Set < ParameterNode > fun parameterUses (node: ParameterNode ): Set < ParameterNode > fun parameterUses (node: ObjectDeclarationArgumentNode ): Set < ParameterNode > More info Returns the set of parameters for which node is used as an argument.","title":"Parameter uses"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/parameter-uses/#parameteruses","text":"[jvm] Content fun parameterUses (node: DeclarationNode ): Set < ParameterNode > fun parameterUses (node: ParameterNode ): Set < ParameterNode > fun parameterUses (node: ObjectDeclarationArgumentNode ): Set < ParameterNode > More info Returns the set of parameters for which node is used as an argument.","title":"parameterUses"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / parameter parameter \u00b6 [jvm] Content fun parameter (node: FunctionArgumentNode ): ParameterNode More info Returns the parameter for which node is the argument.","title":"Parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/parameter/#parameter","text":"[jvm] Content fun parameter (node: FunctionArgumentNode ): ParameterNode More info Returns the parameter for which node is the argument.","title":"parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/queriers/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / queriers queriers \u00b6 [jvm] Content fun queriers (node: DeclarationNode ): Set < QueryNode > fun queriers (node: ParameterNode ): Set < QueryNode > fun queriers (node: ObjectDeclarationArgumentNode ): Set < QueryNode > More info Returns the set of QueryNode s that reference the ObjectVariable declared by node.","title":"Queriers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/queriers/#queriers","text":"[jvm] Content fun queriers (node: DeclarationNode ): Set < QueryNode > fun queriers (node: ParameterNode ): Set < QueryNode > fun queriers (node: ObjectDeclarationArgumentNode ): Set < QueryNode > More info Returns the set of QueryNode s that reference the ObjectVariable declared by node.","title":"queriers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/reachable-functions/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / reachableFunctions reachableFunctions \u00b6 [jvm] Content fun reachableFunctions (node: Node ): PersistentSet< FunctionName > More info Returns the set of functions transitively reachable from a statement node.","title":"Reachable functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/reachable-functions/#reachablefunctions","text":"[jvm] Content fun reachableFunctions (node: Node ): PersistentSet< FunctionName > More info Returns the set of functions transitively reachable from a statement node.","title":"reachableFunctions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/readers/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / readers readers \u00b6 [jvm] Content fun readers (node: LetNode ): Set < StatementNode > More info Returns the set of StatementNode s that read the Temporary defined by node. Note that this set only includes direct reads. For example, an IfNode only reads the temporaries in its guard, and BlockNode s and InfiniteLoopNode s do not read any temporary.","title":"Readers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/readers/#readers","text":"[jvm] Content fun readers (node: LetNode ): Set < StatementNode > More info Returns the set of StatementNode s that read the Temporary defined by node. Note that this set only includes direct reads. For example, an IfNode only reads the temporaries in its guard, and BlockNode s and InfiniteLoopNode s do not read any temporary.","title":"readers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/reads/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / reads reads \u00b6 [jvm] Content fun reads (node: Node ): Set < ReadNode >","title":"Reads"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/reads/#reads","text":"[jvm] Content fun reads (node: Node ): Set < ReadNode >","title":"reads"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/updaters/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / updaters updaters \u00b6 [jvm] Content fun updaters (node: DeclarationNode ): Set < UpdateNode > fun updaters (node: ParameterNode ): Set < UpdateNode > fun updaters (node: ObjectDeclarationArgumentNode ): Set < UpdateNode > More info Returns the set of UpdateNode s that reference the ObjectVariable declared by node.","title":"Updaters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/updaters/#updaters","text":"[jvm] Content fun updaters (node: DeclarationNode ): Set < UpdateNode > fun updaters (node: ParameterNode ): Set < UpdateNode > fun updaters (node: ObjectDeclarationArgumentNode ): Set < UpdateNode > More info Returns the set of UpdateNode s that reference the ObjectVariable declared by node.","title":"updaters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/users/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / users users \u00b6 [jvm] Content fun users (node: DeclarationNode ): Set < Node > fun users (node: ParameterNode ): Set < Node > fun users (node: ObjectDeclarationArgumentNode ): Set < Node > More info Returns the set of QueryNode s and UpdateNode s that reference the ObjectVariable declared by node.","title":"Users"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/users/#users","text":"[jvm] Content fun users (node: DeclarationNode ): Set < Node > fun users (node: ParameterNode ): Set < Node > fun users (node: ObjectDeclarationArgumentNode ): Set < Node > More info Returns the set of QueryNode s and UpdateNode s that reference the ObjectVariable declared by node.","title":"users"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/variables/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / variables variables \u00b6 [jvm] Content fun variables (node: StatementNode ): Set < FunctionVariable > More info Returns the variables used of a node.","title":"Variables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/variables/#variables","text":"[jvm] Content fun variables (node: StatementNode ): Set < FunctionVariable > More info Returns the variables used of a node.","title":"variables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / Companion Companion \u00b6 [jvm] object Companion : AnalysisProvider < NameAnalysis > Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): NameAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary MAIN_FUNCTION [jvm] val MAIN_FUNCTION : FunctionName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/#companion","text":"[jvm] object Companion : AnalysisProvider < NameAnalysis >","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): NameAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/#properties","text":"Name Summary MAIN_FUNCTION [jvm] val MAIN_FUNCTION : FunctionName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/-m-a-i-n_-f-u-n-c-t-i-o-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / Companion / MAIN_FUNCTION MAIN_FUNCTION \u00b6 [jvm] Content val MAIN_FUNCTION : FunctionName","title":" m a i n  f u n c t i o n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/-m-a-i-n_-f-u-n-c-t-i-o-n/#main_function","text":"[jvm] Content val MAIN_FUNCTION : FunctionName","title":"MAIN_FUNCTION"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/get/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / NameAnalysis / Companion / get get \u00b6 [jvm] Content open override fun get (program: ProgramNode ): NameAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-name-analysis/-companion/get/#get","text":"[jvm] Content open override fun get (program: ProgramNode ): NameAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / OutParameterInitializationAnalysis OutParameterInitializationAnalysis \u00b6 [jvm] class OutParameterInitializationAnalysis Analysis to ensure all out parameters have been initialized before they are used and before the function returns. Types \u00b6 Name Summary Companion [jvm] Content object Companion : AnalysisProvider < OutParameterInitializationAnalysis > Functions \u00b6 Name Summary check [jvm] Content fun check () More info Begin check at ProgramNode tree. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/#outparameterinitializationanalysis","text":"[jvm] class OutParameterInitializationAnalysis Analysis to ensure all out parameters have been initialized before they are used and before the function returns.","title":"OutParameterInitializationAnalysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/#types","text":"Name Summary Companion [jvm] Content object Companion : AnalysisProvider < OutParameterInitializationAnalysis >","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/#functions","text":"Name Summary check [jvm] Content fun check () More info Begin check at ProgramNode tree. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/check/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / OutParameterInitializationAnalysis / check check \u00b6 [jvm] Content fun check () More info Begin check at ProgramNode tree.","title":"Check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/check/#check","text":"[jvm] Content fun check () More info Begin check at ProgramNode tree.","title":"check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / OutParameterInitializationAnalysis / Companion Companion \u00b6 [jvm] object Companion : AnalysisProvider < OutParameterInitializationAnalysis > Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): OutParameterInitializationAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/-companion/#companion","text":"[jvm] object Companion : AnalysisProvider < OutParameterInitializationAnalysis >","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): OutParameterInitializationAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/-companion/get/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / OutParameterInitializationAnalysis / Companion / get get \u00b6 [jvm] Content open override fun get (program: ProgramNode ): OutParameterInitializationAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-out-parameter-initialization-analysis/-companion/get/#get","text":"[jvm] Content open override fun get (program: ProgramNode ): OutParameterInitializationAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis ProtocolAnalysis \u00b6 [jvm] class ProtocolAnalysis ( program : ProgramNode , protocolComposer : ProtocolComposer ) Associates each StatementNode with the Protocol s involved in its execution. Constructors \u00b6 Name Summary ProtocolAnalysis [jvm] fun ProtocolAnalysis (program: ProgramNode , protocolComposer: ProtocolComposer ) Functions \u00b6 Name Summary directReaderProtocols [jvm] Content fun directReaderProtocols (letNode: LetNode ): Set < Protocol > More info Returns the set of protocols that direct read the let binding. directRemoteReaders [jvm] Content fun directRemoteReaders (letNode: LetNode ): Set < SimpleStatementNode > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int hostsToSync [jvm] Content fun hostsToSync (statement: StatementNode ): Set < Host > More info Returns the set of hosts that will synchronize with statement. participatingHosts [jvm] Content fun participatingHosts (statement: StatementNode ): Set < Host > More info Returns the set of hosts that participate in the execution of statement. participatingProtocols [jvm] Content fun participatingProtocols (node: Node ): Set < Protocol > More info Return the protocols participating for node. primaryProtocol [jvm] Content fun primaryProtocol (argument: FunctionArgumentNode ): Protocol More info Returns the protocol that coordinates the execution of argument. [jvm] Content fun primaryProtocol (parameter: ParameterNode ): Protocol More info Returns the protocol that coordinates the execution of parameter. [jvm] Content fun primaryProtocol (read: ReadNode ): Protocol More info Returns the protocol that coordinates the execution of the let node read by read. [jvm] Content fun primaryProtocol (statement: SimpleStatementNode ): Protocol More info Returns the protocol that coordinates the execution of statement. protocols [jvm] Content fun protocols (function: FunctionDeclarationNode ): Set < Protocol > More info Returns the set of protocols that execute function. [jvm] Content fun protocols (statement: StatementNode ): Set < Protocol > More info Returns the set of protocols that execute statement. relevantCommunicationEvents [jvm] Content fun relevantCommunicationEvents (read: ReadNode ): ProtocolCommunication More info Return the relevant communication events for the read. [jvm] Content fun relevantCommunicationEvents (letNode: LetNode , reader: SimpleStatementNode ): ProtocolCommunication More info Return the relevant communication events for reader reading from letNode. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary program [jvm] val program : ProgramNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/#protocolanalysis","text":"[jvm] class ProtocolAnalysis ( program : ProgramNode , protocolComposer : ProtocolComposer ) Associates each StatementNode with the Protocol s involved in its execution.","title":"ProtocolAnalysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/#constructors","text":"Name Summary ProtocolAnalysis [jvm] fun ProtocolAnalysis (program: ProgramNode , protocolComposer: ProtocolComposer )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/#functions","text":"Name Summary directReaderProtocols [jvm] Content fun directReaderProtocols (letNode: LetNode ): Set < Protocol > More info Returns the set of protocols that direct read the let binding. directRemoteReaders [jvm] Content fun directRemoteReaders (letNode: LetNode ): Set < SimpleStatementNode > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int hostsToSync [jvm] Content fun hostsToSync (statement: StatementNode ): Set < Host > More info Returns the set of hosts that will synchronize with statement. participatingHosts [jvm] Content fun participatingHosts (statement: StatementNode ): Set < Host > More info Returns the set of hosts that participate in the execution of statement. participatingProtocols [jvm] Content fun participatingProtocols (node: Node ): Set < Protocol > More info Return the protocols participating for node. primaryProtocol [jvm] Content fun primaryProtocol (argument: FunctionArgumentNode ): Protocol More info Returns the protocol that coordinates the execution of argument. [jvm] Content fun primaryProtocol (parameter: ParameterNode ): Protocol More info Returns the protocol that coordinates the execution of parameter. [jvm] Content fun primaryProtocol (read: ReadNode ): Protocol More info Returns the protocol that coordinates the execution of the let node read by read. [jvm] Content fun primaryProtocol (statement: SimpleStatementNode ): Protocol More info Returns the protocol that coordinates the execution of statement. protocols [jvm] Content fun protocols (function: FunctionDeclarationNode ): Set < Protocol > More info Returns the set of protocols that execute function. [jvm] Content fun protocols (statement: StatementNode ): Set < Protocol > More info Returns the set of protocols that execute statement. relevantCommunicationEvents [jvm] Content fun relevantCommunicationEvents (read: ReadNode ): ProtocolCommunication More info Return the relevant communication events for the read. [jvm] Content fun relevantCommunicationEvents (letNode: LetNode , reader: SimpleStatementNode ): ProtocolCommunication More info Return the relevant communication events for reader reading from letNode. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/#properties","text":"Name Summary program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/-protocol-analysis/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / ProtocolAnalysis ProtocolAnalysis \u00b6 [jvm] Content fun ProtocolAnalysis (program: ProgramNode , protocolComposer: ProtocolComposer )","title":" protocol analysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/-protocol-analysis/#protocolanalysis","text":"[jvm] Content fun ProtocolAnalysis (program: ProgramNode , protocolComposer: ProtocolComposer )","title":"ProtocolAnalysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/direct-reader-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / directReaderProtocols directReaderProtocols \u00b6 [jvm] Content fun directReaderProtocols (letNode: LetNode ): Set < Protocol > More info Returns the set of protocols that direct read the let binding.","title":"Direct reader protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/direct-reader-protocols/#directreaderprotocols","text":"[jvm] Content fun directReaderProtocols (letNode: LetNode ): Set < Protocol > More info Returns the set of protocols that direct read the let binding.","title":"directReaderProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/direct-remote-readers/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / directRemoteReaders directRemoteReaders \u00b6 [jvm] Content fun directRemoteReaders (letNode: LetNode ): Set < SimpleStatementNode >","title":"Direct remote readers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/direct-remote-readers/#directremotereaders","text":"[jvm] Content fun directRemoteReaders (letNode: LetNode ): Set < SimpleStatementNode >","title":"directRemoteReaders"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/hosts-to-sync/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / hostsToSync hostsToSync \u00b6 [jvm] Content fun hostsToSync (statement: StatementNode ): Set < Host > More info Returns the set of hosts that will synchronize with statement.","title":"Hosts to sync"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/hosts-to-sync/#hoststosync","text":"[jvm] Content fun hostsToSync (statement: StatementNode ): Set < Host > More info Returns the set of hosts that will synchronize with statement.","title":"hostsToSync"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/participating-hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / participatingHosts participatingHosts \u00b6 [jvm] Content fun participatingHosts (statement: StatementNode ): Set < Host > More info Returns the set of hosts that participate in the execution of statement.","title":"Participating hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/participating-hosts/#participatinghosts","text":"[jvm] Content fun participatingHosts (statement: StatementNode ): Set < Host > More info Returns the set of hosts that participate in the execution of statement.","title":"participatingHosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/participating-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / participatingProtocols participatingProtocols \u00b6 [jvm] Content fun participatingProtocols (node: Node ): Set < Protocol > More info Return the protocols participating for node.","title":"Participating protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/participating-protocols/#participatingprotocols","text":"[jvm] Content fun participatingProtocols (node: Node ): Set < Protocol > More info Return the protocols participating for node.","title":"participatingProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/primary-protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / primaryProtocol primaryProtocol \u00b6 [jvm] Content fun primaryProtocol (statement: SimpleStatementNode ): Protocol More info Returns the protocol that coordinates the execution of statement. Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.IllegalInternalCommunicationError if statement is an InternalCommunicationNode . [jvm] Content fun primaryProtocol (read: ReadNode ): Protocol More info Returns the protocol that coordinates the execution of the let node read by read. [jvm] Content fun primaryProtocol (parameter: ParameterNode ): Protocol More info Returns the protocol that coordinates the execution of parameter. [jvm] Content fun primaryProtocol (argument: FunctionArgumentNode ): Protocol More info Returns the protocol that coordinates the execution of argument.","title":"Primary protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/primary-protocol/#primaryprotocol","text":"[jvm] Content fun primaryProtocol (statement: SimpleStatementNode ): Protocol More info Returns the protocol that coordinates the execution of statement.","title":"primaryProtocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/primary-protocol/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.IllegalInternalCommunicationError if statement is an InternalCommunicationNode . [jvm] Content fun primaryProtocol (read: ReadNode ): Protocol More info Returns the protocol that coordinates the execution of the let node read by read. [jvm] Content fun primaryProtocol (parameter: ParameterNode ): Protocol More info Returns the protocol that coordinates the execution of parameter. [jvm] Content fun primaryProtocol (argument: FunctionArgumentNode ): Protocol More info Returns the protocol that coordinates the execution of argument.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/program/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / program program \u00b6 [jvm] Content val program : ProgramNode","title":"Program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/program/#program","text":"[jvm] Content val program : ProgramNode","title":"program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / protocols protocols \u00b6 [jvm] Content fun protocols (statement: StatementNode ): Set < Protocol > More info Returns the set of protocols that execute statement. [jvm] Content fun protocols (function: FunctionDeclarationNode ): Set < Protocol > More info Returns the set of protocols that execute function.","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/protocols/#protocols","text":"[jvm] Content fun protocols (statement: StatementNode ): Set < Protocol > More info Returns the set of protocols that execute statement. [jvm] Content fun protocols (function: FunctionDeclarationNode ): Set < Protocol > More info Returns the set of protocols that execute function.","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/relevant-communication-events/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / ProtocolAnalysis / relevantCommunicationEvents relevantCommunicationEvents \u00b6 [jvm] Content fun relevantCommunicationEvents (read: ReadNode ): ProtocolCommunication More info Return the relevant communication events for the read. [jvm] Content fun relevantCommunicationEvents (letNode: LetNode , reader: SimpleStatementNode ): ProtocolCommunication More info Return the relevant communication events for reader reading from letNode.","title":"Relevant communication events"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-protocol-analysis/relevant-communication-events/#relevantcommunicationevents","text":"[jvm] Content fun relevantCommunicationEvents (read: ReadNode ): ProtocolCommunication More info Return the relevant communication events for the read. [jvm] Content fun relevantCommunicationEvents (letNode: LetNode , reader: SimpleStatementNode ): ProtocolCommunication More info Return the relevant communication events for reader reading from letNode.","title":"relevantCommunicationEvents"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / TypeAnalysis TypeAnalysis \u00b6 [jvm] class TypeAnalysis Associates Variable s with their Type s. Types \u00b6 Name Summary Companion [jvm] Content object Companion : AnalysisProvider < TypeAnalysis > Functions \u00b6 Name Summary check [jvm] Content fun check () More info Asserts that the program is well typed, and throws CompilationError otherwise. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String type [jvm] Content fun type (node: ExpressionNode ): ValueType More info Returns the inferred type of node. [jvm] Content fun type (node: LetNode ): ValueType More info Returns the inferred type of the Temporary defined by node. [jvm] Content fun type (node: ObjectDeclaration ): ObjectType More info Returns the type of the ObjectVariable defined by node. [jvm] Content fun type (node: OutParameterInitializationNode ): ObjectType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/#typeanalysis","text":"[jvm] class TypeAnalysis Associates Variable s with their Type s.","title":"TypeAnalysis"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/#types","text":"Name Summary Companion [jvm] Content object Companion : AnalysisProvider < TypeAnalysis >","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/#functions","text":"Name Summary check [jvm] Content fun check () More info Asserts that the program is well typed, and throws CompilationError otherwise. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String type [jvm] Content fun type (node: ExpressionNode ): ValueType More info Returns the inferred type of node. [jvm] Content fun type (node: LetNode ): ValueType More info Returns the inferred type of the Temporary defined by node. [jvm] Content fun type (node: ObjectDeclaration ): ObjectType More info Returns the type of the ObjectVariable defined by node. [jvm] Content fun type (node: OutParameterInitializationNode ): ObjectType","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/check/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / TypeAnalysis / check check \u00b6 [jvm] Content fun check () More info Asserts that the program is well typed, and throws CompilationError otherwise.","title":"Check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/check/#check","text":"[jvm] Content fun check () More info Asserts that the program is well typed, and throws CompilationError otherwise.","title":"check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / TypeAnalysis / type type \u00b6 [jvm] Content fun type (node: ExpressionNode ): ValueType More info Returns the inferred type of node. [jvm] Content fun type (node: LetNode ): ValueType More info Returns the inferred type of the Temporary defined by node. [jvm] Content fun type (node: ObjectDeclaration ): ObjectType More info Returns the type of the ObjectVariable defined by node. [jvm] Content fun type (node: OutParameterInitializationNode ): ObjectType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/type/#type","text":"[jvm] Content fun type (node: ExpressionNode ): ValueType More info Returns the inferred type of node. [jvm] Content fun type (node: LetNode ): ValueType More info Returns the inferred type of the Temporary defined by node. [jvm] Content fun type (node: ObjectDeclaration ): ObjectType More info Returns the type of the ObjectVariable defined by node. [jvm] Content fun type (node: OutParameterInitializationNode ): ObjectType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / TypeAnalysis / Companion Companion \u00b6 [jvm] object Companion : AnalysisProvider < TypeAnalysis > Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): TypeAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/-companion/#companion","text":"[jvm] object Companion : AnalysisProvider < TypeAnalysis >","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content open override fun get (program: ProgramNode ): TypeAnalysis More info Returns the Analysis instance for program. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/-companion/get/","text":"// compiler / edu.cornell.cs.apl.viaduct.analysis / TypeAnalysis / Companion / get get \u00b6 [jvm] Content open override fun get (program: ProgramNode ): TypeAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.analysis/-type-analysis/-companion/get/#get","text":"[jvm] Content open override fun get (program: ProgramNode ): TypeAnalysis More info Returns the Analysis instance for program. The returned instance is cached for efficiency, so calling get again on program will return the same instance.","title":"get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors Package edu.cornell.cs.apl.viaduct.errors \u00b6 Types \u00b6 Name Summary CompilationError [jvm] Content abstract class CompilationError : Error , PrettyPrintable More info Superclass of all errors caused by bad user input to the compiler. ConfidentialityChangingEndorsementError [jvm] Content class ConfidentialityChangingEndorsementError ( node : EndorsementNode , from : Label ) : InformationFlowError More info Thrown when an EndorsementNode modifies confidentiality. IllegalCharacterError [jvm] Content class IllegalCharacterError ( location : SourceLocation ) : CompilationError More info Thrown when the lexer encounters an illegal character. IllegalInternalCommunicationError [jvm] Content class IllegalInternalCommunicationError ( illegalStatement : InternalCommunicationNode ) : CompilationError More info Thrown when a Protocol (usually an Ideal protocol) contains an InternalCommunicationNode when it is not allowed to do so. ImpossibleCaseError [jvm] Content abstract class ImpossibleCaseError : CompilationError More info Thrown when the compiler reaches an impossible state. IncorrectNumberOfArgumentsError [jvm] Content class IncorrectNumberOfArgumentsError ( method : Located < Name >, expected : Int , actual : Arguments <*>) : CompilationError More info Thrown when a function or a method is given too many or too few arguments. InformationFlowError [jvm] Content abstract class InformationFlowError : CompilationError More info Superclass of errors related to information flow. InsecureControlFlowError [jvm] Content class InsecureControlFlowError ( node : HasSourceLocation , nodeLabel : Label , pc : Label ) : InformationFlowError More info Thrown when the control flow influences data in a way that violates security. InsecureDataFlowError [jvm] Content class InsecureDataFlowError ( node : HasSourceLocation , nodeLabel : Label , to : Label ) : InformationFlowError More info Thrown when a term's output flows to a location that would violate information flow security. IntegrityChangingDeclassificationError [jvm] Content class IntegrityChangingDeclassificationError ( node : DeclassificationNode , from : Label ) : InformationFlowError More info Thrown when a DeclassificationNode modifies confidentiality. InvalidConstructorCallError [jvm] Content class InvalidConstructorCallError ( node : Node , constructorNeeded : Boolean ) : CompilationError JumpOutsideLoopScopeError [jvm] Content class JumpOutsideLoopScopeError ( node : HasSourceLocation ) : CompilationError More info Thrown when a break, continue, or a similar statement occurs outside the scope of a loop. LabelMismatchError [jvm] Content class LabelMismatchError ( node : HasSourceLocation , actualLabel : Label , expectedLabel : Label ) : InformationFlowError More info Thrown when the inferred label of a node does not match its annotated label. MalleableDowngradeError [jvm] Content class MalleableDowngradeError ( node : DowngradeNode ) : InformationFlowError More info Thrown when a DowngradeNode node violate the non-malleable information flow control restriction. NameClashError [jvm] Content class NameClashError ( name : Name , firstDeclaration : SourceLocation , secondDeclaration : SourceLocation ) : CompilationError More info Thrown when a Name has multiple declarations. NoApplicableProtocolError [jvm] Content class NoApplicableProtocolError ( node : HasSourceLocation ) : CompilationError More info Thrown when there is no Protocol that can be assigned to a node. NoHostDeclarationsError [jvm] Content class NoHostDeclarationsError ( source : String ) : CompilationError More info Thrown when trying to compile a program with no host declarations. NoMainError [jvm] Content class NoMainError ( source : String ) : CompilationError More info Thrown when trying to compile a program with no main. NoProtocolAnnotationError [jvm] Content class NoProtocolAnnotationError ( node : Node ) : CompilationError More info Thrown when a required protocol annotation in node is not found. NoProtocolIndexMapping [jvm] Content class NoProtocolIndexMapping ( protocolIndex : Int ) : ProtocolSelectionError More info Thrown when a protocol index is not mapped to a corresponding protocol. NoSelectionSolutionError [jvm] Content class NoSelectionSolutionError : ProtocolSelectionError More info Thrown when the protocol selection cannot find a solution. NoVariableSelectionSolutionError [jvm] Content class NoVariableSelectionSolutionError ( f : FunctionName , v : Variable ) : ProtocolSelectionError More info Thrown when the protocol selection does not have a solution for a program variable. OutParameterInitializationError [jvm] Content class OutParameterInitializationError ( parameter : ParameterNode , useSite : Node ?) : CompilationError ParameterDirectionMismatchError [jvm] Content class ParameterDirectionMismatchError ( parameter : ParameterNode , argument : FunctionArgumentNode ) : CompilationError ParsingError [jvm] Content class ParsingError ( location : SourceLocation , actualToken : String , expectedTokens : List < String >) : CompilationError More info Thrown when the parser runs into an unexpected token. ProtocolSelectionError [jvm] Content abstract class ProtocolSelectionError : CompilationError More info Thrown when an error occurs during protocol selection. TypeMismatchError [jvm] Content class TypeMismatchError ( node : HasSourceLocation , actualType : Type , expectedType : Type ) : CompilationError More info Thrown when the inferred type of an AST node does not match its expected type. UndefinedNameError [jvm] Content class UndefinedNameError ( name : Located < Name >) : CompilationError More info Thrown when a Name is referenced before it is defined. UnexpectedArgumentError [jvm] Content class UnexpectedArgumentError ( name : Located < ArgumentLabel >) : CompilationError More info Thrown when a function is given an extra argument. UnknownDatatypeError [jvm] Content class UnknownDatatypeError ( objectName : ObjectVariableNode , className : ClassName ) : CompilationError More info Thrown when an object is declared with an unknown datatype (class name). UnknownMethodError [jvm] Content class UnknownMethodError ( objectName : ObjectVariableNode , methodName : MethodNameNode , objectType : ObjectType ?, argumentTypes : List < ValueType >?) : CompilationError More info Thrown when an object is called with a method it does not recognize. UnknownObjectDeclarationError [jvm] Content class UnknownObjectDeclarationError ( node : Node ) : ImpossibleCaseError More info Thrown when an unknown Node is tagged as an ObjectDeclaration . ViaductInterpreterError [jvm] Content class ViaductInterpreterError ( information : String , node : HasSourceLocation ?) : CompilationError","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/#package-educornellcsaplviaducterrors","text":"","title":"Package edu.cornell.cs.apl.viaduct.errors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/#types","text":"Name Summary CompilationError [jvm] Content abstract class CompilationError : Error , PrettyPrintable More info Superclass of all errors caused by bad user input to the compiler. ConfidentialityChangingEndorsementError [jvm] Content class ConfidentialityChangingEndorsementError ( node : EndorsementNode , from : Label ) : InformationFlowError More info Thrown when an EndorsementNode modifies confidentiality. IllegalCharacterError [jvm] Content class IllegalCharacterError ( location : SourceLocation ) : CompilationError More info Thrown when the lexer encounters an illegal character. IllegalInternalCommunicationError [jvm] Content class IllegalInternalCommunicationError ( illegalStatement : InternalCommunicationNode ) : CompilationError More info Thrown when a Protocol (usually an Ideal protocol) contains an InternalCommunicationNode when it is not allowed to do so. ImpossibleCaseError [jvm] Content abstract class ImpossibleCaseError : CompilationError More info Thrown when the compiler reaches an impossible state. IncorrectNumberOfArgumentsError [jvm] Content class IncorrectNumberOfArgumentsError ( method : Located < Name >, expected : Int , actual : Arguments <*>) : CompilationError More info Thrown when a function or a method is given too many or too few arguments. InformationFlowError [jvm] Content abstract class InformationFlowError : CompilationError More info Superclass of errors related to information flow. InsecureControlFlowError [jvm] Content class InsecureControlFlowError ( node : HasSourceLocation , nodeLabel : Label , pc : Label ) : InformationFlowError More info Thrown when the control flow influences data in a way that violates security. InsecureDataFlowError [jvm] Content class InsecureDataFlowError ( node : HasSourceLocation , nodeLabel : Label , to : Label ) : InformationFlowError More info Thrown when a term's output flows to a location that would violate information flow security. IntegrityChangingDeclassificationError [jvm] Content class IntegrityChangingDeclassificationError ( node : DeclassificationNode , from : Label ) : InformationFlowError More info Thrown when a DeclassificationNode modifies confidentiality. InvalidConstructorCallError [jvm] Content class InvalidConstructorCallError ( node : Node , constructorNeeded : Boolean ) : CompilationError JumpOutsideLoopScopeError [jvm] Content class JumpOutsideLoopScopeError ( node : HasSourceLocation ) : CompilationError More info Thrown when a break, continue, or a similar statement occurs outside the scope of a loop. LabelMismatchError [jvm] Content class LabelMismatchError ( node : HasSourceLocation , actualLabel : Label , expectedLabel : Label ) : InformationFlowError More info Thrown when the inferred label of a node does not match its annotated label. MalleableDowngradeError [jvm] Content class MalleableDowngradeError ( node : DowngradeNode ) : InformationFlowError More info Thrown when a DowngradeNode node violate the non-malleable information flow control restriction. NameClashError [jvm] Content class NameClashError ( name : Name , firstDeclaration : SourceLocation , secondDeclaration : SourceLocation ) : CompilationError More info Thrown when a Name has multiple declarations. NoApplicableProtocolError [jvm] Content class NoApplicableProtocolError ( node : HasSourceLocation ) : CompilationError More info Thrown when there is no Protocol that can be assigned to a node. NoHostDeclarationsError [jvm] Content class NoHostDeclarationsError ( source : String ) : CompilationError More info Thrown when trying to compile a program with no host declarations. NoMainError [jvm] Content class NoMainError ( source : String ) : CompilationError More info Thrown when trying to compile a program with no main. NoProtocolAnnotationError [jvm] Content class NoProtocolAnnotationError ( node : Node ) : CompilationError More info Thrown when a required protocol annotation in node is not found. NoProtocolIndexMapping [jvm] Content class NoProtocolIndexMapping ( protocolIndex : Int ) : ProtocolSelectionError More info Thrown when a protocol index is not mapped to a corresponding protocol. NoSelectionSolutionError [jvm] Content class NoSelectionSolutionError : ProtocolSelectionError More info Thrown when the protocol selection cannot find a solution. NoVariableSelectionSolutionError [jvm] Content class NoVariableSelectionSolutionError ( f : FunctionName , v : Variable ) : ProtocolSelectionError More info Thrown when the protocol selection does not have a solution for a program variable. OutParameterInitializationError [jvm] Content class OutParameterInitializationError ( parameter : ParameterNode , useSite : Node ?) : CompilationError ParameterDirectionMismatchError [jvm] Content class ParameterDirectionMismatchError ( parameter : ParameterNode , argument : FunctionArgumentNode ) : CompilationError ParsingError [jvm] Content class ParsingError ( location : SourceLocation , actualToken : String , expectedTokens : List < String >) : CompilationError More info Thrown when the parser runs into an unexpected token. ProtocolSelectionError [jvm] Content abstract class ProtocolSelectionError : CompilationError More info Thrown when an error occurs during protocol selection. TypeMismatchError [jvm] Content class TypeMismatchError ( node : HasSourceLocation , actualType : Type , expectedType : Type ) : CompilationError More info Thrown when the inferred type of an AST node does not match its expected type. UndefinedNameError [jvm] Content class UndefinedNameError ( name : Located < Name >) : CompilationError More info Thrown when a Name is referenced before it is defined. UnexpectedArgumentError [jvm] Content class UnexpectedArgumentError ( name : Located < ArgumentLabel >) : CompilationError More info Thrown when a function is given an extra argument. UnknownDatatypeError [jvm] Content class UnknownDatatypeError ( objectName : ObjectVariableNode , className : ClassName ) : CompilationError More info Thrown when an object is declared with an unknown datatype (class name). UnknownMethodError [jvm] Content class UnknownMethodError ( objectName : ObjectVariableNode , methodName : MethodNameNode , objectType : ObjectType ?, argumentTypes : List < ValueType >?) : CompilationError More info Thrown when an object is called with a method it does not recognize. UnknownObjectDeclarationError [jvm] Content class UnknownObjectDeclarationError ( node : Node ) : ImpossibleCaseError More info Thrown when an unknown Node is tagged as an ObjectDeclaration . ViaductInterpreterError [jvm] Content class ViaductInterpreterError ( information : String , node : HasSourceLocation ?) : CompilationError","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / CompilationError CompilationError \u00b6 [jvm] abstract class CompilationError : Error , PrettyPrintable Superclass of all errors caused by bad user input to the compiler. Errors caused by bugs in the compiler do not belong here. They should instead raise a (subclass of) RuntimeException . Constructors \u00b6 Name Summary CompilationError [jvm] fun CompilationError () Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? Inheritors \u00b6 Name IllegalCharacterError IllegalInternalCommunicationError ImpossibleCaseError IncorrectNumberOfArgumentsError InformationFlowError InvalidConstructorCallError JumpOutsideLoopScopeError NameClashError NoApplicableProtocolError NoHostDeclarationsError NoMainError NoProtocolAnnotationError OutParameterInitializationError ParameterDirectionMismatchError ParsingError ProtocolSelectionError TypeMismatchError UndefinedNameError UnexpectedArgumentError UnknownDatatypeError UnknownMethodError ViaductInterpreterError","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/#compilationerror","text":"[jvm] abstract class CompilationError : Error , PrettyPrintable Superclass of all errors caused by bad user input to the compiler. Errors caused by bugs in the compiler do not belong here. They should instead raise a (subclass of) RuntimeException .","title":"CompilationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/#constructors","text":"Name Summary CompilationError [jvm] fun CompilationError ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/#inheritors","text":"Name IllegalCharacterError IllegalInternalCommunicationError ImpossibleCaseError IncorrectNumberOfArgumentsError InformationFlowError InvalidConstructorCallError JumpOutsideLoopScopeError NameClashError NoApplicableProtocolError NoHostDeclarationsError NoMainError NoProtocolAnnotationError OutParameterInitializationError ParameterDirectionMismatchError ParsingError ProtocolSelectionError TypeMismatchError UndefinedNameError UnexpectedArgumentError UnknownDatatypeError UnknownMethodError ViaductInterpreterError","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/-compilation-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / CompilationError / CompilationError CompilationError \u00b6 [jvm] Content fun CompilationError ()","title":" compilation error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/-compilation-error/#compilationerror","text":"[jvm] Content fun CompilationError ()","title":"CompilationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / CompilationError / asDocument asDocument \u00b6 [jvm] Content override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/as-document/#asdocument","text":"[jvm] Content override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / CompilationError / toString toString \u00b6 [jvm] Content override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-compilation-error/to-string/#tostring","text":"[jvm] Content override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ConfidentialityChangingEndorsementError ConfidentialityChangingEndorsementError \u00b6 [jvm] class ConfidentialityChangingEndorsementError ( node : EndorsementNode , from : Label ) : InformationFlowError Thrown when an EndorsementNode modifies confidentiality. Parameters \u00b6 jvm Name Summary node Endorse statement that modifies confidentiality. from Label of the expression being endorsed. Constructors \u00b6 Name Summary ConfidentialityChangingEndorsementError [jvm] fun ConfidentialityChangingEndorsementError (node: EndorsementNode , from: Label )Endorse statement that modifies confidentiality. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/#confidentialitychangingendorsementerror","text":"[jvm] class ConfidentialityChangingEndorsementError ( node : EndorsementNode , from : Label ) : InformationFlowError Thrown when an EndorsementNode modifies confidentiality.","title":"ConfidentialityChangingEndorsementError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/#parameters","text":"jvm Name Summary node Endorse statement that modifies confidentiality. from Label of the expression being endorsed.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/#constructors","text":"Name Summary ConfidentialityChangingEndorsementError [jvm] fun ConfidentialityChangingEndorsementError (node: EndorsementNode , from: Label )Endorse statement that modifies confidentiality.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/-confidentiality-changing-endorsement-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ConfidentialityChangingEndorsementError / ConfidentialityChangingEndorsementError ConfidentialityChangingEndorsementError \u00b6 [jvm] Content fun ConfidentialityChangingEndorsementError (node: EndorsementNode , from: Label ) More info Parameters \u00b6 jvm Name Summary node Endorse statement that modifies confidentiality. from Label of the expression being endorsed.","title":" confidentiality changing endorsement error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/-confidentiality-changing-endorsement-error/#confidentialitychangingendorsementerror","text":"[jvm] Content fun ConfidentialityChangingEndorsementError (node: EndorsementNode , from: Label ) More info","title":"ConfidentialityChangingEndorsementError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-confidentiality-changing-endorsement-error/-confidentiality-changing-endorsement-error/#parameters","text":"jvm Name Summary node Endorse statement that modifies confidentiality. from Label of the expression being endorsed.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IllegalCharacterError IllegalCharacterError \u00b6 [jvm] class IllegalCharacterError ( location : SourceLocation ) : CompilationError Thrown when the lexer encounters an illegal character. Parameters \u00b6 jvm Name Summary location Source location of the illegal character. Constructors \u00b6 Name Summary IllegalCharacterError [jvm] fun IllegalCharacterError (location: SourceLocation )Source location of the illegal character. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/#illegalcharactererror","text":"[jvm] class IllegalCharacterError ( location : SourceLocation ) : CompilationError Thrown when the lexer encounters an illegal character.","title":"IllegalCharacterError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/#parameters","text":"jvm Name Summary location Source location of the illegal character.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/#constructors","text":"Name Summary IllegalCharacterError [jvm] fun IllegalCharacterError (location: SourceLocation )Source location of the illegal character.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/-illegal-character-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IllegalCharacterError / IllegalCharacterError IllegalCharacterError \u00b6 [jvm] Content fun IllegalCharacterError (location: SourceLocation ) More info Parameters \u00b6 jvm Name Summary location Source location of the illegal character.","title":" illegal character error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/-illegal-character-error/#illegalcharactererror","text":"[jvm] Content fun IllegalCharacterError (location: SourceLocation ) More info","title":"IllegalCharacterError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-character-error/-illegal-character-error/#parameters","text":"jvm Name Summary location Source location of the illegal character.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IllegalInternalCommunicationError IllegalInternalCommunicationError \u00b6 [jvm] class IllegalInternalCommunicationError ( illegalStatement : InternalCommunicationNode ) : CompilationError Thrown when a Protocol (usually an Ideal protocol) contains an InternalCommunicationNode when it is not allowed to do so. These protocols are only allowed to communicate with hosts, not other protocols, so they should be using ExternalCommunicationNode s. Parameters \u00b6 jvm Name Summary process Protocol containing the illegal statement. illegalStatement The illegal communication statement. Constructors \u00b6 Name Summary IllegalInternalCommunicationError [jvm] fun IllegalInternalCommunicationError (illegalStatement: InternalCommunicationNode )Protocol containing the illegal statement. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/#illegalinternalcommunicationerror","text":"[jvm] class IllegalInternalCommunicationError ( illegalStatement : InternalCommunicationNode ) : CompilationError Thrown when a Protocol (usually an Ideal protocol) contains an InternalCommunicationNode when it is not allowed to do so. These protocols are only allowed to communicate with hosts, not other protocols, so they should be using ExternalCommunicationNode s.","title":"IllegalInternalCommunicationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/#parameters","text":"jvm Name Summary process Protocol containing the illegal statement. illegalStatement The illegal communication statement.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/#constructors","text":"Name Summary IllegalInternalCommunicationError [jvm] fun IllegalInternalCommunicationError (illegalStatement: InternalCommunicationNode )Protocol containing the illegal statement.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/-illegal-internal-communication-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IllegalInternalCommunicationError / IllegalInternalCommunicationError IllegalInternalCommunicationError \u00b6 [jvm] Content fun IllegalInternalCommunicationError (illegalStatement: InternalCommunicationNode ) More info Parameters \u00b6 jvm Name Summary process Protocol containing the illegal statement. illegalStatement The illegal communication statement.","title":" illegal internal communication error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/-illegal-internal-communication-error/#illegalinternalcommunicationerror","text":"[jvm] Content fun IllegalInternalCommunicationError (illegalStatement: InternalCommunicationNode ) More info","title":"IllegalInternalCommunicationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-illegal-internal-communication-error/-illegal-internal-communication-error/#parameters","text":"jvm Name Summary process Protocol containing the illegal statement. illegalStatement The illegal communication statement.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ImpossibleCaseError ImpossibleCaseError \u00b6 [jvm] abstract class ImpossibleCaseError : CompilationError Thrown when the compiler reaches an impossible state. Constructors \u00b6 Name Summary ImpossibleCaseError [jvm] fun ImpossibleCaseError () Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? Inheritors \u00b6 Name UnknownObjectDeclarationError","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/#impossiblecaseerror","text":"[jvm] abstract class ImpossibleCaseError : CompilationError Thrown when the compiler reaches an impossible state.","title":"ImpossibleCaseError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/#constructors","text":"Name Summary ImpossibleCaseError [jvm] fun ImpossibleCaseError ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/#inheritors","text":"Name UnknownObjectDeclarationError","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/-impossible-case-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ImpossibleCaseError / ImpossibleCaseError ImpossibleCaseError \u00b6 [jvm] Content fun ImpossibleCaseError ()","title":" impossible case error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-impossible-case-error/-impossible-case-error/#impossiblecaseerror","text":"[jvm] Content fun ImpossibleCaseError ()","title":"ImpossibleCaseError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IncorrectNumberOfArgumentsError IncorrectNumberOfArgumentsError \u00b6 [jvm] class IncorrectNumberOfArgumentsError ( method : Located < Name >, expected : Int , actual : Arguments <*>) : CompilationError Thrown when a function or a method is given too many or too few arguments. Parameters \u00b6 jvm Name Summary expected The number of arguments expected by the method. actual The arguments that are given to the method. Constructors \u00b6 Name Summary IncorrectNumberOfArgumentsError [jvm] fun IncorrectNumberOfArgumentsError (method: Located < Name >, expected: Int , actual: Arguments <*>)The number of arguments expected by the method. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/#incorrectnumberofargumentserror","text":"[jvm] class IncorrectNumberOfArgumentsError ( method : Located < Name >, expected : Int , actual : Arguments <*>) : CompilationError Thrown when a function or a method is given too many or too few arguments.","title":"IncorrectNumberOfArgumentsError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/#parameters","text":"jvm Name Summary expected The number of arguments expected by the method. actual The arguments that are given to the method.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/#constructors","text":"Name Summary IncorrectNumberOfArgumentsError [jvm] fun IncorrectNumberOfArgumentsError (method: Located < Name >, expected: Int , actual: Arguments <*>)The number of arguments expected by the method.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/-incorrect-number-of-arguments-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IncorrectNumberOfArgumentsError / IncorrectNumberOfArgumentsError IncorrectNumberOfArgumentsError \u00b6 [jvm] Content fun IncorrectNumberOfArgumentsError (method: Located < Name >, expected: Int , actual: Arguments <*>) More info Parameters \u00b6 jvm Name Summary expected The number of arguments expected by the method. actual The arguments that are given to the method.","title":" incorrect number of arguments error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/-incorrect-number-of-arguments-error/#incorrectnumberofargumentserror","text":"[jvm] Content fun IncorrectNumberOfArgumentsError (method: Located < Name >, expected: Int , actual: Arguments <*>) More info","title":"IncorrectNumberOfArgumentsError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-incorrect-number-of-arguments-error/-incorrect-number-of-arguments-error/#parameters","text":"jvm Name Summary expected The number of arguments expected by the method. actual The arguments that are given to the method.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InformationFlowError InformationFlowError \u00b6 [jvm] abstract class InformationFlowError : CompilationError Superclass of errors related to information flow. Constructors \u00b6 Name Summary InformationFlowError [jvm] fun InformationFlowError () Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? Inheritors \u00b6 Name ConfidentialityChangingEndorsementError InsecureControlFlowError InsecureDataFlowError IntegrityChangingDeclassificationError LabelMismatchError MalleableDowngradeError","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/#informationflowerror","text":"[jvm] abstract class InformationFlowError : CompilationError Superclass of errors related to information flow.","title":"InformationFlowError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/#constructors","text":"Name Summary InformationFlowError [jvm] fun InformationFlowError ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/#inheritors","text":"Name ConfidentialityChangingEndorsementError InsecureControlFlowError InsecureDataFlowError IntegrityChangingDeclassificationError LabelMismatchError MalleableDowngradeError","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/-information-flow-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InformationFlowError / InformationFlowError InformationFlowError \u00b6 [jvm] Content fun InformationFlowError ()","title":" information flow error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-information-flow-error/-information-flow-error/#informationflowerror","text":"[jvm] Content fun InformationFlowError ()","title":"InformationFlowError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InsecureControlFlowError InsecureControlFlowError \u00b6 [jvm] class InsecureControlFlowError ( node : HasSourceLocation , nodeLabel : Label , pc : Label ) : InformationFlowError Thrown when the control flow influences data in a way that violates security. Parameters \u00b6 jvm Name Summary node AST node influenced by control flow. nodeLabel Security label of the node. pc Security label assigned to control flow. Constructors \u00b6 Name Summary InsecureControlFlowError [jvm] fun InsecureControlFlowError (node: HasSourceLocation , nodeLabel: Label , pc: Label )AST node influenced by control flow. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/#insecurecontrolflowerror","text":"[jvm] class InsecureControlFlowError ( node : HasSourceLocation , nodeLabel : Label , pc : Label ) : InformationFlowError Thrown when the control flow influences data in a way that violates security.","title":"InsecureControlFlowError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/#parameters","text":"jvm Name Summary node AST node influenced by control flow. nodeLabel Security label of the node. pc Security label assigned to control flow.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/#constructors","text":"Name Summary InsecureControlFlowError [jvm] fun InsecureControlFlowError (node: HasSourceLocation , nodeLabel: Label , pc: Label )AST node influenced by control flow.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/-insecure-control-flow-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InsecureControlFlowError / InsecureControlFlowError InsecureControlFlowError \u00b6 [jvm] Content fun InsecureControlFlowError (node: HasSourceLocation , nodeLabel: Label , pc: Label ) More info Parameters \u00b6 jvm Name Summary node AST node influenced by control flow. nodeLabel Security label of the node. pc Security label assigned to control flow.","title":" insecure control flow error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/-insecure-control-flow-error/#insecurecontrolflowerror","text":"[jvm] Content fun InsecureControlFlowError (node: HasSourceLocation , nodeLabel: Label , pc: Label ) More info","title":"InsecureControlFlowError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-control-flow-error/-insecure-control-flow-error/#parameters","text":"jvm Name Summary node AST node influenced by control flow. nodeLabel Security label of the node. pc Security label assigned to control flow.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-data-flow-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InsecureDataFlowError InsecureDataFlowError \u00b6 [jvm] class InsecureDataFlowError ( node : HasSourceLocation , nodeLabel : Label , to : Label ) : InformationFlowError Thrown when a term's output flows to a location that would violate information flow security. Constructors \u00b6 Name Summary InsecureDataFlowError [jvm] fun InsecureDataFlowError (node: HasSourceLocation , nodeLabel: Label , to: Label ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-data-flow-error/#insecuredataflowerror","text":"[jvm] class InsecureDataFlowError ( node : HasSourceLocation , nodeLabel : Label , to : Label ) : InformationFlowError Thrown when a term's output flows to a location that would violate information flow security.","title":"InsecureDataFlowError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-data-flow-error/#constructors","text":"Name Summary InsecureDataFlowError [jvm] fun InsecureDataFlowError (node: HasSourceLocation , nodeLabel: Label , to: Label )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-data-flow-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-data-flow-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-data-flow-error/-insecure-data-flow-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InsecureDataFlowError / InsecureDataFlowError InsecureDataFlowError \u00b6 [jvm] Content fun InsecureDataFlowError (node: HasSourceLocation , nodeLabel: Label , to: Label )","title":" insecure data flow error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-insecure-data-flow-error/-insecure-data-flow-error/#insecuredataflowerror","text":"[jvm] Content fun InsecureDataFlowError (node: HasSourceLocation , nodeLabel: Label , to: Label )","title":"InsecureDataFlowError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IntegrityChangingDeclassificationError IntegrityChangingDeclassificationError \u00b6 [jvm] class IntegrityChangingDeclassificationError ( node : DeclassificationNode , from : Label ) : InformationFlowError Thrown when a DeclassificationNode modifies confidentiality. Parameters \u00b6 jvm Name Summary node Declassify statement that modifies confidentiality. from Label of the expression being declassified. Constructors \u00b6 Name Summary IntegrityChangingDeclassificationError [jvm] fun IntegrityChangingDeclassificationError (node: DeclassificationNode , from: Label )Declassify statement that modifies confidentiality. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/#integritychangingdeclassificationerror","text":"[jvm] class IntegrityChangingDeclassificationError ( node : DeclassificationNode , from : Label ) : InformationFlowError Thrown when a DeclassificationNode modifies confidentiality.","title":"IntegrityChangingDeclassificationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/#parameters","text":"jvm Name Summary node Declassify statement that modifies confidentiality. from Label of the expression being declassified.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/#constructors","text":"Name Summary IntegrityChangingDeclassificationError [jvm] fun IntegrityChangingDeclassificationError (node: DeclassificationNode , from: Label )Declassify statement that modifies confidentiality.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/-integrity-changing-declassification-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / IntegrityChangingDeclassificationError / IntegrityChangingDeclassificationError IntegrityChangingDeclassificationError \u00b6 [jvm] Content fun IntegrityChangingDeclassificationError (node: DeclassificationNode , from: Label ) More info Parameters \u00b6 jvm Name Summary node Declassify statement that modifies confidentiality. from Label of the expression being declassified.","title":" integrity changing declassification error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/-integrity-changing-declassification-error/#integritychangingdeclassificationerror","text":"[jvm] Content fun IntegrityChangingDeclassificationError (node: DeclassificationNode , from: Label ) More info","title":"IntegrityChangingDeclassificationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-integrity-changing-declassification-error/-integrity-changing-declassification-error/#parameters","text":"jvm Name Summary node Declassify statement that modifies confidentiality. from Label of the expression being declassified.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-invalid-constructor-call-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InvalidConstructorCallError InvalidConstructorCallError \u00b6 [jvm] class InvalidConstructorCallError ( node : Node , constructorNeeded : Boolean ) : CompilationError Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-invalid-constructor-call-error/#invalidconstructorcallerror","text":"[jvm] class InvalidConstructorCallError ( node : Node , constructorNeeded : Boolean ) : CompilationError","title":"InvalidConstructorCallError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-invalid-constructor-call-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-invalid-constructor-call-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-invalid-constructor-call-error/-invalid-constructor-call-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / InvalidConstructorCallError / InvalidConstructorCallError InvalidConstructorCallError \u00b6 [jvm] Content fun InvalidConstructorCallError (node: Node , constructorNeeded: Boolean = false)","title":" invalid constructor call error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-invalid-constructor-call-error/-invalid-constructor-call-error/#invalidconstructorcallerror","text":"[jvm] Content fun InvalidConstructorCallError (node: Node , constructorNeeded: Boolean = false)","title":"InvalidConstructorCallError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / JumpOutsideLoopScopeError JumpOutsideLoopScopeError \u00b6 [jvm] class JumpOutsideLoopScopeError ( node : HasSourceLocation ) : CompilationError Thrown when a break, continue, or a similar statement occurs outside the scope of a loop. Constructors \u00b6 Name Summary JumpOutsideLoopScopeError [jvm] fun JumpOutsideLoopScopeError (node: HasSourceLocation ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? node [jvm] val node : HasSourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/#jumpoutsideloopscopeerror","text":"[jvm] class JumpOutsideLoopScopeError ( node : HasSourceLocation ) : CompilationError Thrown when a break, continue, or a similar statement occurs outside the scope of a loop.","title":"JumpOutsideLoopScopeError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/#constructors","text":"Name Summary JumpOutsideLoopScopeError [jvm] fun JumpOutsideLoopScopeError (node: HasSourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? node [jvm] val node : HasSourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/-jump-outside-loop-scope-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / JumpOutsideLoopScopeError / JumpOutsideLoopScopeError JumpOutsideLoopScopeError \u00b6 [jvm] Content fun JumpOutsideLoopScopeError (node: HasSourceLocation )","title":" jump outside loop scope error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/-jump-outside-loop-scope-error/#jumpoutsideloopscopeerror","text":"[jvm] Content fun JumpOutsideLoopScopeError (node: HasSourceLocation )","title":"JumpOutsideLoopScopeError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/node/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / JumpOutsideLoopScopeError / node node \u00b6 [jvm] Content val node : HasSourceLocation","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-jump-outside-loop-scope-error/node/#node","text":"[jvm] Content val node : HasSourceLocation","title":"node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / LabelMismatchError LabelMismatchError \u00b6 [jvm] class LabelMismatchError ( node : HasSourceLocation , actualLabel : Label , expectedLabel : Label ) : InformationFlowError Thrown when the inferred label of a node does not match its annotated label. Parameters \u00b6 jvm Name Summary actualLabel Inferred label for the node. expectedLabel Annotated label for the node. Constructors \u00b6 Name Summary LabelMismatchError [jvm] fun LabelMismatchError (node: HasSourceLocation , actualLabel: Label , expectedLabel: Label )Inferred label for the node. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/#labelmismatcherror","text":"[jvm] class LabelMismatchError ( node : HasSourceLocation , actualLabel : Label , expectedLabel : Label ) : InformationFlowError Thrown when the inferred label of a node does not match its annotated label.","title":"LabelMismatchError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/#parameters","text":"jvm Name Summary actualLabel Inferred label for the node. expectedLabel Annotated label for the node.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/#constructors","text":"Name Summary LabelMismatchError [jvm] fun LabelMismatchError (node: HasSourceLocation , actualLabel: Label , expectedLabel: Label )Inferred label for the node.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/-label-mismatch-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / LabelMismatchError / LabelMismatchError LabelMismatchError \u00b6 [jvm] Content fun LabelMismatchError (node: HasSourceLocation , actualLabel: Label , expectedLabel: Label ) More info Parameters \u00b6 jvm Name Summary actualLabel Inferred label for the node. expectedLabel Annotated label for the node.","title":" label mismatch error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/-label-mismatch-error/#labelmismatcherror","text":"[jvm] Content fun LabelMismatchError (node: HasSourceLocation , actualLabel: Label , expectedLabel: Label ) More info","title":"LabelMismatchError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-label-mismatch-error/-label-mismatch-error/#parameters","text":"jvm Name Summary actualLabel Inferred label for the node. expectedLabel Annotated label for the node.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-malleable-downgrade-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / MalleableDowngradeError MalleableDowngradeError \u00b6 [jvm] class MalleableDowngradeError ( node : DowngradeNode ) : InformationFlowError Thrown when a DowngradeNode node violate the non-malleable information flow control restriction. Constructors \u00b6 Name Summary MalleableDowngradeError [jvm] fun MalleableDowngradeError (node: DowngradeNode ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-malleable-downgrade-error/#malleabledowngradeerror","text":"[jvm] class MalleableDowngradeError ( node : DowngradeNode ) : InformationFlowError Thrown when a DowngradeNode node violate the non-malleable information flow control restriction.","title":"MalleableDowngradeError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-malleable-downgrade-error/#constructors","text":"Name Summary MalleableDowngradeError [jvm] fun MalleableDowngradeError (node: DowngradeNode )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-malleable-downgrade-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-malleable-downgrade-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-malleable-downgrade-error/-malleable-downgrade-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / MalleableDowngradeError / MalleableDowngradeError MalleableDowngradeError \u00b6 [jvm] Content fun MalleableDowngradeError (node: DowngradeNode )","title":" malleable downgrade error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-malleable-downgrade-error/-malleable-downgrade-error/#malleabledowngradeerror","text":"[jvm] Content fun MalleableDowngradeError (node: DowngradeNode )","title":"MalleableDowngradeError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-name-clash-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NameClashError NameClashError \u00b6 [jvm] class NameClashError ( name : Name , firstDeclaration : SourceLocation , secondDeclaration : SourceLocation ) : CompilationError Thrown when a Name has multiple declarations. Constructors \u00b6 Name Summary NameClashError [jvm] fun NameClashError (name: Name , firstDeclaration: SourceLocation , secondDeclaration: SourceLocation ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-name-clash-error/#nameclasherror","text":"[jvm] class NameClashError ( name : Name , firstDeclaration : SourceLocation , secondDeclaration : SourceLocation ) : CompilationError Thrown when a Name has multiple declarations.","title":"NameClashError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-name-clash-error/#constructors","text":"Name Summary NameClashError [jvm] fun NameClashError (name: Name , firstDeclaration: SourceLocation , secondDeclaration: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-name-clash-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-name-clash-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-name-clash-error/-name-clash-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NameClashError / NameClashError NameClashError \u00b6 [jvm] Content fun NameClashError (name: Name , firstDeclaration: SourceLocation , secondDeclaration: SourceLocation )","title":" name clash error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-name-clash-error/-name-clash-error/#nameclasherror","text":"[jvm] Content fun NameClashError (name: Name , firstDeclaration: SourceLocation , secondDeclaration: SourceLocation )","title":"NameClashError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-applicable-protocol-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoApplicableProtocolError NoApplicableProtocolError \u00b6 [jvm] class NoApplicableProtocolError ( node : HasSourceLocation ) : CompilationError Thrown when there is no Protocol that can be assigned to a node. Constructors \u00b6 Name Summary NoApplicableProtocolError [jvm] fun NoApplicableProtocolError (node: HasSourceLocation ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-applicable-protocol-error/#noapplicableprotocolerror","text":"[jvm] class NoApplicableProtocolError ( node : HasSourceLocation ) : CompilationError Thrown when there is no Protocol that can be assigned to a node.","title":"NoApplicableProtocolError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-applicable-protocol-error/#constructors","text":"Name Summary NoApplicableProtocolError [jvm] fun NoApplicableProtocolError (node: HasSourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-applicable-protocol-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-applicable-protocol-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-applicable-protocol-error/-no-applicable-protocol-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoApplicableProtocolError / NoApplicableProtocolError NoApplicableProtocolError \u00b6 [jvm] Content fun NoApplicableProtocolError (node: HasSourceLocation )","title":" no applicable protocol error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-applicable-protocol-error/-no-applicable-protocol-error/#noapplicableprotocolerror","text":"[jvm] Content fun NoApplicableProtocolError (node: HasSourceLocation )","title":"NoApplicableProtocolError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-host-declarations-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoHostDeclarationsError NoHostDeclarationsError \u00b6 [jvm] class NoHostDeclarationsError ( source : String ) : CompilationError Thrown when trying to compile a program with no host declarations. Constructors \u00b6 Name Summary NoHostDeclarationsError [jvm] fun NoHostDeclarationsError (source: String ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-host-declarations-error/#nohostdeclarationserror","text":"[jvm] class NoHostDeclarationsError ( source : String ) : CompilationError Thrown when trying to compile a program with no host declarations.","title":"NoHostDeclarationsError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-host-declarations-error/#constructors","text":"Name Summary NoHostDeclarationsError [jvm] fun NoHostDeclarationsError (source: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-host-declarations-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-host-declarations-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-host-declarations-error/-no-host-declarations-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoHostDeclarationsError / NoHostDeclarationsError NoHostDeclarationsError \u00b6 [jvm] Content fun NoHostDeclarationsError (source: String )","title":" no host declarations error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-host-declarations-error/-no-host-declarations-error/#nohostdeclarationserror","text":"[jvm] Content fun NoHostDeclarationsError (source: String )","title":"NoHostDeclarationsError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-main-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoMainError NoMainError \u00b6 [jvm] class NoMainError ( source : String ) : CompilationError Thrown when trying to compile a program with no main. Constructors \u00b6 Name Summary NoMainError [jvm] fun NoMainError (source: String ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-main-error/#nomainerror","text":"[jvm] class NoMainError ( source : String ) : CompilationError Thrown when trying to compile a program with no main.","title":"NoMainError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-main-error/#constructors","text":"Name Summary NoMainError [jvm] fun NoMainError (source: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-main-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-main-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-main-error/-no-main-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoMainError / NoMainError NoMainError \u00b6 [jvm] Content fun NoMainError (source: String )","title":" no main error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-main-error/-no-main-error/#nomainerror","text":"[jvm] Content fun NoMainError (source: String )","title":"NoMainError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-annotation-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoProtocolAnnotationError NoProtocolAnnotationError \u00b6 [jvm] class NoProtocolAnnotationError ( node : Node ) : CompilationError Thrown when a required protocol annotation in node is not found. Constructors \u00b6 Name Summary NoProtocolAnnotationError [jvm] fun NoProtocolAnnotationError (node: Node ) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-annotation-error/#noprotocolannotationerror","text":"[jvm] class NoProtocolAnnotationError ( node : Node ) : CompilationError Thrown when a required protocol annotation in node is not found.","title":"NoProtocolAnnotationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-annotation-error/#constructors","text":"Name Summary NoProtocolAnnotationError [jvm] fun NoProtocolAnnotationError (node: Node )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-annotation-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-annotation-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-annotation-error/-no-protocol-annotation-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoProtocolAnnotationError / NoProtocolAnnotationError NoProtocolAnnotationError \u00b6 [jvm] Content fun NoProtocolAnnotationError (node: Node )","title":" no protocol annotation error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-annotation-error/-no-protocol-annotation-error/#noprotocolannotationerror","text":"[jvm] Content fun NoProtocolAnnotationError (node: Node )","title":"NoProtocolAnnotationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoProtocolIndexMapping NoProtocolIndexMapping \u00b6 [jvm] class NoProtocolIndexMapping ( protocolIndex : Int ) : ProtocolSelectionError Thrown when a protocol index is not mapped to a corresponding protocol. Parameters \u00b6 jvm Name Summary protocolIndex : The protocol index without a mapping to an actual protocol. Constructors \u00b6 Name Summary NoProtocolIndexMapping [jvm] fun NoProtocolIndexMapping (protocolIndex: Int ): The protocol index without a mapping to an actual protocol. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/#noprotocolindexmapping","text":"[jvm] class NoProtocolIndexMapping ( protocolIndex : Int ) : ProtocolSelectionError Thrown when a protocol index is not mapped to a corresponding protocol.","title":"NoProtocolIndexMapping"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/#parameters","text":"jvm Name Summary protocolIndex : The protocol index without a mapping to an actual protocol.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/#constructors","text":"Name Summary NoProtocolIndexMapping [jvm] fun NoProtocolIndexMapping (protocolIndex: Int ): The protocol index without a mapping to an actual protocol.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/-no-protocol-index-mapping/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoProtocolIndexMapping / NoProtocolIndexMapping NoProtocolIndexMapping \u00b6 [jvm] Content fun NoProtocolIndexMapping (protocolIndex: Int ) More info Parameters \u00b6 jvm Name Summary protocolIndex : The protocol index without a mapping to an actual protocol.","title":" no protocol index mapping"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/-no-protocol-index-mapping/#noprotocolindexmapping","text":"[jvm] Content fun NoProtocolIndexMapping (protocolIndex: Int ) More info","title":"NoProtocolIndexMapping"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-protocol-index-mapping/-no-protocol-index-mapping/#parameters","text":"jvm Name Summary protocolIndex : The protocol index without a mapping to an actual protocol.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-selection-solution-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoSelectionSolutionError NoSelectionSolutionError \u00b6 [jvm] class NoSelectionSolutionError : ProtocolSelectionError Thrown when the protocol selection cannot find a solution. Constructors \u00b6 Name Summary NoSelectionSolutionError [jvm] fun NoSelectionSolutionError () Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-selection-solution-error/#noselectionsolutionerror","text":"[jvm] class NoSelectionSolutionError : ProtocolSelectionError Thrown when the protocol selection cannot find a solution.","title":"NoSelectionSolutionError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-selection-solution-error/#constructors","text":"Name Summary NoSelectionSolutionError [jvm] fun NoSelectionSolutionError ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-selection-solution-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-selection-solution-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-selection-solution-error/-no-selection-solution-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoSelectionSolutionError / NoSelectionSolutionError NoSelectionSolutionError \u00b6 [jvm] Content fun NoSelectionSolutionError ()","title":" no selection solution error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-selection-solution-error/-no-selection-solution-error/#noselectionsolutionerror","text":"[jvm] Content fun NoSelectionSolutionError ()","title":"NoSelectionSolutionError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoVariableSelectionSolutionError NoVariableSelectionSolutionError \u00b6 [jvm] class NoVariableSelectionSolutionError ( f : FunctionName , v : Variable ) : ProtocolSelectionError Thrown when the protocol selection does not have a solution for a program variable. Parameters \u00b6 jvm Name Summary f : The name of the function enclosing the variable. v : The name of variable. Constructors \u00b6 Name Summary NoVariableSelectionSolutionError [jvm] fun NoVariableSelectionSolutionError (f: FunctionName , v: Variable ): The name of the function enclosing the variable. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/#novariableselectionsolutionerror","text":"[jvm] class NoVariableSelectionSolutionError ( f : FunctionName , v : Variable ) : ProtocolSelectionError Thrown when the protocol selection does not have a solution for a program variable.","title":"NoVariableSelectionSolutionError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/#parameters","text":"jvm Name Summary f : The name of the function enclosing the variable. v : The name of variable.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/#constructors","text":"Name Summary NoVariableSelectionSolutionError [jvm] fun NoVariableSelectionSolutionError (f: FunctionName , v: Variable ): The name of the function enclosing the variable.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/-no-variable-selection-solution-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / NoVariableSelectionSolutionError / NoVariableSelectionSolutionError NoVariableSelectionSolutionError \u00b6 [jvm] Content fun NoVariableSelectionSolutionError (f: FunctionName , v: Variable ) More info Parameters \u00b6 jvm Name Summary f : The name of the function enclosing the variable. v : The name of variable.","title":" no variable selection solution error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/-no-variable-selection-solution-error/#novariableselectionsolutionerror","text":"[jvm] Content fun NoVariableSelectionSolutionError (f: FunctionName , v: Variable ) More info","title":"NoVariableSelectionSolutionError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-no-variable-selection-solution-error/-no-variable-selection-solution-error/#parameters","text":"jvm Name Summary f : The name of the function enclosing the variable. v : The name of variable.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-out-parameter-initialization-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / OutParameterInitializationError OutParameterInitializationError \u00b6 [jvm] class OutParameterInitializationError ( parameter : ParameterNode , useSite : Node ?) : CompilationError Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-out-parameter-initialization-error/#outparameterinitializationerror","text":"[jvm] class OutParameterInitializationError ( parameter : ParameterNode , useSite : Node ?) : CompilationError","title":"OutParameterInitializationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-out-parameter-initialization-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-out-parameter-initialization-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-out-parameter-initialization-error/-out-parameter-initialization-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / OutParameterInitializationError / OutParameterInitializationError OutParameterInitializationError \u00b6 [jvm] Content fun OutParameterInitializationError (parameter: ParameterNode , useSite: Node ? = null)","title":" out parameter initialization error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-out-parameter-initialization-error/-out-parameter-initialization-error/#outparameterinitializationerror","text":"[jvm] Content fun OutParameterInitializationError (parameter: ParameterNode , useSite: Node ? = null)","title":"OutParameterInitializationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parameter-direction-mismatch-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ParameterDirectionMismatchError ParameterDirectionMismatchError \u00b6 [jvm] class ParameterDirectionMismatchError ( parameter : ParameterNode , argument : FunctionArgumentNode ) : CompilationError Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parameter-direction-mismatch-error/#parameterdirectionmismatcherror","text":"[jvm] class ParameterDirectionMismatchError ( parameter : ParameterNode , argument : FunctionArgumentNode ) : CompilationError","title":"ParameterDirectionMismatchError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parameter-direction-mismatch-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parameter-direction-mismatch-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parameter-direction-mismatch-error/-parameter-direction-mismatch-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ParameterDirectionMismatchError / ParameterDirectionMismatchError ParameterDirectionMismatchError \u00b6 [jvm] Content fun ParameterDirectionMismatchError (parameter: ParameterNode , argument: FunctionArgumentNode )","title":" parameter direction mismatch error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parameter-direction-mismatch-error/-parameter-direction-mismatch-error/#parameterdirectionmismatcherror","text":"[jvm] Content fun ParameterDirectionMismatchError (parameter: ParameterNode , argument: FunctionArgumentNode )","title":"ParameterDirectionMismatchError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ParsingError ParsingError \u00b6 [jvm] class ParsingError ( location : SourceLocation , actualToken : String , expectedTokens : List < String >) : CompilationError Thrown when the parser runs into an unexpected token. Parameters \u00b6 jvm Name Summary location Source location of the unexpected token. actualToken Token that was encountered. expectedTokens Tokens that would have been valid. Constructors \u00b6 Name Summary ParsingError [jvm] fun ParsingError (location: SourceLocation , actualToken: String , expectedTokens: List < String >)Source location of the unexpected token. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/#parsingerror","text":"[jvm] class ParsingError ( location : SourceLocation , actualToken : String , expectedTokens : List < String >) : CompilationError Thrown when the parser runs into an unexpected token.","title":"ParsingError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/#parameters","text":"jvm Name Summary location Source location of the unexpected token. actualToken Token that was encountered. expectedTokens Tokens that would have been valid.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/#constructors","text":"Name Summary ParsingError [jvm] fun ParsingError (location: SourceLocation , actualToken: String , expectedTokens: List < String >)Source location of the unexpected token.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/-parsing-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ParsingError / ParsingError ParsingError \u00b6 [jvm] Content fun ParsingError (location: SourceLocation , actualToken: String , expectedTokens: List < String >) More info Parameters \u00b6 jvm Name Summary location Source location of the unexpected token. actualToken Token that was encountered. expectedTokens Tokens that would have been valid.","title":" parsing error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/-parsing-error/#parsingerror","text":"[jvm] Content fun ParsingError (location: SourceLocation , actualToken: String , expectedTokens: List < String >) More info","title":"ParsingError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-parsing-error/-parsing-error/#parameters","text":"jvm Name Summary location Source location of the unexpected token. actualToken Token that was encountered. expectedTokens Tokens that would have been valid.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ProtocolSelectionError ProtocolSelectionError \u00b6 [jvm] abstract class ProtocolSelectionError : CompilationError Thrown when an error occurs during protocol selection. Constructors \u00b6 Name Summary ProtocolSelectionError [jvm] fun ProtocolSelectionError () Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? Inheritors \u00b6 Name NoSelectionSolutionError NoVariableSelectionSolutionError NoProtocolIndexMapping","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/#protocolselectionerror","text":"[jvm] abstract class ProtocolSelectionError : CompilationError Thrown when an error occurs during protocol selection.","title":"ProtocolSelectionError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/#constructors","text":"Name Summary ProtocolSelectionError [jvm] fun ProtocolSelectionError ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/#inheritors","text":"Name NoSelectionSolutionError NoVariableSelectionSolutionError NoProtocolIndexMapping","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/-protocol-selection-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ProtocolSelectionError / ProtocolSelectionError ProtocolSelectionError \u00b6 [jvm] Content fun ProtocolSelectionError ()","title":" protocol selection error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-protocol-selection-error/-protocol-selection-error/#protocolselectionerror","text":"[jvm] Content fun ProtocolSelectionError ()","title":"ProtocolSelectionError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / TypeMismatchError TypeMismatchError \u00b6 [jvm] class TypeMismatchError ( node : HasSourceLocation , actualType : Type , expectedType : Type ) : CompilationError Thrown when the inferred type of an AST node does not match its expected type. Parameters \u00b6 jvm Name Summary node Node that has the incorrect type. actualType Inferred type for the node. expectedType Type the node should have. Constructors \u00b6 Name Summary TypeMismatchError [jvm] fun TypeMismatchError (node: HasSourceLocation , actualType: Type , expectedType: Type )Node that has the incorrect type. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/#typemismatcherror","text":"[jvm] class TypeMismatchError ( node : HasSourceLocation , actualType : Type , expectedType : Type ) : CompilationError Thrown when the inferred type of an AST node does not match its expected type.","title":"TypeMismatchError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/#parameters","text":"jvm Name Summary node Node that has the incorrect type. actualType Inferred type for the node. expectedType Type the node should have.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/#constructors","text":"Name Summary TypeMismatchError [jvm] fun TypeMismatchError (node: HasSourceLocation , actualType: Type , expectedType: Type )Node that has the incorrect type.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/-type-mismatch-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / TypeMismatchError / TypeMismatchError TypeMismatchError \u00b6 [jvm] Content fun TypeMismatchError (node: HasSourceLocation , actualType: Type , expectedType: Type ) More info Parameters \u00b6 jvm Name Summary node Node that has the incorrect type. actualType Inferred type for the node. expectedType Type the node should have.","title":" type mismatch error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/-type-mismatch-error/#typemismatcherror","text":"[jvm] Content fun TypeMismatchError (node: HasSourceLocation , actualType: Type , expectedType: Type ) More info","title":"TypeMismatchError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-type-mismatch-error/-type-mismatch-error/#parameters","text":"jvm Name Summary node Node that has the incorrect type. actualType Inferred type for the node. expectedType Type the node should have.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-undefined-name-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UndefinedNameError UndefinedNameError \u00b6 [jvm] class UndefinedNameError ( name : Located < Name >) : CompilationError Thrown when a Name is referenced before it is defined. Constructors \u00b6 Name Summary UndefinedNameError [jvm] fun UndefinedNameError (name: Located < Name >) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-undefined-name-error/#undefinednameerror","text":"[jvm] class UndefinedNameError ( name : Located < Name >) : CompilationError Thrown when a Name is referenced before it is defined.","title":"UndefinedNameError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-undefined-name-error/#constructors","text":"Name Summary UndefinedNameError [jvm] fun UndefinedNameError (name: Located < Name >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-undefined-name-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-undefined-name-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-undefined-name-error/-undefined-name-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UndefinedNameError / UndefinedNameError UndefinedNameError \u00b6 [jvm] Content fun UndefinedNameError (name: Located < Name >)","title":" undefined name error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-undefined-name-error/-undefined-name-error/#undefinednameerror","text":"[jvm] Content fun UndefinedNameError (name: Located < Name >)","title":"UndefinedNameError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unexpected-argument-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnexpectedArgumentError UnexpectedArgumentError \u00b6 [jvm] class UnexpectedArgumentError ( name : Located < ArgumentLabel >) : CompilationError Thrown when a function is given an extra argument. Constructors \u00b6 Name Summary UnexpectedArgumentError [jvm] fun UnexpectedArgumentError (name: Located < ArgumentLabel >) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unexpected-argument-error/#unexpectedargumenterror","text":"[jvm] class UnexpectedArgumentError ( name : Located < ArgumentLabel >) : CompilationError Thrown when a function is given an extra argument.","title":"UnexpectedArgumentError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unexpected-argument-error/#constructors","text":"Name Summary UnexpectedArgumentError [jvm] fun UnexpectedArgumentError (name: Located < ArgumentLabel >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unexpected-argument-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unexpected-argument-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unexpected-argument-error/-unexpected-argument-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnexpectedArgumentError / UnexpectedArgumentError UnexpectedArgumentError \u00b6 [jvm] Content fun UnexpectedArgumentError (name: Located < ArgumentLabel >)","title":" unexpected argument error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unexpected-argument-error/-unexpected-argument-error/#unexpectedargumenterror","text":"[jvm] Content fun UnexpectedArgumentError (name: Located < ArgumentLabel >)","title":"UnexpectedArgumentError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnknownDatatypeError UnknownDatatypeError \u00b6 [jvm] class UnknownDatatypeError ( objectName : ObjectVariableNode , className : ClassName ) : CompilationError Thrown when an object is declared with an unknown datatype (class name). Parameters \u00b6 jvm Name Summary objectName Receiver of the method. className The unrecognized method. Constructors \u00b6 Name Summary UnknownDatatypeError [jvm] fun UnknownDatatypeError (objectName: ObjectVariableNode , className: ClassName )Receiver of the method. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/#unknowndatatypeerror","text":"[jvm] class UnknownDatatypeError ( objectName : ObjectVariableNode , className : ClassName ) : CompilationError Thrown when an object is declared with an unknown datatype (class name).","title":"UnknownDatatypeError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/#parameters","text":"jvm Name Summary objectName Receiver of the method. className The unrecognized method.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/#constructors","text":"Name Summary UnknownDatatypeError [jvm] fun UnknownDatatypeError (objectName: ObjectVariableNode , className: ClassName )Receiver of the method.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/-unknown-datatype-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnknownDatatypeError / UnknownDatatypeError UnknownDatatypeError \u00b6 [jvm] Content fun UnknownDatatypeError (objectName: ObjectVariableNode , className: ClassName ) More info Parameters \u00b6 jvm Name Summary objectName Receiver of the method. className The unrecognized method.","title":" unknown datatype error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/-unknown-datatype-error/#unknowndatatypeerror","text":"[jvm] Content fun UnknownDatatypeError (objectName: ObjectVariableNode , className: ClassName ) More info","title":"UnknownDatatypeError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-datatype-error/-unknown-datatype-error/#parameters","text":"jvm Name Summary objectName Receiver of the method. className The unrecognized method.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnknownMethodError UnknownMethodError \u00b6 [jvm] class UnknownMethodError ( objectName : ObjectVariableNode , methodName : MethodNameNode , objectType : ObjectType ?, argumentTypes : List < ValueType >?) : CompilationError Thrown when an object is called with a method it does not recognize. Parameters \u00b6 jvm Name Summary objectName Receiver of the method. methodName The unrecognized method. objectType Inferred type of the object. argumentTypes Types of the arguments the method was called with. Constructors \u00b6 Name Summary UnknownMethodError [jvm] fun UnknownMethodError (objectName: ObjectVariableNode , methodName: MethodNameNode , objectType: ObjectType ? = null, argumentTypes: List < ValueType >? = null)Receiver of the method. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/#unknownmethoderror","text":"[jvm] class UnknownMethodError ( objectName : ObjectVariableNode , methodName : MethodNameNode , objectType : ObjectType ?, argumentTypes : List < ValueType >?) : CompilationError Thrown when an object is called with a method it does not recognize.","title":"UnknownMethodError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/#parameters","text":"jvm Name Summary objectName Receiver of the method. methodName The unrecognized method. objectType Inferred type of the object. argumentTypes Types of the arguments the method was called with.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/#constructors","text":"Name Summary UnknownMethodError [jvm] fun UnknownMethodError (objectName: ObjectVariableNode , methodName: MethodNameNode , objectType: ObjectType ? = null, argumentTypes: List < ValueType >? = null)Receiver of the method.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/-unknown-method-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnknownMethodError / UnknownMethodError UnknownMethodError \u00b6 [jvm] Content fun UnknownMethodError (objectName: ObjectVariableNode , methodName: MethodNameNode , objectType: ObjectType ? = null, argumentTypes: List < ValueType >? = null) More info Parameters \u00b6 jvm Name Summary objectName Receiver of the method. methodName The unrecognized method. objectType Inferred type of the object. argumentTypes Types of the arguments the method was called with.","title":" unknown method error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/-unknown-method-error/#unknownmethoderror","text":"[jvm] Content fun UnknownMethodError (objectName: ObjectVariableNode , methodName: MethodNameNode , objectType: ObjectType ? = null, argumentTypes: List < ValueType >? = null) More info","title":"UnknownMethodError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-method-error/-unknown-method-error/#parameters","text":"jvm Name Summary objectName Receiver of the method. methodName The unrecognized method. objectType Inferred type of the object. argumentTypes Types of the arguments the method was called with.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnknownObjectDeclarationError UnknownObjectDeclarationError \u00b6 [jvm] class UnknownObjectDeclarationError ( node : Node ) : ImpossibleCaseError Thrown when an unknown Node is tagged as an ObjectDeclaration . Parameters \u00b6 jvm Name Summary node : The unknown node. Constructors \u00b6 Name Summary UnknownObjectDeclarationError [jvm] fun UnknownObjectDeclarationError (node: Node ): The unknown node. Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? node [jvm] val node : Node : The unknown node.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/#unknownobjectdeclarationerror","text":"[jvm] class UnknownObjectDeclarationError ( node : Node ) : ImpossibleCaseError Thrown when an unknown Node is tagged as an ObjectDeclaration .","title":"UnknownObjectDeclarationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/#parameters","text":"jvm Name Summary node : The unknown node.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/#constructors","text":"Name Summary UnknownObjectDeclarationError [jvm] fun UnknownObjectDeclarationError (node: Node ): The unknown node.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ? node [jvm] val node : Node : The unknown node.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/-unknown-object-declaration-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnknownObjectDeclarationError / UnknownObjectDeclarationError UnknownObjectDeclarationError \u00b6 [jvm] Content fun UnknownObjectDeclarationError (node: Node ) More info Parameters \u00b6 jvm Name Summary node : The unknown node.","title":" unknown object declaration error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/-unknown-object-declaration-error/#unknownobjectdeclarationerror","text":"[jvm] Content fun UnknownObjectDeclarationError (node: Node ) More info","title":"UnknownObjectDeclarationError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/-unknown-object-declaration-error/#parameters","text":"jvm Name Summary node : The unknown node.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/node/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / UnknownObjectDeclarationError / node node \u00b6 [jvm] Content val node : Node More info Parameters \u00b6 jvm Name Summary node : The unknown node.","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/node/#node","text":"[jvm] Content val node : Node More info","title":"node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-unknown-object-declaration-error/node/#parameters","text":"jvm Name Summary node : The unknown node.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ViaductInterpreterError ViaductInterpreterError \u00b6 [jvm] class ViaductInterpreterError ( information : String , node : HasSourceLocation ?) : CompilationError Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? information [jvm] val information : String message [jvm] open val message : String ? node [jvm] val node : HasSourceLocation ? = null","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/#viaductinterpretererror","text":"[jvm] class ViaductInterpreterError ( information : String , node : HasSourceLocation ?) : CompilationError","title":"ViaductInterpreterError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document cause [jvm] open val cause : Throwable ? information [jvm] val information : String message [jvm] open val message : String ? node [jvm] val node : HasSourceLocation ? = null","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/-viaduct-interpreter-error/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ViaductInterpreterError / ViaductInterpreterError ViaductInterpreterError \u00b6 [jvm] Content fun ViaductInterpreterError (information: String , node: HasSourceLocation ? = null)","title":" viaduct interpreter error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/-viaduct-interpreter-error/#viaductinterpretererror","text":"[jvm] Content fun ViaductInterpreterError (information: String , node: HasSourceLocation ? = null)","title":"ViaductInterpreterError"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/information/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ViaductInterpreterError / information information \u00b6 [jvm] Content val information : String","title":"Information"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/information/#information","text":"[jvm] Content val information : String","title":"information"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/node/","text":"// compiler / edu.cornell.cs.apl.viaduct.errors / ViaductInterpreterError / node node \u00b6 [jvm] Content val node : HasSourceLocation ? = null","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.errors/-viaduct-interpreter-error/node/#node","text":"[jvm] Content val node : HasSourceLocation ? = null","title":"node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing Package edu.cornell.cs.apl.viaduct.parsing \u00b6 Types \u00b6 Name Summary ArithABYProtocolParser [jvm] Content object ArithABYProtocolParser : ProtocolParser < ArithABY > More info Parser for the ABY protocol. BoolABYProtocolParser [jvm] Content object BoolABYProtocolParser : ProtocolParser < BoolABY > CommitmentProtocolParser [jvm] Content object CommitmentProtocolParser : ProtocolParser < Commitment > More info Parser for the Commitment protocol. Lexer [jvm] Content open class Lexer : Scanner LocalProtocolParser [jvm] Content object LocalProtocolParser : ProtocolParser < Local > More info Parser for the Local protocol. Parser [jvm] Content open class Parser : lr_parser More info CUP v0.11b 20160615 (GIT 4ac7450) generated parser. ProtocolArguments [jvm] Content class ProtocolArguments More info A map from argument labels to Value s. ProtocolParser [jvm] Content interface ProtocolParser P : Protocol > More info A parser for protocols of type P . ReplicationProtocolParser [jvm] Content object ReplicationProtocolParser : ProtocolParser < Replication > More info Parser for the Replication protocol. SourceFile [jvm] Content class SourceFile More info Maintains metadata (for example, file path) about an input stream and gives access to its contents. SourcePosition [jvm] Content data class SourcePosition ( sourceFile : SourceFile , offset : Int ) : Comparable < SourcePosition > More info Represents a position in a source file. SourceRange [jvm] Content data class SourceRange ( start : SourcePosition , end : SourcePosition ) More info Denotes a nonempty set of consecutive characters in a source file. sym [jvm] Content interface sym More info CUP generated interface containing symbol constants. YaoABYProtocolParser [jvm] Content object YaoABYProtocolParser : ProtocolParser < YaoABY > ZKPProtocolParser [jvm] Content object ZKPProtocolParser : ProtocolParser < ZKP > More info Parser for the ZKP protocol. Functions \u00b6 Name Summary parse [jvm] Content fun SourceFile . parse (protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this source file and returns the AST. [jvm] Content fun String . parse (path: String = \" \", protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this string and returns the AST. parseLabel [jvm] Content fun SourceFile . parseLabel (): LabelExpression More info Parses this source file as a security label. [jvm] Content fun String . parseLabel (path: String = \" \"): LabelExpression More info Parses this string as a security label. Properties \u00b6 Name Summary defaultProtocolParsers [jvm] val defaultProtocolParsers : PersistentMap< ProtocolName , ProtocolParser < Protocol >>","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/#package-educornellcsaplviaductparsing","text":"","title":"Package edu.cornell.cs.apl.viaduct.parsing"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/#types","text":"Name Summary ArithABYProtocolParser [jvm] Content object ArithABYProtocolParser : ProtocolParser < ArithABY > More info Parser for the ABY protocol. BoolABYProtocolParser [jvm] Content object BoolABYProtocolParser : ProtocolParser < BoolABY > CommitmentProtocolParser [jvm] Content object CommitmentProtocolParser : ProtocolParser < Commitment > More info Parser for the Commitment protocol. Lexer [jvm] Content open class Lexer : Scanner LocalProtocolParser [jvm] Content object LocalProtocolParser : ProtocolParser < Local > More info Parser for the Local protocol. Parser [jvm] Content open class Parser : lr_parser More info CUP v0.11b 20160615 (GIT 4ac7450) generated parser. ProtocolArguments [jvm] Content class ProtocolArguments More info A map from argument labels to Value s. ProtocolParser [jvm] Content interface ProtocolParser P : Protocol > More info A parser for protocols of type P . ReplicationProtocolParser [jvm] Content object ReplicationProtocolParser : ProtocolParser < Replication > More info Parser for the Replication protocol. SourceFile [jvm] Content class SourceFile More info Maintains metadata (for example, file path) about an input stream and gives access to its contents. SourcePosition [jvm] Content data class SourcePosition ( sourceFile : SourceFile , offset : Int ) : Comparable < SourcePosition > More info Represents a position in a source file. SourceRange [jvm] Content data class SourceRange ( start : SourcePosition , end : SourcePosition ) More info Denotes a nonempty set of consecutive characters in a source file. sym [jvm] Content interface sym More info CUP generated interface containing symbol constants. YaoABYProtocolParser [jvm] Content object YaoABYProtocolParser : ProtocolParser < YaoABY > ZKPProtocolParser [jvm] Content object ZKPProtocolParser : ProtocolParser < ZKP > More info Parser for the ZKP protocol.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/#functions","text":"Name Summary parse [jvm] Content fun SourceFile . parse (protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this source file and returns the AST. [jvm] Content fun String . parse (path: String = \" \", protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this string and returns the AST. parseLabel [jvm] Content fun SourceFile . parseLabel (): LabelExpression More info Parses this source file as a security label. [jvm] Content fun String . parseLabel (path: String = \" \"): LabelExpression More info Parses this string as a security label.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/#properties","text":"Name Summary defaultProtocolParsers [jvm] val defaultProtocolParsers : PersistentMap< ProtocolName , ProtocolParser < Protocol >>","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/default-protocol-parsers/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / defaultProtocolParsers defaultProtocolParsers \u00b6 [jvm] Content val defaultProtocolParsers : PersistentMap< ProtocolName , ProtocolParser < Protocol >>","title":"Default protocol parsers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/default-protocol-parsers/#defaultprotocolparsers","text":"[jvm] Content val defaultProtocolParsers : PersistentMap< ProtocolName , ProtocolParser < Protocol >>","title":"defaultProtocolParsers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/parse-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / parseLabel parseLabel \u00b6 [jvm] Content fun String . parseLabel (path: String = \" \"): LabelExpression More info Parses this string as a security label. [jvm] Content fun SourceFile . parseLabel (): LabelExpression More info Parses this source file as a security label.","title":"Parse label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/parse-label/#parselabel","text":"[jvm] Content fun String . parseLabel (path: String = \" \"): LabelExpression More info Parses this string as a security label. [jvm] Content fun SourceFile . parseLabel (): LabelExpression More info Parses this source file as a security label.","title":"parseLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / parse parse \u00b6 [jvm] Content fun String . parse (path: String = \" \", protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this string and returns the AST. [jvm] Content fun SourceFile . parse (protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this source file and returns the AST.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/parse/#parse","text":"[jvm] Content fun String . parse (path: String = \" \", protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this string and returns the AST. [jvm] Content fun SourceFile . parse (protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this source file and returns the AST.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-arith-a-b-y-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ArithABYProtocolParser ArithABYProtocolParser \u00b6 [jvm] object ArithABYProtocolParser : ProtocolParser < ArithABY > Parser for the ABY protocol. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): ArithABY More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-arith-a-b-y-protocol-parser/#arithabyprotocolparser","text":"[jvm] object ArithABYProtocolParser : ProtocolParser < ArithABY > Parser for the ABY protocol.","title":"ArithABYProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-arith-a-b-y-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): ArithABY More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-arith-a-b-y-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ArithABYProtocolParser / parse parse \u00b6 [jvm] Content open override fun parse (arguments: ProtocolArguments ): ArithABY More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-arith-a-b-y-protocol-parser/parse/#parse","text":"[jvm] Content open override fun parse (arguments: ProtocolArguments ): ArithABY More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-arith-a-b-y-protocol-parser/parse/#throws","text":"Name Summary CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-bool-a-b-y-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / BoolABYProtocolParser BoolABYProtocolParser \u00b6 [jvm] object BoolABYProtocolParser : ProtocolParser < BoolABY > Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): BoolABY More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-bool-a-b-y-protocol-parser/#boolabyprotocolparser","text":"[jvm] object BoolABYProtocolParser : ProtocolParser < BoolABY >","title":"BoolABYProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-bool-a-b-y-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): BoolABY More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-bool-a-b-y-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / BoolABYProtocolParser / parse parse \u00b6 [jvm] Content open override fun parse (arguments: ProtocolArguments ): BoolABY More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-bool-a-b-y-protocol-parser/parse/#parse","text":"[jvm] Content open override fun parse (arguments: ProtocolArguments ): BoolABY More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-bool-a-b-y-protocol-parser/parse/#throws","text":"Name Summary CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-commitment-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / CommitmentProtocolParser CommitmentProtocolParser \u00b6 [jvm] object CommitmentProtocolParser : ProtocolParser < Commitment > Parser for the Commitment protocol. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): Commitment More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-commitment-protocol-parser/#commitmentprotocolparser","text":"[jvm] object CommitmentProtocolParser : ProtocolParser < Commitment > Parser for the Commitment protocol.","title":"CommitmentProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-commitment-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): Commitment More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-commitment-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / CommitmentProtocolParser / parse parse \u00b6 [jvm] Content open override fun parse (arguments: ProtocolArguments ): Commitment More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-commitment-protocol-parser/parse/#parse","text":"[jvm] Content open override fun parse (arguments: ProtocolArguments ): Commitment More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-commitment-protocol-parser/parse/#throws","text":"Name Summary CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer Lexer \u00b6 [jvm] open class Lexer : Scanner Constructors \u00b6 Name Summary Lexer [jvm] open fun Lexer (sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory)Constructs a new lexer. Lexer [jvm] open fun Lexer (in: Reader , sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory)Creates a new scanner Functions \u00b6 Name Summary location [jvm] Content open fun location (left: Int , right: Int ): SourceRange More info Generates a source location given left and right character offsets. next_token [jvm] Content open fun next_token (): Symbol More info Resumes scanning until the next regular expression is matched, the end of input is encounteredor an I/O-Error occurs. [jvm] Content abstract fun next_token (): Symbol yyatEOF [jvm] Content fun yyatEOF (): Boolean More info Returns whether the scanner has reached the end of the reader it reads from. yybegin [jvm] Content fun yybegin (newState: Int ) More info Enters a new lexical state. yycharat [jvm] Content fun yycharat (position: Int ): Char More info Returns the character at the given position from the matched text. yyclose [jvm] Content fun yyclose () More info Closes the input reader. yylength [jvm] Content fun yylength (): Int More info How many characters were matched. yypushback [jvm] Content open fun yypushback (number: Int ) More info Pushes the specified amount of characters back into the input stream. yyreset [jvm] Content fun yyreset (reader: Reader ) More info Resets the scanner to read from a new input stream. yystate [jvm] Content fun yystate (): Int More info Returns the current lexical state. yytext [jvm] Content fun yytext (): String More info Returns the text matched by the current regular expression. Properties \u00b6 Name Summary COMMENT [jvm] val COMMENT : Int sourceFile [jvm] val sourceFile : SourceFile YYEOF [jvm] val YYEOF : Int This character denotes the end of file. YYINITIAL [jvm] val YYINITIAL : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/#lexer","text":"[jvm] open class Lexer : Scanner","title":"Lexer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/#constructors","text":"Name Summary Lexer [jvm] open fun Lexer (sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory)Constructs a new lexer. Lexer [jvm] open fun Lexer (in: Reader , sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory)Creates a new scanner","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/#functions","text":"Name Summary location [jvm] Content open fun location (left: Int , right: Int ): SourceRange More info Generates a source location given left and right character offsets. next_token [jvm] Content open fun next_token (): Symbol More info Resumes scanning until the next regular expression is matched, the end of input is encounteredor an I/O-Error occurs. [jvm] Content abstract fun next_token (): Symbol yyatEOF [jvm] Content fun yyatEOF (): Boolean More info Returns whether the scanner has reached the end of the reader it reads from. yybegin [jvm] Content fun yybegin (newState: Int ) More info Enters a new lexical state. yycharat [jvm] Content fun yycharat (position: Int ): Char More info Returns the character at the given position from the matched text. yyclose [jvm] Content fun yyclose () More info Closes the input reader. yylength [jvm] Content fun yylength (): Int More info How many characters were matched. yypushback [jvm] Content open fun yypushback (number: Int ) More info Pushes the specified amount of characters back into the input stream. yyreset [jvm] Content fun yyreset (reader: Reader ) More info Resets the scanner to read from a new input stream. yystate [jvm] Content fun yystate (): Int More info Returns the current lexical state. yytext [jvm] Content fun yytext (): String More info Returns the text matched by the current regular expression.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/#properties","text":"Name Summary COMMENT [jvm] val COMMENT : Int sourceFile [jvm] val sourceFile : SourceFile YYEOF [jvm] val YYEOF : Int This character denotes the end of file. YYINITIAL [jvm] val YYINITIAL : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-c-o-m-m-e-n-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / COMMENT COMMENT \u00b6 [jvm] Content val COMMENT : Int","title":" c o m m e n t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-c-o-m-m-e-n-t/#comment","text":"[jvm] Content val COMMENT : Int","title":"COMMENT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-lexer/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / Lexer Lexer \u00b6 [jvm] Content open fun Lexer (sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory) More info Constructs a new lexer. Parameters \u00b6 jvm Name Summary sourceFile input file symbolFactory generates symbols with source location information [jvm] Content open fun Lexer (in: Reader , sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory) More info Creates a new scanner Parameters \u00b6 jvm Name Summary in the java.io.Reader to read input from.","title":" lexer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-lexer/#lexer","text":"[jvm] Content open fun Lexer (sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory) More info Constructs a new lexer.","title":"Lexer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-lexer/#parameters","text":"jvm Name Summary sourceFile input file symbolFactory generates symbols with source location information [jvm] Content open fun Lexer (in: Reader , sourceFile: SourceFile , symbolFactory: ComplexSymbolFactory) More info Creates a new scanner","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-lexer/#parameters_1","text":"jvm Name Summary in the java.io.Reader to read input from.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-y-y-e-o-f/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / YYEOF YYEOF \u00b6 [jvm] Content val YYEOF : Int More info This character denotes the end of file.","title":" y y e o f"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-y-y-e-o-f/#yyeof","text":"[jvm] Content val YYEOF : Int More info This character denotes the end of file.","title":"YYEOF"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-y-y-i-n-i-t-i-a-l/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / YYINITIAL YYINITIAL \u00b6 [jvm] Content val YYINITIAL : Int","title":" y y i n i t i a l"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/-y-y-i-n-i-t-i-a-l/#yyinitial","text":"[jvm] Content val YYINITIAL : Int","title":"YYINITIAL"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/location/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / location location \u00b6 [jvm] Content open fun location (left: Int , right: Int ): SourceRange More info Generates a source location given left and right character offsets.","title":"Location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/location/#location","text":"[jvm] Content open fun location (left: Int , right: Int ): SourceRange More info Generates a source location given left and right character offsets.","title":"location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/next_token/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / next_token next_token \u00b6 [jvm] Content open fun next_token (): Symbol More info Resumes scanning until the next regular expression is matched, the end of input is encounteredor an I/O-Error occurs. Return \u00b6 the next token. Throws \u00b6 Name Summary java.io.IOException if any I/O-Error occurs.","title":"Next token"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/next_token/#next_token","text":"[jvm] Content open fun next_token (): Symbol More info Resumes scanning until the next regular expression is matched, the end of input is encounteredor an I/O-Error occurs.","title":"next_token"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/next_token/#return","text":"the next token.","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/next_token/#throws","text":"Name Summary java.io.IOException if any I/O-Error occurs.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/source-file/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / sourceFile sourceFile \u00b6 [jvm] Content val sourceFile : SourceFile","title":"Source file"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/source-file/#sourcefile","text":"[jvm] Content val sourceFile : SourceFile","title":"sourceFile"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyat-e-o-f/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yyatEOF yyatEOF \u00b6 [jvm] Content fun yyatEOF (): Boolean More info Returns whether the scanner has reached the end of the reader it reads from. Return \u00b6 whether the scanner has reached EOF.","title":"Yyat e o f"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyat-e-o-f/#yyateof","text":"[jvm] Content fun yyatEOF (): Boolean More info Returns whether the scanner has reached the end of the reader it reads from.","title":"yyatEOF"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyat-e-o-f/#return","text":"whether the scanner has reached EOF.","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yybegin/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yybegin yybegin \u00b6 [jvm] Content fun yybegin (newState: Int ) More info Enters a new lexical state. Parameters \u00b6 jvm Name Summary newState the new lexical state","title":"Yybegin"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yybegin/#yybegin","text":"[jvm] Content fun yybegin (newState: Int ) More info Enters a new lexical state.","title":"yybegin"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yybegin/#parameters","text":"jvm Name Summary newState the new lexical state","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yycharat/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yycharat yycharat \u00b6 [jvm] Content fun yycharat (position: Int ): Char More info Returns the character at the given position from the matched text. It is equivalent to {@code yytext().charAt(pos)}, but faster. Return \u00b6 the character at {@code position}. Parameters \u00b6 jvm Name Summary position the position of the character to fetch. A value from 0 to {@code yylength()-1}.","title":"Yycharat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yycharat/#yycharat","text":"[jvm] Content fun yycharat (position: Int ): Char More info Returns the character at the given position from the matched text. It is equivalent to {@code yytext().charAt(pos)}, but faster.","title":"yycharat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yycharat/#return","text":"the character at {@code position}.","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yycharat/#parameters","text":"jvm Name Summary position the position of the character to fetch. A value from 0 to {@code yylength()-1}.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyclose/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yyclose yyclose \u00b6 [jvm] Content fun yyclose () More info Closes the input reader. Throws \u00b6 Name Summary java.io.IOException if the reader could not be closed.","title":"Yyclose"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyclose/#yyclose","text":"[jvm] Content fun yyclose () More info Closes the input reader.","title":"yyclose"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyclose/#throws","text":"Name Summary java.io.IOException if the reader could not be closed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yylength/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yylength yylength \u00b6 [jvm] Content fun yylength (): Int More info How many characters were matched. Return \u00b6 the length of the matched text region.","title":"Yylength"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yylength/#yylength","text":"[jvm] Content fun yylength (): Int More info How many characters were matched.","title":"yylength"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yylength/#return","text":"the length of the matched text region.","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yypushback/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yypushback yypushback \u00b6 [jvm] Content open fun yypushback (number: Int ) More info Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method. Parameters \u00b6 jvm Name Summary number the number of characters to be read again. This number must not be greater than yylength .","title":"Yypushback"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yypushback/#yypushback","text":"[jvm] Content open fun yypushback (number: Int ) More info Pushes the specified amount of characters back into the input stream. They will be read again by then next call of the scanning method.","title":"yypushback"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yypushback/#parameters","text":"jvm Name Summary number the number of characters to be read again. This number must not be greater than yylength .","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyreset/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yyreset yyreset \u00b6 [jvm] Content fun yyreset (reader: Reader ) More info Resets the scanner to read from a new input stream. Does not close the old reader. All internal variables are reset, the old input stream cannot be reused (internalbuffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}. Internal scan buffer is resized down to its initial length, if it has grown. Parameters \u00b6 jvm Name Summary reader The new input stream.","title":"Yyreset"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyreset/#yyreset","text":"[jvm] Content fun yyreset (reader: Reader ) More info Resets the scanner to read from a new input stream. Does not close the old reader. All internal variables are reset, the old input stream cannot be reused (internalbuffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}. Internal scan buffer is resized down to its initial length, if it has grown.","title":"yyreset"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yyreset/#parameters","text":"jvm Name Summary reader The new input stream.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yystate/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yystate yystate \u00b6 [jvm] Content fun yystate (): Int More info Returns the current lexical state. Return \u00b6 the current lexical state.","title":"Yystate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yystate/#yystate","text":"[jvm] Content fun yystate (): Int More info Returns the current lexical state.","title":"yystate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yystate/#return","text":"the current lexical state.","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yytext/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Lexer / yytext yytext \u00b6 [jvm] Content fun yytext (): String More info Returns the text matched by the current regular expression. Return \u00b6 the matched text.","title":"Yytext"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yytext/#yytext","text":"[jvm] Content fun yytext (): String More info Returns the text matched by the current regular expression.","title":"yytext"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-lexer/yytext/#return","text":"the matched text.","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-local-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / LocalProtocolParser LocalProtocolParser \u00b6 [jvm] object LocalProtocolParser : ProtocolParser < Local > Parser for the Local protocol. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): Local More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-local-protocol-parser/#localprotocolparser","text":"[jvm] object LocalProtocolParser : ProtocolParser < Local > Parser for the Local protocol.","title":"LocalProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-local-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): Local More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-local-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / LocalProtocolParser / parse parse \u00b6 [jvm] Content open override fun parse (arguments: ProtocolArguments ): Local More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-local-protocol-parser/parse/#parse","text":"[jvm] Content open override fun parse (arguments: ProtocolArguments ): Local More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-local-protocol-parser/parse/#throws","text":"Name Summary CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser Parser \u00b6 [jvm] open class Parser : lr_parser CUP v0.11b 20160615 (GIT 4ac7450) generated parser. Constructors \u00b6 Name Summary Parser [jvm] @ Deprecated () open fun Parser (~~ )~~Default constructor. Parser [jvm] @ Deprecated () open fun Parser ( ~ s ~ :~~ Scanner ~) ~Constructor which sets the default scanner. Parser [jvm] open fun Parser (s: Scanner, sf: SymbolFactory)Constructor which sets the default scanner. Types \u00b6 Name Summary CUP$Parser$actions [jvm] Content open class CUP$Parser$actions More info Cup generated class to encapsulate user supplied action code. Functions \u00b6 Name Summary action_table [jvm] Content open fun action_table (): Array < Array < Short >> More info Access to parse-action table. [jvm] Content abstract fun action_table (): Array < Array < Short >> advance_lookahead [jvm] Content open fun advance_lookahead (): Boolean cur_err_token [jvm] Content open fun cur_err_token (): Symbol debug_message [jvm] Content open fun debug_message (mess: String ) debug_parse [jvm] Content open fun debug_parse (): Symbol debug_reduce [jvm] Content open fun debug_reduce (prod_num: Int , nt_num: Int , rhs_size: Int ) debug_shift [jvm] Content open fun debug_shift (shift_tkn: Symbol) debug_stack [jvm] Content open fun debug_stack () do_action [jvm] Content open fun do_action (act_num: Int , parser: lr_parser, stack: Stack , top: Int ): Symbol More info Invoke a user supplied parse action. [jvm] Content abstract fun do_action (p: Int , p1: lr_parser, p2: Stack , p3: Int ): Symbol done_parsing [jvm] Content open fun done_parsing () dump_stack [jvm] Content open fun dump_stack () EOF_sym [jvm] Content open fun EOF_sym (): Int More info EOF Symbol index. [jvm] Content abstract fun EOF_sym (): Int error_recovery [jvm] Content open fun error_recovery (debug: Boolean ): Boolean error_sym [jvm] Content open fun error_sym (): Int More info error Symbol index. [jvm] Content abstract fun error_sym (): Int error_sync_size [jvm] Content open fun error_sync_size (): Int expected_token_ids [jvm] Content open fun expected_token_ids (): List < Integer > find_recovery_config [jvm] Content open fun find_recovery_config (debug: Boolean ): Boolean get_action [jvm] Content fun get_action (state: Int , sym: Int ): Short get_reduce [jvm] Content fun get_reduce (state: Int , sym: Int ): Short getScanner [jvm] Content open fun getScanner (): Scanner getSymbolContainer [jvm] Content fun getSymbolContainer (): Class open fun getSymbolContainer (): Class getSymbolFactory [jvm] Content open fun getSymbolFactory (): SymbolFactory init_actions [jvm] Content abstract fun init_actions () parse [jvm] Content open fun parse (): Symbol parse_lookahead [jvm] Content open fun parse_lookahead (debug: Boolean ) parseLabel [jvm] Content open fun parseLabel (): LabelExpression More info Parses the input as a security label. parseProgram [jvm] Content open fun parseProgram (): ProgramNode More info Parses the input as a program. production_table [jvm] Content open fun production_table (): Array < Array < Short >> More info Access to production table. [jvm] Content abstract fun production_table (): Array < Array < Short >> read_lookahead [jvm] Content open fun read_lookahead () reduce_table [jvm] Content open fun reduce_table (): Array < Array < Short >> More info Access to reduce_goto table. [jvm] Content abstract fun reduce_table (): Array < Array < Short >> report_error [jvm] Content open fun report_error (message: String , info: Any ) open fun report_error (message: String , info: Any ) report_expected_token_ids [jvm] Content open fun report_expected_token_ids () report_fatal_error [jvm] Content open fun report_fatal_error (message: String , info: Any ) open fun report_fatal_error (message: String , info: Any ) restart_lookahead [jvm] Content open fun restart_lookahead () scan [jvm] Content open fun scan (): Symbol More info Scan to get the next Symbol. [jvm] Content open fun scan (): Symbol setScanner [jvm] Content open fun setScanner (s: Scanner) shift_under_error [jvm] Content open fun shift_under_error (): Boolean start_production [jvm] Content open fun start_production (): Int More info Indicates start production. [jvm] Content abstract fun start_production (): Int start_state [jvm] Content open fun start_state (): Int More info Indicates start state. [jvm] Content abstract fun start_state (): Int symbl_name_from_id [jvm] Content open fun symbl_name_from_id (id: Int ): String syntax_error [jvm] Content open fun syntax_error (cur_token: Symbol) try_parse_ahead [jvm] Content open fun try_parse_ahead (debug: Boolean ): Boolean unpackFromStrings [jvm] Content open fun unpackFromStrings (sa: Array < String >): Array < Array < Short >> unrecovered_syntax_error [jvm] Content open fun unrecovered_syntax_error (cur_token: Symbol) user_init [jvm] Content open fun user_init () validate_expected_symbol [jvm] Content open fun validate_expected_symbol (id: Int ): Boolean Properties \u00b6 Name Summary protocolParsers [jvm] open val protocolParsers : Map < ProtocolName , ProtocolParser < Protocol >>","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/#parser","text":"[jvm] open class Parser : lr_parser CUP v0.11b 20160615 (GIT 4ac7450) generated parser.","title":"Parser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/#constructors","text":"Name Summary Parser [jvm] @ Deprecated () open fun Parser (~~ )~~Default constructor. Parser [jvm] @ Deprecated () open fun Parser ( ~ s ~ :~~ Scanner ~) ~Constructor which sets the default scanner. Parser [jvm] open fun Parser (s: Scanner, sf: SymbolFactory)Constructor which sets the default scanner.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/#types","text":"Name Summary CUP$Parser$actions [jvm] Content open class CUP$Parser$actions More info Cup generated class to encapsulate user supplied action code.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/#functions","text":"Name Summary action_table [jvm] Content open fun action_table (): Array < Array < Short >> More info Access to parse-action table. [jvm] Content abstract fun action_table (): Array < Array < Short >> advance_lookahead [jvm] Content open fun advance_lookahead (): Boolean cur_err_token [jvm] Content open fun cur_err_token (): Symbol debug_message [jvm] Content open fun debug_message (mess: String ) debug_parse [jvm] Content open fun debug_parse (): Symbol debug_reduce [jvm] Content open fun debug_reduce (prod_num: Int , nt_num: Int , rhs_size: Int ) debug_shift [jvm] Content open fun debug_shift (shift_tkn: Symbol) debug_stack [jvm] Content open fun debug_stack () do_action [jvm] Content open fun do_action (act_num: Int , parser: lr_parser, stack: Stack , top: Int ): Symbol More info Invoke a user supplied parse action. [jvm] Content abstract fun do_action (p: Int , p1: lr_parser, p2: Stack , p3: Int ): Symbol done_parsing [jvm] Content open fun done_parsing () dump_stack [jvm] Content open fun dump_stack () EOF_sym [jvm] Content open fun EOF_sym (): Int More info EOF Symbol index. [jvm] Content abstract fun EOF_sym (): Int error_recovery [jvm] Content open fun error_recovery (debug: Boolean ): Boolean error_sym [jvm] Content open fun error_sym (): Int More info error Symbol index. [jvm] Content abstract fun error_sym (): Int error_sync_size [jvm] Content open fun error_sync_size (): Int expected_token_ids [jvm] Content open fun expected_token_ids (): List < Integer > find_recovery_config [jvm] Content open fun find_recovery_config (debug: Boolean ): Boolean get_action [jvm] Content fun get_action (state: Int , sym: Int ): Short get_reduce [jvm] Content fun get_reduce (state: Int , sym: Int ): Short getScanner [jvm] Content open fun getScanner (): Scanner getSymbolContainer [jvm] Content fun getSymbolContainer (): Class open fun getSymbolContainer (): Class getSymbolFactory [jvm] Content open fun getSymbolFactory (): SymbolFactory init_actions [jvm] Content abstract fun init_actions () parse [jvm] Content open fun parse (): Symbol parse_lookahead [jvm] Content open fun parse_lookahead (debug: Boolean ) parseLabel [jvm] Content open fun parseLabel (): LabelExpression More info Parses the input as a security label. parseProgram [jvm] Content open fun parseProgram (): ProgramNode More info Parses the input as a program. production_table [jvm] Content open fun production_table (): Array < Array < Short >> More info Access to production table. [jvm] Content abstract fun production_table (): Array < Array < Short >> read_lookahead [jvm] Content open fun read_lookahead () reduce_table [jvm] Content open fun reduce_table (): Array < Array < Short >> More info Access to reduce_goto table. [jvm] Content abstract fun reduce_table (): Array < Array < Short >> report_error [jvm] Content open fun report_error (message: String , info: Any ) open fun report_error (message: String , info: Any ) report_expected_token_ids [jvm] Content open fun report_expected_token_ids () report_fatal_error [jvm] Content open fun report_fatal_error (message: String , info: Any ) open fun report_fatal_error (message: String , info: Any ) restart_lookahead [jvm] Content open fun restart_lookahead () scan [jvm] Content open fun scan (): Symbol More info Scan to get the next Symbol. [jvm] Content open fun scan (): Symbol setScanner [jvm] Content open fun setScanner (s: Scanner) shift_under_error [jvm] Content open fun shift_under_error (): Boolean start_production [jvm] Content open fun start_production (): Int More info Indicates start production. [jvm] Content abstract fun start_production (): Int start_state [jvm] Content open fun start_state (): Int More info Indicates start state. [jvm] Content abstract fun start_state (): Int symbl_name_from_id [jvm] Content open fun symbl_name_from_id (id: Int ): String syntax_error [jvm] Content open fun syntax_error (cur_token: Symbol) try_parse_ahead [jvm] Content open fun try_parse_ahead (debug: Boolean ): Boolean unpackFromStrings [jvm] Content open fun unpackFromStrings (sa: Array < String >): Array < Array < Short >> unrecovered_syntax_error [jvm] Content open fun unrecovered_syntax_error (cur_token: Symbol) user_init [jvm] Content open fun user_init () validate_expected_symbol [jvm] Content open fun validate_expected_symbol (id: Int ): Boolean","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/#properties","text":"Name Summary protocolParsers [jvm] open val protocolParsers : Map < ProtocolName , ProtocolParser < Protocol >>","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-e-o-f_sym/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / EOF_sym EOF_sym \u00b6 [jvm] Content open fun EOF_sym (): Int More info EOF Symbol index.","title":" e o f sym"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-e-o-f_sym/#eof_sym","text":"[jvm] Content open fun EOF_sym (): Int More info EOF Symbol index.","title":"EOF_sym"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / Parser Parser \u00b6 [jvm] Content @ Deprecated () open fun Parser (~~ )~~ More info Default constructor. [jvm] Content @ Deprecated () open fun Parser ( ~ s ~ :~~ Scanner ~) ~ open fun Parser (s: Scanner, sf: SymbolFactory) More info Constructor which sets the default scanner.","title":" parser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-parser/#parser","text":"[jvm] Content @ Deprecated () open fun Parser (~~ )~~ More info Default constructor. [jvm] Content @ Deprecated () open fun Parser ( ~ s ~ :~~ Scanner ~) ~ open fun Parser (s: Scanner, sf: SymbolFactory) More info Constructor which sets the default scanner.","title":"Parser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/action_table/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / action_table action_table \u00b6 [jvm] Content open fun action_table (): Array < Array < Short >> More info Access to parse-action table.","title":"Action table"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/action_table/#action_table","text":"[jvm] Content open fun action_table (): Array < Array < Short >> More info Access to parse-action table.","title":"action_table"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/do_action/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / do_action do_action \u00b6 [jvm] Content open fun do_action (act_num: Int , parser: lr_parser, stack: Stack , top: Int ): Symbol More info Invoke a user supplied parse action.","title":"Do action"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/do_action/#do_action","text":"[jvm] Content open fun do_action (act_num: Int , parser: lr_parser, stack: Stack , top: Int ): Symbol More info Invoke a user supplied parse action.","title":"do_action"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/error_sym/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / error_sym error_sym \u00b6 [jvm] Content open fun error_sym (): Int More info error Symbol index.","title":"Error sym"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/error_sym/#error_sym","text":"[jvm] Content open fun error_sym (): Int More info error Symbol index.","title":"error_sym"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/get-symbol-container/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / getSymbolContainer getSymbolContainer \u00b6 [jvm] Content fun getSymbolContainer (): Class","title":"Get symbol container"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/get-symbol-container/#getsymbolcontainer","text":"[jvm] Content fun getSymbolContainer (): Class","title":"getSymbolContainer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/parse-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / parseLabel parseLabel \u00b6 [jvm] Content open fun parseLabel (): LabelExpression More info Parses the input as a security label.","title":"Parse label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/parse-label/#parselabel","text":"[jvm] Content open fun parseLabel (): LabelExpression More info Parses the input as a security label.","title":"parseLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/parse-program/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / parseProgram parseProgram \u00b6 [jvm] Content open fun parseProgram (): ProgramNode More info Parses the input as a program.","title":"Parse program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/parse-program/#parseprogram","text":"[jvm] Content open fun parseProgram (): ProgramNode More info Parses the input as a program.","title":"parseProgram"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/production_table/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / production_table production_table \u00b6 [jvm] Content open fun production_table (): Array < Array < Short >> More info Access to production table.","title":"Production table"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/production_table/#production_table","text":"[jvm] Content open fun production_table (): Array < Array < Short >> More info Access to production table.","title":"production_table"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/protocol-parsers/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / protocolParsers protocolParsers \u00b6 [jvm] Content open val protocolParsers : Map < ProtocolName , ProtocolParser < Protocol >>","title":"Protocol parsers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/protocol-parsers/#protocolparsers","text":"[jvm] Content open val protocolParsers : Map < ProtocolName , ProtocolParser < Protocol >>","title":"protocolParsers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/reduce_table/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / reduce_table reduce_table \u00b6 [jvm] Content open fun reduce_table (): Array < Array < Short >> More info Access to reduce_goto table.","title":"Reduce table"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/reduce_table/#reduce_table","text":"[jvm] Content open fun reduce_table (): Array < Array < Short >> More info Access to reduce_goto table.","title":"reduce_table"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/report_error/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / report_error report_error \u00b6 [jvm] Content open fun report_error (message: String , info: Any )","title":"Report error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/report_error/#report_error","text":"[jvm] Content open fun report_error (message: String , info: Any )","title":"report_error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/report_fatal_error/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / report_fatal_error report_fatal_error \u00b6 [jvm] Content open fun report_fatal_error (message: String , info: Any )","title":"Report fatal error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/report_fatal_error/#report_fatal_error","text":"[jvm] Content open fun report_fatal_error (message: String , info: Any )","title":"report_fatal_error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/scan/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / scan scan \u00b6 [jvm] Content open fun scan (): Symbol More info Scan to get the next Symbol.","title":"Scan"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/scan/#scan","text":"[jvm] Content open fun scan (): Symbol More info Scan to get the next Symbol.","title":"scan"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/start_production/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / start_production start_production \u00b6 [jvm] Content open fun start_production (): Int More info Indicates start production.","title":"Start production"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/start_production/#start_production","text":"[jvm] Content open fun start_production (): Int More info Indicates start production.","title":"start_production"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/start_state/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / start_state start_state \u00b6 [jvm] Content open fun start_state (): Int More info Indicates start state.","title":"Start state"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/start_state/#start_state","text":"[jvm] Content open fun start_state (): Int More info Indicates start state.","title":"start_state"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / CUP$Parser$actions CUP$Parser$actions \u00b6 [jvm] open class CUP$Parser$actions Cup generated class to encapsulate user supplied action code. Constructors \u00b6 Name Summary CUP$Parser$actions [jvm] open fun CUP$Parser$actions (parser: Parser )Constructor Functions \u00b6 Name Summary CUP$Parser$do_action [jvm] Content fun CUP$Parser$do_action (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method splitting the generated action code into several parts. CUP$Parser$do_action_part00000000 [jvm] Content fun CUP$Parser$do_action_part00000000 (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method 0 with the actual generated action code for actions 0 to 300.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/#cupparseractions","text":"[jvm] open class CUP$Parser$actions Cup generated class to encapsulate user supplied action code.","title":"CUP$Parser$actions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/#constructors","text":"Name Summary CUP$Parser$actions [jvm] open fun CUP$Parser$actions (parser: Parser )Constructor","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/#functions","text":"Name Summary CUP$Parser$do_action [jvm] Content fun CUP$Parser$do_action (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method splitting the generated action code into several parts. CUP$Parser$do_action_part00000000 [jvm] Content fun CUP$Parser$do_action_part00000000 (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method 0 with the actual generated action code for actions 0 to 300.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/-c-u-p%24-parser%24actions/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / CUP$Parser$actions / CUP$Parser$actions CUP$Parser$actions \u00b6 [jvm] Content open fun CUP$Parser$actions (parser: Parser ) More info Constructor","title":" c u p$ parser$actions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/-c-u-p%24-parser%24actions/#cupparseractions","text":"[jvm] Content open fun CUP$Parser$actions (parser: Parser ) More info Constructor","title":"CUP$Parser$actions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/-c-u-p%24-parser%24do_action/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / CUP$Parser$actions / CUP$Parser$do_action CUP$Parser$do_action \u00b6 [jvm] Content fun CUP$Parser$do_action (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method splitting the generated action code into several parts.","title":" c u p$ parser$do action"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/-c-u-p%24-parser%24do_action/#cupparserdo_action","text":"[jvm] Content fun CUP$Parser$do_action (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method splitting the generated action code into several parts.","title":"CUP$Parser$do_action"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/-c-u-p%24-parser%24do_action_part00000000/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / Parser / CUP$Parser$actions / CUP$Parser$do_action_part00000000 CUP$Parser$do_action_part00000000 \u00b6 [jvm] Content fun CUP$Parser$do_action_part00000000 (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method 0 with the actual generated action code for actions 0 to 300.","title":" c u p$ parser$do action part00000000"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-parser/-c-u-p%24-parser%24actions/-c-u-p%24-parser%24do_action_part00000000/#cupparserdo_action_part00000000","text":"[jvm] Content fun CUP$Parser$do_action_part00000000 (CUP$Parser$act_num: Int , CUP$Parser$parser: lr_parser, CUP$Parser$stack: Stack , CUP$Parser$top: Int ): Symbol More info Method 0 with the actual generated action code for actions 0 to 300.","title":"CUP$Parser$do_action_part00000000"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ProtocolArguments ProtocolArguments \u00b6 [jvm] class ProtocolArguments A map from argument labels to Value s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content inline fun < V : Value > get (label: String ): V More info Returns the argument associated with label label, automatically casting it to type V . getArgument [jvm] Content fun getArgument (label: String ): ValueNode More info Returns the argument associated with label label. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/#protocolarguments","text":"[jvm] class ProtocolArguments A map from argument labels to Value s.","title":"ProtocolArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content inline fun < V : Value > get (label: String ): V More info Returns the argument associated with label label, automatically casting it to type V . getArgument [jvm] Content fun getArgument (label: String ): ValueNode More info Returns the argument associated with label label. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/get-argument/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ProtocolArguments / getArgument getArgument \u00b6 [jvm] Content fun getArgument (label: String ): ValueNode More info Returns the argument associated with label label. It is usually better to use get . Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if there is no argument with label label.","title":"Get argument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/get-argument/#getargument","text":"[jvm] Content fun getArgument (label: String ): ValueNode More info Returns the argument associated with label label. It is usually better to use get .","title":"getArgument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/get-argument/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if there is no argument with label label.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/get/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ProtocolArguments / get get \u00b6 [jvm] Content inline fun < V : Value > get (label: String ): V More info Returns the argument associated with label label, automatically casting it to type V . Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if there is no argument with label label. edu.cornell.cs.apl.viaduct.errors.TypeMismatchError if the argument does not have type V .","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/get/#get","text":"[jvm] Content inline fun < V : Value > get (label: String ): V More info Returns the argument associated with label label, automatically casting it to type V .","title":"get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-arguments/get/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if there is no argument with label label. edu.cornell.cs.apl.viaduct.errors.TypeMismatchError if the argument does not have type V .","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ProtocolParser ProtocolParser \u00b6 [jvm] interface ProtocolParser P : Protocol > A parser for protocols of type P . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content abstract fun parse (arguments: ProtocolArguments ): P More info Parses arguments into a protocol of type P . toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name ArithABYProtocolParser BoolABYProtocolParser YaoABYProtocolParser CommitmentProtocolParser LocalProtocolParser ReplicationProtocolParser ZKPProtocolParser","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-parser/#protocolparser","text":"[jvm] interface ProtocolParser P : Protocol > A parser for protocols of type P .","title":"ProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content abstract fun parse (arguments: ProtocolArguments ): P More info Parses arguments into a protocol of type P . toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-parser/#inheritors","text":"Name ArithABYProtocolParser BoolABYProtocolParser YaoABYProtocolParser CommitmentProtocolParser LocalProtocolParser ReplicationProtocolParser ZKPProtocolParser","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ProtocolParser / parse parse \u00b6 [jvm] Content abstract fun parse (arguments: ProtocolArguments ): P More info Parses arguments into a protocol of type P . Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-parser/parse/#parse","text":"[jvm] Content abstract fun parse (arguments: ProtocolArguments ): P More info Parses arguments into a protocol of type P . Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-protocol-parser/parse/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-replication-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ReplicationProtocolParser ReplicationProtocolParser \u00b6 [jvm] object ReplicationProtocolParser : ProtocolParser < Replication > Parser for the Replication protocol. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): Replication More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-replication-protocol-parser/#replicationprotocolparser","text":"[jvm] object ReplicationProtocolParser : ProtocolParser < Replication > Parser for the Replication protocol.","title":"ReplicationProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-replication-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): Replication More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-replication-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ReplicationProtocolParser / parse parse \u00b6 [jvm] Content open override fun parse (arguments: ProtocolArguments ): Replication More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-replication-protocol-parser/parse/#parse","text":"[jvm] Content open override fun parse (arguments: ProtocolArguments ): Replication More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-replication-protocol-parser/parse/#throws","text":"Name Summary CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceFile SourceFile \u00b6 [jvm] class SourceFile Maintains metadata (for example, file path) about an input stream and gives access to its contents. Parameters \u00b6 jvm Name Summary path Description of where the source file came from (e.g. a file path, \"stdin\", etc.). contents File contents. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary createReader [jvm] Content fun createReader (): Reader More info Returns a new Reader for accessing the contents of the file. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary length [jvm] val length : Int Number of Char s (unicode code units) in the file. numberOfLines [jvm] val numberOfLines : Int Number of lines in the file. path [jvm] val path : String Description of where the source file came from (e.g. Extensions \u00b6 Name Summary parse [jvm] Content fun SourceFile . parse (protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this source file and returns the AST. parseLabel [jvm] Content fun SourceFile . parseLabel (): LabelExpression More info Parses this source file as a security label.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/#sourcefile","text":"[jvm] class SourceFile Maintains metadata (for example, file path) about an input stream and gives access to its contents.","title":"SourceFile"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/#parameters","text":"jvm Name Summary path Description of where the source file came from (e.g. a file path, \"stdin\", etc.). contents File contents.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/#functions","text":"Name Summary createReader [jvm] Content fun createReader (): Reader More info Returns a new Reader for accessing the contents of the file. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/#properties","text":"Name Summary length [jvm] val length : Int Number of Char s (unicode code units) in the file. numberOfLines [jvm] val numberOfLines : Int Number of lines in the file. path [jvm] val path : String Description of where the source file came from (e.g.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/#extensions","text":"Name Summary parse [jvm] Content fun SourceFile . parse (protocolParsers: Map < ProtocolName , ProtocolParser < Protocol >> = defaultProtocolParsers): ProgramNode More info Parses this source file and returns the AST. parseLabel [jvm] Content fun SourceFile . parseLabel (): LabelExpression More info Parses this source file as a security label.","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/create-reader/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceFile / createReader createReader \u00b6 [jvm] Content fun createReader (): Reader More info Returns a new Reader for accessing the contents of the file.","title":"Create reader"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/create-reader/#createreader","text":"[jvm] Content fun createReader (): Reader More info Returns a new Reader for accessing the contents of the file.","title":"createReader"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/length/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceFile / length length \u00b6 [jvm] Content val length : Int More info Number of Char s (unicode code units) in the file.","title":"Length"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/length/#length","text":"[jvm] Content val length : Int More info Number of Char s (unicode code units) in the file.","title":"length"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/number-of-lines/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceFile / numberOfLines numberOfLines \u00b6 [jvm] Content val numberOfLines : Int More info Number of lines in the file. This is equal to the number of line breaks plus 1. That is, every file (including the empty one) has at least one line.","title":"Number of lines"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/number-of-lines/#numberoflines","text":"[jvm] Content val numberOfLines : Int More info Number of lines in the file. This is equal to the number of line breaks plus 1. That is, every file (including the empty one) has at least one line.","title":"numberOfLines"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/path/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceFile / path path \u00b6 [jvm] Content val path : String More info Parameters \u00b6 jvm Name Summary path Description of where the source file came from (e.g. a file path, \"stdin\", etc.).","title":"Path"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/path/#path","text":"[jvm] Content val path : String More info","title":"path"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/path/#parameters","text":"jvm Name Summary path Description of where the source file came from (e.g. a file path, \"stdin\", etc.).","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceFile / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean from [jvm] Content @ JvmStatic () fun from (source: File ): SourceFile More info Constructs a SourceFile by reading the contents of a file. [jvm] Content @ JvmStatic () fun from (path: String , reader: Reader ): SourceFile More info Constructs a SourceFile by consuming a reader. [jvm] Content @ JvmStatic () fun from (path: String , contents: String ): SourceFile More info Constructs a SourceFile from a string. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean from [jvm] Content @ JvmStatic () fun from (source: File ): SourceFile More info Constructs a SourceFile by reading the contents of a file. [jvm] Content @ JvmStatic () fun from (path: String , reader: Reader ): SourceFile More info Constructs a SourceFile by consuming a reader. [jvm] Content @ JvmStatic () fun from (path: String , contents: String ): SourceFile More info Constructs a SourceFile from a string. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/from/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceFile / Companion / from from \u00b6 [jvm] Content @ JvmStatic () fun from (source: File ): SourceFile More info Constructs a SourceFile by reading the contents of a file. Parameters \u00b6 jvm Name Summary source file to read [jvm] Content @ JvmStatic () fun from (path: String , contents: String ): SourceFile More info Constructs a SourceFile from a string. Parameters \u00b6 jvm Name Summary path Description of where the string came from (e.g. file path, \"stdin\", etc.) contents File contents. [jvm] Content @ JvmStatic () fun from (path: String , reader: Reader ): SourceFile More info Constructs a SourceFile by consuming a reader. Parameters \u00b6 jvm Name Summary path Description of where reader came from (e.g. file path, \"stdin\", etc.) reader Object to read file contents from","title":"From"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/from/#from","text":"[jvm] Content @ JvmStatic () fun from (source: File ): SourceFile More info Constructs a SourceFile by reading the contents of a file.","title":"from"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/from/#parameters","text":"jvm Name Summary source file to read [jvm] Content @ JvmStatic () fun from (path: String , contents: String ): SourceFile More info Constructs a SourceFile from a string.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/from/#parameters_1","text":"jvm Name Summary path Description of where the string came from (e.g. file path, \"stdin\", etc.) contents File contents. [jvm] Content @ JvmStatic () fun from (path: String , reader: Reader ): SourceFile More info Constructs a SourceFile by consuming a reader.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-file/-companion/from/#parameters_2","text":"jvm Name Summary path Description of where reader came from (e.g. file path, \"stdin\", etc.) reader Object to read file contents from","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition SourcePosition \u00b6 [jvm] data class SourcePosition ( sourceFile : SourceFile , offset : Int ) : Comparable < SourcePosition > Represents a position in a source file. Positions correspond to spaces between characters rather than characters themselves. In a file with n characters, there are n + 1 positions: one before the first character, one after the last character, and n - 1 between each consecutive character. Parameters \u00b6 jvm Name Summary offset Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. Starts at 0. Constructors \u00b6 Name Summary SourcePosition [jvm] fun SourcePosition (sourceFile: SourceFile , offset: Int )Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. Functions \u00b6 Name Summary compareTo [jvm] Content open operator override fun compareTo (other: SourcePosition ): Int component2 [jvm] Content operator fun component2 (): Int copy [jvm] Content fun copy (sourceFile: SourceFile , offset: Int ): SourcePosition equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary column [jvm] val column : Int Column number of the character that comes after this position. line [jvm] val line : Int Line number of this position. offset [jvm] val offset : Int Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. sourcePath [jvm] val sourcePath : String Description of where the source file came from.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/#sourceposition","text":"[jvm] data class SourcePosition ( sourceFile : SourceFile , offset : Int ) : Comparable < SourcePosition > Represents a position in a source file. Positions correspond to spaces between characters rather than characters themselves. In a file with n characters, there are n + 1 positions: one before the first character, one after the last character, and n - 1 between each consecutive character.","title":"SourcePosition"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/#parameters","text":"jvm Name Summary offset Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. Starts at 0.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/#constructors","text":"Name Summary SourcePosition [jvm] fun SourcePosition (sourceFile: SourceFile , offset: Int )Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/#functions","text":"Name Summary compareTo [jvm] Content open operator override fun compareTo (other: SourcePosition ): Int component2 [jvm] Content operator fun component2 (): Int copy [jvm] Content fun copy (sourceFile: SourceFile , offset: Int ): SourcePosition equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/#properties","text":"Name Summary column [jvm] val column : Int Column number of the character that comes after this position. line [jvm] val line : Int Line number of this position. offset [jvm] val offset : Int Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. sourcePath [jvm] val sourcePath : String Description of where the source file came from.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/-source-position/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / SourcePosition SourcePosition \u00b6 [jvm] Content fun SourcePosition (sourceFile: SourceFile , offset: Int ) More info Parameters \u00b6 jvm Name Summary offset Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. Starts at 0.","title":" source position"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/-source-position/#sourceposition","text":"[jvm] Content fun SourcePosition (sourceFile: SourceFile , offset: Int ) More info","title":"SourcePosition"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/-source-position/#parameters","text":"jvm Name Summary offset Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. Starts at 0.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/column/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / column column \u00b6 [jvm] Content val column : Int More info Column number of the character that comes after this position. 1 indexed. Note that even though each position has a line number, no position has a column number. This is because columns correspond to characters not the spaces between them.","title":"Column"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/column/#column","text":"[jvm] Content val column : Int More info Column number of the character that comes after this position. 1 indexed. Note that even though each position has a line number, no position has a column number. This is because columns correspond to characters not the spaces between them.","title":"column"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / compareTo compareTo \u00b6 [jvm] Content open operator override fun compareTo (other: SourcePosition ): Int","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/compare-to/#compareto","text":"[jvm] Content open operator override fun compareTo (other: SourcePosition ): Int","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Int","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/component2/#component2","text":"[jvm] Content operator fun component2 (): Int","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / copy copy \u00b6 [jvm] Content fun copy (sourceFile: SourceFile , offset: Int ): SourcePosition","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/copy/#copy","text":"[jvm] Content fun copy (sourceFile: SourceFile , offset: Int ): SourcePosition","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/line/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / line line \u00b6 [jvm] Content val line : Int More info Line number of this position. 1 indexed.","title":"Line"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/line/#line","text":"[jvm] Content val line : Int More info Line number of this position. 1 indexed.","title":"line"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/offset/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / offset offset \u00b6 [jvm] Content val offset : Int More info Parameters \u00b6 jvm Name Summary offset Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. Starts at 0.","title":"Offset"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/offset/#offset","text":"[jvm] Content val offset : Int More info","title":"offset"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/offset/#parameters","text":"jvm Name Summary offset Number of Char s (unicode code units, not code points) before this position, counting from the beginning of the file. Starts at 0.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/source-path/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / sourcePath sourcePath \u00b6 [jvm] Content val sourcePath : String More info Description of where the source file came from.","title":"Source path"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/source-path/#sourcepath","text":"[jvm] Content val sourcePath : String More info Description of where the source file came from.","title":"sourcePath"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourcePosition / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-position/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange SourceRange \u00b6 [jvm] data class SourceRange ( start : SourcePosition , end : SourcePosition ) Denotes a nonempty set of consecutive characters in a source file. Empty ranges are not allowed, since there is no column number that corresponds to a single position. Parameters \u00b6 jvm Name Summary start position that comes just before the characters in the range end position that comes just after the characters in the range Constructors \u00b6 Name Summary SourceRange [jvm] fun SourceRange (start: SourcePosition , end: SourcePosition )position that comes just before the characters in the range Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SourcePosition component2 [jvm] Content operator fun component2 (): SourcePosition copy [jvm] Content fun copy (start: SourcePosition , end: SourcePosition ): SourceRange equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int merge [jvm] Content fun merge (that: SourceRange ): SourceRange More info Combines two ranges to create a range that spans both. showInSource [jvm] Content fun showInSource (highlightStyle: Style, contextLines: Int = if (start.line == end.line) 0 else 1): Document More info Displays the portions of the source file containing this location and highlights the region corresponding to this location. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary end [jvm] val end : SourcePosition position that comes just after the characters in the range sourcePath [jvm] val sourcePath : String Description of where the source file came from. start [jvm] val start : SourcePosition position that comes just before the characters in the range","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/#sourcerange","text":"[jvm] data class SourceRange ( start : SourcePosition , end : SourcePosition ) Denotes a nonempty set of consecutive characters in a source file. Empty ranges are not allowed, since there is no column number that corresponds to a single position.","title":"SourceRange"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/#parameters","text":"jvm Name Summary start position that comes just before the characters in the range end position that comes just after the characters in the range","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/#constructors","text":"Name Summary SourceRange [jvm] fun SourceRange (start: SourcePosition , end: SourcePosition )position that comes just before the characters in the range","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SourcePosition component2 [jvm] Content operator fun component2 (): SourcePosition copy [jvm] Content fun copy (start: SourcePosition , end: SourcePosition ): SourceRange equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int merge [jvm] Content fun merge (that: SourceRange ): SourceRange More info Combines two ranges to create a range that spans both. showInSource [jvm] Content fun showInSource (highlightStyle: Style, contextLines: Int = if (start.line == end.line) 0 else 1): Document More info Displays the portions of the source file containing this location and highlights the region corresponding to this location. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/#properties","text":"Name Summary end [jvm] val end : SourcePosition position that comes just after the characters in the range sourcePath [jvm] val sourcePath : String Description of where the source file came from. start [jvm] val start : SourcePosition position that comes just before the characters in the range","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/-source-range/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / SourceRange SourceRange \u00b6 [jvm] Content fun SourceRange (start: SourcePosition , end: SourcePosition ) More info Parameters \u00b6 jvm Name Summary start position that comes just before the characters in the range end position that comes just after the characters in the range","title":" source range"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/-source-range/#sourcerange","text":"[jvm] Content fun SourceRange (start: SourcePosition , end: SourcePosition ) More info","title":"SourceRange"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/-source-range/#parameters","text":"jvm Name Summary start position that comes just before the characters in the range end position that comes just after the characters in the range","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SourcePosition","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/component1/#component1","text":"[jvm] Content operator fun component1 (): SourcePosition","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SourcePosition","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/component2/#component2","text":"[jvm] Content operator fun component2 (): SourcePosition","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / copy copy \u00b6 [jvm] Content fun copy (start: SourcePosition , end: SourcePosition ): SourceRange","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/copy/#copy","text":"[jvm] Content fun copy (start: SourcePosition , end: SourcePosition ): SourceRange","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/end/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / end end \u00b6 [jvm] Content val end : SourcePosition More info Parameters \u00b6 jvm Name Summary end position that comes just after the characters in the range","title":"End"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/end/#end","text":"[jvm] Content val end : SourcePosition More info","title":"end"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/end/#parameters","text":"jvm Name Summary end position that comes just after the characters in the range","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/merge/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / merge merge \u00b6 [jvm] Content fun merge (that: SourceRange ): SourceRange More info Combines two ranges to create a range that spans both. Return \u00b6 The merged range.","title":"Merge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/merge/#merge","text":"[jvm] Content fun merge (that: SourceRange ): SourceRange More info Combines two ranges to create a range that spans both.","title":"merge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/merge/#return","text":"The merged range.","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/show-in-source/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / showInSource showInSource \u00b6 [jvm] Content fun showInSource (highlightStyle: Style, contextLines: Int = if (start.line == end.line) 0 else 1): Document More info Displays the portions of the source file containing this location and highlights the region corresponding to this location. Parameters \u00b6 jvm Name Summary highlightStyle Style to use for highlighting. contextLines Number of lines before and after the relevant region to display to give more context to the user.","title":"Show in source"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/show-in-source/#showinsource","text":"[jvm] Content fun showInSource (highlightStyle: Style, contextLines: Int = if (start.line == end.line) 0 else 1): Document More info Displays the portions of the source file containing this location and highlights the region corresponding to this location.","title":"showInSource"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/show-in-source/#parameters","text":"jvm Name Summary highlightStyle Style to use for highlighting. contextLines Number of lines before and after the relevant region to display to give more context to the user.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/source-path/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / sourcePath sourcePath \u00b6 [jvm] Content val sourcePath : String More info Description of where the source file came from.","title":"Source path"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/source-path/#sourcepath","text":"[jvm] Content val sourcePath : String More info Description of where the source file came from.","title":"sourcePath"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/start/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / start start \u00b6 [jvm] Content val start : SourcePosition More info Parameters \u00b6 jvm Name Summary start position that comes just before the characters in the range","title":"Start"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/start/#start","text":"[jvm] Content val start : SourcePosition More info","title":"start"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/start/#parameters","text":"jvm Name Summary start position that comes just before the characters in the range","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / SourceRange / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-source-range/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-yao-a-b-y-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / YaoABYProtocolParser YaoABYProtocolParser \u00b6 [jvm] object YaoABYProtocolParser : ProtocolParser < YaoABY > Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): YaoABY More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-yao-a-b-y-protocol-parser/#yaoabyprotocolparser","text":"[jvm] object YaoABYProtocolParser : ProtocolParser < YaoABY >","title":"YaoABYProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-yao-a-b-y-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): YaoABY More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-yao-a-b-y-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / YaoABYProtocolParser / parse parse \u00b6 [jvm] Content open override fun parse (arguments: ProtocolArguments ): YaoABY More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-yao-a-b-y-protocol-parser/parse/#parse","text":"[jvm] Content open override fun parse (arguments: ProtocolArguments ): YaoABY More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-yao-a-b-y-protocol-parser/parse/#throws","text":"Name Summary CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-z-k-p-protocol-parser/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ZKPProtocolParser ZKPProtocolParser \u00b6 [jvm] object ZKPProtocolParser : ProtocolParser < ZKP > Parser for the ZKP protocol. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): ZKP More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-z-k-p-protocol-parser/#zkpprotocolparser","text":"[jvm] object ZKPProtocolParser : ProtocolParser < ZKP > Parser for the ZKP protocol.","title":"ZKPProtocolParser"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-z-k-p-protocol-parser/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int parse [jvm] Content open override fun parse (arguments: ProtocolArguments ): ZKP More info Parses arguments into a protocol of type P. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-z-k-p-protocol-parser/parse/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / ZKPProtocolParser / parse parse \u00b6 [jvm] Content open override fun parse (arguments: ProtocolArguments ): ZKP More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically. Throws \u00b6 Name Summary CompilationError if the arguments are malformed.","title":"Parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-z-k-p-protocol-parser/parse/#parse","text":"[jvm] Content open override fun parse (arguments: ProtocolArguments ): ZKP More info Parses arguments into a protocol of type P. Note that calling Protocol.arguments on the returned value should result in a map equivalent to arguments. This function does not need to check for extra arguments; that is done automatically.","title":"parse"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/-z-k-p-protocol-parser/parse/#throws","text":"Name Summary CompilationError if the arguments are malformed.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym sym \u00b6 [jvm] interface sym CUP generated interface containing symbol constants. Properties \u00b6 Name Summary AND [jvm] val AND : Int ANDAND [jvm] val ANDAND : Int ARRAY [jvm] val ARRAY : Int ASSERT [jvm] val ASSERT : Int AT [jvm] val AT : Int BOOL [jvm] val BOOL : Int BOTTOM [jvm] val BOTTOM : Int BREAK [jvm] val BREAK : Int CAP_HOST [jvm] val CAP_HOST : Int CAP_IDENT [jvm] val CAP_IDENT : Int CLOSE_BRACE [jvm] val CLOSE_BRACE : Int CLOSE_PAREN [jvm] val CLOSE_PAREN : Int CLOSE_SQBRACE [jvm] val CLOSE_SQBRACE : Int COLON [jvm] val COLON : Int COMMA [jvm] val COMMA : Int DECLASSIFY [jvm] val DECLASSIFY : Int DIVIDE [jvm] val DIVIDE : Int DIVIDEEQ [jvm] val DIVIDEEQ : Int DOWNGRADE [jvm] val DOWNGRADE : Int ELSE [jvm] val ELSE : Int ENDORSE [jvm] val ENDORSE : Int EOF [jvm] val EOF : Int EQ [jvm] val EQ : Int EQEQ [jvm] val EQEQ : Int error [jvm] val error : Int FALSE [jvm] val FALSE : Int FOR [jvm] val FOR : Int FROM [jvm] val FROM : Int FUNCTION [jvm] val FUNCTION : Int GEQ [jvm] val GEQ : Int GT [jvm] val GT : Int HOST [jvm] val HOST : Int IDENT [jvm] val IDENT : Int IF [jvm] val IF : Int INPUT [jvm] val INPUT : Int INT [jvm] val INT : Int INT_LIT [jvm] val INT_LIT : Int JOIN [jvm] val JOIN : Int LARROW [jvm] val LARROW : Int LEQ [jvm] val LEQ : Int LET [jvm] val LET : Int LOOP [jvm] val LOOP : Int LT [jvm] val LT : Int MAX [jvm] val MAX : Int MEET [jvm] val MEET : Int MIN [jvm] val MIN : Int MINUS [jvm] val MINUS : Int MINUSEQ [jvm] val MINUSEQ : Int MUX [jvm] val MUX : Int NEQ [jvm] val NEQ : Int NOT [jvm] val NOT : Int OPEN_BRACE [jvm] val OPEN_BRACE : Int OPEN_PAREN [jvm] val OPEN_PAREN : Int OPEN_SQBRACE [jvm] val OPEN_SQBRACE : Int OR [jvm] val OR : Int OROR [jvm] val OROR : Int OUT [jvm] val OUT : Int OUTPUT [jvm] val OUTPUT : Int PARSE_LABEL [jvm] val PARSE_LABEL : Int PARSE_PROGRAM [jvm] val PARSE_PROGRAM : Int PLUS [jvm] val PLUS : Int PLUSEQ [jvm] val PLUSEQ : Int PROCESS [jvm] val PROCESS : Int RARROW [jvm] val RARROW : Int RECEIVE [jvm] val RECEIVE : Int SEMICOLON [jvm] val SEMICOLON : Int SEND [jvm] val SEND : Int terminalNames [jvm] val terminalNames : Array < String > TIMES [jvm] val TIMES : Int TIMESEQ [jvm] val TIMESEQ : Int TMP_IDENT [jvm] val TMP_IDENT : Int TO [jvm] val TO : Int TOP [jvm] val TOP : Int TRUE [jvm] val TRUE : Int UNIT [jvm] val UNIT : Int VAL [jvm] val VAL : Int VAR [jvm] val VAR : Int WHILE [jvm] val WHILE : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/#sym","text":"[jvm] interface sym CUP generated interface containing symbol constants.","title":"sym"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/#properties","text":"Name Summary AND [jvm] val AND : Int ANDAND [jvm] val ANDAND : Int ARRAY [jvm] val ARRAY : Int ASSERT [jvm] val ASSERT : Int AT [jvm] val AT : Int BOOL [jvm] val BOOL : Int BOTTOM [jvm] val BOTTOM : Int BREAK [jvm] val BREAK : Int CAP_HOST [jvm] val CAP_HOST : Int CAP_IDENT [jvm] val CAP_IDENT : Int CLOSE_BRACE [jvm] val CLOSE_BRACE : Int CLOSE_PAREN [jvm] val CLOSE_PAREN : Int CLOSE_SQBRACE [jvm] val CLOSE_SQBRACE : Int COLON [jvm] val COLON : Int COMMA [jvm] val COMMA : Int DECLASSIFY [jvm] val DECLASSIFY : Int DIVIDE [jvm] val DIVIDE : Int DIVIDEEQ [jvm] val DIVIDEEQ : Int DOWNGRADE [jvm] val DOWNGRADE : Int ELSE [jvm] val ELSE : Int ENDORSE [jvm] val ENDORSE : Int EOF [jvm] val EOF : Int EQ [jvm] val EQ : Int EQEQ [jvm] val EQEQ : Int error [jvm] val error : Int FALSE [jvm] val FALSE : Int FOR [jvm] val FOR : Int FROM [jvm] val FROM : Int FUNCTION [jvm] val FUNCTION : Int GEQ [jvm] val GEQ : Int GT [jvm] val GT : Int HOST [jvm] val HOST : Int IDENT [jvm] val IDENT : Int IF [jvm] val IF : Int INPUT [jvm] val INPUT : Int INT [jvm] val INT : Int INT_LIT [jvm] val INT_LIT : Int JOIN [jvm] val JOIN : Int LARROW [jvm] val LARROW : Int LEQ [jvm] val LEQ : Int LET [jvm] val LET : Int LOOP [jvm] val LOOP : Int LT [jvm] val LT : Int MAX [jvm] val MAX : Int MEET [jvm] val MEET : Int MIN [jvm] val MIN : Int MINUS [jvm] val MINUS : Int MINUSEQ [jvm] val MINUSEQ : Int MUX [jvm] val MUX : Int NEQ [jvm] val NEQ : Int NOT [jvm] val NOT : Int OPEN_BRACE [jvm] val OPEN_BRACE : Int OPEN_PAREN [jvm] val OPEN_PAREN : Int OPEN_SQBRACE [jvm] val OPEN_SQBRACE : Int OR [jvm] val OR : Int OROR [jvm] val OROR : Int OUT [jvm] val OUT : Int OUTPUT [jvm] val OUTPUT : Int PARSE_LABEL [jvm] val PARSE_LABEL : Int PARSE_PROGRAM [jvm] val PARSE_PROGRAM : Int PLUS [jvm] val PLUS : Int PLUSEQ [jvm] val PLUSEQ : Int PROCESS [jvm] val PROCESS : Int RARROW [jvm] val RARROW : Int RECEIVE [jvm] val RECEIVE : Int SEMICOLON [jvm] val SEMICOLON : Int SEND [jvm] val SEND : Int terminalNames [jvm] val terminalNames : Array < String > TIMES [jvm] val TIMES : Int TIMESEQ [jvm] val TIMESEQ : Int TMP_IDENT [jvm] val TMP_IDENT : Int TO [jvm] val TO : Int TOP [jvm] val TOP : Int TRUE [jvm] val TRUE : Int UNIT [jvm] val UNIT : Int VAL [jvm] val VAL : Int VAR [jvm] val VAR : Int WHILE [jvm] val WHILE : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-n-d-a-n-d/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / ANDAND ANDAND \u00b6 [jvm] Content val ANDAND : Int","title":" a n d a n d"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-n-d-a-n-d/#andand","text":"[jvm] Content val ANDAND : Int","title":"ANDAND"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-n-d/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / AND AND \u00b6 [jvm] Content val AND : Int","title":" a n d"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-n-d/#and","text":"[jvm] Content val AND : Int","title":"AND"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-r-r-a-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / ARRAY ARRAY \u00b6 [jvm] Content val ARRAY : Int","title":" a r r a y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-r-r-a-y/#array","text":"[jvm] Content val ARRAY : Int","title":"ARRAY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-s-s-e-r-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / ASSERT ASSERT \u00b6 [jvm] Content val ASSERT : Int","title":" a s s e r t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-s-s-e-r-t/#assert","text":"[jvm] Content val ASSERT : Int","title":"ASSERT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / AT AT \u00b6 [jvm] Content val AT : Int","title":" a t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-a-t/#at","text":"[jvm] Content val AT : Int","title":"AT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-b-o-o-l/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / BOOL BOOL \u00b6 [jvm] Content val BOOL : Int","title":" b o o l"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-b-o-o-l/#bool","text":"[jvm] Content val BOOL : Int","title":"BOOL"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-b-o-t-t-o-m/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / BOTTOM BOTTOM \u00b6 [jvm] Content val BOTTOM : Int","title":" b o t t o m"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-b-o-t-t-o-m/#bottom","text":"[jvm] Content val BOTTOM : Int","title":"BOTTOM"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-b-r-e-a-k/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / BREAK BREAK \u00b6 [jvm] Content val BREAK : Int","title":" b r e a k"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-b-r-e-a-k/#break","text":"[jvm] Content val BREAK : Int","title":"BREAK"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-a-p_-h-o-s-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / CAP_HOST CAP_HOST \u00b6 [jvm] Content val CAP_HOST : Int","title":" c a p  h o s t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-a-p_-h-o-s-t/#cap_host","text":"[jvm] Content val CAP_HOST : Int","title":"CAP_HOST"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-a-p_-i-d-e-n-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / CAP_IDENT CAP_IDENT \u00b6 [jvm] Content val CAP_IDENT : Int","title":" c a p  i d e n t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-a-p_-i-d-e-n-t/#cap_ident","text":"[jvm] Content val CAP_IDENT : Int","title":"CAP_IDENT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-l-o-s-e_-b-r-a-c-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / CLOSE_BRACE CLOSE_BRACE \u00b6 [jvm] Content val CLOSE_BRACE : Int","title":" c l o s e  b r a c e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-l-o-s-e_-b-r-a-c-e/#close_brace","text":"[jvm] Content val CLOSE_BRACE : Int","title":"CLOSE_BRACE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-l-o-s-e_-p-a-r-e-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / CLOSE_PAREN CLOSE_PAREN \u00b6 [jvm] Content val CLOSE_PAREN : Int","title":" c l o s e  p a r e n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-l-o-s-e_-p-a-r-e-n/#close_paren","text":"[jvm] Content val CLOSE_PAREN : Int","title":"CLOSE_PAREN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-l-o-s-e_-s-q-b-r-a-c-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / CLOSE_SQBRACE CLOSE_SQBRACE \u00b6 [jvm] Content val CLOSE_SQBRACE : Int","title":" c l o s e  s q b r a c e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-l-o-s-e_-s-q-b-r-a-c-e/#close_sqbrace","text":"[jvm] Content val CLOSE_SQBRACE : Int","title":"CLOSE_SQBRACE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-o-l-o-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / COLON COLON \u00b6 [jvm] Content val COLON : Int","title":" c o l o n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-o-l-o-n/#colon","text":"[jvm] Content val COLON : Int","title":"COLON"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-o-m-m-a/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / COMMA COMMA \u00b6 [jvm] Content val COMMA : Int","title":" c o m m a"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-c-o-m-m-a/#comma","text":"[jvm] Content val COMMA : Int","title":"COMMA"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-e-c-l-a-s-s-i-f-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / DECLASSIFY DECLASSIFY \u00b6 [jvm] Content val DECLASSIFY : Int","title":" d e c l a s s i f y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-e-c-l-a-s-s-i-f-y/#declassify","text":"[jvm] Content val DECLASSIFY : Int","title":"DECLASSIFY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-i-v-i-d-e-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / DIVIDEEQ DIVIDEEQ \u00b6 [jvm] Content val DIVIDEEQ : Int","title":" d i v i d e e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-i-v-i-d-e-e-q/#divideeq","text":"[jvm] Content val DIVIDEEQ : Int","title":"DIVIDEEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-i-v-i-d-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / DIVIDE DIVIDE \u00b6 [jvm] Content val DIVIDE : Int","title":" d i v i d e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-i-v-i-d-e/#divide","text":"[jvm] Content val DIVIDE : Int","title":"DIVIDE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-o-w-n-g-r-a-d-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / DOWNGRADE DOWNGRADE \u00b6 [jvm] Content val DOWNGRADE : Int","title":" d o w n g r a d e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-d-o-w-n-g-r-a-d-e/#downgrade","text":"[jvm] Content val DOWNGRADE : Int","title":"DOWNGRADE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-l-s-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / ELSE ELSE \u00b6 [jvm] Content val ELSE : Int","title":" e l s e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-l-s-e/#else","text":"[jvm] Content val ELSE : Int","title":"ELSE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-n-d-o-r-s-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / ENDORSE ENDORSE \u00b6 [jvm] Content val ENDORSE : Int","title":" e n d o r s e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-n-d-o-r-s-e/#endorse","text":"[jvm] Content val ENDORSE : Int","title":"ENDORSE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-o-f/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / EOF EOF \u00b6 [jvm] Content val EOF : Int","title":" e o f"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-o-f/#eof","text":"[jvm] Content val EOF : Int","title":"EOF"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-q-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / EQEQ EQEQ \u00b6 [jvm] Content val EQEQ : Int","title":" e q e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-q-e-q/#eqeq","text":"[jvm] Content val EQEQ : Int","title":"EQEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / EQ EQ \u00b6 [jvm] Content val EQ : Int","title":" e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-e-q/#eq","text":"[jvm] Content val EQ : Int","title":"EQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-a-l-s-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / FALSE FALSE \u00b6 [jvm] Content val FALSE : Int","title":" f a l s e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-a-l-s-e/#false","text":"[jvm] Content val FALSE : Int","title":"FALSE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-o-r/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / FOR FOR \u00b6 [jvm] Content val FOR : Int","title":" f o r"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-o-r/#for","text":"[jvm] Content val FOR : Int","title":"FOR"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-r-o-m/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / FROM FROM \u00b6 [jvm] Content val FROM : Int","title":" f r o m"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-r-o-m/#from","text":"[jvm] Content val FROM : Int","title":"FROM"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-u-n-c-t-i-o-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / FUNCTION FUNCTION \u00b6 [jvm] Content val FUNCTION : Int","title":" f u n c t i o n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-f-u-n-c-t-i-o-n/#function","text":"[jvm] Content val FUNCTION : Int","title":"FUNCTION"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-g-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / GEQ GEQ \u00b6 [jvm] Content val GEQ : Int","title":" g e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-g-e-q/#geq","text":"[jvm] Content val GEQ : Int","title":"GEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-g-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / GT GT \u00b6 [jvm] Content val GT : Int","title":" g t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-g-t/#gt","text":"[jvm] Content val GT : Int","title":"GT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-h-o-s-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / HOST HOST \u00b6 [jvm] Content val HOST : Int","title":" h o s t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-h-o-s-t/#host","text":"[jvm] Content val HOST : Int","title":"HOST"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-d-e-n-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / IDENT IDENT \u00b6 [jvm] Content val IDENT : Int","title":" i d e n t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-d-e-n-t/#ident","text":"[jvm] Content val IDENT : Int","title":"IDENT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-f/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / IF IF \u00b6 [jvm] Content val IF : Int","title":" i f"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-f/#if","text":"[jvm] Content val IF : Int","title":"IF"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / INPUT INPUT \u00b6 [jvm] Content val INPUT : Int","title":" i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-n-p-u-t/#input","text":"[jvm] Content val INPUT : Int","title":"INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-n-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / INT INT \u00b6 [jvm] Content val INT : Int","title":" i n t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-n-t/#int","text":"[jvm] Content val INT : Int","title":"INT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-n-t_-l-i-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / INT_LIT INT_LIT \u00b6 [jvm] Content val INT_LIT : Int","title":" i n t  l i t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-i-n-t_-l-i-t/#int_lit","text":"[jvm] Content val INT_LIT : Int","title":"INT_LIT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-j-o-i-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / JOIN JOIN \u00b6 [jvm] Content val JOIN : Int","title":" j o i n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-j-o-i-n/#join","text":"[jvm] Content val JOIN : Int","title":"JOIN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-a-r-r-o-w/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / LARROW LARROW \u00b6 [jvm] Content val LARROW : Int","title":" l a r r o w"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-a-r-r-o-w/#larrow","text":"[jvm] Content val LARROW : Int","title":"LARROW"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / LEQ LEQ \u00b6 [jvm] Content val LEQ : Int","title":" l e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-e-q/#leq","text":"[jvm] Content val LEQ : Int","title":"LEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-e-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / LET LET \u00b6 [jvm] Content val LET : Int","title":" l e t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-e-t/#let","text":"[jvm] Content val LET : Int","title":"LET"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-o-o-p/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / LOOP LOOP \u00b6 [jvm] Content val LOOP : Int","title":" l o o p"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-o-o-p/#loop","text":"[jvm] Content val LOOP : Int","title":"LOOP"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / LT LT \u00b6 [jvm] Content val LT : Int","title":" l t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-l-t/#lt","text":"[jvm] Content val LT : Int","title":"LT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-a-x/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / MAX MAX \u00b6 [jvm] Content val MAX : Int","title":" m a x"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-a-x/#max","text":"[jvm] Content val MAX : Int","title":"MAX"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-e-e-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / MEET MEET \u00b6 [jvm] Content val MEET : Int","title":" m e e t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-e-e-t/#meet","text":"[jvm] Content val MEET : Int","title":"MEET"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-i-n-u-s-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / MINUSEQ MINUSEQ \u00b6 [jvm] Content val MINUSEQ : Int","title":" m i n u s e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-i-n-u-s-e-q/#minuseq","text":"[jvm] Content val MINUSEQ : Int","title":"MINUSEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-i-n-u-s/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / MINUS MINUS \u00b6 [jvm] Content val MINUS : Int","title":" m i n u s"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-i-n-u-s/#minus","text":"[jvm] Content val MINUS : Int","title":"MINUS"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-i-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / MIN MIN \u00b6 [jvm] Content val MIN : Int","title":" m i n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-i-n/#min","text":"[jvm] Content val MIN : Int","title":"MIN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-u-x/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / MUX MUX \u00b6 [jvm] Content val MUX : Int","title":" m u x"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-m-u-x/#mux","text":"[jvm] Content val MUX : Int","title":"MUX"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-n-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / NEQ NEQ \u00b6 [jvm] Content val NEQ : Int","title":" n e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-n-e-q/#neq","text":"[jvm] Content val NEQ : Int","title":"NEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-n-o-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / NOT NOT \u00b6 [jvm] Content val NOT : Int","title":" n o t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-n-o-t/#not","text":"[jvm] Content val NOT : Int","title":"NOT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-p-e-n_-b-r-a-c-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / OPEN_BRACE OPEN_BRACE \u00b6 [jvm] Content val OPEN_BRACE : Int","title":" o p e n  b r a c e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-p-e-n_-b-r-a-c-e/#open_brace","text":"[jvm] Content val OPEN_BRACE : Int","title":"OPEN_BRACE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-p-e-n_-p-a-r-e-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / OPEN_PAREN OPEN_PAREN \u00b6 [jvm] Content val OPEN_PAREN : Int","title":" o p e n  p a r e n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-p-e-n_-p-a-r-e-n/#open_paren","text":"[jvm] Content val OPEN_PAREN : Int","title":"OPEN_PAREN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-p-e-n_-s-q-b-r-a-c-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / OPEN_SQBRACE OPEN_SQBRACE \u00b6 [jvm] Content val OPEN_SQBRACE : Int","title":" o p e n  s q b r a c e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-p-e-n_-s-q-b-r-a-c-e/#open_sqbrace","text":"[jvm] Content val OPEN_SQBRACE : Int","title":"OPEN_SQBRACE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-r-o-r/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / OROR OROR \u00b6 [jvm] Content val OROR : Int","title":" o r o r"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-r-o-r/#oror","text":"[jvm] Content val OROR : Int","title":"OROR"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-r/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / OR OR \u00b6 [jvm] Content val OR : Int","title":" o r"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-r/#or","text":"[jvm] Content val OR : Int","title":"OR"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / OUTPUT OUTPUT \u00b6 [jvm] Content val OUTPUT : Int","title":" o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-u-t-p-u-t/#output","text":"[jvm] Content val OUTPUT : Int","title":"OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / OUT OUT \u00b6 [jvm] Content val OUT : Int","title":" o u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-o-u-t/#out","text":"[jvm] Content val OUT : Int","title":"OUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-a-r-s-e_-l-a-b-e-l/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / PARSE_LABEL PARSE_LABEL \u00b6 [jvm] Content val PARSE_LABEL : Int","title":" p a r s e  l a b e l"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-a-r-s-e_-l-a-b-e-l/#parse_label","text":"[jvm] Content val PARSE_LABEL : Int","title":"PARSE_LABEL"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-a-r-s-e_-p-r-o-g-r-a-m/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / PARSE_PROGRAM PARSE_PROGRAM \u00b6 [jvm] Content val PARSE_PROGRAM : Int","title":" p a r s e  p r o g r a m"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-a-r-s-e_-p-r-o-g-r-a-m/#parse_program","text":"[jvm] Content val PARSE_PROGRAM : Int","title":"PARSE_PROGRAM"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-l-u-s-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / PLUSEQ PLUSEQ \u00b6 [jvm] Content val PLUSEQ : Int","title":" p l u s e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-l-u-s-e-q/#pluseq","text":"[jvm] Content val PLUSEQ : Int","title":"PLUSEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-l-u-s/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / PLUS PLUS \u00b6 [jvm] Content val PLUS : Int","title":" p l u s"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-l-u-s/#plus","text":"[jvm] Content val PLUS : Int","title":"PLUS"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-r-o-c-e-s-s/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / PROCESS PROCESS \u00b6 [jvm] Content val PROCESS : Int","title":" p r o c e s s"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-p-r-o-c-e-s-s/#process","text":"[jvm] Content val PROCESS : Int","title":"PROCESS"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-r-a-r-r-o-w/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / RARROW RARROW \u00b6 [jvm] Content val RARROW : Int","title":" r a r r o w"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-r-a-r-r-o-w/#rarrow","text":"[jvm] Content val RARROW : Int","title":"RARROW"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-r-e-c-e-i-v-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / RECEIVE RECEIVE \u00b6 [jvm] Content val RECEIVE : Int","title":" r e c e i v e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-r-e-c-e-i-v-e/#receive","text":"[jvm] Content val RECEIVE : Int","title":"RECEIVE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-s-e-m-i-c-o-l-o-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / SEMICOLON SEMICOLON \u00b6 [jvm] Content val SEMICOLON : Int","title":" s e m i c o l o n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-s-e-m-i-c-o-l-o-n/#semicolon","text":"[jvm] Content val SEMICOLON : Int","title":"SEMICOLON"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-s-e-n-d/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / SEND SEND \u00b6 [jvm] Content val SEND : Int","title":" s e n d"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-s-e-n-d/#send","text":"[jvm] Content val SEND : Int","title":"SEND"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-i-m-e-s-e-q/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / TIMESEQ TIMESEQ \u00b6 [jvm] Content val TIMESEQ : Int","title":" t i m e s e q"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-i-m-e-s-e-q/#timeseq","text":"[jvm] Content val TIMESEQ : Int","title":"TIMESEQ"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-i-m-e-s/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / TIMES TIMES \u00b6 [jvm] Content val TIMES : Int","title":" t i m e s"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-i-m-e-s/#times","text":"[jvm] Content val TIMES : Int","title":"TIMES"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-m-p_-i-d-e-n-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / TMP_IDENT TMP_IDENT \u00b6 [jvm] Content val TMP_IDENT : Int","title":" t m p  i d e n t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-m-p_-i-d-e-n-t/#tmp_ident","text":"[jvm] Content val TMP_IDENT : Int","title":"TMP_IDENT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-o-p/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / TOP TOP \u00b6 [jvm] Content val TOP : Int","title":" t o p"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-o-p/#top","text":"[jvm] Content val TOP : Int","title":"TOP"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-o/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / TO TO \u00b6 [jvm] Content val TO : Int","title":" t o"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-o/#to","text":"[jvm] Content val TO : Int","title":"TO"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-r-u-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / TRUE TRUE \u00b6 [jvm] Content val TRUE : Int","title":" t r u e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-t-r-u-e/#true","text":"[jvm] Content val TRUE : Int","title":"TRUE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-u-n-i-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / UNIT UNIT \u00b6 [jvm] Content val UNIT : Int","title":" u n i t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-u-n-i-t/#unit","text":"[jvm] Content val UNIT : Int","title":"UNIT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-v-a-l/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / VAL VAL \u00b6 [jvm] Content val VAL : Int","title":" v a l"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-v-a-l/#val","text":"[jvm] Content val VAL : Int","title":"VAL"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-v-a-r/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / VAR VAR \u00b6 [jvm] Content val VAR : Int","title":" v a r"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-v-a-r/#var","text":"[jvm] Content val VAR : Int","title":"VAR"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-w-h-i-l-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / WHILE WHILE \u00b6 [jvm] Content val WHILE : Int","title":" w h i l e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/-w-h-i-l-e/#while","text":"[jvm] Content val WHILE : Int","title":"WHILE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/error/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / error error \u00b6 [jvm] Content val error : Int","title":"Error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/error/#error","text":"[jvm] Content val error : Int","title":"error"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/terminal-names/","text":"// compiler / edu.cornell.cs.apl.viaduct.parsing / sym / terminalNames terminalNames \u00b6 [jvm] Content val terminalNames : Array < String >","title":"Terminal names"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.parsing/sym/terminal-names/#terminalnames","text":"[jvm] Content val terminalNames : Array < String >","title":"terminalNames"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes Package edu.cornell.cs.apl.viaduct.passes \u00b6 Types \u00b6 Name Summary MuxPostprocessor [jvm] Content class MuxPostprocessor ( containedProtocolCheck : ( Protocol ) -> Boolean , protocolAssignment : ( FunctionName , Variable ) -> Protocol ) : ProgramPostprocessor ProgramPostprocessor [jvm] Content interface ProgramPostprocessor ProgramPostprocessorRegistry [jvm] Content class ProgramPostprocessorRegistry ( postprocessors : List < ProgramPostprocessor >) : ProgramPostprocessor Functions \u00b6 Name Summary annotateWithProtocols [jvm] Content fun ProgramNode . annotateWithProtocols (assignment: ( FunctionName , Variable ) -> Protocol ): ProgramNode More info Annotate parameters, declarations, and let nodes with protocols. canMux [jvm] Content fun StatementNode . canMux (): Boolean check [jvm] Content fun ProgramNode . check () More info Performs all static checks on this program. elaborated [jvm] Content fun ProgramNode . elaborated (): ProgramNode More info Elaborates this surface program into a program in the intermediate representation. specialize [jvm] Content fun ProgramNode . specialize (): ProgramNode More info Returns an AST where every call site is specialized into new functions as much as possible. specification [jvm] Content fun ProgramNode . specification (adversaryLabel: Label ): ProgramNode More info Returns a universal composability (UC) ideal functionality that captures the security behavior of this program.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/#package-educornellcsaplviaductpasses","text":"","title":"Package edu.cornell.cs.apl.viaduct.passes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/#types","text":"Name Summary MuxPostprocessor [jvm] Content class MuxPostprocessor ( containedProtocolCheck : ( Protocol ) -> Boolean , protocolAssignment : ( FunctionName , Variable ) -> Protocol ) : ProgramPostprocessor ProgramPostprocessor [jvm] Content interface ProgramPostprocessor ProgramPostprocessorRegistry [jvm] Content class ProgramPostprocessorRegistry ( postprocessors : List < ProgramPostprocessor >) : ProgramPostprocessor","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/#functions","text":"Name Summary annotateWithProtocols [jvm] Content fun ProgramNode . annotateWithProtocols (assignment: ( FunctionName , Variable ) -> Protocol ): ProgramNode More info Annotate parameters, declarations, and let nodes with protocols. canMux [jvm] Content fun StatementNode . canMux (): Boolean check [jvm] Content fun ProgramNode . check () More info Performs all static checks on this program. elaborated [jvm] Content fun ProgramNode . elaborated (): ProgramNode More info Elaborates this surface program into a program in the intermediate representation. specialize [jvm] Content fun ProgramNode . specialize (): ProgramNode More info Returns an AST where every call site is specialized into new functions as much as possible. specification [jvm] Content fun ProgramNode . specification (adversaryLabel: Label ): ProgramNode More info Returns a universal composability (UC) ideal functionality that captures the security behavior of this program.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/annotate-with-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / annotateWithProtocols annotateWithProtocols \u00b6 [jvm] Content fun ProgramNode . annotateWithProtocols (assignment: ( FunctionName , Variable ) -> Protocol ): ProgramNode More info Annotate parameters, declarations, and let nodes with protocols.","title":"Annotate with protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/annotate-with-protocols/#annotatewithprotocols","text":"[jvm] Content fun ProgramNode . annotateWithProtocols (assignment: ( FunctionName , Variable ) -> Protocol ): ProgramNode More info Annotate parameters, declarations, and let nodes with protocols.","title":"annotateWithProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/can-mux/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / canMux canMux \u00b6 [jvm] Content fun StatementNode . canMux (): Boolean","title":"Can mux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/can-mux/#canmux","text":"[jvm] Content fun StatementNode . canMux (): Boolean","title":"canMux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/check/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / check check \u00b6 [jvm] Content fun ProgramNode . check () More info Performs all static checks on this program. Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.CompilationError if there are errors in the program.","title":"Check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/check/#check","text":"[jvm] Content fun ProgramNode . check () More info Performs all static checks on this program.","title":"check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/check/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.CompilationError if there are errors in the program.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/elaborated/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / elaborated elaborated \u00b6 [jvm] Content fun ProgramNode . elaborated (): ProgramNode More info Elaborates this surface program into a program in the intermediate representation. See Node for the list of transformations performed.","title":"Elaborated"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/elaborated/#elaborated","text":"[jvm] Content fun ProgramNode . elaborated (): ProgramNode More info Elaborates this surface program into a program in the intermediate representation. See Node for the list of transformations performed.","title":"elaborated"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/specialize/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / specialize specialize \u00b6 [jvm] Content fun ProgramNode . specialize (): ProgramNode More info Returns an AST where every call site is specialized into new functions as much as possible. This allows for the most liberal protocol selection possible, at the cost of redundancy. The specializer will not specialize (mutually) recursive functions to prevent unbounded specialization.","title":"Specialize"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/specialize/#specialize","text":"[jvm] Content fun ProgramNode . specialize (): ProgramNode More info Returns an AST where every call site is specialized into new functions as much as possible. This allows for the most liberal protocol selection possible, at the cost of redundancy. The specializer will not specialize (mutually) recursive functions to prevent unbounded specialization.","title":"specialize"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/specification/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / specification specification \u00b6 [jvm] Content fun ProgramNode . specification (adversaryLabel: Label ): ProgramNode More info Returns a universal composability (UC) ideal functionality that captures the security behavior of this program. Essentially, this function instruments each process so that any data that the adversary is allowed to see is explicitly sent to Adversary , and any data that the adversary is allowed to corrupt is received from Adversary . Data leakage and corruption is done at LetNode s. What data the adversary can see or influence is determined by comparing adversaryLabel to the Label s of the Temporary variables defined by the LetNode s. Labels of the temporaries are computed based on the protocol of the process they are in. For an Ideal protocol, the label is determined using information flow analysis. For any other protocol, the label is the same as Protocol.authority . Finally, processes where the protocol is a HostInterface are simply removed, since these processes are debug only.","title":"Specification"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/specification/#specification","text":"[jvm] Content fun ProgramNode . specification (adversaryLabel: Label ): ProgramNode More info Returns a universal composability (UC) ideal functionality that captures the security behavior of this program. Essentially, this function instruments each process so that any data that the adversary is allowed to see is explicitly sent to Adversary , and any data that the adversary is allowed to corrupt is received from Adversary . Data leakage and corruption is done at LetNode s. What data the adversary can see or influence is determined by comparing adversaryLabel to the Label s of the Temporary variables defined by the LetNode s. Labels of the temporaries are computed based on the protocol of the process they are in. For an Ideal protocol, the label is determined using information flow analysis. For any other protocol, the label is the same as Protocol.authority . Finally, processes where the protocol is a HostInterface are simply removed, since these processes are debug only.","title":"specification"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / MuxPostprocessor MuxPostprocessor \u00b6 [jvm] class MuxPostprocessor ( containedProtocolCheck : ( Protocol ) -> Boolean , protocolAssignment : ( FunctionName , Variable ) -> Protocol ) : ProgramPostprocessor Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mux [jvm] Content fun mux (block: BlockNode , nameAnalysis: NameAnalysis , nameGenerator: FreshNameGenerator = block.freshVariableNameGenerator()): BlockNode postprocess [jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary containedProtocolCheck [jvm] val containedProtocolCheck : ( Protocol ) -> Boolean protocolAssignment [jvm] val protocolAssignment : ( FunctionName , Variable ) -> Protocol","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/#muxpostprocessor","text":"[jvm] class MuxPostprocessor ( containedProtocolCheck : ( Protocol ) -> Boolean , protocolAssignment : ( FunctionName , Variable ) -> Protocol ) : ProgramPostprocessor","title":"MuxPostprocessor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mux [jvm] Content fun mux (block: BlockNode , nameAnalysis: NameAnalysis , nameGenerator: FreshNameGenerator = block.freshVariableNameGenerator()): BlockNode postprocess [jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/#properties","text":"Name Summary containedProtocolCheck [jvm] val containedProtocolCheck : ( Protocol ) -> Boolean protocolAssignment [jvm] val protocolAssignment : ( FunctionName , Variable ) -> Protocol","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/-mux-postprocessor/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / MuxPostprocessor / MuxPostprocessor MuxPostprocessor \u00b6 [jvm] Content fun MuxPostprocessor (containedProtocolCheck: ( Protocol ) -> Boolean , protocolAssignment: ( FunctionName , Variable ) -> Protocol )","title":" mux postprocessor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/-mux-postprocessor/#muxpostprocessor","text":"[jvm] Content fun MuxPostprocessor (containedProtocolCheck: ( Protocol ) -> Boolean , protocolAssignment: ( FunctionName , Variable ) -> Protocol )","title":"MuxPostprocessor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/contained-protocol-check/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / MuxPostprocessor / containedProtocolCheck containedProtocolCheck \u00b6 [jvm] Content val containedProtocolCheck : ( Protocol ) -> Boolean","title":"Contained protocol check"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/contained-protocol-check/#containedprotocolcheck","text":"[jvm] Content val containedProtocolCheck : ( Protocol ) -> Boolean","title":"containedProtocolCheck"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/mux/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / MuxPostprocessor / mux mux \u00b6 [jvm] Content fun mux (block: BlockNode , nameAnalysis: NameAnalysis , nameGenerator: FreshNameGenerator = block.freshVariableNameGenerator()): BlockNode","title":"Mux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/mux/#mux","text":"[jvm] Content fun mux (block: BlockNode , nameAnalysis: NameAnalysis , nameGenerator: FreshNameGenerator = block.freshVariableNameGenerator()): BlockNode","title":"mux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/postprocess/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / MuxPostprocessor / postprocess postprocess \u00b6 [jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode","title":"Postprocess"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/postprocess/#postprocess","text":"[jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode","title":"postprocess"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/protocol-assignment/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / MuxPostprocessor / protocolAssignment protocolAssignment \u00b6 [jvm] Content val protocolAssignment : ( FunctionName , Variable ) -> Protocol","title":"Protocol assignment"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/protocol-assignment/#protocolassignment","text":"[jvm] Content val protocolAssignment : ( FunctionName , Variable ) -> Protocol","title":"protocolAssignment"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / MuxPostprocessor / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-mux-postprocessor/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / ProgramPostprocessor ProgramPostprocessor \u00b6 [jvm] interface ProgramPostprocessor Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int postprocess [jvm] Content abstract fun postprocess (program: ProgramNode ): ProgramNode toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name MuxPostprocessor ProgramPostprocessorRegistry","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor/#programpostprocessor","text":"[jvm] interface ProgramPostprocessor","title":"ProgramPostprocessor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int postprocess [jvm] Content abstract fun postprocess (program: ProgramNode ): ProgramNode toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor/#inheritors","text":"Name MuxPostprocessor ProgramPostprocessorRegistry","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor/postprocess/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / ProgramPostprocessor / postprocess postprocess \u00b6 [jvm] Content abstract fun postprocess (program: ProgramNode ): ProgramNode","title":"Postprocess"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor/postprocess/#postprocess","text":"[jvm] Content abstract fun postprocess (program: ProgramNode ): ProgramNode","title":"postprocess"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / ProgramPostprocessorRegistry ProgramPostprocessorRegistry \u00b6 [jvm] class ProgramPostprocessorRegistry ( postprocessors : List < ProgramPostprocessor >) : ProgramPostprocessor Constructors \u00b6 Name Summary ProgramPostprocessorRegistry [jvm] fun ProgramPostprocessorRegistry (vararg postprocessors: ProgramPostprocessor ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int postprocess [jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/#programpostprocessorregistry","text":"[jvm] class ProgramPostprocessorRegistry ( postprocessors : List < ProgramPostprocessor >) : ProgramPostprocessor","title":"ProgramPostprocessorRegistry"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/#constructors","text":"Name Summary ProgramPostprocessorRegistry [jvm] fun ProgramPostprocessorRegistry (vararg postprocessors: ProgramPostprocessor )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int postprocess [jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/-program-postprocessor-registry/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / ProgramPostprocessorRegistry / ProgramPostprocessorRegistry ProgramPostprocessorRegistry \u00b6 [jvm] Content fun ProgramPostprocessorRegistry (vararg postprocessors: ProgramPostprocessor ) fun ProgramPostprocessorRegistry (postprocessors: List < ProgramPostprocessor >)","title":" program postprocessor registry"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/-program-postprocessor-registry/#programpostprocessorregistry","text":"[jvm] Content fun ProgramPostprocessorRegistry (vararg postprocessors: ProgramPostprocessor ) fun ProgramPostprocessorRegistry (postprocessors: List < ProgramPostprocessor >)","title":"ProgramPostprocessorRegistry"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/postprocess/","text":"// compiler / edu.cornell.cs.apl.viaduct.passes / ProgramPostprocessorRegistry / postprocess postprocess \u00b6 [jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode","title":"Postprocess"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.passes/-program-postprocessor-registry/postprocess/#postprocess","text":"[jvm] Content open override fun postprocess (program: ProgramNode ): ProgramNode","title":"postprocess"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols Package edu.cornell.cs.apl.viaduct.protocols \u00b6 Types \u00b6 Name Summary ABY [jvm] Content abstract class ABY ( server : Host , client : Host ) : Protocol More info The ABY protocol which is a two party MPC protocol secure in the honest-but-curios setting. Adversary [jvm] Content object Adversary : Protocol More info The protocol that represents the adversary interface. ArithABY [jvm] Content class ArithABY ( server : Host , client : Host ) : ABY BoolABY [jvm] Content class BoolABY ( server : Host , client : Host ) : ABY Commitment [jvm] Content class Commitment ( cleartextHost : Host , hashHosts : Set < Host >) : Protocol HostInterface [jvm] Content data class HostInterface ( host : Host ) : Protocol More info The protocol that represents the external interface to a given host. Ideal [jvm] Content class Ideal ( identifier : String ) : Protocol More info A perfectly trusted protocol. Local [jvm] Content class Local ( host : Host ) : Plaintext More info The protocol that executes code on a specific host in the clear. Plaintext [jvm] Content abstract class Plaintext : Protocol Replication [jvm] Content class Replication ( hosts : Set < Host >) : Plaintext More info The protocol that replicates data and computations across a set of hosts in the clear. Synchronization [jvm] Content class Synchronization ( hosts : Set < Host >) : Protocol More info Protocol used to synchronize hosts. YaoABY [jvm] Content class YaoABY ( server : Host , client : Host ) : ABY ZKP [jvm] Content class ZKP ( prover : Host , verifiers : Set < Host >) : Protocol Properties \u00b6 Name Summary MainProtocol [jvm] val MainProtocol : Ideal The ideal protocol specified by the programmer that is the input to the compiler.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/#package-educornellcsaplviaductprotocols","text":"","title":"Package edu.cornell.cs.apl.viaduct.protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/#types","text":"Name Summary ABY [jvm] Content abstract class ABY ( server : Host , client : Host ) : Protocol More info The ABY protocol which is a two party MPC protocol secure in the honest-but-curios setting. Adversary [jvm] Content object Adversary : Protocol More info The protocol that represents the adversary interface. ArithABY [jvm] Content class ArithABY ( server : Host , client : Host ) : ABY BoolABY [jvm] Content class BoolABY ( server : Host , client : Host ) : ABY Commitment [jvm] Content class Commitment ( cleartextHost : Host , hashHosts : Set < Host >) : Protocol HostInterface [jvm] Content data class HostInterface ( host : Host ) : Protocol More info The protocol that represents the external interface to a given host. Ideal [jvm] Content class Ideal ( identifier : String ) : Protocol More info A perfectly trusted protocol. Local [jvm] Content class Local ( host : Host ) : Plaintext More info The protocol that executes code on a specific host in the clear. Plaintext [jvm] Content abstract class Plaintext : Protocol Replication [jvm] Content class Replication ( hosts : Set < Host >) : Plaintext More info The protocol that replicates data and computations across a set of hosts in the clear. Synchronization [jvm] Content class Synchronization ( hosts : Set < Host >) : Protocol More info Protocol used to synchronize hosts. YaoABY [jvm] Content class YaoABY ( server : Host , client : Host ) : ABY ZKP [jvm] Content class ZKP ( prover : Host , verifiers : Set < Host >) : Protocol","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/#properties","text":"Name Summary MainProtocol [jvm] val MainProtocol : Ideal The ideal protocol specified by the programmer that is the input to the compiler.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-main-protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / MainProtocol MainProtocol \u00b6 [jvm] Content val MainProtocol : Ideal More info The ideal protocol specified by the programmer that is the input to the compiler.","title":" main protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-main-protocol/#mainprotocol","text":"[jvm] Content val MainProtocol : Ideal More info The ideal protocol specified by the programmer that is the input to the compiler.","title":"MainProtocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY ABY \u00b6 [jvm] abstract class ABY ( server : Host , client : Host ) : Protocol The ABY protocol which is a two party MPC protocol secure in the honest-but-curios setting. Constructors \u00b6 Name Summary ABY [jvm] fun ABY (server: Host , client: Host ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host Inheritors \u00b6 Name ArithABY BoolABY YaoABY","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/#aby","text":"[jvm] abstract class ABY ( server : Host , client : Host ) : Protocol The ABY protocol which is a two party MPC protocol secure in the honest-but-curios setting.","title":"ABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/#constructors","text":"Name Summary ABY [jvm] fun ABY (server: Host , client: Host )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/#inheritors","text":"Name ArithABY BoolABY YaoABY","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / ABY ABY \u00b6 [jvm] Content fun ABY (server: Host , client: Host )","title":" a b y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-a-b-y/#aby","text":"[jvm] Content fun ABY (server: Host , client: Host )","title":"ABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/cleartext-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / cleartextInputPorts cleartextInputPorts \u00b6 [jvm] Content val cleartextInputPorts : Map < Host , InputPort >","title":"Cleartext input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/cleartext-input-ports/#cleartextinputports","text":"[jvm] Content val cleartextInputPorts : Map < Host , InputPort >","title":"cleartextInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/cleartext-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / cleartextOutputPorts cleartextOutputPorts \u00b6 [jvm] Content val cleartextOutputPorts : Map < Host , OutputPort >","title":"Cleartext output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/cleartext-output-ports/#cleartextoutputports","text":"[jvm] Content val cleartextOutputPorts : Map < Host , OutputPort >","title":"cleartextOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/client/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / client client \u00b6 [jvm] Content val client : Host","title":"Client"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/client/#client","text":"[jvm] Content val client : Host","title":"client"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/secret-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / secretInputPorts secretInputPorts \u00b6 [jvm] Content val secretInputPorts : Map < Host , InputPort >","title":"Secret input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/secret-input-ports/#secretinputports","text":"[jvm] Content val secretInputPorts : Map < Host , InputPort >","title":"secretInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/server/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / server server \u00b6 [jvm] Content val server : Host","title":"Server"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/server/#server","text":"[jvm] Content val server : Host","title":"server"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary CLEARTEXT_INPUT [jvm] const val CLEARTEXT_INPUT : String CLEARTEXT_OUTPUT [jvm] const val CLEARTEXT_OUTPUT : String protocolName [jvm] val protocolName : ProtocolName SECRET_INPUT [jvm] const val SECRET_INPUT : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/#properties","text":"Name Summary CLEARTEXT_INPUT [jvm] const val CLEARTEXT_INPUT : String CLEARTEXT_OUTPUT [jvm] const val CLEARTEXT_OUTPUT : String protocolName [jvm] val protocolName : ProtocolName SECRET_INPUT [jvm] const val SECRET_INPUT : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/-c-l-e-a-r-t-e-x-t_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / Companion / CLEARTEXT_INPUT CLEARTEXT_INPUT \u00b6 [jvm] Content const val CLEARTEXT_INPUT : String","title":" c l e a r t e x t  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/-c-l-e-a-r-t-e-x-t_-i-n-p-u-t/#cleartext_input","text":"[jvm] Content const val CLEARTEXT_INPUT : String","title":"CLEARTEXT_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/-c-l-e-a-r-t-e-x-t_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / Companion / CLEARTEXT_OUTPUT CLEARTEXT_OUTPUT \u00b6 [jvm] Content const val CLEARTEXT_OUTPUT : String","title":" c l e a r t e x t  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/-c-l-e-a-r-t-e-x-t_-o-u-t-p-u-t/#cleartext_output","text":"[jvm] Content const val CLEARTEXT_OUTPUT : String","title":"CLEARTEXT_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/-s-e-c-r-e-t_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / Companion / SECRET_INPUT SECRET_INPUT \u00b6 [jvm] Content const val SECRET_INPUT : String","title":" s e c r e t  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/-s-e-c-r-e-t_-i-n-p-u-t/#secret_input","text":"[jvm] Content const val SECRET_INPUT : String","title":"SECRET_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ABY / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-a-b-y/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Adversary Adversary \u00b6 [jvm] object Adversary : Protocol The protocol that represents the adversary interface. Similar to Ideal and HostInterface , this is not a protocol that can be realized in the real world. It is used only for specifying security in the style of the universal composability framework. See also \u00b6 jvm Name Summary specification Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/#adversary","text":"[jvm] object Adversary : Protocol The protocol that represents the adversary interface. Similar to Ideal and HostInterface , this is not a protocol that can be realized in the real world. It is used only for specifying security in the style of the universal composability framework.","title":"Adversary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/#see-also","text":"jvm Name Summary specification","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Adversary / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Adversary / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Adversary / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-adversary/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY ArithABY \u00b6 [jvm] class ArithABY ( server : Host , client : Host ) : ABY Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary A2BOutputPorts [jvm] val A2BOutputPorts : Map < Host , OutputPort > A2YOutputPorts [jvm] val A2YOutputPorts : Map < Host , OutputPort > arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document B2AInputPorts [jvm] val B2AInputPorts : Map < Host , InputPort > cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host Y2AInputPorts [jvm] val Y2AInputPorts : Map < Host , InputPort >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/#arithaby","text":"[jvm] class ArithABY ( server : Host , client : Host ) : ABY","title":"ArithABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/#properties","text":"Name Summary A2BOutputPorts [jvm] val A2BOutputPorts : Map < Host , OutputPort > A2YOutputPorts [jvm] val A2YOutputPorts : Map < Host , OutputPort > arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document B2AInputPorts [jvm] val B2AInputPorts : Map < Host , InputPort > cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host Y2AInputPorts [jvm] val Y2AInputPorts : Map < Host , InputPort >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-a2-b-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / A2BOutputPorts A2BOutputPorts \u00b6 [jvm] Content val A2BOutputPorts : Map < Host , OutputPort >","title":" a2 b output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-a2-b-output-ports/#a2boutputports","text":"[jvm] Content val A2BOutputPorts : Map < Host , OutputPort >","title":"A2BOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-a2-y-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / A2YOutputPorts A2YOutputPorts \u00b6 [jvm] Content val A2YOutputPorts : Map < Host , OutputPort >","title":" a2 y output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-a2-y-output-ports/#a2youtputports","text":"[jvm] Content val A2YOutputPorts : Map < Host , OutputPort >","title":"A2YOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-arith-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / ArithABY ArithABY \u00b6 [jvm] Content fun ArithABY (server: Host , client: Host )","title":" arith a b y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-arith-a-b-y/#arithaby","text":"[jvm] Content fun ArithABY (server: Host , client: Host )","title":"ArithABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-b2-a-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / B2AInputPorts B2AInputPorts \u00b6 [jvm] Content val B2AInputPorts : Map < Host , InputPort >","title":" b2 a input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-b2-a-input-ports/#b2ainputports","text":"[jvm] Content val B2AInputPorts : Map < Host , InputPort >","title":"B2AInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-y2-a-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / Y2AInputPorts Y2AInputPorts \u00b6 [jvm] Content val Y2AInputPorts : Map < Host , InputPort >","title":" y2 a input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-y2-a-input-ports/#y2ainputports","text":"[jvm] Content val Y2AInputPorts : Map < Host , InputPort >","title":"Y2AInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary A2B_OUTPUT [jvm] const val A2B_OUTPUT : String A2Y_OUTPUT [jvm] const val A2Y_OUTPUT : String B2A_INPUT [jvm] const val B2A_INPUT : String protocolName [jvm] val protocolName : ProtocolName Y2A_INPUT [jvm] const val Y2A_INPUT : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/#properties","text":"Name Summary A2B_OUTPUT [jvm] const val A2B_OUTPUT : String A2Y_OUTPUT [jvm] const val A2Y_OUTPUT : String B2A_INPUT [jvm] const val B2A_INPUT : String protocolName [jvm] val protocolName : ProtocolName Y2A_INPUT [jvm] const val Y2A_INPUT : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-a2-b_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / Companion / A2B_OUTPUT A2B_OUTPUT \u00b6 [jvm] Content const val A2B_OUTPUT : String","title":" a2 b  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-a2-b_-o-u-t-p-u-t/#a2b_output","text":"[jvm] Content const val A2B_OUTPUT : String","title":"A2B_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-a2-y_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / Companion / A2Y_OUTPUT A2Y_OUTPUT \u00b6 [jvm] Content const val A2Y_OUTPUT : String","title":" a2 y  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-a2-y_-o-u-t-p-u-t/#a2y_output","text":"[jvm] Content const val A2Y_OUTPUT : String","title":"A2Y_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-b2-a_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / Companion / B2A_INPUT B2A_INPUT \u00b6 [jvm] Content const val B2A_INPUT : String","title":" b2 a  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-b2-a_-i-n-p-u-t/#b2a_input","text":"[jvm] Content const val B2A_INPUT : String","title":"B2A_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-y2-a_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / Companion / Y2A_INPUT Y2A_INPUT \u00b6 [jvm] Content const val Y2A_INPUT : String","title":" y2 a  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/-y2-a_-i-n-p-u-t/#y2a_input","text":"[jvm] Content const val Y2A_INPUT : String","title":"Y2A_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ArithABY / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-arith-a-b-y/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY BoolABY \u00b6 [jvm] class BoolABY ( server : Host , client : Host ) : ABY Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary A2BInputPorts [jvm] val A2BInputPorts : Map < Host , InputPort > arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document B2AOutputPorts [jvm] val B2AOutputPorts : Map < Host , OutputPort > B2YOutputPorts [jvm] val B2YOutputPorts : Map < Host , OutputPort > cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host Y2BInputPorts [jvm] val Y2BInputPorts : Map < Host , InputPort >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/#boolaby","text":"[jvm] class BoolABY ( server : Host , client : Host ) : ABY","title":"BoolABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/#properties","text":"Name Summary A2BInputPorts [jvm] val A2BInputPorts : Map < Host , InputPort > arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document B2AOutputPorts [jvm] val B2AOutputPorts : Map < Host , OutputPort > B2YOutputPorts [jvm] val B2YOutputPorts : Map < Host , OutputPort > cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host Y2BInputPorts [jvm] val Y2BInputPorts : Map < Host , InputPort >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-a2-b-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / A2BInputPorts A2BInputPorts \u00b6 [jvm] Content val A2BInputPorts : Map < Host , InputPort >","title":" a2 b input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-a2-b-input-ports/#a2binputports","text":"[jvm] Content val A2BInputPorts : Map < Host , InputPort >","title":"A2BInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-b2-a-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / B2AOutputPorts B2AOutputPorts \u00b6 [jvm] Content val B2AOutputPorts : Map < Host , OutputPort >","title":" b2 a output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-b2-a-output-ports/#b2aoutputports","text":"[jvm] Content val B2AOutputPorts : Map < Host , OutputPort >","title":"B2AOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-b2-y-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / B2YOutputPorts B2YOutputPorts \u00b6 [jvm] Content val B2YOutputPorts : Map < Host , OutputPort >","title":" b2 y output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-b2-y-output-ports/#b2youtputports","text":"[jvm] Content val B2YOutputPorts : Map < Host , OutputPort >","title":"B2YOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-bool-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / BoolABY BoolABY \u00b6 [jvm] Content fun BoolABY (server: Host , client: Host )","title":" bool a b y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-bool-a-b-y/#boolaby","text":"[jvm] Content fun BoolABY (server: Host , client: Host )","title":"BoolABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-y2-b-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / Y2BInputPorts Y2BInputPorts \u00b6 [jvm] Content val Y2BInputPorts : Map < Host , InputPort >","title":" y2 b input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-y2-b-input-ports/#y2binputports","text":"[jvm] Content val Y2BInputPorts : Map < Host , InputPort >","title":"Y2BInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary A2B_INPUT [jvm] const val A2B_INPUT : String B2A_OUTPUT [jvm] const val B2A_OUTPUT : String B2Y_OUTPUT [jvm] const val B2Y_OUTPUT : String protocolName [jvm] val protocolName : ProtocolName Y2B_INPUT [jvm] const val Y2B_INPUT : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/#properties","text":"Name Summary A2B_INPUT [jvm] const val A2B_INPUT : String B2A_OUTPUT [jvm] const val B2A_OUTPUT : String B2Y_OUTPUT [jvm] const val B2Y_OUTPUT : String protocolName [jvm] val protocolName : ProtocolName Y2B_INPUT [jvm] const val Y2B_INPUT : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-a2-b_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / Companion / A2B_INPUT A2B_INPUT \u00b6 [jvm] Content const val A2B_INPUT : String","title":" a2 b  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-a2-b_-i-n-p-u-t/#a2b_input","text":"[jvm] Content const val A2B_INPUT : String","title":"A2B_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-b2-a_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / Companion / B2A_OUTPUT B2A_OUTPUT \u00b6 [jvm] Content const val B2A_OUTPUT : String","title":" b2 a  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-b2-a_-o-u-t-p-u-t/#b2a_output","text":"[jvm] Content const val B2A_OUTPUT : String","title":"B2A_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-b2-y_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / Companion / B2Y_OUTPUT B2Y_OUTPUT \u00b6 [jvm] Content const val B2Y_OUTPUT : String","title":" b2 y  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-b2-y_-o-u-t-p-u-t/#b2y_output","text":"[jvm] Content const val B2Y_OUTPUT : String","title":"B2Y_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-y2-b_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / Companion / Y2B_INPUT Y2B_INPUT \u00b6 [jvm] Content const val Y2B_INPUT : String","title":" y2 b  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/-y2-b_-i-n-p-u-t/#y2b_input","text":"[jvm] Content const val Y2B_INPUT : String","title":"Y2B_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / BoolABY / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-bool-a-b-y/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment Commitment \u00b6 [jvm] class Commitment ( cleartextHost : Host , hashHosts : Set < Host >) : Protocol Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextHost [jvm] val cleartextHost : Host cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > hashHosts [jvm] val hashHosts : Set < Host > hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. inputPort [jvm] val inputPort : InputPort internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. openCleartextOutputPort [jvm] val openCleartextOutputPort : OutputPort openCommitmentOutputPorts [jvm] val openCommitmentOutputPorts : Map < Host , OutputPort > protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/#commitment","text":"[jvm] class Commitment ( cleartextHost : Host , hashHosts : Set < Host >) : Protocol","title":"Commitment"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextHost [jvm] val cleartextHost : Host cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > hashHosts [jvm] val hashHosts : Set < Host > hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. inputPort [jvm] val inputPort : InputPort internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. openCleartextOutputPort [jvm] val openCleartextOutputPort : OutputPort openCommitmentOutputPorts [jvm] val openCommitmentOutputPorts : Map < Host , OutputPort > protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-commitment/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / Commitment Commitment \u00b6 [jvm] Content fun Commitment (cleartextHost: Host , hashHosts: Set < Host >)","title":" commitment"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-commitment/#commitment","text":"[jvm] Content fun Commitment (cleartextHost: Host , hashHosts: Set < Host >)","title":"Commitment"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/cleartext-host/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / cleartextHost cleartextHost \u00b6 [jvm] Content val cleartextHost : Host","title":"Cleartext host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/cleartext-host/#cleartexthost","text":"[jvm] Content val cleartextHost : Host","title":"cleartextHost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/cleartext-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / cleartextInputPorts cleartextInputPorts \u00b6 [jvm] Content val cleartextInputPorts : Map < Host , InputPort >","title":"Cleartext input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/cleartext-input-ports/#cleartextinputports","text":"[jvm] Content val cleartextInputPorts : Map < Host , InputPort >","title":"cleartextInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/hash-hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / hashHosts hashHosts \u00b6 [jvm] Content val hashHosts : Set < Host >","title":"Hash hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/hash-hosts/#hashhosts","text":"[jvm] Content val hashHosts : Set < Host >","title":"hashHosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/input-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / inputPort inputPort \u00b6 [jvm] Content val inputPort : InputPort","title":"Input port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/input-port/#inputport","text":"[jvm] Content val inputPort : InputPort","title":"inputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/open-cleartext-output-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / openCleartextOutputPort openCleartextOutputPort \u00b6 [jvm] Content val openCleartextOutputPort : OutputPort","title":"Open cleartext output port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/open-cleartext-output-port/#opencleartextoutputport","text":"[jvm] Content val openCleartextOutputPort : OutputPort","title":"openCleartextOutputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/open-commitment-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / openCommitmentOutputPorts openCommitmentOutputPorts \u00b6 [jvm] Content val openCommitmentOutputPorts : Map < Host , OutputPort >","title":"Open commitment output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/open-commitment-output-ports/#opencommitmentoutputports","text":"[jvm] Content val openCommitmentOutputPorts : Map < Host , OutputPort >","title":"openCommitmentOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary CLEARTEXT_INPUT [jvm] const val CLEARTEXT_INPUT : String INPUT [jvm] const val INPUT : String OPEN_CLEARTEXT_OUTPUT [jvm] const val OPEN_CLEARTEXT_OUTPUT : String OPEN_COMMITMENT_OUTPUT [jvm] const val OPEN_COMMITMENT_OUTPUT : String protocolName [jvm] val protocolName : ProtocolName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/#properties","text":"Name Summary CLEARTEXT_INPUT [jvm] const val CLEARTEXT_INPUT : String INPUT [jvm] const val INPUT : String OPEN_CLEARTEXT_OUTPUT [jvm] const val OPEN_CLEARTEXT_OUTPUT : String OPEN_COMMITMENT_OUTPUT [jvm] const val OPEN_COMMITMENT_OUTPUT : String protocolName [jvm] val protocolName : ProtocolName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-c-l-e-a-r-t-e-x-t_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / Companion / CLEARTEXT_INPUT CLEARTEXT_INPUT \u00b6 [jvm] Content const val CLEARTEXT_INPUT : String","title":" c l e a r t e x t  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-c-l-e-a-r-t-e-x-t_-i-n-p-u-t/#cleartext_input","text":"[jvm] Content const val CLEARTEXT_INPUT : String","title":"CLEARTEXT_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / Companion / INPUT INPUT \u00b6 [jvm] Content const val INPUT : String","title":" i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-i-n-p-u-t/#input","text":"[jvm] Content const val INPUT : String","title":"INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-o-p-e-n_-c-l-e-a-r-t-e-x-t_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / Companion / OPEN_CLEARTEXT_OUTPUT OPEN_CLEARTEXT_OUTPUT \u00b6 [jvm] Content const val OPEN_CLEARTEXT_OUTPUT : String","title":" o p e n  c l e a r t e x t  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-o-p-e-n_-c-l-e-a-r-t-e-x-t_-o-u-t-p-u-t/#open_cleartext_output","text":"[jvm] Content const val OPEN_CLEARTEXT_OUTPUT : String","title":"OPEN_CLEARTEXT_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-o-p-e-n_-c-o-m-m-i-t-m-e-n-t_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / Companion / OPEN_COMMITMENT_OUTPUT OPEN_COMMITMENT_OUTPUT \u00b6 [jvm] Content const val OPEN_COMMITMENT_OUTPUT : String","title":" o p e n  c o m m i t m e n t  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/-o-p-e-n_-c-o-m-m-i-t-m-e-n-t_-o-u-t-p-u-t/#open_commitment_output","text":"[jvm] Content const val OPEN_COMMITMENT_OUTPUT : String","title":"OPEN_COMMITMENT_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Commitment / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-commitment/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface HostInterface \u00b6 [jvm] data class HostInterface ( host : Host ) : Protocol The protocol that represents the external interface to a given host. This protocol is only used during debugging to handle ExternalCommunicationNode s. In normal operation, communication with an instance of this protocol is replaced with communication with the actual participating host. Constructors \u00b6 Name Summary HostInterface [jvm] fun HostInterface (host: Host ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int component1 [jvm] Content operator fun component1 (): Host copy [jvm] Content fun copy (host: Host ): HostInterface equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document host [jvm] val host : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/#hostinterface","text":"[jvm] data class HostInterface ( host : Host ) : Protocol The protocol that represents the external interface to a given host. This protocol is only used during debugging to handle ExternalCommunicationNode s. In normal operation, communication with an instance of this protocol is replaced with communication with the actual participating host.","title":"HostInterface"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/#constructors","text":"Name Summary HostInterface [jvm] fun HostInterface (host: Host )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int component1 [jvm] Content operator fun component1 (): Host copy [jvm] Content fun copy (host: Host ): HostInterface equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document host [jvm] val host : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-host-interface/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / HostInterface HostInterface \u00b6 [jvm] Content fun HostInterface (host: Host )","title":" host interface"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-host-interface/#hostinterface","text":"[jvm] Content fun HostInterface (host: Host )","title":"HostInterface"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Host","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/component1/#component1","text":"[jvm] Content operator fun component1 (): Host","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / copy copy \u00b6 [jvm] Content fun copy (host: Host ): HostInterface","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/copy/#copy","text":"[jvm] Content fun copy (host: Host ): HostInterface","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / host host \u00b6 [jvm] Content val host : Host","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/host/#host","text":"[jvm] Content val host : Host","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-companion/#properties","text":"Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / HostInterface / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-host-interface/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal Ideal \u00b6 [jvm] class Ideal ( identifier : String ) : Protocol A perfectly trusted protocol. The ideal protocol is not a real protocol; it is meant to be realized by real protocols. Since it has infinite authority and it involves no hosts, there is no way to execute an ideal protocol directly. Parameters \u00b6 jvm Name Summary identifier Names and distinguishes different instances. Constructors \u00b6 Name Summary Ideal [jvm] fun Ideal (identifier: String )Names and distinguishes different instances. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/#ideal","text":"[jvm] class Ideal ( identifier : String ) : Protocol A perfectly trusted protocol. The ideal protocol is not a real protocol; it is meant to be realized by real protocols. Since it has infinite authority and it involves no hosts, there is no way to execute an ideal protocol directly.","title":"Ideal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/#parameters","text":"jvm Name Summary identifier Names and distinguishes different instances.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/#constructors","text":"Name Summary Ideal [jvm] fun Ideal (identifier: String )Names and distinguishes different instances.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-ideal/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal / Ideal Ideal \u00b6 [jvm] Content fun Ideal (identifier: String ) More info Parameters \u00b6 jvm Name Summary identifier Names and distinguishes different instances.","title":" ideal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-ideal/#ideal","text":"[jvm] Content fun Ideal (identifier: String ) More info","title":"Ideal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-ideal/#parameters","text":"jvm Name Summary identifier Names and distinguishes different instances.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-companion/#properties","text":"Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Ideal / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-ideal/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local Local \u00b6 [jvm] class Local ( host : Host ) : Plaintext The protocol that executes code on a specific host in the clear. This protocol has exactly the authority and the capabilities of the host it is tied to. Constructors \u00b6 Name Summary Local [jvm] fun Local (host: Host ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextCommitmentInputPort [jvm] val cleartextCommitmentInputPort : InputPort hashCommitmentInputPort [jvm] val hashCommitmentInputPort : InputPort host [jvm] val host : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. inputPort [jvm] val inputPort : InputPort internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. outputPort [jvm] val outputPort : OutputPort protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/#local","text":"[jvm] class Local ( host : Host ) : Plaintext The protocol that executes code on a specific host in the clear. This protocol has exactly the authority and the capabilities of the host it is tied to.","title":"Local"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/#constructors","text":"Name Summary Local [jvm] fun Local (host: Host )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextCommitmentInputPort [jvm] val cleartextCommitmentInputPort : InputPort hashCommitmentInputPort [jvm] val hashCommitmentInputPort : InputPort host [jvm] val host : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. inputPort [jvm] val inputPort : InputPort internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. outputPort [jvm] val outputPort : OutputPort protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-local/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / Local Local \u00b6 [jvm] Content fun Local (host: Host )","title":" local"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-local/#local","text":"[jvm] Content fun Local (host: Host )","title":"Local"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/cleartext-commitment-input-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / cleartextCommitmentInputPort cleartextCommitmentInputPort \u00b6 [jvm] Content val cleartextCommitmentInputPort : InputPort","title":"Cleartext commitment input port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/cleartext-commitment-input-port/#cleartextcommitmentinputport","text":"[jvm] Content val cleartextCommitmentInputPort : InputPort","title":"cleartextCommitmentInputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/hash-commitment-input-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / hashCommitmentInputPort hashCommitmentInputPort \u00b6 [jvm] Content val hashCommitmentInputPort : InputPort","title":"Hash commitment input port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/hash-commitment-input-port/#hashcommitmentinputport","text":"[jvm] Content val hashCommitmentInputPort : InputPort","title":"hashCommitmentInputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / host host \u00b6 [jvm] Content val host : Host","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/host/#host","text":"[jvm] Content val host : Host","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/input-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / inputPort inputPort \u00b6 [jvm] Content val inputPort : InputPort","title":"Input port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/input-port/#inputport","text":"[jvm] Content val inputPort : InputPort","title":"inputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/output-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / outputPort outputPort \u00b6 [jvm] Content val outputPort : OutputPort","title":"Output port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/output-port/#outputport","text":"[jvm] Content val outputPort : OutputPort","title":"outputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-companion/#properties","text":"Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Local / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-local/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Plaintext Plaintext \u00b6 [jvm] abstract class Plaintext : Protocol Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content abstract fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] abstract val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] abstract val protocolName : ProtocolName The name of the (cryptographic) protocol. Inheritors \u00b6 Name Local Replication","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/#plaintext","text":"[jvm] abstract class Plaintext : Protocol","title":"Plaintext"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/#functions","text":"Name Summary authority [jvm] Content abstract fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/#properties","text":"Name Summary arguments [jvm] abstract val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] abstract val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/#inheritors","text":"Name Local Replication","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-plaintext/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Plaintext / Plaintext Plaintext \u00b6 [jvm] Content fun Plaintext ()","title":" plaintext"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-plaintext/#plaintext","text":"[jvm] Content fun Plaintext ()","title":"Plaintext"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Plaintext / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary CLEARTEXT_COMMITMENT_INPUT [jvm] const val CLEARTEXT_COMMITMENT_INPUT : String HASH_COMMITMENT_INPUT [jvm] const val HASH_COMMITMENT_INPUT : String INPUT [jvm] const val INPUT : String OUTPUT [jvm] const val OUTPUT : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/#properties","text":"Name Summary CLEARTEXT_COMMITMENT_INPUT [jvm] const val CLEARTEXT_COMMITMENT_INPUT : String HASH_COMMITMENT_INPUT [jvm] const val HASH_COMMITMENT_INPUT : String INPUT [jvm] const val INPUT : String OUTPUT [jvm] const val OUTPUT : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-c-l-e-a-r-t-e-x-t_-c-o-m-m-i-t-m-e-n-t_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Plaintext / Companion / CLEARTEXT_COMMITMENT_INPUT CLEARTEXT_COMMITMENT_INPUT \u00b6 [jvm] Content const val CLEARTEXT_COMMITMENT_INPUT : String","title":" c l e a r t e x t  c o m m i t m e n t  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-c-l-e-a-r-t-e-x-t_-c-o-m-m-i-t-m-e-n-t_-i-n-p-u-t/#cleartext_commitment_input","text":"[jvm] Content const val CLEARTEXT_COMMITMENT_INPUT : String","title":"CLEARTEXT_COMMITMENT_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-h-a-s-h_-c-o-m-m-i-t-m-e-n-t_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Plaintext / Companion / HASH_COMMITMENT_INPUT HASH_COMMITMENT_INPUT \u00b6 [jvm] Content const val HASH_COMMITMENT_INPUT : String","title":" h a s h  c o m m i t m e n t  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-h-a-s-h_-c-o-m-m-i-t-m-e-n-t_-i-n-p-u-t/#hash_commitment_input","text":"[jvm] Content const val HASH_COMMITMENT_INPUT : String","title":"HASH_COMMITMENT_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Plaintext / Companion / INPUT INPUT \u00b6 [jvm] Content const val INPUT : String","title":" i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-i-n-p-u-t/#input","text":"[jvm] Content const val INPUT : String","title":"INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Plaintext / Companion / OUTPUT OUTPUT \u00b6 [jvm] Content const val OUTPUT : String","title":" o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-plaintext/-companion/-o-u-t-p-u-t/#output","text":"[jvm] Content const val OUTPUT : String","title":"OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication Replication \u00b6 [jvm] class Replication ( hosts : Set < Host >) : Plaintext The protocol that replicates data and computations across a set of hosts in the clear. Replication increases integrity, but doing it in the clear sacrifices confidentiality. Additionally, availability is lost if any participating host aborts. Constructors \u00b6 Name Summary Replication [jvm] fun Replication (hosts: Set < Host >) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hostCleartextCommitmentInputPorts [jvm] val hostCleartextCommitmentInputPorts : Map < Host , InputPort > hostHashCommitmentInputPorts [jvm] val hostHashCommitmentInputPorts : Map < Host , InputPort > hostInputPorts [jvm] val hostInputPorts : Map < Host , InputPort > hostOutputPorts [jvm] val hostOutputPorts : Map < Host , OutputPort > hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/#replication","text":"[jvm] class Replication ( hosts : Set < Host >) : Plaintext The protocol that replicates data and computations across a set of hosts in the clear. Replication increases integrity, but doing it in the clear sacrifices confidentiality. Additionally, availability is lost if any participating host aborts.","title":"Replication"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/#constructors","text":"Name Summary Replication [jvm] fun Replication (hosts: Set < Host >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hostCleartextCommitmentInputPorts [jvm] val hostCleartextCommitmentInputPorts : Map < Host , InputPort > hostHashCommitmentInputPorts [jvm] val hostHashCommitmentInputPorts : Map < Host , InputPort > hostInputPorts [jvm] val hostInputPorts : Map < Host , InputPort > hostOutputPorts [jvm] val hostOutputPorts : Map < Host , OutputPort > hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-replication/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / Replication Replication \u00b6 [jvm] Content fun Replication (hosts: Set < Host >)","title":" replication"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-replication/#replication","text":"[jvm] Content fun Replication (hosts: Set < Host >)","title":"Replication"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-cleartext-commitment-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / hostCleartextCommitmentInputPorts hostCleartextCommitmentInputPorts \u00b6 [jvm] Content val hostCleartextCommitmentInputPorts : Map < Host , InputPort >","title":"Host cleartext commitment input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-cleartext-commitment-input-ports/#hostcleartextcommitmentinputports","text":"[jvm] Content val hostCleartextCommitmentInputPorts : Map < Host , InputPort >","title":"hostCleartextCommitmentInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-hash-commitment-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / hostHashCommitmentInputPorts hostHashCommitmentInputPorts \u00b6 [jvm] Content val hostHashCommitmentInputPorts : Map < Host , InputPort >","title":"Host hash commitment input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-hash-commitment-input-ports/#hosthashcommitmentinputports","text":"[jvm] Content val hostHashCommitmentInputPorts : Map < Host , InputPort >","title":"hostHashCommitmentInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / hostInputPorts hostInputPorts \u00b6 [jvm] Content val hostInputPorts : Map < Host , InputPort >","title":"Host input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-input-ports/#hostinputports","text":"[jvm] Content val hostInputPorts : Map < Host , InputPort >","title":"hostInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / hostOutputPorts hostOutputPorts \u00b6 [jvm] Content val hostOutputPorts : Map < Host , OutputPort >","title":"Host output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/host-output-ports/#hostoutputports","text":"[jvm] Content val hostOutputPorts : Map < Host , OutputPort >","title":"hostOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-companion/#properties","text":"Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Replication / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-replication/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Synchronization Synchronization \u00b6 [jvm] class Synchronization ( hosts : Set < Host >) : Protocol Protocol used to synchronize hosts. Used exclusively by the backend, not meant to be used for selection! Constructors \u00b6 Name Summary Synchronization [jvm] fun Synchronization (hosts: Set < Host >) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/#synchronization","text":"[jvm] class Synchronization ( hosts : Set < Host >) : Protocol Protocol used to synchronize hosts. Used exclusively by the backend, not meant to be used for selection!","title":"Synchronization"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/#constructors","text":"Name Summary Synchronization [jvm] fun Synchronization (hosts: Set < Host >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-synchronization/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Synchronization / Synchronization Synchronization \u00b6 [jvm] Content fun Synchronization (hosts: Set < Host >)","title":" synchronization"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-synchronization/#synchronization","text":"[jvm] Content fun Synchronization (hosts: Set < Host >)","title":"Synchronization"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Synchronization / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Synchronization / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Synchronization / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Synchronization / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-companion/#properties","text":"Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / Synchronization / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-synchronization/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY YaoABY \u00b6 [jvm] class YaoABY ( server : Host , client : Host ) : ABY Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary A2YInputPorts [jvm] val A2YInputPorts : Map < Host , InputPort > arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document B2YInputPorts [jvm] val B2YInputPorts : Map < Host , InputPort > cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host Y2AOutputPorts [jvm] val Y2AOutputPorts : Map < Host , OutputPort > Y2BOutputPorts [jvm] val Y2BOutputPorts : Map < Host , OutputPort >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/#yaoaby","text":"[jvm] class YaoABY ( server : Host , client : Host ) : ABY","title":"YaoABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/#properties","text":"Name Summary A2YInputPorts [jvm] val A2YInputPorts : Map < Host , InputPort > arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document B2YInputPorts [jvm] val B2YInputPorts : Map < Host , InputPort > cleartextInputPorts [jvm] val cleartextInputPorts : Map < Host , InputPort > cleartextOutputPorts [jvm] val cleartextOutputPorts : Map < Host , OutputPort > client [jvm] val client : Host hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. secretInputPorts [jvm] val secretInputPorts : Map < Host , InputPort > server [jvm] val server : Host Y2AOutputPorts [jvm] val Y2AOutputPorts : Map < Host , OutputPort > Y2BOutputPorts [jvm] val Y2BOutputPorts : Map < Host , OutputPort >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-a2-y-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / A2YInputPorts A2YInputPorts \u00b6 [jvm] Content val A2YInputPorts : Map < Host , InputPort >","title":" a2 y input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-a2-y-input-ports/#a2yinputports","text":"[jvm] Content val A2YInputPorts : Map < Host , InputPort >","title":"A2YInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-b2-y-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / B2YInputPorts B2YInputPorts \u00b6 [jvm] Content val B2YInputPorts : Map < Host , InputPort >","title":" b2 y input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-b2-y-input-ports/#b2yinputports","text":"[jvm] Content val B2YInputPorts : Map < Host , InputPort >","title":"B2YInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-y2-a-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Y2AOutputPorts Y2AOutputPorts \u00b6 [jvm] Content val Y2AOutputPorts : Map < Host , OutputPort >","title":" y2 a output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-y2-a-output-ports/#y2aoutputports","text":"[jvm] Content val Y2AOutputPorts : Map < Host , OutputPort >","title":"Y2AOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-y2-b-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Y2BOutputPorts Y2BOutputPorts \u00b6 [jvm] Content val Y2BOutputPorts : Map < Host , OutputPort >","title":" y2 b output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-y2-b-output-ports/#y2boutputports","text":"[jvm] Content val Y2BOutputPorts : Map < Host , OutputPort >","title":"Y2BOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-yao-a-b-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / YaoABY YaoABY \u00b6 [jvm] Content fun YaoABY (server: Host , client: Host )","title":" yao a b y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-yao-a-b-y/#yaoaby","text":"[jvm] Content fun YaoABY (server: Host , client: Host )","title":"YaoABY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary A2Y_INPUT [jvm] const val A2Y_INPUT : String B2Y_INPUT [jvm] const val B2Y_INPUT : String protocolName [jvm] val protocolName : ProtocolName Y2A_OUTPUT [jvm] const val Y2A_OUTPUT : String Y2B_OUTPUT [jvm] const val Y2B_OUTPUT : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/#properties","text":"Name Summary A2Y_INPUT [jvm] const val A2Y_INPUT : String B2Y_INPUT [jvm] const val B2Y_INPUT : String protocolName [jvm] val protocolName : ProtocolName Y2A_OUTPUT [jvm] const val Y2A_OUTPUT : String Y2B_OUTPUT [jvm] const val Y2B_OUTPUT : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-a2-y_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Companion / A2Y_INPUT A2Y_INPUT \u00b6 [jvm] Content const val A2Y_INPUT : String","title":" a2 y  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-a2-y_-i-n-p-u-t/#a2y_input","text":"[jvm] Content const val A2Y_INPUT : String","title":"A2Y_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-b2-y_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Companion / B2Y_INPUT B2Y_INPUT \u00b6 [jvm] Content const val B2Y_INPUT : String","title":" b2 y  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-b2-y_-i-n-p-u-t/#b2y_input","text":"[jvm] Content const val B2Y_INPUT : String","title":"B2Y_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-y2-a_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Companion / Y2A_OUTPUT Y2A_OUTPUT \u00b6 [jvm] Content const val Y2A_OUTPUT : String","title":" y2 a  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-y2-a_-o-u-t-p-u-t/#y2a_output","text":"[jvm] Content const val Y2A_OUTPUT : String","title":"Y2A_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-y2-b_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Companion / Y2B_OUTPUT Y2B_OUTPUT \u00b6 [jvm] Content const val Y2B_OUTPUT : String","title":" y2 b  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/-y2-b_-o-u-t-p-u-t/#y2b_output","text":"[jvm] Content const val Y2B_OUTPUT : String","title":"Y2B_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / YaoABY / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-yao-a-b-y/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP ZKP \u00b6 [jvm] class ZKP ( prover : Host , verifiers : Set < Host >) : Protocol Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextInput [jvm] val cleartextInput : Map < Host , InputPort > hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. outputPorts [jvm] val outputPorts : Map < Host , OutputPort > protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. prover [jvm] val prover : Host secretInputPort [jvm] val secretInputPort : InputPort verifiers [jvm] val verifiers : Set < Host >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/#zkp","text":"[jvm] class ZKP ( prover : Host , verifiers : Set < Host >) : Protocol","title":"ZKP"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/#functions","text":"Name Summary authority [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/#properties","text":"Name Summary arguments [jvm] open override val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document cleartextInput [jvm] val cleartextInput : Map < Host , InputPort > hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. outputPorts [jvm] val outputPorts : Map < Host , OutputPort > protocolName [jvm] open override val protocolName : ProtocolName The name of the (cryptographic) protocol. prover [jvm] val prover : Host secretInputPort [jvm] val secretInputPort : InputPort verifiers [jvm] val verifiers : Set < Host >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-z-k-p/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / ZKP ZKP \u00b6 [jvm] Content fun ZKP (prover: Host , verifiers: Set < Host >)","title":" z k p"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-z-k-p/#zkp","text":"[jvm] Content fun ZKP (prover: Host , verifiers: Set < Host >)","title":"ZKP"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / arguments arguments \u00b6 [jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/arguments/#arguments","text":"[jvm] Content open override val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / authority authority \u00b6 [jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/authority/#authority","text":"[jvm] Content open override fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/cleartext-input/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / cleartextInput cleartextInput \u00b6 [jvm] Content val cleartextInput : Map < Host , InputPort >","title":"Cleartext input"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/cleartext-input/#cleartextinput","text":"[jvm] Content val cleartextInput : Map < Host , InputPort >","title":"cleartextInput"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / outputPorts outputPorts \u00b6 [jvm] Content val outputPorts : Map < Host , OutputPort >","title":"Output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/output-ports/#outputports","text":"[jvm] Content val outputPorts : Map < Host , OutputPort >","title":"outputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / protocolName protocolName \u00b6 [jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/protocol-name/#protocolname","text":"[jvm] Content open override val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/prover/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / prover prover \u00b6 [jvm] Content val prover : Host","title":"Prover"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/prover/#prover","text":"[jvm] Content val prover : Host","title":"prover"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/secret-input-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / secretInputPort secretInputPort \u00b6 [jvm] Content val secretInputPort : InputPort","title":"Secret input port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/secret-input-port/#secretinputport","text":"[jvm] Content val secretInputPort : InputPort","title":"secretInputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/verifiers/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / verifiers verifiers \u00b6 [jvm] Content val verifiers : Set < Host >","title":"Verifiers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/verifiers/#verifiers","text":"[jvm] Content val verifiers : Set < Host >","title":"verifiers"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-companion/#properties","text":"Name Summary protocolName [jvm] val protocolName : ProtocolName","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-companion/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.protocols / ZKP / Companion / protocolName protocolName \u00b6 [jvm] Content val protocolName : ProtocolName","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.protocols/-z-k-p/-companion/protocol-name/#protocolname","text":"[jvm] Content val protocolName : ProtocolName","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/","text":"// compiler / edu.cornell.cs.apl.viaduct.security Package edu.cornell.cs.apl.viaduct.security \u00b6 Types \u00b6 Name Summary Label [jvm] Content data class Label ( confidentialityComponent : FreeDistributiveLattice < Principal >, integrityComponent : FreeDistributiveLattice < Principal >) : Lattice < Label > , TrustLattice < Label > , PrettyPrintable More info A lattice for information flow security. LabelAnd [jvm] Content data class LabelAnd ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelBottom [jvm] Content object LabelBottom : LabelExpression LabelConfidentiality [jvm] Content data class LabelConfidentiality ( value : LabelExpression ) : LabelExpression LabelExpression [jvm] Content sealed class LabelExpression : PrettyPrintable LabelIntegrity [jvm] Content data class LabelIntegrity ( value : LabelExpression ) : LabelExpression LabelJoin [jvm] Content data class LabelJoin ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelLiteral [jvm] Content data class LabelLiteral ( name : String ) : LabelExpression LabelMeet [jvm] Content data class LabelMeet ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelOperatorStyle [jvm] Content object LabelOperatorStyle : Style More info The display style of Label specific operators such as Label.confidentiality . LabelOr [jvm] Content data class LabelOr ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelParameter [jvm] Content data class LabelParameter ( name : String ) : LabelExpression LabelTop [jvm] Content object LabelTop : LabelExpression Principal [jvm] Content data class Principal ( name : String ) : Comparable < Principal > , PrettyPrintable More info An actor with an associated security label. PrincipalStyle [jvm] Content object PrincipalStyle : Style More info The display style of Principal s. TrustLattice [jvm] Content interface TrustLattice < T : TrustLattice < T >?> More info A lattice whose elements are interpreted as principals.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/#package-educornellcsaplviaductsecurity","text":"","title":"Package edu.cornell.cs.apl.viaduct.security"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/#types","text":"Name Summary Label [jvm] Content data class Label ( confidentialityComponent : FreeDistributiveLattice < Principal >, integrityComponent : FreeDistributiveLattice < Principal >) : Lattice < Label > , TrustLattice < Label > , PrettyPrintable More info A lattice for information flow security. LabelAnd [jvm] Content data class LabelAnd ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelBottom [jvm] Content object LabelBottom : LabelExpression LabelConfidentiality [jvm] Content data class LabelConfidentiality ( value : LabelExpression ) : LabelExpression LabelExpression [jvm] Content sealed class LabelExpression : PrettyPrintable LabelIntegrity [jvm] Content data class LabelIntegrity ( value : LabelExpression ) : LabelExpression LabelJoin [jvm] Content data class LabelJoin ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelLiteral [jvm] Content data class LabelLiteral ( name : String ) : LabelExpression LabelMeet [jvm] Content data class LabelMeet ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelOperatorStyle [jvm] Content object LabelOperatorStyle : Style More info The display style of Label specific operators such as Label.confidentiality . LabelOr [jvm] Content data class LabelOr ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression LabelParameter [jvm] Content data class LabelParameter ( name : String ) : LabelExpression LabelTop [jvm] Content object LabelTop : LabelExpression Principal [jvm] Content data class Principal ( name : String ) : Comparable < Principal > , PrettyPrintable More info An actor with an associated security label. PrincipalStyle [jvm] Content object PrincipalStyle : Style More info The display style of Principal s. TrustLattice [jvm] Content interface TrustLattice < T : TrustLattice < T >?> More info A lattice whose elements are interpreted as principals.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label Label \u00b6 [jvm] data class Label ( confidentialityComponent : FreeDistributiveLattice < Principal >, integrityComponent : FreeDistributiveLattice < Principal >) : Lattice < Label > , TrustLattice < Label > , PrettyPrintable A lattice for information flow security. This is a standard bounded lattice that additionally supports confidentiality and integrity projections. Information flows from less restrictive contexts to more restrictive ones. top , bottom , meet , and join talk about information flow. weakest , strongest , and , and or talk about trust. Constructors \u00b6 Name Summary Label [jvm] fun Label (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary actsFor [jvm] Content open infix override fun actsFor (that: Label ): Boolean More info Decide if this is trusted to enforce that's security policies. and [jvm] Content open infix override fun and (that: Label ): Label More info The least powerful principal that can act for both this and that. component1 [jvm] Content operator fun component1 (): FreeDistributiveLattice < Principal > component2 [jvm] Content operator fun component2 (): FreeDistributiveLattice < Principal > confidentiality [jvm] Content fun confidentiality (): Label More info The confidentiality component. copy [jvm] Content fun copy (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >): Label equals [jvm] Content open operator override fun equals (other: Any ?): Boolean flowsTo [jvm] Content infix fun flowsTo (that: Label ): Boolean More info Check if information flow from this to that is safe. hashCode [jvm] Content open override fun hashCode (): Int integrity [jvm] Content fun integrity (): Label More info The integrity component. join [jvm] Content open infix override fun join (that: Label ): Label More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content open override fun lessThanOrEqualTo (that: Label ): Boolean meet [jvm] Content open infix override fun meet (that: Label ): Label More info The greatest lower bound of this and that. or [jvm] Content open infix override fun or (that: Label ): Label More info The most powerful principal both this and that can act for. swap [jvm] Content fun swap (): Label More info Switch the confidentiality and integrity components. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document confidentialityComponent [jvm] val confidentialityComponent : FreeDistributiveLattice < Principal >The confidentiality component in the underlying lattice. integrityComponent [jvm] val integrityComponent : FreeDistributiveLattice < Principal >The integrity component in the underlying lattice.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/#label","text":"[jvm] data class Label ( confidentialityComponent : FreeDistributiveLattice < Principal >, integrityComponent : FreeDistributiveLattice < Principal >) : Lattice < Label > , TrustLattice < Label > , PrettyPrintable A lattice for information flow security. This is a standard bounded lattice that additionally supports confidentiality and integrity projections. Information flows from less restrictive contexts to more restrictive ones. top , bottom , meet , and join talk about information flow. weakest , strongest , and , and or talk about trust.","title":"Label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/#constructors","text":"Name Summary Label [jvm] fun Label (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/#functions","text":"Name Summary actsFor [jvm] Content open infix override fun actsFor (that: Label ): Boolean More info Decide if this is trusted to enforce that's security policies. and [jvm] Content open infix override fun and (that: Label ): Label More info The least powerful principal that can act for both this and that. component1 [jvm] Content operator fun component1 (): FreeDistributiveLattice < Principal > component2 [jvm] Content operator fun component2 (): FreeDistributiveLattice < Principal > confidentiality [jvm] Content fun confidentiality (): Label More info The confidentiality component. copy [jvm] Content fun copy (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >): Label equals [jvm] Content open operator override fun equals (other: Any ?): Boolean flowsTo [jvm] Content infix fun flowsTo (that: Label ): Boolean More info Check if information flow from this to that is safe. hashCode [jvm] Content open override fun hashCode (): Int integrity [jvm] Content fun integrity (): Label More info The integrity component. join [jvm] Content open infix override fun join (that: Label ): Label More info The least upper bound of this and that. lessThanOrEqualTo [jvm] Content open override fun lessThanOrEqualTo (that: Label ): Boolean meet [jvm] Content open infix override fun meet (that: Label ): Label More info The greatest lower bound of this and that. or [jvm] Content open infix override fun or (that: Label ): Label More info The most powerful principal both this and that can act for. swap [jvm] Content fun swap (): Label More info Switch the confidentiality and integrity components. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document confidentialityComponent [jvm] val confidentialityComponent : FreeDistributiveLattice < Principal >The confidentiality component in the underlying lattice. integrityComponent [jvm] val integrityComponent : FreeDistributiveLattice < Principal >The integrity component in the underlying lattice.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Label Label \u00b6 [jvm] Content fun Label (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >)","title":" label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-label/#label","text":"[jvm] Content fun Label (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >)","title":"Label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/acts-for/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / actsFor actsFor \u00b6 [jvm] Content open infix override fun actsFor (that: Label ): Boolean More info Decide if this is trusted to enforce that's security policies.","title":"Acts for"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/acts-for/#actsfor","text":"[jvm] Content open infix override fun actsFor (that: Label ): Boolean More info Decide if this is trusted to enforce that's security policies.","title":"actsFor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/and/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / and and \u00b6 [jvm] Content open infix override fun and (that: Label ): Label More info The least powerful principal that can act for both this and that. This denotes a conjunction of authority.","title":"And"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/and/#and","text":"[jvm] Content open infix override fun and (that: Label ): Label More info The least powerful principal that can act for both this and that. This denotes a conjunction of authority.","title":"and"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / component1 component1 \u00b6 [jvm] Content operator fun component1 (): FreeDistributiveLattice < Principal >","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/component1/#component1","text":"[jvm] Content operator fun component1 (): FreeDistributiveLattice < Principal >","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / component2 component2 \u00b6 [jvm] Content operator fun component2 (): FreeDistributiveLattice < Principal >","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/component2/#component2","text":"[jvm] Content operator fun component2 (): FreeDistributiveLattice < Principal >","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/confidentiality-component/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / confidentialityComponent confidentialityComponent \u00b6 [jvm] Content val confidentialityComponent : FreeDistributiveLattice < Principal > More info The confidentiality component in the underlying lattice. Unlike confidentiality , the result is not a Label .","title":"Confidentiality component"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/confidentiality-component/#confidentialitycomponent","text":"[jvm] Content val confidentialityComponent : FreeDistributiveLattice < Principal > More info The confidentiality component in the underlying lattice. Unlike confidentiality , the result is not a Label .","title":"confidentialityComponent"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / confidentiality confidentiality \u00b6 [jvm] Content fun confidentiality (): Label More info The confidentiality component. Keeps confidentiality the same while setting integrity to the weakest level.","title":"Confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/confidentiality/#confidentiality","text":"[jvm] Content fun confidentiality (): Label More info The confidentiality component. Keeps confidentiality the same while setting integrity to the weakest level.","title":"confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / copy copy \u00b6 [jvm] Content fun copy (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >): Label","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/copy/#copy","text":"[jvm] Content fun copy (confidentialityComponent: FreeDistributiveLattice < Principal >, integrityComponent: FreeDistributiveLattice < Principal >): Label","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/flows-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / flowsTo flowsTo \u00b6 [jvm] Content infix fun flowsTo (that: Label ): Boolean More info Check if information flow from this to that is safe.","title":"Flows to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/flows-to/#flowsto","text":"[jvm] Content infix fun flowsTo (that: Label ): Boolean More info Check if information flow from this to that is safe.","title":"flowsTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/integrity-component/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / integrityComponent integrityComponent \u00b6 [jvm] Content val integrityComponent : FreeDistributiveLattice < Principal > More info The integrity component in the underlying lattice. Unlike integrity , the result is not a Label .","title":"Integrity component"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/integrity-component/#integritycomponent","text":"[jvm] Content val integrityComponent : FreeDistributiveLattice < Principal > More info The integrity component in the underlying lattice. Unlike integrity , the result is not a Label .","title":"integrityComponent"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / integrity integrity \u00b6 [jvm] Content fun integrity (): Label More info The integrity component. Keeps integrity the same while setting confidentiality to the weakest level.","title":"Integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/integrity/#integrity","text":"[jvm] Content fun integrity (): Label More info The integrity component. Keeps integrity the same while setting confidentiality to the weakest level.","title":"integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / join join \u00b6 [jvm] Content open infix override fun join (that: Label ): Label More info The least upper bound of this and that.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/join/#join","text":"[jvm] Content open infix override fun join (that: Label ): Label More info The least upper bound of this and that.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/less-than-or-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / lessThanOrEqualTo lessThanOrEqualTo \u00b6 [jvm] Content open override fun lessThanOrEqualTo (that: Label ): Boolean","title":"Less than or equal to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/less-than-or-equal-to/#lessthanorequalto","text":"[jvm] Content open override fun lessThanOrEqualTo (that: Label ): Boolean","title":"lessThanOrEqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / meet meet \u00b6 [jvm] Content open infix override fun meet (that: Label ): Label More info The greatest lower bound of this and that.","title":"Meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/meet/#meet","text":"[jvm] Content open infix override fun meet (that: Label ): Label More info The greatest lower bound of this and that.","title":"meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/or/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / or or \u00b6 [jvm] Content open infix override fun or (that: Label ): Label More info The most powerful principal both this and that can act for. This denotes a disjunction of authority.","title":"Or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/or/#or","text":"[jvm] Content open infix override fun or (that: Label ): Label More info The most powerful principal both this and that can act for. This denotes a disjunction of authority.","title":"or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/swap/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / swap swap \u00b6 [jvm] Content fun swap (): Label More info Switch the confidentiality and integrity components. This is used to enforce robust declassification and transparent endorsement (a.k.a. non-malleable information flow).","title":"Swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/swap/#swap","text":"[jvm] Content fun swap (): Label More info Switch the confidentiality and integrity components. This is used to enforce robust declassification and transparent endorsement (a.k.a. non-malleable information flow).","title":"swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean fromConfidentiality [jvm] Content @ JvmStatic () fun fromConfidentiality (confidentiality: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the confidentiality component. fromIntegrity [jvm] Content @ JvmStatic () fun fromIntegrity (integrity: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the integrity component. hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content @ JvmStatic () operator fun invoke (principal: Principal ): Label More info Returns the label representing the authority of the given principal. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary bottom [jvm] @ JvmStatic () val bottom : Label The least restrictive data policy, i.e. strongest [jvm] @ JvmStatic () val strongest : Label The most powerful principal, i.e. top [jvm] @ JvmStatic () val top : Label The most restrictive data policy, i.e. weakest [jvm] @ JvmStatic () val weakest : Label The least powerful principal, i.e.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean fromConfidentiality [jvm] Content @ JvmStatic () fun fromConfidentiality (confidentiality: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the confidentiality component. fromIntegrity [jvm] Content @ JvmStatic () fun fromIntegrity (integrity: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the integrity component. hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content @ JvmStatic () operator fun invoke (principal: Principal ): Label More info Returns the label representing the authority of the given principal. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/#properties","text":"Name Summary bottom [jvm] @ JvmStatic () val bottom : Label The least restrictive data policy, i.e. strongest [jvm] @ JvmStatic () val strongest : Label The most powerful principal, i.e. top [jvm] @ JvmStatic () val top : Label The most restrictive data policy, i.e. weakest [jvm] @ JvmStatic () val weakest : Label The least powerful principal, i.e.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/bottom/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion / bottom bottom \u00b6 [jvm] Content @ JvmStatic () val bottom : Label More info The least restrictive data policy, i.e. public and trusted. This is the unit for join .","title":"Bottom"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/bottom/#bottom","text":"[jvm] Content @ JvmStatic () val bottom : Label More info The least restrictive data policy, i.e. public and trusted. This is the unit for join .","title":"bottom"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/from-confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion / fromConfidentiality fromConfidentiality \u00b6 [jvm] Content @ JvmStatic () fun fromConfidentiality (confidentiality: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the confidentiality component. Integrity is set to minimum.","title":"From confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/from-confidentiality/#fromconfidentiality","text":"[jvm] Content @ JvmStatic () fun fromConfidentiality (confidentiality: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the confidentiality component. Integrity is set to minimum.","title":"fromConfidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/from-integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion / fromIntegrity fromIntegrity \u00b6 [jvm] Content @ JvmStatic () fun fromIntegrity (integrity: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the integrity component. Confidentiality is set to minimum.","title":"From integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/from-integrity/#fromintegrity","text":"[jvm] Content @ JvmStatic () fun fromIntegrity (integrity: FreeDistributiveLattice < Principal >): Label More info Constructs a label given only the integrity component. Confidentiality is set to minimum.","title":"fromIntegrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/invoke/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion / invoke invoke \u00b6 [jvm] Content @ JvmStatic () operator fun invoke (principal: Principal ): Label More info Returns the label representing the authority of the given principal.","title":"Invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/invoke/#invoke","text":"[jvm] Content @ JvmStatic () operator fun invoke (principal: Principal ): Label More info Returns the label representing the authority of the given principal.","title":"invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/strongest/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion / strongest strongest \u00b6 [jvm] Content @ JvmStatic () val strongest : Label More info The most powerful principal, i.e. secret and trusted. This is the unit for or .","title":"Strongest"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/strongest/#strongest","text":"[jvm] Content @ JvmStatic () val strongest : Label More info The most powerful principal, i.e. secret and trusted. This is the unit for or .","title":"strongest"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/top/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion / top top \u00b6 [jvm] Content @ JvmStatic () val top : Label More info The most restrictive data policy, i.e. secret and untrusted. This is the unit for meet .","title":"Top"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/top/#top","text":"[jvm] Content @ JvmStatic () val top : Label More info The most restrictive data policy, i.e. secret and untrusted. This is the unit for meet .","title":"top"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/weakest/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Label / Companion / weakest weakest \u00b6 [jvm] Content @ JvmStatic () val weakest : Label More info The least powerful principal, i.e. public and untrusted. This is the unit for and .","title":"Weakest"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label/-companion/weakest/#weakest","text":"[jvm] Content @ JvmStatic () val weakest : Label More info The least powerful principal, i.e. public and untrusted. This is the unit for and .","title":"weakest"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd LabelAnd \u00b6 [jvm] data class LabelAnd ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelAnd equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/#labeland","text":"[jvm] data class LabelAnd ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression","title":"LabelAnd"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelAnd equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/-label-and/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / LabelAnd LabelAnd \u00b6 [jvm] Content fun LabelAnd (lhs: LabelExpression , rhs: LabelExpression )","title":" label and"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/-label-and/#labeland","text":"[jvm] Content fun LabelAnd (lhs: LabelExpression , rhs: LabelExpression )","title":"LabelAnd"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / component1 component1 \u00b6 [jvm] Content operator fun component1 (): LabelExpression","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/component1/#component1","text":"[jvm] Content operator fun component1 (): LabelExpression","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / component2 component2 \u00b6 [jvm] Content operator fun component2 (): LabelExpression","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/component2/#component2","text":"[jvm] Content operator fun component2 (): LabelExpression","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / copy copy \u00b6 [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelAnd","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/copy/#copy","text":"[jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelAnd","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / lhs lhs \u00b6 [jvm] Content val lhs : LabelExpression","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/lhs/#lhs","text":"[jvm] Content val lhs : LabelExpression","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelAnd / rhs rhs \u00b6 [jvm] Content val rhs : LabelExpression","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-and/rhs/#rhs","text":"[jvm] Content val rhs : LabelExpression","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelBottom LabelBottom \u00b6 [jvm] object LabelBottom : LabelExpression Functions \u00b6 Name Summary containsParameters [jvm] Content open override fun containsParameters (): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/#labelbottom","text":"[jvm] object LabelBottom : LabelExpression","title":"LabelBottom"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/#functions","text":"Name Summary containsParameters [jvm] Content open override fun containsParameters (): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelBottom / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelBottom / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelBottom / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelBottom / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-bottom/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality LabelConfidentiality \u00b6 [jvm] data class LabelConfidentiality ( value : LabelExpression ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (value: LabelExpression ): LabelConfidentiality equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document value [jvm] val value : LabelExpression","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/#labelconfidentiality","text":"[jvm] data class LabelConfidentiality ( value : LabelExpression ) : LabelExpression","title":"LabelConfidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (value: LabelExpression ): LabelConfidentiality equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document value [jvm] val value : LabelExpression","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/-label-confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / LabelConfidentiality LabelConfidentiality \u00b6 [jvm] Content fun LabelConfidentiality (value: LabelExpression )","title":" label confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/-label-confidentiality/#labelconfidentiality","text":"[jvm] Content fun LabelConfidentiality (value: LabelExpression )","title":"LabelConfidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / component1 component1 \u00b6 [jvm] Content operator fun component1 (): LabelExpression","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/component1/#component1","text":"[jvm] Content operator fun component1 (): LabelExpression","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / copy copy \u00b6 [jvm] Content fun copy (value: LabelExpression ): LabelConfidentiality","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/copy/#copy","text":"[jvm] Content fun copy (value: LabelExpression ): LabelConfidentiality","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelConfidentiality / value value \u00b6 [jvm] Content val value : LabelExpression","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-confidentiality/value/#value","text":"[jvm] Content val value : LabelExpression","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelExpression LabelExpression \u00b6 [jvm] sealed class LabelExpression : PrettyPrintable Functions \u00b6 Name Summary containsParameters [jvm] Content abstract fun containsParameters (): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int interpret [jvm] Content abstract fun interpret (parameters: Map < String , Label > = persistentMapOf()): Label rename [jvm] Content abstract fun rename (renamer: ( String ) -> String = { x -> x }): LabelExpression toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document Inheritors \u00b6 Name LabelLiteral LabelParameter LabelJoin LabelMeet LabelAnd LabelOr LabelConfidentiality LabelIntegrity LabelBottom LabelTop","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/#labelexpression","text":"[jvm] sealed class LabelExpression : PrettyPrintable","title":"LabelExpression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/#functions","text":"Name Summary containsParameters [jvm] Content abstract fun containsParameters (): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int interpret [jvm] Content abstract fun interpret (parameters: Map < String , Label > = persistentMapOf()): Label rename [jvm] Content abstract fun rename (renamer: ( String ) -> String = { x -> x }): LabelExpression toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/#inheritors","text":"Name LabelLiteral LabelParameter LabelJoin LabelMeet LabelAnd LabelOr LabelConfidentiality LabelIntegrity LabelBottom LabelTop","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelExpression / containsParameters containsParameters \u00b6 [jvm] Content abstract fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/contains-parameters/#containsparameters","text":"[jvm] Content abstract fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelExpression / interpret interpret \u00b6 [jvm] Content abstract fun interpret (parameters: Map < String , Label > = persistentMapOf()): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/interpret/#interpret","text":"[jvm] Content abstract fun interpret (parameters: Map < String , Label > = persistentMapOf()): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelExpression / rename rename \u00b6 [jvm] Content abstract fun rename (renamer: ( String ) -> String = { x -> x }): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-expression/rename/#rename","text":"[jvm] Content abstract fun rename (renamer: ( String ) -> String = { x -> x }): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity LabelIntegrity \u00b6 [jvm] data class LabelIntegrity ( value : LabelExpression ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (value: LabelExpression ): LabelIntegrity equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document value [jvm] val value : LabelExpression","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/#labelintegrity","text":"[jvm] data class LabelIntegrity ( value : LabelExpression ) : LabelExpression","title":"LabelIntegrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (value: LabelExpression ): LabelIntegrity equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document value [jvm] val value : LabelExpression","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/-label-integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / LabelIntegrity LabelIntegrity \u00b6 [jvm] Content fun LabelIntegrity (value: LabelExpression )","title":" label integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/-label-integrity/#labelintegrity","text":"[jvm] Content fun LabelIntegrity (value: LabelExpression )","title":"LabelIntegrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / component1 component1 \u00b6 [jvm] Content operator fun component1 (): LabelExpression","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/component1/#component1","text":"[jvm] Content operator fun component1 (): LabelExpression","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / copy copy \u00b6 [jvm] Content fun copy (value: LabelExpression ): LabelIntegrity","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/copy/#copy","text":"[jvm] Content fun copy (value: LabelExpression ): LabelIntegrity","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelIntegrity / value value \u00b6 [jvm] Content val value : LabelExpression","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-integrity/value/#value","text":"[jvm] Content val value : LabelExpression","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin LabelJoin \u00b6 [jvm] data class LabelJoin ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelJoin equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/#labeljoin","text":"[jvm] data class LabelJoin ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression","title":"LabelJoin"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelJoin equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/-label-join/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / LabelJoin LabelJoin \u00b6 [jvm] Content fun LabelJoin (lhs: LabelExpression , rhs: LabelExpression )","title":" label join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/-label-join/#labeljoin","text":"[jvm] Content fun LabelJoin (lhs: LabelExpression , rhs: LabelExpression )","title":"LabelJoin"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / component1 component1 \u00b6 [jvm] Content operator fun component1 (): LabelExpression","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/component1/#component1","text":"[jvm] Content operator fun component1 (): LabelExpression","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / component2 component2 \u00b6 [jvm] Content operator fun component2 (): LabelExpression","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/component2/#component2","text":"[jvm] Content operator fun component2 (): LabelExpression","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / copy copy \u00b6 [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelJoin","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/copy/#copy","text":"[jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelJoin","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / lhs lhs \u00b6 [jvm] Content val lhs : LabelExpression","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/lhs/#lhs","text":"[jvm] Content val lhs : LabelExpression","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelJoin / rhs rhs \u00b6 [jvm] Content val rhs : LabelExpression","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-join/rhs/#rhs","text":"[jvm] Content val rhs : LabelExpression","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral LabelLiteral \u00b6 [jvm] data class LabelLiteral ( name : String ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (name: String ): LabelLiteral equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/#labelliteral","text":"[jvm] data class LabelLiteral ( name : String ) : LabelExpression","title":"LabelLiteral"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (name: String ): LabelLiteral equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/-label-literal/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / LabelLiteral LabelLiteral \u00b6 [jvm] Content fun LabelLiteral (name: String )","title":" label literal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/-label-literal/#labelliteral","text":"[jvm] Content fun LabelLiteral (name: String )","title":"LabelLiteral"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / copy copy \u00b6 [jvm] Content fun copy (name: String ): LabelLiteral","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/copy/#copy","text":"[jvm] Content fun copy (name: String ): LabelLiteral","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelLiteral / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-literal/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet LabelMeet \u00b6 [jvm] data class LabelMeet ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelMeet equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/#labelmeet","text":"[jvm] data class LabelMeet ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression","title":"LabelMeet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelMeet equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/-label-meet/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / LabelMeet LabelMeet \u00b6 [jvm] Content fun LabelMeet (lhs: LabelExpression , rhs: LabelExpression )","title":" label meet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/-label-meet/#labelmeet","text":"[jvm] Content fun LabelMeet (lhs: LabelExpression , rhs: LabelExpression )","title":"LabelMeet"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / component1 component1 \u00b6 [jvm] Content operator fun component1 (): LabelExpression","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/component1/#component1","text":"[jvm] Content operator fun component1 (): LabelExpression","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / component2 component2 \u00b6 [jvm] Content operator fun component2 (): LabelExpression","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/component2/#component2","text":"[jvm] Content operator fun component2 (): LabelExpression","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / copy copy \u00b6 [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelMeet","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/copy/#copy","text":"[jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelMeet","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / lhs lhs \u00b6 [jvm] Content val lhs : LabelExpression","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/lhs/#lhs","text":"[jvm] Content val lhs : LabelExpression","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelMeet / rhs rhs \u00b6 [jvm] Content val rhs : LabelExpression","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-meet/rhs/#rhs","text":"[jvm] Content val rhs : LabelExpression","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-operator-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOperatorStyle LabelOperatorStyle \u00b6 [jvm] object LabelOperatorStyle : Style The display style of Label specific operators such as Label.confidentiality . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-operator-style/#labeloperatorstyle","text":"[jvm] object LabelOperatorStyle : Style The display style of Label specific operators such as Label.confidentiality .","title":"LabelOperatorStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-operator-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-operator-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr LabelOr \u00b6 [jvm] data class LabelOr ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelOr equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/#labelor","text":"[jvm] data class LabelOr ( lhs : LabelExpression , rhs : LabelExpression ) : LabelExpression","title":"LabelOr"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): LabelExpression component2 [jvm] Content operator fun component2 (): LabelExpression containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelOr equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : LabelExpression rhs [jvm] val rhs : LabelExpression","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/-label-or/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / LabelOr LabelOr \u00b6 [jvm] Content fun LabelOr (lhs: LabelExpression , rhs: LabelExpression )","title":" label or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/-label-or/#labelor","text":"[jvm] Content fun LabelOr (lhs: LabelExpression , rhs: LabelExpression )","title":"LabelOr"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / component1 component1 \u00b6 [jvm] Content operator fun component1 (): LabelExpression","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/component1/#component1","text":"[jvm] Content operator fun component1 (): LabelExpression","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / component2 component2 \u00b6 [jvm] Content operator fun component2 (): LabelExpression","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/component2/#component2","text":"[jvm] Content operator fun component2 (): LabelExpression","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / copy copy \u00b6 [jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelOr","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/copy/#copy","text":"[jvm] Content fun copy (lhs: LabelExpression , rhs: LabelExpression ): LabelOr","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / lhs lhs \u00b6 [jvm] Content val lhs : LabelExpression","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/lhs/#lhs","text":"[jvm] Content val lhs : LabelExpression","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelOr / rhs rhs \u00b6 [jvm] Content val rhs : LabelExpression","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-or/rhs/#rhs","text":"[jvm] Content val rhs : LabelExpression","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter LabelParameter \u00b6 [jvm] data class LabelParameter ( name : String ) : LabelExpression Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (name: String ): LabelParameter equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/#labelparameter","text":"[jvm] data class LabelParameter ( name : String ) : LabelExpression","title":"LabelParameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String containsParameters [jvm] Content open override fun containsParameters (): Boolean copy [jvm] Content fun copy (name: String ): LabelParameter equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/-label-parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / LabelParameter LabelParameter \u00b6 [jvm] Content fun LabelParameter (name: String )","title":" label parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/-label-parameter/#labelparameter","text":"[jvm] Content fun LabelParameter (name: String )","title":"LabelParameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / copy copy \u00b6 [jvm] Content fun copy (name: String ): LabelParameter","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/copy/#copy","text":"[jvm] Content fun copy (name: String ): LabelParameter","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelParameter / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-parameter/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelTop LabelTop \u00b6 [jvm] object LabelTop : LabelExpression Functions \u00b6 Name Summary containsParameters [jvm] Content open override fun containsParameters (): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/#labeltop","text":"[jvm] object LabelTop : LabelExpression","title":"LabelTop"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/#functions","text":"Name Summary containsParameters [jvm] Content open override fun containsParameters (): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int interpret [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label rename [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelTop / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/contains-parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelTop / containsParameters containsParameters \u00b6 [jvm] Content open override fun containsParameters (): Boolean","title":"Contains parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/contains-parameters/#containsparameters","text":"[jvm] Content open override fun containsParameters (): Boolean","title":"containsParameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/interpret/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelTop / interpret interpret \u00b6 [jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"Interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/interpret/#interpret","text":"[jvm] Content open override fun interpret (parameters: Map < String , Label >): Label","title":"interpret"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/rename/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / LabelTop / rename rename \u00b6 [jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"Rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-label-top/rename/#rename","text":"[jvm] Content open override fun rename (renamer: ( String ) -> String ): LabelExpression","title":"rename"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal Principal \u00b6 [jvm] data class Principal ( name : String ) : Comparable < Principal > , PrettyPrintable An actor with an associated security label. Constructors \u00b6 Name Summary Principal [jvm] fun Principal (name: String ) Functions \u00b6 Name Summary compareTo [jvm] Content open operator override fun compareTo (other: Principal ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): Principal equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/#principal","text":"[jvm] data class Principal ( name : String ) : Comparable < Principal > , PrettyPrintable An actor with an associated security label.","title":"Principal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/#constructors","text":"Name Summary Principal [jvm] fun Principal (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/#functions","text":"Name Summary compareTo [jvm] Content open operator override fun compareTo (other: Principal ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): Principal equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/-principal/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal / Principal Principal \u00b6 [jvm] Content fun Principal (name: String )","title":" principal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/-principal/#principal","text":"[jvm] Content fun Principal (name: String )","title":"Principal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal / compareTo compareTo \u00b6 [jvm] Content open operator override fun compareTo (other: Principal ): Int","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/compare-to/#compareto","text":"[jvm] Content open operator override fun compareTo (other: Principal ): Int","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal / copy copy \u00b6 [jvm] Content fun copy (name: String ): Principal","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/copy/#copy","text":"[jvm] Content fun copy (name: String ): Principal","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / Principal / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / PrincipalStyle PrincipalStyle \u00b6 [jvm] object PrincipalStyle : Style The display style of Principal s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal-style/#principalstyle","text":"[jvm] object PrincipalStyle : Style The display style of Principal s.","title":"PrincipalStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-principal-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / TrustLattice TrustLattice \u00b6 [jvm] interface TrustLattice < T : TrustLattice < T >?> A lattice whose elements are interpreted as principals. Functions \u00b6 Name Summary actsFor [jvm] Content abstract fun actsFor (that: T ): Boolean More info Decide if this is trusted to enforce that's security policies. and [jvm] Content abstract infix fun and (that: T ): T More info The least powerful principal that can act for both this and that. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int or [jvm] Content abstract infix fun or (that: T ): T More info The most powerful principal both this and that can act for. toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name Label","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/#trustlattice","text":"[jvm] interface TrustLattice < T : TrustLattice < T >?> A lattice whose elements are interpreted as principals.","title":"TrustLattice"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/#functions","text":"Name Summary actsFor [jvm] Content abstract fun actsFor (that: T ): Boolean More info Decide if this is trusted to enforce that's security policies. and [jvm] Content abstract infix fun and (that: T ): T More info The least powerful principal that can act for both this and that. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int or [jvm] Content abstract infix fun or (that: T ): T More info The most powerful principal both this and that can act for. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/#inheritors","text":"Name Label","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/acts-for/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / TrustLattice / actsFor actsFor \u00b6 [jvm] Content abstract fun actsFor (that: T ): Boolean More info Decide if this is trusted to enforce that's security policies.","title":"Acts for"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/acts-for/#actsfor","text":"[jvm] Content abstract fun actsFor (that: T ): Boolean More info Decide if this is trusted to enforce that's security policies.","title":"actsFor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/and/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / TrustLattice / and and \u00b6 [jvm] Content abstract infix fun and (that: T ): T More info The least powerful principal that can act for both this and that. This denotes a conjunction of authority.","title":"And"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/and/#and","text":"[jvm] Content abstract infix fun and (that: T ): T More info The least powerful principal that can act for both this and that. This denotes a conjunction of authority.","title":"and"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/or/","text":"// compiler / edu.cornell.cs.apl.viaduct.security / TrustLattice / or or \u00b6 [jvm] Content abstract infix fun or (that: T ): T More info The most powerful principal both this and that can act for. This denotes a disjunction of authority.","title":"Or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security/-trust-lattice/or/#or","text":"[jvm] Content abstract infix fun or (that: T ): T More info The most powerful principal both this and that can act for. This denotes a disjunction of authority.","title":"or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver Package edu.cornell.cs.apl.viaduct.security.solver \u00b6 Types \u00b6 Name Summary AtomicLabelTerm [jvm] Content abstract class AtomicLabelTerm : LabelTerm More info An atomic term such as a constant or a variable but a join. ConstraintSolution [jvm] Content typealias ConstraintSolution = Map < LabelVariable , Label > ConstraintSolver [jvm] Content class ConstraintSolver < T : Throwable > More info Given a set of information flow constraints, finds a label assignment to all variables that minimizes the trust assigned to each variable (if one exists). LabelConstant [jvm] Content data class LabelConstant ( value : Label ) : AtomicLabelTerm More info Terms representing literal label constants. LabelTerm [jvm] Content abstract class LabelTerm More info A symbolic representation of a label expression. LabelVariable [jvm] Content data class LabelVariable ( confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>) : AtomicLabelTerm More info A stand-in for an unknown label.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/#package-educornellcsaplviaductsecuritysolver","text":"","title":"Package edu.cornell.cs.apl.viaduct.security.solver"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/#types","text":"Name Summary AtomicLabelTerm [jvm] Content abstract class AtomicLabelTerm : LabelTerm More info An atomic term such as a constant or a variable but a join. ConstraintSolution [jvm] Content typealias ConstraintSolution = Map < LabelVariable , Label > ConstraintSolver [jvm] Content class ConstraintSolver < T : Throwable > More info Given a set of information flow constraints, finds a label assignment to all variables that minimizes the trust assigned to each variable (if one exists). LabelConstant [jvm] Content data class LabelConstant ( value : Label ) : AtomicLabelTerm More info Terms representing literal label constants. LabelTerm [jvm] Content abstract class LabelTerm More info A symbolic representation of a label expression. LabelVariable [jvm] Content data class LabelVariable ( confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>) : AtomicLabelTerm More info A stand-in for an unknown label.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / AtomicLabelTerm AtomicLabelTerm \u00b6 [jvm] abstract class AtomicLabelTerm : LabelTerm An atomic term such as a constant or a variable but a join. Constructors \u00b6 Name Summary AtomicLabelTerm [jvm] fun AtomicLabelTerm () Functions \u00b6 Name Summary confidentiality [jvm] Content abstract override fun confidentiality (): AtomicLabelTerm More info Term that corresponds to performing Label.confidentiality . equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int integrity [jvm] Content abstract override fun integrity (): AtomicLabelTerm More info Term that corresponds to performing Label.integrity . join [jvm] Content abstract fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that. swap [jvm] Content abstract fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap . toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name LabelConstant LabelVariable","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/#atomiclabelterm","text":"[jvm] abstract class AtomicLabelTerm : LabelTerm An atomic term such as a constant or a variable but a join.","title":"AtomicLabelTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/#constructors","text":"Name Summary AtomicLabelTerm [jvm] fun AtomicLabelTerm ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/#functions","text":"Name Summary confidentiality [jvm] Content abstract override fun confidentiality (): AtomicLabelTerm More info Term that corresponds to performing Label.confidentiality . equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int integrity [jvm] Content abstract override fun integrity (): AtomicLabelTerm More info Term that corresponds to performing Label.integrity . join [jvm] Content abstract fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that. swap [jvm] Content abstract fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap . toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/#inheritors","text":"Name LabelConstant LabelVariable","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/-atomic-label-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / AtomicLabelTerm / AtomicLabelTerm AtomicLabelTerm \u00b6 [jvm] Content fun AtomicLabelTerm ()","title":" atomic label term"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/-atomic-label-term/#atomiclabelterm","text":"[jvm] Content fun AtomicLabelTerm ()","title":"AtomicLabelTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / AtomicLabelTerm / confidentiality confidentiality \u00b6 [jvm] Content abstract override fun confidentiality (): AtomicLabelTerm More info Term that corresponds to performing Label.confidentiality .","title":"Confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/confidentiality/#confidentiality","text":"[jvm] Content abstract override fun confidentiality (): AtomicLabelTerm More info Term that corresponds to performing Label.confidentiality .","title":"confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / AtomicLabelTerm / integrity integrity \u00b6 [jvm] Content abstract override fun integrity (): AtomicLabelTerm More info Term that corresponds to performing Label.integrity .","title":"Integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/integrity/#integrity","text":"[jvm] Content abstract override fun integrity (): AtomicLabelTerm More info Term that corresponds to performing Label.integrity .","title":"integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / AtomicLabelTerm / join join \u00b6 [jvm] Content abstract fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/join/#join","text":"[jvm] Content abstract fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/swap/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / AtomicLabelTerm / swap swap \u00b6 [jvm] Content abstract fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap .","title":"Swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-atomic-label-term/swap/#swap","text":"[jvm] Content abstract fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap .","title":"swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver ConstraintSolver \u00b6 [jvm] class ConstraintSolver < T : Throwable > Given a set of information flow constraints, finds a label assignment to all variables that minimizes the trust assigned to each variable (if one exists). Parameters \u00b6 jvm Name Summary T type of exceptions thrown when there are unsatisfiable constraints Constructors \u00b6 Name Summary ConstraintSolver [jvm] fun ConstraintSolver ()type of exceptions thrown when there are unsatisfiable constraints Functions \u00b6 Name Summary addEqualToConstraint [jvm] Content fun addEqualToConstraint (lhs: AtomicLabelTerm , rhs: AtomicLabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs == rhs to the system. addFlowsToConstraint [jvm] Content fun addFlowsToConstraint (lhs: AtomicLabelTerm , rhs: LabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs.flowsTo(rhs) to the system. addNewVariable [jvm] Content fun addNewVariable (label: Any ): LabelVariable More info Create a fresh variable and add it to the system. equals [jvm] Content open operator fun equals (other: Any ?): Boolean exportDotGraph [jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraints as a DOT graph. hashCode [jvm] Content open fun hashCode (): Int solve [jvm] Content fun solve (): ConstraintSolution More info Find the least trust solution to the set of constraints in the system. toString [jvm] Content open fun toString (): String variableCount [jvm] Content fun variableCount (): Int More info Return the number of variables in the constraint system.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/#constraintsolver","text":"[jvm] class ConstraintSolver < T : Throwable > Given a set of information flow constraints, finds a label assignment to all variables that minimizes the trust assigned to each variable (if one exists).","title":"ConstraintSolver"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/#parameters","text":"jvm Name Summary T type of exceptions thrown when there are unsatisfiable constraints","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/#constructors","text":"Name Summary ConstraintSolver [jvm] fun ConstraintSolver ()type of exceptions thrown when there are unsatisfiable constraints","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/#functions","text":"Name Summary addEqualToConstraint [jvm] Content fun addEqualToConstraint (lhs: AtomicLabelTerm , rhs: AtomicLabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs == rhs to the system. addFlowsToConstraint [jvm] Content fun addFlowsToConstraint (lhs: AtomicLabelTerm , rhs: LabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs.flowsTo(rhs) to the system. addNewVariable [jvm] Content fun addNewVariable (label: Any ): LabelVariable More info Create a fresh variable and add it to the system. equals [jvm] Content open operator fun equals (other: Any ?): Boolean exportDotGraph [jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraints as a DOT graph. hashCode [jvm] Content open fun hashCode (): Int solve [jvm] Content fun solve (): ConstraintSolution More info Find the least trust solution to the set of constraints in the system. toString [jvm] Content open fun toString (): String variableCount [jvm] Content fun variableCount (): Int More info Return the number of variables in the constraint system.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/-constraint-solver/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver / ConstraintSolver ConstraintSolver \u00b6 [jvm] Content fun ConstraintSolver () More info Parameters \u00b6 jvm Name Summary T type of exceptions thrown when there are unsatisfiable constraints","title":" constraint solver"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/-constraint-solver/#constraintsolver","text":"[jvm] Content fun ConstraintSolver () More info","title":"ConstraintSolver"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/-constraint-solver/#parameters","text":"jvm Name Summary T type of exceptions thrown when there are unsatisfiable constraints","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-equal-to-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver / addEqualToConstraint addEqualToConstraint \u00b6 [jvm] Content fun addEqualToConstraint (lhs: AtomicLabelTerm , rhs: AtomicLabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs == rhs to the system. Parameters \u00b6 jvm Name Summary failWith same as in addFlowsToConstraint","title":"Add equal to constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-equal-to-constraint/#addequaltoconstraint","text":"[jvm] Content fun addEqualToConstraint (lhs: AtomicLabelTerm , rhs: AtomicLabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs == rhs to the system.","title":"addEqualToConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-equal-to-constraint/#parameters","text":"jvm Name Summary failWith same as in addFlowsToConstraint","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-flows-to-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver / addFlowsToConstraint addFlowsToConstraint \u00b6 [jvm] Content fun addFlowsToConstraint (lhs: AtomicLabelTerm , rhs: LabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs.flowsTo(rhs) to the system. Parameters \u00b6 jvm Name Summary failWith a function that generates the exception to throw if this constraint is unsatisfiable. The function will be given the best estimates for the values of lhs and rhs.","title":"Add flows to constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-flows-to-constraint/#addflowstoconstraint","text":"[jvm] Content fun addFlowsToConstraint (lhs: AtomicLabelTerm , rhs: LabelTerm , failWith: (from: Label , to: Label ) -> T ) More info Add the constraint lhs.flowsTo(rhs) to the system.","title":"addFlowsToConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-flows-to-constraint/#parameters","text":"jvm Name Summary failWith a function that generates the exception to throw if this constraint is unsatisfiable. The function will be given the best estimates for the values of lhs and rhs.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-new-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver / addNewVariable addNewVariable \u00b6 [jvm] Content fun addNewVariable (label: Any ): LabelVariable More info Create a fresh variable and add it to the system. Return \u00b6 the freshly created variable Parameters \u00b6 jvm Name Summary label an arbitrary object to use as a label during debugging","title":"Add new variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-new-variable/#addnewvariable","text":"[jvm] Content fun addNewVariable (label: Any ): LabelVariable More info Create a fresh variable and add it to the system.","title":"addNewVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-new-variable/#return","text":"the freshly created variable","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/add-new-variable/#parameters","text":"jvm Name Summary label an arbitrary object to use as a label during debugging","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/export-dot-graph/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver / exportDotGraph exportDotGraph \u00b6 [jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraints as a DOT graph.","title":"Export dot graph"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/export-dot-graph/#exportdotgraph","text":"[jvm] Content fun exportDotGraph (writer: Writer ?) More info Output the constraints as a DOT graph.","title":"exportDotGraph"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/solve/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver / solve solve \u00b6 [jvm] Content fun solve (): ConstraintSolution More info Find the least trust solution to the set of constraints in the system. Return \u00b6 mapping from variables to minimal trust labels that satisfy all constraints Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.security.solver.ConstraintSolver if there are unsatisfiable constraints","title":"Solve"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/solve/#solve","text":"[jvm] Content fun solve (): ConstraintSolution More info Find the least trust solution to the set of constraints in the system.","title":"solve"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/solve/#return","text":"mapping from variables to minimal trust labels that satisfy all constraints","title":"Return"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/solve/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.security.solver.ConstraintSolver if there are unsatisfiable constraints","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/variable-count/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / ConstraintSolver / variableCount variableCount \u00b6 [jvm] Content fun variableCount (): Int More info Return the number of variables in the constraint system.","title":"Variable count"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-constraint-solver/variable-count/#variablecount","text":"[jvm] Content fun variableCount (): Int More info Return the number of variables in the constraint system.","title":"variableCount"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant LabelConstant \u00b6 [jvm] data class LabelConstant ( value : Label ) : AtomicLabelTerm Terms representing literal label constants. Constructors \u00b6 Name Summary LabelConstant [jvm] fun LabelConstant (value: Label ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Label confidentiality [jvm] Content open override fun confidentiality (): LabelConstant More info Term that corresponds to performing Label.confidentiality . copy [jvm] Content fun copy (value: Label ): LabelConstant equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open override fun hashCode (): Int integrity [jvm] Content open override fun integrity (): LabelConstant More info Term that corresponds to performing Label.integrity . join [jvm] Content open override fun join (that: Label ): LabelConstant More info The term that corresponds to the Label.join of this and that. swap [jvm] Content open override fun swap (): LabelConstant More info The term that corresponds to performing Label.swap . toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary value [jvm] val value : Label","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/#labelconstant","text":"[jvm] data class LabelConstant ( value : Label ) : AtomicLabelTerm Terms representing literal label constants.","title":"LabelConstant"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/#constructors","text":"Name Summary LabelConstant [jvm] fun LabelConstant (value: Label )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Label confidentiality [jvm] Content open override fun confidentiality (): LabelConstant More info Term that corresponds to performing Label.confidentiality . copy [jvm] Content fun copy (value: Label ): LabelConstant equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open override fun hashCode (): Int integrity [jvm] Content open override fun integrity (): LabelConstant More info Term that corresponds to performing Label.integrity . join [jvm] Content open override fun join (that: Label ): LabelConstant More info The term that corresponds to the Label.join of this and that. swap [jvm] Content open override fun swap (): LabelConstant More info The term that corresponds to performing Label.swap . toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/#properties","text":"Name Summary value [jvm] val value : Label","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/-label-constant/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / LabelConstant LabelConstant \u00b6 [jvm] Content fun LabelConstant (value: Label )","title":" label constant"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/-label-constant/#labelconstant","text":"[jvm] Content fun LabelConstant (value: Label )","title":"LabelConstant"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Label","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/component1/#component1","text":"[jvm] Content operator fun component1 (): Label","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / confidentiality confidentiality \u00b6 [jvm] Content open override fun confidentiality (): LabelConstant More info Term that corresponds to performing Label.confidentiality .","title":"Confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/confidentiality/#confidentiality","text":"[jvm] Content open override fun confidentiality (): LabelConstant More info Term that corresponds to performing Label.confidentiality .","title":"confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / copy copy \u00b6 [jvm] Content fun copy (value: Label ): LabelConstant","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/copy/#copy","text":"[jvm] Content fun copy (value: Label ): LabelConstant","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/get-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / getValue getValue \u00b6 [jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term.","title":"Get value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/get-value/#getvalue","text":"[jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term.","title":"getValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / integrity integrity \u00b6 [jvm] Content open override fun integrity (): LabelConstant More info Term that corresponds to performing Label.integrity .","title":"Integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/integrity/#integrity","text":"[jvm] Content open override fun integrity (): LabelConstant More info Term that corresponds to performing Label.integrity .","title":"integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / join join \u00b6 [jvm] Content open override fun join (that: Label ): LabelConstant More info The term that corresponds to the Label.join of this and that.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/join/#join","text":"[jvm] Content open override fun join (that: Label ): LabelConstant More info The term that corresponds to the Label.join of this and that.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/swap/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / swap swap \u00b6 [jvm] Content open override fun swap (): LabelConstant More info The term that corresponds to performing Label.swap .","title":"Swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/swap/#swap","text":"[jvm] Content open override fun swap (): LabelConstant More info The term that corresponds to performing Label.swap .","title":"swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelConstant / value value \u00b6 [jvm] Content val value : Label","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-constant/value/#value","text":"[jvm] Content val value : Label","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelTerm LabelTerm \u00b6 [jvm] abstract class LabelTerm A symbolic representation of a label expression. Constructors \u00b6 Name Summary LabelTerm [jvm] fun LabelTerm () Functions \u00b6 Name Summary confidentiality [jvm] Content abstract fun confidentiality (): LabelTerm ? More info Term that corresponds to performing Label.confidentiality . equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int integrity [jvm] Content abstract fun integrity (): LabelTerm ? More info Term that corresponds to performing Label.integrity . toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name AtomicLabelTerm","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/#labelterm","text":"[jvm] abstract class LabelTerm A symbolic representation of a label expression.","title":"LabelTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/#constructors","text":"Name Summary LabelTerm [jvm] fun LabelTerm ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/#functions","text":"Name Summary confidentiality [jvm] Content abstract fun confidentiality (): LabelTerm ? More info Term that corresponds to performing Label.confidentiality . equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content abstract fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open fun hashCode (): Int integrity [jvm] Content abstract fun integrity (): LabelTerm ? More info Term that corresponds to performing Label.integrity . toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/#inheritors","text":"Name AtomicLabelTerm","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/-label-term/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelTerm / LabelTerm LabelTerm \u00b6 [jvm] Content fun LabelTerm ()","title":" label term"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/-label-term/#labelterm","text":"[jvm] Content fun LabelTerm ()","title":"LabelTerm"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelTerm / confidentiality confidentiality \u00b6 [jvm] Content abstract fun confidentiality (): LabelTerm ? More info Term that corresponds to performing Label.confidentiality .","title":"Confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/confidentiality/#confidentiality","text":"[jvm] Content abstract fun confidentiality (): LabelTerm ? More info Term that corresponds to performing Label.confidentiality .","title":"confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/get-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelTerm / getValue getValue \u00b6 [jvm] Content abstract fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term.","title":"Get value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/get-value/#getvalue","text":"[jvm] Content abstract fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term.","title":"getValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelTerm / integrity integrity \u00b6 [jvm] Content abstract fun integrity (): LabelTerm ? More info Term that corresponds to performing Label.integrity .","title":"Integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-term/integrity/#integrity","text":"[jvm] Content abstract fun integrity (): LabelTerm ? More info Term that corresponds to performing Label.integrity .","title":"integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable LabelVariable \u00b6 [jvm] data class LabelVariable ( confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>) : AtomicLabelTerm A stand-in for an unknown label. The solver will assign an actual value to each instance. See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.security.solver.ConstraintSolver Constructors \u00b6 Name Summary LabelVariable [jvm] fun LabelVariable (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): AtomicTerm < FreeDistributiveLattice < Principal >> component2 [jvm] Content operator fun component2 (): AtomicTerm < FreeDistributiveLattice < Principal >> confidentiality [jvm] Content open override fun confidentiality (): LabelVariable More info Term that corresponds to performing Label.confidentiality . copy [jvm] Content fun copy (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>): LabelVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open override fun hashCode (): Int integrity [jvm] Content open override fun integrity (): LabelVariable More info Term that corresponds to performing Label.integrity . join [jvm] Content open override fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that. swap [jvm] Content open override fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap . toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary confidentialityComponent [jvm] open override val confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>Returns a term representing the confidentiality component. integrityComponent [jvm] open override val integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>Returns a term representing the integrity component.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/#labelvariable","text":"[jvm] data class LabelVariable ( confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>) : AtomicLabelTerm A stand-in for an unknown label. The solver will assign an actual value to each instance.","title":"LabelVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.security.solver.ConstraintSolver","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/#constructors","text":"Name Summary LabelVariable [jvm] fun LabelVariable (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): AtomicTerm < FreeDistributiveLattice < Principal >> component2 [jvm] Content operator fun component2 (): AtomicTerm < FreeDistributiveLattice < Principal >> confidentiality [jvm] Content open override fun confidentiality (): LabelVariable More info Term that corresponds to performing Label.confidentiality . copy [jvm] Content fun copy (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>): LabelVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getValue [jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term. hashCode [jvm] Content open override fun hashCode (): Int integrity [jvm] Content open override fun integrity (): LabelVariable More info Term that corresponds to performing Label.integrity . join [jvm] Content open override fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that. swap [jvm] Content open override fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap . toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/#properties","text":"Name Summary confidentialityComponent [jvm] open override val confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>Returns a term representing the confidentiality component. integrityComponent [jvm] open override val integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >>Returns a term representing the integrity component.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/-label-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / LabelVariable LabelVariable \u00b6 [jvm] Content fun LabelVariable (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>)","title":" label variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/-label-variable/#labelvariable","text":"[jvm] Content fun LabelVariable (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>)","title":"LabelVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / component1 component1 \u00b6 [jvm] Content operator fun component1 (): AtomicTerm < FreeDistributiveLattice < Principal >>","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/component1/#component1","text":"[jvm] Content operator fun component1 (): AtomicTerm < FreeDistributiveLattice < Principal >>","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / component2 component2 \u00b6 [jvm] Content operator fun component2 (): AtomicTerm < FreeDistributiveLattice < Principal >>","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/component2/#component2","text":"[jvm] Content operator fun component2 (): AtomicTerm < FreeDistributiveLattice < Principal >>","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/confidentiality-component/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / confidentialityComponent confidentialityComponent \u00b6 [jvm] Content open override val confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >> More info Returns a term representing the confidentiality component.","title":"Confidentiality component"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/confidentiality-component/#confidentialitycomponent","text":"[jvm] Content open override val confidentialityComponent : AtomicTerm < FreeDistributiveLattice < Principal >> More info Returns a term representing the confidentiality component.","title":"confidentialityComponent"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/confidentiality/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / confidentiality confidentiality \u00b6 [jvm] Content open override fun confidentiality (): LabelVariable More info Term that corresponds to performing Label.confidentiality .","title":"Confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/confidentiality/#confidentiality","text":"[jvm] Content open override fun confidentiality (): LabelVariable More info Term that corresponds to performing Label.confidentiality .","title":"confidentiality"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / copy copy \u00b6 [jvm] Content fun copy (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>): LabelVariable","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/copy/#copy","text":"[jvm] Content fun copy (confidentialityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>, integrityComponent: AtomicTerm < FreeDistributiveLattice < Principal >>): LabelVariable","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/get-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / getValue getValue \u00b6 [jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term.","title":"Get value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/get-value/#getvalue","text":"[jvm] Content open override fun getValue (solution: ConstraintSolution ): Label More info Returns the value of this term given an assignment of values to every variable in the term.","title":"getValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/integrity-component/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / integrityComponent integrityComponent \u00b6 [jvm] Content open override val integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >> More info Returns a term representing the integrity component.","title":"Integrity component"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/integrity-component/#integritycomponent","text":"[jvm] Content open override val integrityComponent : AtomicTerm < FreeDistributiveLattice < Principal >> More info Returns a term representing the integrity component.","title":"integrityComponent"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/integrity/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / integrity integrity \u00b6 [jvm] Content open override fun integrity (): LabelVariable More info Term that corresponds to performing Label.integrity .","title":"Integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/integrity/#integrity","text":"[jvm] Content open override fun integrity (): LabelVariable More info Term that corresponds to performing Label.integrity .","title":"integrity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/join/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / join join \u00b6 [jvm] Content open override fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that.","title":"Join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/join/#join","text":"[jvm] Content open override fun join (that: Label ): LabelTerm More info The term that corresponds to the Label.join of this and that.","title":"join"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/swap/","text":"// compiler / edu.cornell.cs.apl.viaduct.security.solver / LabelVariable / swap swap \u00b6 [jvm] Content open override fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap .","title":"Swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.security.solver/-label-variable/swap/#swap","text":"[jvm] Content open override fun swap (): AtomicLabelTerm More info The term that corresponds to performing Label.swap .","title":"swap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection Package edu.cornell.cs.apl.viaduct.selection \u00b6 Types \u00b6 Name Summary ABYFactory [jvm] Content class ABYFactory ( program : ProgramNode ) : ProtocolFactory And [jvm] Content data class And ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint CommitmentFactory [jvm] Content class CommitmentFactory ( program : ProgramNode ) : ProtocolFactory CommunicationEvent [jvm] Content data class CommunicationEvent ( send : OutputPort , recv : InputPort ) Cost [jvm] Content data class Cost < C : CostMonoid < C >>( features : PersistentMap< CostFeature , C >) : CostMonoid < Cost < C >> , Map < CostFeature , C > , PrettyPrintable More info The cost of executing a piece of code or sending a message. CostAdd [jvm] Content data class CostAdd ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost CostEquals [jvm] Content data class CostEquals ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint CostEstimator [jvm] Content interface CostEstimator < C : CostMonoid < C >> More info A modular cost model for estimating the cost of executing a program given a protocol assignment. CostFeature [jvm] Content typealias CostFeature = String CostLessThanEqualTo [jvm] Content data class CostLessThanEqualTo ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint CostLiteral [jvm] Content data class CostLiteral ( cost : Int ) : SymbolicCost CostMode [jvm] Content enum CostMode : Enum < CostMode > CostMonoid [jvm] Content interface CostMonoid < C : CostMonoid < C >> : PrettyPrintable More info A commutative monoid that represents a notion of cost for a feature. CostMul [jvm] Content data class CostMul ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost CostMux [jvm] Content data class CostMux ( guard : SelectionConstraint , lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost CostVariable [jvm] Content data class CostVariable ( variable : IntExpr) : SymbolicCost FunctionVariable [jvm] Content data class FunctionVariable ( function : FunctionName , variable : Variable ) : PrettyPrintable GuardVisibilityFlag [jvm] Content data class GuardVisibilityFlag ( variable : BoolExpr) : SelectionConstraint HostVariable [jvm] Content data class HostVariable ( variable : BoolExpr) : SelectionConstraint Implies [jvm] Content data class Implies ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint IntegerCost [jvm] Content class IntegerCost ( cost : Int ) : CostMonoid < IntegerCost > Literal [jvm] Content data class Literal ( literalValue : Boolean ) : SelectionConstraint LocalFactory [jvm] Content class LocalFactory ( program : ProgramNode ) : ProtocolFactory Not [jvm] Content data class Not ( rhs : SelectionConstraint ) : SelectionConstraint Or [jvm] Content data class Or ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint ProtocolCommunication [jvm] Content data class ProtocolCommunication ( events : Set < CommunicationEvent >) : Set < CommunicationEvent > ProtocolComposer [jvm] Content interface ProtocolComposer ProtocolFactory [jvm] Content interface ProtocolFactory More info This interface specifies factories for protocol selection. ProtocolSelector [jvm] Content interface ProtocolSelector More info This interface specifies selectors for protocol selection. ReplicationFactory [jvm] Content class ReplicationFactory ( program : ProgramNode ) : ProtocolFactory SelectionConstraint [jvm] Content sealed class SelectionConstraint : PrettyPrintable More info Custom selection constraints specified for constraint solving during splitting. SelectionConstraintGenerator [jvm] Content class SelectionConstraintGenerator ( program : ProgramNode , protocolFactory : ProtocolFactory , protocolComposer : ProtocolComposer , costEstimator : CostEstimator < IntegerCost >, ctx : Context) SimpleCostEstimator [jvm] Content class SimpleCostEstimator ( protocolComposer : ProtocolComposer , costRegime : SimpleCostRegime ) : CostEstimator < IntegerCost > More info Cost estimator for Local, Replication and ABY protocols. SimpleCostRegime [jvm] Content enum SimpleCostRegime : Enum < SimpleCostRegime > SimpleProtocolComposer [jvm] Content object SimpleProtocolComposer : ProtocolComposer More info Describe how protocols should communicate / compose with each other. SimpleProtocolFactory [jvm] Content class SimpleProtocolFactory ( program : ProgramNode , localFactory : LocalFactory , replicationFactory : ReplicationFactory , abyFactory : ABYFactory , zkpFactory : ZKPFactory , commitmentFactory : CommitmentFactory ) : UnionProtocolFactory More info Factory for Local, Replication and ABY, and Commitment protocols. SymbolicCost [jvm] Content sealed class SymbolicCost : CostMonoid < SymbolicCost > UnionProtocolFactory [jvm] Content open class UnionProtocolFactory ( selectors : Set < ProtocolFactory >) : ProtocolFactory More info Union of protocol selectors. VariableEquals [jvm] Content data class VariableEquals ( var1 : FunctionVariable , var2 : FunctionVariable ) : SelectionConstraint More info Protocols for v1 and v2 are equal. VariableIn [jvm] Content data class VariableIn ( variable : FunctionVariable , protocols : Set < Protocol >) : SelectionConstraint More info VariableIn(v, P) holds when v is selected to be a protocol in P ZKPFactory [jvm] Content class ZKPFactory ( program : ProgramNode ) : ProtocolFactory Functions \u00b6 Name Summary costVariables [jvm] Content fun SelectionConstraint . costVariables (): Set < CostVariable > [jvm] Content fun SymbolicCost . costVariables (): Set < CostVariable > More info Some convenience functions. guardVisibilityVariables [jvm] Content fun SelectionConstraint . guardVisibilityVariables (): Set < GuardVisibilityFlag > hostVariables [jvm] Content fun SelectionConstraint . hostVariables (): Set < HostVariable > readsFrom [jvm] Content fun ExpressionNode . readsFrom (nameAnalysis: NameAnalysis , prots: Set < Protocol >): SelectionConstraint More info States whether an expression reads only from the protocols in prots [jvm] Content fun DeclarationNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint [jvm] Content fun LetNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint More info States that if the let node is stored at any protocol in to, it reads from only the protocols in from selectProtocolsWithZ3 [jvm] Content fun selectProtocolsWithZ3 (program: ProgramNode , main: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, costMode: CostMode , dumpMetadata: ( Map < Node , PrettyPrintable>) -> Unit = {}): ( FunctionName , Variable ) -> Protocol sendsTo [jvm] Content fun DeclarationNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint [jvm] Content fun LetNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint More info States that if the let node is stores at any protocol in from, it sends to only the protocols in to unions [jvm] Content fun unions (vararg selectors: ProtocolSelector ): ProtocolSelector validateProtocolAssignment [jvm] Content fun validateProtocolAssignment (program: ProgramNode , processDeclaration: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, protocolAssignment: ( FunctionName , Variable ) -> Protocol ) More info This function provides a sanity check to ensure that a given protocol selection f : Variable -> Protocol satisfies all constraints required on it by the selector.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/#package-educornellcsaplviaductselection","text":"","title":"Package edu.cornell.cs.apl.viaduct.selection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/#types","text":"Name Summary ABYFactory [jvm] Content class ABYFactory ( program : ProgramNode ) : ProtocolFactory And [jvm] Content data class And ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint CommitmentFactory [jvm] Content class CommitmentFactory ( program : ProgramNode ) : ProtocolFactory CommunicationEvent [jvm] Content data class CommunicationEvent ( send : OutputPort , recv : InputPort ) Cost [jvm] Content data class Cost < C : CostMonoid < C >>( features : PersistentMap< CostFeature , C >) : CostMonoid < Cost < C >> , Map < CostFeature , C > , PrettyPrintable More info The cost of executing a piece of code or sending a message. CostAdd [jvm] Content data class CostAdd ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost CostEquals [jvm] Content data class CostEquals ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint CostEstimator [jvm] Content interface CostEstimator < C : CostMonoid < C >> More info A modular cost model for estimating the cost of executing a program given a protocol assignment. CostFeature [jvm] Content typealias CostFeature = String CostLessThanEqualTo [jvm] Content data class CostLessThanEqualTo ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint CostLiteral [jvm] Content data class CostLiteral ( cost : Int ) : SymbolicCost CostMode [jvm] Content enum CostMode : Enum < CostMode > CostMonoid [jvm] Content interface CostMonoid < C : CostMonoid < C >> : PrettyPrintable More info A commutative monoid that represents a notion of cost for a feature. CostMul [jvm] Content data class CostMul ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost CostMux [jvm] Content data class CostMux ( guard : SelectionConstraint , lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost CostVariable [jvm] Content data class CostVariable ( variable : IntExpr) : SymbolicCost FunctionVariable [jvm] Content data class FunctionVariable ( function : FunctionName , variable : Variable ) : PrettyPrintable GuardVisibilityFlag [jvm] Content data class GuardVisibilityFlag ( variable : BoolExpr) : SelectionConstraint HostVariable [jvm] Content data class HostVariable ( variable : BoolExpr) : SelectionConstraint Implies [jvm] Content data class Implies ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint IntegerCost [jvm] Content class IntegerCost ( cost : Int ) : CostMonoid < IntegerCost > Literal [jvm] Content data class Literal ( literalValue : Boolean ) : SelectionConstraint LocalFactory [jvm] Content class LocalFactory ( program : ProgramNode ) : ProtocolFactory Not [jvm] Content data class Not ( rhs : SelectionConstraint ) : SelectionConstraint Or [jvm] Content data class Or ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint ProtocolCommunication [jvm] Content data class ProtocolCommunication ( events : Set < CommunicationEvent >) : Set < CommunicationEvent > ProtocolComposer [jvm] Content interface ProtocolComposer ProtocolFactory [jvm] Content interface ProtocolFactory More info This interface specifies factories for protocol selection. ProtocolSelector [jvm] Content interface ProtocolSelector More info This interface specifies selectors for protocol selection. ReplicationFactory [jvm] Content class ReplicationFactory ( program : ProgramNode ) : ProtocolFactory SelectionConstraint [jvm] Content sealed class SelectionConstraint : PrettyPrintable More info Custom selection constraints specified for constraint solving during splitting. SelectionConstraintGenerator [jvm] Content class SelectionConstraintGenerator ( program : ProgramNode , protocolFactory : ProtocolFactory , protocolComposer : ProtocolComposer , costEstimator : CostEstimator < IntegerCost >, ctx : Context) SimpleCostEstimator [jvm] Content class SimpleCostEstimator ( protocolComposer : ProtocolComposer , costRegime : SimpleCostRegime ) : CostEstimator < IntegerCost > More info Cost estimator for Local, Replication and ABY protocols. SimpleCostRegime [jvm] Content enum SimpleCostRegime : Enum < SimpleCostRegime > SimpleProtocolComposer [jvm] Content object SimpleProtocolComposer : ProtocolComposer More info Describe how protocols should communicate / compose with each other. SimpleProtocolFactory [jvm] Content class SimpleProtocolFactory ( program : ProgramNode , localFactory : LocalFactory , replicationFactory : ReplicationFactory , abyFactory : ABYFactory , zkpFactory : ZKPFactory , commitmentFactory : CommitmentFactory ) : UnionProtocolFactory More info Factory for Local, Replication and ABY, and Commitment protocols. SymbolicCost [jvm] Content sealed class SymbolicCost : CostMonoid < SymbolicCost > UnionProtocolFactory [jvm] Content open class UnionProtocolFactory ( selectors : Set < ProtocolFactory >) : ProtocolFactory More info Union of protocol selectors. VariableEquals [jvm] Content data class VariableEquals ( var1 : FunctionVariable , var2 : FunctionVariable ) : SelectionConstraint More info Protocols for v1 and v2 are equal. VariableIn [jvm] Content data class VariableIn ( variable : FunctionVariable , protocols : Set < Protocol >) : SelectionConstraint More info VariableIn(v, P) holds when v is selected to be a protocol in P ZKPFactory [jvm] Content class ZKPFactory ( program : ProgramNode ) : ProtocolFactory","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/#functions","text":"Name Summary costVariables [jvm] Content fun SelectionConstraint . costVariables (): Set < CostVariable > [jvm] Content fun SymbolicCost . costVariables (): Set < CostVariable > More info Some convenience functions. guardVisibilityVariables [jvm] Content fun SelectionConstraint . guardVisibilityVariables (): Set < GuardVisibilityFlag > hostVariables [jvm] Content fun SelectionConstraint . hostVariables (): Set < HostVariable > readsFrom [jvm] Content fun ExpressionNode . readsFrom (nameAnalysis: NameAnalysis , prots: Set < Protocol >): SelectionConstraint More info States whether an expression reads only from the protocols in prots [jvm] Content fun DeclarationNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint [jvm] Content fun LetNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint More info States that if the let node is stored at any protocol in to, it reads from only the protocols in from selectProtocolsWithZ3 [jvm] Content fun selectProtocolsWithZ3 (program: ProgramNode , main: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, costMode: CostMode , dumpMetadata: ( Map < Node , PrettyPrintable>) -> Unit = {}): ( FunctionName , Variable ) -> Protocol sendsTo [jvm] Content fun DeclarationNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint [jvm] Content fun LetNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint More info States that if the let node is stores at any protocol in from, it sends to only the protocols in to unions [jvm] Content fun unions (vararg selectors: ProtocolSelector ): ProtocolSelector validateProtocolAssignment [jvm] Content fun validateProtocolAssignment (program: ProgramNode , processDeclaration: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, protocolAssignment: ( FunctionName , Variable ) -> Protocol ) More info This function provides a sanity check to ensure that a given protocol selection f : Variable -> Protocol satisfies all constraints required on it by the selector.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/cost-variables/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / costVariables costVariables \u00b6 [jvm] Content fun SymbolicCost . costVariables (): Set < CostVariable > More info Some convenience functions. [jvm] Content fun SelectionConstraint . costVariables (): Set < CostVariable >","title":"Cost variables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/cost-variables/#costvariables","text":"[jvm] Content fun SymbolicCost . costVariables (): Set < CostVariable > More info Some convenience functions. [jvm] Content fun SelectionConstraint . costVariables (): Set < CostVariable >","title":"costVariables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/guard-visibility-variables/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / guardVisibilityVariables guardVisibilityVariables \u00b6 [jvm] Content fun SelectionConstraint . guardVisibilityVariables (): Set < GuardVisibilityFlag >","title":"Guard visibility variables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/guard-visibility-variables/#guardvisibilityvariables","text":"[jvm] Content fun SelectionConstraint . guardVisibilityVariables (): Set < GuardVisibilityFlag >","title":"guardVisibilityVariables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/host-variables/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / hostVariables hostVariables \u00b6 [jvm] Content fun SelectionConstraint . hostVariables (): Set < HostVariable >","title":"Host variables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/host-variables/#hostvariables","text":"[jvm] Content fun SelectionConstraint . hostVariables (): Set < HostVariable >","title":"hostVariables"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/reads-from/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / readsFrom readsFrom \u00b6 [jvm] Content fun ExpressionNode . readsFrom (nameAnalysis: NameAnalysis , prots: Set < Protocol >): SelectionConstraint More info States whether an expression reads only from the protocols in prots [jvm] Content fun LetNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint More info States that if the let node is stored at any protocol in to, it reads from only the protocols in from [jvm] Content fun DeclarationNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint","title":"Reads from"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/reads-from/#readsfrom","text":"[jvm] Content fun ExpressionNode . readsFrom (nameAnalysis: NameAnalysis , prots: Set < Protocol >): SelectionConstraint More info States whether an expression reads only from the protocols in prots [jvm] Content fun LetNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint More info States that if the let node is stored at any protocol in to, it reads from only the protocols in from [jvm] Content fun DeclarationNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint","title":"readsFrom"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/select-protocols-with-z3/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / selectProtocolsWithZ3 selectProtocolsWithZ3 \u00b6 [jvm] Content fun selectProtocolsWithZ3 (program: ProgramNode , main: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, costMode: CostMode , dumpMetadata: ( Map < Node , PrettyPrintable>) -> Unit = {}): ( FunctionName , Variable ) -> Protocol","title":"Select protocols with z3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/select-protocols-with-z3/#selectprotocolswithz3","text":"[jvm] Content fun selectProtocolsWithZ3 (program: ProgramNode , main: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, costMode: CostMode , dumpMetadata: ( Map < Node , PrettyPrintable>) -> Unit = {}): ( FunctionName , Variable ) -> Protocol","title":"selectProtocolsWithZ3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/sends-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / sendsTo sendsTo \u00b6 [jvm] Content fun LetNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint More info States that if the let node is stores at any protocol in from, it sends to only the protocols in to [jvm] Content fun DeclarationNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint","title":"Sends to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/sends-to/#sendsto","text":"[jvm] Content fun LetNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint More info States that if the let node is stores at any protocol in from, it sends to only the protocols in to [jvm] Content fun DeclarationNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint","title":"sendsTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/unions/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / unions unions \u00b6 [jvm] Content fun unions (vararg selectors: ProtocolSelector ): ProtocolSelector","title":"Unions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/unions/#unions","text":"[jvm] Content fun unions (vararg selectors: ProtocolSelector ): ProtocolSelector","title":"unions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/validate-protocol-assignment/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / validateProtocolAssignment validateProtocolAssignment \u00b6 [jvm] Content fun validateProtocolAssignment (program: ProgramNode , processDeclaration: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, protocolAssignment: ( FunctionName , Variable ) -> Protocol ) More info This function provides a sanity check to ensure that a given protocol selection f : Variable -> Protocol satisfies all constraints required on it by the selector.","title":"Validate protocol assignment"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/validate-protocol-assignment/#validateprotocolassignment","text":"[jvm] Content fun validateProtocolAssignment (program: ProgramNode , processDeclaration: ProcessDeclarationNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, protocolAssignment: ( FunctionName , Variable ) -> Protocol ) More info This function provides a sanity check to ensure that a given protocol selection f : Variable -> Protocol satisfies all constraints required on it by the selector.","title":"validateProtocolAssignment"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory ABYFactory \u00b6 [jvm] class ABYFactory ( program : ProgramNode ) : ProtocolFactory Functions \u00b6 Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > Properties \u00b6 Name Summary parentFactory [jvm] var parentFactory : ProtocolFactory ? = null protocols [jvm] val protocols : List < SpecializedProtocol >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/#abyfactory","text":"[jvm] class ABYFactory ( program : ProgramNode ) : ProtocolFactory","title":"ABYFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/#functions","text":"Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/#properties","text":"Name Summary parentFactory [jvm] var parentFactory : ProtocolFactory ? = null protocols [jvm] val protocols : List < SpecializedProtocol >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/-a-b-y-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory / ABYFactory ABYFactory \u00b6 [jvm] Content fun ABYFactory (program: ProgramNode )","title":" a b y factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/-a-b-y-factory/#abyfactory","text":"[jvm] Content fun ABYFactory (program: ProgramNode )","title":"ABYFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/available-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory / availableProtocols availableProtocols \u00b6 [jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"Available protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/available-protocols/#availableprotocols","text":"[jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"availableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory / constraint constraint \u00b6 [jvm] Content open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint","title":"Constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/constraint/#constraint","text":"[jvm] Content open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint","title":"constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/guard-visibility-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory / guardVisibilityConstraint guardVisibilityConstraint \u00b6 [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"Guard visibility constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/guard-visibility-constraint/#guardvisibilityconstraint","text":"[jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"guardVisibilityConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/parent-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory / parentFactory parentFactory \u00b6 [jvm] Content var parentFactory : ProtocolFactory ? = null","title":"Parent factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/parent-factory/#parentfactory","text":"[jvm] Content var parentFactory : ProtocolFactory ? = null","title":"parentFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory / protocols protocols \u00b6 [jvm] Content open override fun protocols (): List < SpecializedProtocol > val protocols : List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/protocols/#protocols","text":"[jvm] Content open override fun protocols (): List < SpecializedProtocol > val protocols : List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ABYFactory / viableProtocols viableProtocols \u00b6 [jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-a-b-y-factory/viable-protocols/#viableprotocols","text":"[jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And And \u00b6 [jvm] data class And ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SelectionConstraint copy [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): And equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SelectionConstraint rhs [jvm] val rhs : SelectionConstraint","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/#and","text":"[jvm] data class And ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint","title":"And"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SelectionConstraint copy [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): And equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SelectionConstraint rhs [jvm] val rhs : SelectionConstraint","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/-and/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And / And And \u00b6 [jvm] Content fun And (lhs: SelectionConstraint , rhs: SelectionConstraint )","title":" and"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/-and/#and","text":"[jvm] Content fun And (lhs: SelectionConstraint , rhs: SelectionConstraint )","title":"And"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SelectionConstraint","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/component1/#component1","text":"[jvm] Content operator fun component1 (): SelectionConstraint","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SelectionConstraint","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/component2/#component2","text":"[jvm] Content operator fun component2 (): SelectionConstraint","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And / copy copy \u00b6 [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): And","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/copy/#copy","text":"[jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): And","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And / lhs lhs \u00b6 [jvm] Content val lhs : SelectionConstraint","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/lhs/#lhs","text":"[jvm] Content val lhs : SelectionConstraint","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / And / rhs rhs \u00b6 [jvm] Content val rhs : SelectionConstraint","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-and/rhs/#rhs","text":"[jvm] Content val rhs : SelectionConstraint","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory CommitmentFactory \u00b6 [jvm] class CommitmentFactory ( program : ProgramNode ) : ProtocolFactory Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > Properties \u00b6 Name Summary program [jvm] val program : ProgramNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/#commitmentfactory","text":"[jvm] class CommitmentFactory ( program : ProgramNode ) : ProtocolFactory","title":"CommitmentFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/#functions","text":"Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/#properties","text":"Name Summary program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/-commitment-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory / CommitmentFactory CommitmentFactory \u00b6 [jvm] Content fun CommitmentFactory (program: ProgramNode )","title":" commitment factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/-commitment-factory/#commitmentfactory","text":"[jvm] Content fun CommitmentFactory (program: ProgramNode )","title":"CommitmentFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/available-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory / availableProtocols availableProtocols \u00b6 [jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"Available protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/available-protocols/#availableprotocols","text":"[jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"availableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/program/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory / program program \u00b6 [jvm] Content val program : ProgramNode","title":"Program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/program/#program","text":"[jvm] Content val program : ProgramNode","title":"program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory / protocols protocols \u00b6 [jvm] Content open override fun protocols (): List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/protocols/#protocols","text":"[jvm] Content open override fun protocols (): List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory / viableProtocols viableProtocols \u00b6 [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/viable-protocols/#viableprotocols","text":"[jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/-companion/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommitmentFactory / Companion / protocols protocols \u00b6 [jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-commitment-factory/-companion/protocols/#protocols","text":"[jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommunicationEvent CommunicationEvent \u00b6 [jvm] data class CommunicationEvent ( send : OutputPort , recv : InputPort ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): OutputPort component2 [jvm] Content operator fun component2 (): InputPort copy [jvm] Content fun copy (send: OutputPort , recv: InputPort ): CommunicationEvent equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary recv [jvm] val recv : InputPort send [jvm] val send : OutputPort","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/#communicationevent","text":"[jvm] data class CommunicationEvent ( send : OutputPort , recv : InputPort )","title":"CommunicationEvent"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): OutputPort component2 [jvm] Content operator fun component2 (): InputPort copy [jvm] Content fun copy (send: OutputPort , recv: InputPort ): CommunicationEvent equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/#properties","text":"Name Summary recv [jvm] val recv : InputPort send [jvm] val send : OutputPort","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/-communication-event/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommunicationEvent / CommunicationEvent CommunicationEvent \u00b6 [jvm] Content fun CommunicationEvent (send: OutputPort , recv: InputPort )","title":" communication event"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/-communication-event/#communicationevent","text":"[jvm] Content fun CommunicationEvent (send: OutputPort , recv: InputPort )","title":"CommunicationEvent"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommunicationEvent / component1 component1 \u00b6 [jvm] Content operator fun component1 (): OutputPort","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/component1/#component1","text":"[jvm] Content operator fun component1 (): OutputPort","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommunicationEvent / component2 component2 \u00b6 [jvm] Content operator fun component2 (): InputPort","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/component2/#component2","text":"[jvm] Content operator fun component2 (): InputPort","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommunicationEvent / copy copy \u00b6 [jvm] Content fun copy (send: OutputPort , recv: InputPort ): CommunicationEvent","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/copy/#copy","text":"[jvm] Content fun copy (send: OutputPort , recv: InputPort ): CommunicationEvent","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/recv/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommunicationEvent / recv recv \u00b6 [jvm] Content val recv : InputPort","title":"Recv"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/recv/#recv","text":"[jvm] Content val recv : InputPort","title":"recv"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/send/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CommunicationEvent / send send \u00b6 [jvm] Content val send : OutputPort","title":"Send"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-communication-event/send/#send","text":"[jvm] Content val send : OutputPort","title":"send"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost Cost \u00b6 [jvm] data class Cost < C : CostMonoid < C >>( features : PersistentMap< CostFeature , C >) : CostMonoid < Cost < C >> , Map < CostFeature , C > , PrettyPrintable The cost of executing a piece of code or sending a message. Consists of a map of features over some cost monoid. Constructors \u00b6 Name Summary Cost [jvm] fun < C : CostMonoid < C >> Cost (features: PersistentMap< CostFeature , C >) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): PersistentMap< CostFeature , C > concat [jvm] Content open override fun concat (other: Cost < C >): Cost < C > containsKey [jvm] Content open override fun containsKey (key: CostFeature ): Boolean containsValue [jvm] Content open override fun containsValue (value: C ): Boolean copy [jvm] Content fun copy (features: PersistentMap< CostFeature , C >): Cost < C > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean featureMap [jvm] Content fun < D : CostMonoid < D >> featureMap (f: ( CostFeature , C ) -> D ): Cost < D > forEach [jvm] Content open fun forEach (p0: BiConsumer CostFeature , in C >) get [jvm] Content open operator override fun get (key: CostFeature ): C ? getOrDefault [jvm] Content open fun getOrDefault (key: CostFeature , defaultValue: C ): C hashCode [jvm] Content open override fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean map [jvm] Content fun < D : CostMonoid < D >> map (f: ( C ) -> D ): Cost < D > toString [jvm] Content open override fun toString (): String update [jvm] Content fun update (feature: CostFeature , cost: C ): Cost < C > zero [jvm] Content open override fun zero (): Cost < C > Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document entries [jvm] open override val entries : Set < Map.Entry < CostFeature , C >> features [jvm] val features : PersistentMap< CostFeature , C > keys [jvm] open override val keys : Set < CostFeature > size [jvm] open override val size : Int values [jvm] open override val values : Collection < C >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/#cost","text":"[jvm] data class Cost < C : CostMonoid < C >>( features : PersistentMap< CostFeature , C >) : CostMonoid < Cost < C >> , Map < CostFeature , C > , PrettyPrintable The cost of executing a piece of code or sending a message. Consists of a map of features over some cost monoid.","title":"Cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/#constructors","text":"Name Summary Cost [jvm] fun < C : CostMonoid < C >> Cost (features: PersistentMap< CostFeature , C >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): PersistentMap< CostFeature , C > concat [jvm] Content open override fun concat (other: Cost < C >): Cost < C > containsKey [jvm] Content open override fun containsKey (key: CostFeature ): Boolean containsValue [jvm] Content open override fun containsValue (value: C ): Boolean copy [jvm] Content fun copy (features: PersistentMap< CostFeature , C >): Cost < C > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean featureMap [jvm] Content fun < D : CostMonoid < D >> featureMap (f: ( CostFeature , C ) -> D ): Cost < D > forEach [jvm] Content open fun forEach (p0: BiConsumer CostFeature , in C >) get [jvm] Content open operator override fun get (key: CostFeature ): C ? getOrDefault [jvm] Content open fun getOrDefault (key: CostFeature , defaultValue: C ): C hashCode [jvm] Content open override fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean map [jvm] Content fun < D : CostMonoid < D >> map (f: ( C ) -> D ): Cost < D > toString [jvm] Content open override fun toString (): String update [jvm] Content fun update (feature: CostFeature , cost: C ): Cost < C > zero [jvm] Content open override fun zero (): Cost < C >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document entries [jvm] open override val entries : Set < Map.Entry < CostFeature , C >> features [jvm] val features : PersistentMap< CostFeature , C > keys [jvm] open override val keys : Set < CostFeature > size [jvm] open override val size : Int values [jvm] open override val values : Collection < C >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / Cost Cost \u00b6 [jvm] Content fun < C : CostMonoid < C >> Cost (features: PersistentMap< CostFeature , C >)","title":" cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/-cost/#cost","text":"[jvm] Content fun < C : CostMonoid < C >> Cost (features: PersistentMap< CostFeature , C >)","title":"Cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / component1 component1 \u00b6 [jvm] Content operator fun component1 (): PersistentMap< CostFeature , C >","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/component1/#component1","text":"[jvm] Content operator fun component1 (): PersistentMap< CostFeature , C >","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/concat/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / concat concat \u00b6 [jvm] Content open override fun concat (other: Cost < C >): Cost < C >","title":"Concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/concat/#concat","text":"[jvm] Content open override fun concat (other: Cost < C >): Cost < C >","title":"concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / copy copy \u00b6 [jvm] Content fun copy (features: PersistentMap< CostFeature , C >): Cost < C >","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/copy/#copy","text":"[jvm] Content fun copy (features: PersistentMap< CostFeature , C >): Cost < C >","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/feature-map/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / featureMap featureMap \u00b6 [jvm] Content fun < D : CostMonoid < D >> featureMap (f: ( CostFeature , C ) -> D ): Cost < D >","title":"Feature map"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/feature-map/#featuremap","text":"[jvm] Content fun < D : CostMonoid < D >> featureMap (f: ( CostFeature , C ) -> D ): Cost < D >","title":"featureMap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/features/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / features features \u00b6 [jvm] Content val features : PersistentMap< CostFeature , C >","title":"Features"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/features/#features","text":"[jvm] Content val features : PersistentMap< CostFeature , C >","title":"features"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/map/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / map map \u00b6 [jvm] Content fun < D : CostMonoid < D >> map (f: ( C ) -> D ): Cost < D >","title":"Map"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/map/#map","text":"[jvm] Content fun < D : CostMonoid < D >> map (f: ( C ) -> D ): Cost < D >","title":"map"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/update/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / update update \u00b6 [jvm] Content fun update (feature: CostFeature , cost: C ): Cost < C >","title":"Update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/update/#update","text":"[jvm] Content fun update (feature: CostFeature , cost: C ): Cost < C >","title":"update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/zero/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Cost / zero zero \u00b6 [jvm] Content open override fun zero (): Cost < C >","title":"Zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost/zero/#zero","text":"[jvm] Content open override fun zero (): Cost < C >","title":"zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd CostAdd \u00b6 [jvm] data class CostAdd ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostAdd equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/#costadd","text":"[jvm] data class CostAdd ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost","title":"CostAdd"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostAdd equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/-cost-add/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd / CostAdd CostAdd \u00b6 [jvm] Content fun CostAdd (lhs: SymbolicCost , rhs: SymbolicCost )","title":" cost add"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/-cost-add/#costadd","text":"[jvm] Content fun CostAdd (lhs: SymbolicCost , rhs: SymbolicCost )","title":"CostAdd"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SymbolicCost","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/component1/#component1","text":"[jvm] Content operator fun component1 (): SymbolicCost","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SymbolicCost","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/component2/#component2","text":"[jvm] Content operator fun component2 (): SymbolicCost","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd / copy copy \u00b6 [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostAdd","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/copy/#copy","text":"[jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostAdd","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd / lhs lhs \u00b6 [jvm] Content val lhs : SymbolicCost","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/lhs/#lhs","text":"[jvm] Content val lhs : SymbolicCost","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostAdd / rhs rhs \u00b6 [jvm] Content val rhs : SymbolicCost","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-add/rhs/#rhs","text":"[jvm] Content val rhs : SymbolicCost","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals CostEquals \u00b6 [jvm] data class CostEquals ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostEquals equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/#costequals","text":"[jvm] data class CostEquals ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint","title":"CostEquals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostEquals equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/-cost-equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals / CostEquals CostEquals \u00b6 [jvm] Content fun CostEquals (lhs: SymbolicCost , rhs: SymbolicCost )","title":" cost equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/-cost-equals/#costequals","text":"[jvm] Content fun CostEquals (lhs: SymbolicCost , rhs: SymbolicCost )","title":"CostEquals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SymbolicCost","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/component1/#component1","text":"[jvm] Content operator fun component1 (): SymbolicCost","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SymbolicCost","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/component2/#component2","text":"[jvm] Content operator fun component2 (): SymbolicCost","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals / copy copy \u00b6 [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostEquals","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/copy/#copy","text":"[jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostEquals","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals / lhs lhs \u00b6 [jvm] Content val lhs : SymbolicCost","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/lhs/#lhs","text":"[jvm] Content val lhs : SymbolicCost","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEquals / rhs rhs \u00b6 [jvm] Content val rhs : SymbolicCost","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-equals/rhs/#rhs","text":"[jvm] Content val rhs : SymbolicCost","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEstimator CostEstimator \u00b6 [jvm] interface CostEstimator < C : CostMonoid < C >> A modular cost model for estimating the cost of executing a program given a protocol assignment. The cost model is modular because it is local: it cannot look at the entire program, instead, it is restricted to viewing a single computation or a message at a time. Functions \u00b6 Name Summary communicationCost [jvm] Content abstract fun communicationCost (source: Protocol , destination: Protocol , host: Host ? = null): Cost < C > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. equals [jvm] Content open operator fun equals (other: Any ?): Boolean executionCost [jvm] Content abstract fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < C > More info Estimated cost of executing stmt at protocol. featureWeights [jvm] Content abstract fun featureWeights (): Cost < C > More info Cost weights of features. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zeroCost [jvm] Content abstract fun zeroCost (): Cost < C > More info \"Identity\" cost. Inheritors \u00b6 Name SimpleCostEstimator","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/#costestimator","text":"[jvm] interface CostEstimator < C : CostMonoid < C >> A modular cost model for estimating the cost of executing a program given a protocol assignment. The cost model is modular because it is local: it cannot look at the entire program, instead, it is restricted to viewing a single computation or a message at a time.","title":"CostEstimator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/#functions","text":"Name Summary communicationCost [jvm] Content abstract fun communicationCost (source: Protocol , destination: Protocol , host: Host ? = null): Cost < C > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. equals [jvm] Content open operator fun equals (other: Any ?): Boolean executionCost [jvm] Content abstract fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < C > More info Estimated cost of executing stmt at protocol. featureWeights [jvm] Content abstract fun featureWeights (): Cost < C > More info Cost weights of features. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zeroCost [jvm] Content abstract fun zeroCost (): Cost < C > More info \"Identity\" cost.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/#inheritors","text":"Name SimpleCostEstimator","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/communication-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEstimator / communicationCost communicationCost \u00b6 [jvm] Content abstract fun communicationCost (source: Protocol , destination: Protocol , host: Host ? = null): Cost < C > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. If host is null, then computes the cost for all the hosts in destination.","title":"Communication cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/communication-cost/#communicationcost","text":"[jvm] Content abstract fun communicationCost (source: Protocol , destination: Protocol , host: Host ? = null): Cost < C > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. If host is null, then computes the cost for all the hosts in destination.","title":"communicationCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/execution-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEstimator / executionCost executionCost \u00b6 [jvm] Content abstract fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < C > More info Estimated cost of executing stmt at protocol.","title":"Execution cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/execution-cost/#executioncost","text":"[jvm] Content abstract fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < C > More info Estimated cost of executing stmt at protocol.","title":"executionCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/feature-weights/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEstimator / featureWeights featureWeights \u00b6 [jvm] Content abstract fun featureWeights (): Cost < C > More info Cost weights of features.","title":"Feature weights"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/feature-weights/#featureweights","text":"[jvm] Content abstract fun featureWeights (): Cost < C > More info Cost weights of features.","title":"featureWeights"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/zero-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostEstimator / zeroCost zeroCost \u00b6 [jvm] Content abstract fun zeroCost (): Cost < C > More info \"Identity\" cost.","title":"Zero cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-estimator/zero-cost/#zerocost","text":"[jvm] Content abstract fun zeroCost (): Cost < C > More info \"Identity\" cost.","title":"zeroCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo CostLessThanEqualTo \u00b6 [jvm] data class CostLessThanEqualTo ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostLessThanEqualTo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/#costlessthanequalto","text":"[jvm] data class CostLessThanEqualTo ( lhs : SymbolicCost , rhs : SymbolicCost ) : SelectionConstraint","title":"CostLessThanEqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostLessThanEqualTo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/-cost-less-than-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo / CostLessThanEqualTo CostLessThanEqualTo \u00b6 [jvm] Content fun CostLessThanEqualTo (lhs: SymbolicCost , rhs: SymbolicCost )","title":" cost less than equal to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/-cost-less-than-equal-to/#costlessthanequalto","text":"[jvm] Content fun CostLessThanEqualTo (lhs: SymbolicCost , rhs: SymbolicCost )","title":"CostLessThanEqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SymbolicCost","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/component1/#component1","text":"[jvm] Content operator fun component1 (): SymbolicCost","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SymbolicCost","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/component2/#component2","text":"[jvm] Content operator fun component2 (): SymbolicCost","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo / copy copy \u00b6 [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostLessThanEqualTo","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/copy/#copy","text":"[jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostLessThanEqualTo","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo / lhs lhs \u00b6 [jvm] Content val lhs : SymbolicCost","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/lhs/#lhs","text":"[jvm] Content val lhs : SymbolicCost","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLessThanEqualTo / rhs rhs \u00b6 [jvm] Content val rhs : SymbolicCost","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-less-than-equal-to/rhs/#rhs","text":"[jvm] Content val rhs : SymbolicCost","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLiteral CostLiteral \u00b6 [jvm] data class CostLiteral ( cost : Int ) : SymbolicCost Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Int concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (cost: Int ): CostLiteral equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document cost [jvm] val cost : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/#costliteral","text":"[jvm] data class CostLiteral ( cost : Int ) : SymbolicCost","title":"CostLiteral"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Int concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (cost: Int ): CostLiteral equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document cost [jvm] val cost : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/-cost-literal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLiteral / CostLiteral CostLiteral \u00b6 [jvm] Content fun CostLiteral (cost: Int )","title":" cost literal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/-cost-literal/#costliteral","text":"[jvm] Content fun CostLiteral (cost: Int )","title":"CostLiteral"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLiteral / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLiteral / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Int","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/component1/#component1","text":"[jvm] Content operator fun component1 (): Int","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLiteral / copy copy \u00b6 [jvm] Content fun copy (cost: Int ): CostLiteral","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/copy/#copy","text":"[jvm] Content fun copy (cost: Int ): CostLiteral","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostLiteral / cost cost \u00b6 [jvm] Content val cost : Int","title":"Cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-literal/cost/#cost","text":"[jvm] Content val cost : Int","title":"cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMode CostMode \u00b6 [jvm] enum CostMode : Enum < CostMode > Entries \u00b6 Name Summary MINIMIZE [jvm] MINIMIZE () MAXIMIZE [jvm] MAXIMIZE () Functions \u00b6 Name Summary compareTo [jvm] Content operator override fun compareTo (other: CostMode ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < CostMode > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/#costmode","text":"[jvm] enum CostMode : Enum < CostMode >","title":"CostMode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/#entries","text":"Name Summary MINIMIZE [jvm] MINIMIZE () MAXIMIZE [jvm] MAXIMIZE ()","title":"Entries"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/#functions","text":"Name Summary compareTo [jvm] Content operator override fun compareTo (other: CostMode ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < CostMode > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMode / MAXIMIZE MAXIMIZE \u00b6 [jvm] MAXIMIZE () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: CostMode ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < CostMode > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/#maximize","text":"[jvm] MAXIMIZE ()","title":"MAXIMIZE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: CostMode ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < CostMode > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMode / MAXIMIZE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMode / MAXIMIZE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-a-x-i-m-i-z-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMode / MINIMIZE MINIMIZE \u00b6 [jvm] MINIMIZE () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: CostMode ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < CostMode > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/#minimize","text":"[jvm] MINIMIZE ()","title":"MINIMIZE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: CostMode ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < CostMode > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMode / MINIMIZE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMode / MINIMIZE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mode/-m-i-n-i-m-i-z-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMonoid CostMonoid \u00b6 [jvm] interface CostMonoid < C : CostMonoid < C >> : PrettyPrintable A commutative monoid that represents a notion of cost for a feature. Functions \u00b6 Name Summary concat [jvm] Content abstract fun concat (other: C ): C equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content abstract fun zero (): C Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document Inheritors \u00b6 Name IntegerCost Cost SymbolicCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/#costmonoid","text":"[jvm] interface CostMonoid < C : CostMonoid < C >> : PrettyPrintable A commutative monoid that represents a notion of cost for a feature.","title":"CostMonoid"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/#functions","text":"Name Summary concat [jvm] Content abstract fun concat (other: C ): C equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content abstract fun zero (): C","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/#inheritors","text":"Name IntegerCost Cost SymbolicCost","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/concat/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMonoid / concat concat \u00b6 [jvm] Content abstract fun concat (other: C ): C","title":"Concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/concat/#concat","text":"[jvm] Content abstract fun concat (other: C ): C","title":"concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/zero/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMonoid / zero zero \u00b6 [jvm] Content abstract fun zero (): C","title":"Zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-monoid/zero/#zero","text":"[jvm] Content abstract fun zero (): C","title":"zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul CostMul \u00b6 [jvm] data class CostMul ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostMul equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/#costmul","text":"[jvm] data class CostMul ( lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost","title":"CostMul"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SymbolicCost component2 [jvm] Content operator fun component2 (): SymbolicCost concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostMul equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/-cost-mul/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul / CostMul CostMul \u00b6 [jvm] Content fun CostMul (lhs: SymbolicCost , rhs: SymbolicCost )","title":" cost mul"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/-cost-mul/#costmul","text":"[jvm] Content fun CostMul (lhs: SymbolicCost , rhs: SymbolicCost )","title":"CostMul"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SymbolicCost","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/component1/#component1","text":"[jvm] Content operator fun component1 (): SymbolicCost","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SymbolicCost","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/component2/#component2","text":"[jvm] Content operator fun component2 (): SymbolicCost","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul / copy copy \u00b6 [jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostMul","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/copy/#copy","text":"[jvm] Content fun copy (lhs: SymbolicCost , rhs: SymbolicCost ): CostMul","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul / lhs lhs \u00b6 [jvm] Content val lhs : SymbolicCost","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/lhs/#lhs","text":"[jvm] Content val lhs : SymbolicCost","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMul / rhs rhs \u00b6 [jvm] Content val rhs : SymbolicCost","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mul/rhs/#rhs","text":"[jvm] Content val rhs : SymbolicCost","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux CostMux \u00b6 [jvm] data class CostMux ( guard : SelectionConstraint , lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SymbolicCost component3 [jvm] Content operator fun component3 (): SymbolicCost concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (guard: SelectionConstraint , lhs: SymbolicCost , rhs: SymbolicCost ): CostMux equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document guard [jvm] val guard : SelectionConstraint lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/#costmux","text":"[jvm] data class CostMux ( guard : SelectionConstraint , lhs : SymbolicCost , rhs : SymbolicCost ) : SymbolicCost","title":"CostMux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SymbolicCost component3 [jvm] Content operator fun component3 (): SymbolicCost concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (guard: SelectionConstraint , lhs: SymbolicCost , rhs: SymbolicCost ): CostMux equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document guard [jvm] val guard : SelectionConstraint lhs [jvm] val lhs : SymbolicCost rhs [jvm] val rhs : SymbolicCost","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/-cost-mux/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / CostMux CostMux \u00b6 [jvm] Content fun CostMux (guard: SelectionConstraint , lhs: SymbolicCost , rhs: SymbolicCost )","title":" cost mux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/-cost-mux/#costmux","text":"[jvm] Content fun CostMux (guard: SelectionConstraint , lhs: SymbolicCost , rhs: SymbolicCost )","title":"CostMux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SelectionConstraint","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/component1/#component1","text":"[jvm] Content operator fun component1 (): SelectionConstraint","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SymbolicCost","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/component2/#component2","text":"[jvm] Content operator fun component2 (): SymbolicCost","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/component3/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / component3 component3 \u00b6 [jvm] Content operator fun component3 (): SymbolicCost","title":"Component3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/component3/#component3","text":"[jvm] Content operator fun component3 (): SymbolicCost","title":"component3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / copy copy \u00b6 [jvm] Content fun copy (guard: SelectionConstraint , lhs: SymbolicCost , rhs: SymbolicCost ): CostMux","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/copy/#copy","text":"[jvm] Content fun copy (guard: SelectionConstraint , lhs: SymbolicCost , rhs: SymbolicCost ): CostMux","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/guard/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / guard guard \u00b6 [jvm] Content val guard : SelectionConstraint","title":"Guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/guard/#guard","text":"[jvm] Content val guard : SelectionConstraint","title":"guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / lhs lhs \u00b6 [jvm] Content val lhs : SymbolicCost","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/lhs/#lhs","text":"[jvm] Content val lhs : SymbolicCost","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostMux / rhs rhs \u00b6 [jvm] Content val rhs : SymbolicCost","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-mux/rhs/#rhs","text":"[jvm] Content val rhs : SymbolicCost","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostVariable CostVariable \u00b6 [jvm] data class CostVariable ( variable : IntExpr) : SymbolicCost Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): IntExpr concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (variable: IntExpr): CostVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document variable [jvm] val variable : IntExpr","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/#costvariable","text":"[jvm] data class CostVariable ( variable : IntExpr) : SymbolicCost","title":"CostVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): IntExpr concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost copy [jvm] Content fun copy (variable: IntExpr): CostVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document variable [jvm] val variable : IntExpr","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/-cost-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostVariable / CostVariable CostVariable \u00b6 [jvm] Content fun CostVariable (variable: IntExpr)","title":" cost variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/-cost-variable/#costvariable","text":"[jvm] Content fun CostVariable (variable: IntExpr)","title":"CostVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostVariable / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostVariable / component1 component1 \u00b6 [jvm] Content operator fun component1 (): IntExpr","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/component1/#component1","text":"[jvm] Content operator fun component1 (): IntExpr","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostVariable / copy copy \u00b6 [jvm] Content fun copy (variable: IntExpr): CostVariable","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/copy/#copy","text":"[jvm] Content fun copy (variable: IntExpr): CostVariable","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / CostVariable / variable variable \u00b6 [jvm] Content val variable : IntExpr","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-cost-variable/variable/#variable","text":"[jvm] Content val variable : IntExpr","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable FunctionVariable \u00b6 [jvm] data class FunctionVariable ( function : FunctionName , variable : Variable ) : PrettyPrintable Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): FunctionName component2 [jvm] Content operator fun component2 (): Variable copy [jvm] Content fun copy (function: FunctionName , variable: Variable ): FunctionVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document function [jvm] val function : FunctionName variable [jvm] val variable : Variable","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/#functionvariable","text":"[jvm] data class FunctionVariable ( function : FunctionName , variable : Variable ) : PrettyPrintable","title":"FunctionVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): FunctionName component2 [jvm] Content operator fun component2 (): Variable copy [jvm] Content fun copy (function: FunctionName , variable: Variable ): FunctionVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document function [jvm] val function : FunctionName variable [jvm] val variable : Variable","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/-function-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable / FunctionVariable FunctionVariable \u00b6 [jvm] Content fun FunctionVariable (function: FunctionName , variable: Variable )","title":" function variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/-function-variable/#functionvariable","text":"[jvm] Content fun FunctionVariable (function: FunctionName , variable: Variable )","title":"FunctionVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable / component1 component1 \u00b6 [jvm] Content operator fun component1 (): FunctionName","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/component1/#component1","text":"[jvm] Content operator fun component1 (): FunctionName","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Variable","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/component2/#component2","text":"[jvm] Content operator fun component2 (): Variable","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable / copy copy \u00b6 [jvm] Content fun copy (function: FunctionName , variable: Variable ): FunctionVariable","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/copy/#copy","text":"[jvm] Content fun copy (function: FunctionName , variable: Variable ): FunctionVariable","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/function/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable / function function \u00b6 [jvm] Content val function : FunctionName","title":"Function"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/function/#function","text":"[jvm] Content val function : FunctionName","title":"function"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / FunctionVariable / variable variable \u00b6 [jvm] Content val variable : Variable","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-function-variable/variable/#variable","text":"[jvm] Content val variable : Variable","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / GuardVisibilityFlag GuardVisibilityFlag \u00b6 [jvm] data class GuardVisibilityFlag ( variable : BoolExpr) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): BoolExpr copy [jvm] Content fun copy (variable: BoolExpr): GuardVisibilityFlag equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document variable [jvm] val variable : BoolExpr","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/#guardvisibilityflag","text":"[jvm] data class GuardVisibilityFlag ( variable : BoolExpr) : SelectionConstraint","title":"GuardVisibilityFlag"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): BoolExpr copy [jvm] Content fun copy (variable: BoolExpr): GuardVisibilityFlag equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document variable [jvm] val variable : BoolExpr","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/-guard-visibility-flag/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / GuardVisibilityFlag / GuardVisibilityFlag GuardVisibilityFlag \u00b6 [jvm] Content fun GuardVisibilityFlag (variable: BoolExpr)","title":" guard visibility flag"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/-guard-visibility-flag/#guardvisibilityflag","text":"[jvm] Content fun GuardVisibilityFlag (variable: BoolExpr)","title":"GuardVisibilityFlag"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / GuardVisibilityFlag / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / GuardVisibilityFlag / component1 component1 \u00b6 [jvm] Content operator fun component1 (): BoolExpr","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/component1/#component1","text":"[jvm] Content operator fun component1 (): BoolExpr","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / GuardVisibilityFlag / copy copy \u00b6 [jvm] Content fun copy (variable: BoolExpr): GuardVisibilityFlag","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/copy/#copy","text":"[jvm] Content fun copy (variable: BoolExpr): GuardVisibilityFlag","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / GuardVisibilityFlag / variable variable \u00b6 [jvm] Content val variable : BoolExpr","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-guard-visibility-flag/variable/#variable","text":"[jvm] Content val variable : BoolExpr","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / HostVariable HostVariable \u00b6 [jvm] data class HostVariable ( variable : BoolExpr) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): BoolExpr copy [jvm] Content fun copy (variable: BoolExpr): HostVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document variable [jvm] val variable : BoolExpr","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/#hostvariable","text":"[jvm] data class HostVariable ( variable : BoolExpr) : SelectionConstraint","title":"HostVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): BoolExpr copy [jvm] Content fun copy (variable: BoolExpr): HostVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document variable [jvm] val variable : BoolExpr","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/-host-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / HostVariable / HostVariable HostVariable \u00b6 [jvm] Content fun HostVariable (variable: BoolExpr)","title":" host variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/-host-variable/#hostvariable","text":"[jvm] Content fun HostVariable (variable: BoolExpr)","title":"HostVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / HostVariable / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / HostVariable / component1 component1 \u00b6 [jvm] Content operator fun component1 (): BoolExpr","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/component1/#component1","text":"[jvm] Content operator fun component1 (): BoolExpr","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / HostVariable / copy copy \u00b6 [jvm] Content fun copy (variable: BoolExpr): HostVariable","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/copy/#copy","text":"[jvm] Content fun copy (variable: BoolExpr): HostVariable","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / HostVariable / variable variable \u00b6 [jvm] Content val variable : BoolExpr","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-host-variable/variable/#variable","text":"[jvm] Content val variable : BoolExpr","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies Implies \u00b6 [jvm] data class Implies ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SelectionConstraint copy [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Implies equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SelectionConstraint rhs [jvm] val rhs : SelectionConstraint","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/#implies","text":"[jvm] data class Implies ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint","title":"Implies"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SelectionConstraint copy [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Implies equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SelectionConstraint rhs [jvm] val rhs : SelectionConstraint","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/-implies/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies / Implies Implies \u00b6 [jvm] Content fun Implies (lhs: SelectionConstraint , rhs: SelectionConstraint )","title":" implies"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/-implies/#implies","text":"[jvm] Content fun Implies (lhs: SelectionConstraint , rhs: SelectionConstraint )","title":"Implies"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SelectionConstraint","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/component1/#component1","text":"[jvm] Content operator fun component1 (): SelectionConstraint","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SelectionConstraint","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/component2/#component2","text":"[jvm] Content operator fun component2 (): SelectionConstraint","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies / copy copy \u00b6 [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Implies","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/copy/#copy","text":"[jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Implies","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies / lhs lhs \u00b6 [jvm] Content val lhs : SelectionConstraint","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/lhs/#lhs","text":"[jvm] Content val lhs : SelectionConstraint","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Implies / rhs rhs \u00b6 [jvm] Content val rhs : SelectionConstraint","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-implies/rhs/#rhs","text":"[jvm] Content val rhs : SelectionConstraint","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost IntegerCost \u00b6 [jvm] class IntegerCost ( cost : Int ) : CostMonoid < IntegerCost > Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary concat [jvm] Content open override fun concat (other: IntegerCost ): IntegerCost equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): IntegerCost Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document cost [jvm] val cost : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/#integercost","text":"[jvm] class IntegerCost ( cost : Int ) : CostMonoid < IntegerCost >","title":"IntegerCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/#functions","text":"Name Summary concat [jvm] Content open override fun concat (other: IntegerCost ): IntegerCost equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String zero [jvm] Content open override fun zero (): IntegerCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document cost [jvm] val cost : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/-integer-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / IntegerCost IntegerCost \u00b6 [jvm] Content fun IntegerCost (cost: Int )","title":" integer cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/-integer-cost/#integercost","text":"[jvm] Content fun IntegerCost (cost: Int )","title":"IntegerCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/concat/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / concat concat \u00b6 [jvm] Content open override fun concat (other: IntegerCost ): IntegerCost","title":"Concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/concat/#concat","text":"[jvm] Content open override fun concat (other: IntegerCost ): IntegerCost","title":"concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / cost cost \u00b6 [jvm] Content val cost : Int","title":"Cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/cost/#cost","text":"[jvm] Content val cost : Int","title":"cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/zero/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / zero zero \u00b6 [jvm] Content open override fun zero (): IntegerCost","title":"Zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/zero/#zero","text":"[jvm] Content open override fun zero (): IntegerCost","title":"zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content fun zero (): IntegerCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content fun zero (): IntegerCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/-companion/zero/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / IntegerCost / Companion / zero zero \u00b6 [jvm] Content fun zero (): IntegerCost","title":"Zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-integer-cost/-companion/zero/#zero","text":"[jvm] Content fun zero (): IntegerCost","title":"zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Literal Literal \u00b6 [jvm] data class Literal ( literalValue : Boolean ) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Boolean copy [jvm] Content fun copy (literalValue: Boolean ): Literal equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document literalValue [jvm] val literalValue : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/#literal","text":"[jvm] data class Literal ( literalValue : Boolean ) : SelectionConstraint","title":"Literal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Boolean copy [jvm] Content fun copy (literalValue: Boolean ): Literal equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document literalValue [jvm] val literalValue : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/-literal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Literal / Literal Literal \u00b6 [jvm] Content fun Literal (literalValue: Boolean )","title":" literal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/-literal/#literal","text":"[jvm] Content fun Literal (literalValue: Boolean )","title":"Literal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Literal / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Literal / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Boolean","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/component1/#component1","text":"[jvm] Content operator fun component1 (): Boolean","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Literal / copy copy \u00b6 [jvm] Content fun copy (literalValue: Boolean ): Literal","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/copy/#copy","text":"[jvm] Content fun copy (literalValue: Boolean ): Literal","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/literal-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Literal / literalValue literalValue \u00b6 [jvm] Content val literalValue : Boolean","title":"Literal value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-literal/literal-value/#literalvalue","text":"[jvm] Content val literalValue : Boolean","title":"literalValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / LocalFactory LocalFactory \u00b6 [jvm] class LocalFactory ( program : ProgramNode ) : ProtocolFactory Functions \u00b6 Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > Properties \u00b6 Name Summary program [jvm] val program : ProgramNode protocols [jvm] val protocols : List < SpecializedProtocol >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/#localfactory","text":"[jvm] class LocalFactory ( program : ProgramNode ) : ProtocolFactory","title":"LocalFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/#functions","text":"Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/#properties","text":"Name Summary program [jvm] val program : ProgramNode protocols [jvm] val protocols : List < SpecializedProtocol >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/-local-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / LocalFactory / LocalFactory LocalFactory \u00b6 [jvm] Content fun LocalFactory (program: ProgramNode )","title":" local factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/-local-factory/#localfactory","text":"[jvm] Content fun LocalFactory (program: ProgramNode )","title":"LocalFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/available-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / LocalFactory / availableProtocols availableProtocols \u00b6 [jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"Available protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/available-protocols/#availableprotocols","text":"[jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"availableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/program/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / LocalFactory / program program \u00b6 [jvm] Content val program : ProgramNode","title":"Program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/program/#program","text":"[jvm] Content val program : ProgramNode","title":"program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / LocalFactory / protocols protocols \u00b6 [jvm] Content open override fun protocols (): List < SpecializedProtocol > val protocols : List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/protocols/#protocols","text":"[jvm] Content open override fun protocols (): List < SpecializedProtocol > val protocols : List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / LocalFactory / viableProtocols viableProtocols \u00b6 [jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-local-factory/viable-protocols/#viableprotocols","text":"[jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Not Not \u00b6 [jvm] data class Not ( rhs : SelectionConstraint ) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint copy [jvm] Content fun copy (rhs: SelectionConstraint ): Not equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document rhs [jvm] val rhs : SelectionConstraint","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/#not","text":"[jvm] data class Not ( rhs : SelectionConstraint ) : SelectionConstraint","title":"Not"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint copy [jvm] Content fun copy (rhs: SelectionConstraint ): Not equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document rhs [jvm] val rhs : SelectionConstraint","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/-not/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Not / Not Not \u00b6 [jvm] Content fun Not (rhs: SelectionConstraint )","title":" not"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/-not/#not","text":"[jvm] Content fun Not (rhs: SelectionConstraint )","title":"Not"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Not / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Not / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SelectionConstraint","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/component1/#component1","text":"[jvm] Content operator fun component1 (): SelectionConstraint","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Not / copy copy \u00b6 [jvm] Content fun copy (rhs: SelectionConstraint ): Not","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/copy/#copy","text":"[jvm] Content fun copy (rhs: SelectionConstraint ): Not","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Not / rhs rhs \u00b6 [jvm] Content val rhs : SelectionConstraint","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-not/rhs/#rhs","text":"[jvm] Content val rhs : SelectionConstraint","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or Or \u00b6 [jvm] data class Or ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SelectionConstraint copy [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Or equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SelectionConstraint rhs [jvm] val rhs : SelectionConstraint","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/#or","text":"[jvm] data class Or ( lhs : SelectionConstraint , rhs : SelectionConstraint ) : SelectionConstraint","title":"Or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): SelectionConstraint component2 [jvm] Content operator fun component2 (): SelectionConstraint copy [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Or equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document lhs [jvm] val lhs : SelectionConstraint rhs [jvm] val rhs : SelectionConstraint","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/-or/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or / Or Or \u00b6 [jvm] Content fun Or (lhs: SelectionConstraint , rhs: SelectionConstraint )","title":" or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/-or/#or","text":"[jvm] Content fun Or (lhs: SelectionConstraint , rhs: SelectionConstraint )","title":"Or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or / component1 component1 \u00b6 [jvm] Content operator fun component1 (): SelectionConstraint","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/component1/#component1","text":"[jvm] Content operator fun component1 (): SelectionConstraint","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SelectionConstraint","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/component2/#component2","text":"[jvm] Content operator fun component2 (): SelectionConstraint","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or / copy copy \u00b6 [jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Or","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/copy/#copy","text":"[jvm] Content fun copy (lhs: SelectionConstraint , rhs: SelectionConstraint ): Or","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/lhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or / lhs lhs \u00b6 [jvm] Content val lhs : SelectionConstraint","title":"Lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/lhs/#lhs","text":"[jvm] Content val lhs : SelectionConstraint","title":"lhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / Or / rhs rhs \u00b6 [jvm] Content val rhs : SelectionConstraint","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-or/rhs/#rhs","text":"[jvm] Content val rhs : SelectionConstraint","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication ProtocolCommunication \u00b6 [jvm] data class ProtocolCommunication ( events : Set < CommunicationEvent >) : Set < CommunicationEvent > Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Set < CommunicationEvent > contains [jvm] Content open operator override fun contains (element: CommunicationEvent ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < CommunicationEvent >): Boolean copy [jvm] Content fun copy (events: Set < CommunicationEvent >): ProtocolCommunication equals [jvm] Content open operator override fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer CommunicationEvent >) getHostReceives [jvm] Content fun getHostReceives (h: Host , portId: PortId ? = null): Set < CommunicationEvent > getHostSends [jvm] Content fun getHostSends (h: Host , portId: PortId ? = null): Set < CommunicationEvent > getProjectionReceives [jvm] Content fun getProjectionReceives (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent > getProjectionSends [jvm] Content fun getProjectionSends (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent > hashCode [jvm] Content open override fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < CommunicationEvent > parallelStream [jvm] Content open fun parallelStream (): Stream < CommunicationEvent > spliterator [jvm] Content open override fun spliterator (): Spliterator < CommunicationEvent > stream [jvm] Content open fun stream (): Stream < CommunicationEvent > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary events [jvm] val events : Set < CommunicationEvent > size [jvm] open override val size : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/#protocolcommunication","text":"[jvm] data class ProtocolCommunication ( events : Set < CommunicationEvent >) : Set < CommunicationEvent >","title":"ProtocolCommunication"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Set < CommunicationEvent > contains [jvm] Content open operator override fun contains (element: CommunicationEvent ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < CommunicationEvent >): Boolean copy [jvm] Content fun copy (events: Set < CommunicationEvent >): ProtocolCommunication equals [jvm] Content open operator override fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer CommunicationEvent >) getHostReceives [jvm] Content fun getHostReceives (h: Host , portId: PortId ? = null): Set < CommunicationEvent > getHostSends [jvm] Content fun getHostSends (h: Host , portId: PortId ? = null): Set < CommunicationEvent > getProjectionReceives [jvm] Content fun getProjectionReceives (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent > getProjectionSends [jvm] Content fun getProjectionSends (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent > hashCode [jvm] Content open override fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < CommunicationEvent > parallelStream [jvm] Content open fun parallelStream (): Stream < CommunicationEvent > spliterator [jvm] Content open override fun spliterator (): Spliterator < CommunicationEvent > stream [jvm] Content open fun stream (): Stream < CommunicationEvent > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/#properties","text":"Name Summary events [jvm] val events : Set < CommunicationEvent > size [jvm] open override val size : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/-protocol-communication/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / ProtocolCommunication ProtocolCommunication \u00b6 [jvm] Content fun ProtocolCommunication (events: Set < CommunicationEvent >)","title":" protocol communication"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/-protocol-communication/#protocolcommunication","text":"[jvm] Content fun ProtocolCommunication (events: Set < CommunicationEvent >)","title":"ProtocolCommunication"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Set < CommunicationEvent >","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/component1/#component1","text":"[jvm] Content operator fun component1 (): Set < CommunicationEvent >","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / copy copy \u00b6 [jvm] Content fun copy (events: Set < CommunicationEvent >): ProtocolCommunication","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/copy/#copy","text":"[jvm] Content fun copy (events: Set < CommunicationEvent >): ProtocolCommunication","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/events/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / events events \u00b6 [jvm] Content val events : Set < CommunicationEvent >","title":"Events"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/events/#events","text":"[jvm] Content val events : Set < CommunicationEvent >","title":"events"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-host-receives/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / getHostReceives getHostReceives \u00b6 [jvm] Content fun getHostReceives (h: Host , portId: PortId ? = null): Set < CommunicationEvent >","title":"Get host receives"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-host-receives/#gethostreceives","text":"[jvm] Content fun getHostReceives (h: Host , portId: PortId ? = null): Set < CommunicationEvent >","title":"getHostReceives"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-host-sends/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / getHostSends getHostSends \u00b6 [jvm] Content fun getHostSends (h: Host , portId: PortId ? = null): Set < CommunicationEvent >","title":"Get host sends"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-host-sends/#gethostsends","text":"[jvm] Content fun getHostSends (h: Host , portId: PortId ? = null): Set < CommunicationEvent >","title":"getHostSends"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-projection-receives/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / getProjectionReceives getProjectionReceives \u00b6 [jvm] Content fun getProjectionReceives (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent >","title":"Get projection receives"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-projection-receives/#getprojectionreceives","text":"[jvm] Content fun getProjectionReceives (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent >","title":"getProjectionReceives"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-projection-sends/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolCommunication / getProjectionSends getProjectionSends \u00b6 [jvm] Content fun getProjectionSends (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent >","title":"Get projection sends"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-communication/get-projection-sends/#getprojectionsends","text":"[jvm] Content fun getProjectionSends (projection: ProtocolProjection , portId: PortId ? = null): Set < CommunicationEvent >","title":"getProjectionSends"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolComposer ProtocolComposer \u00b6 [jvm] interface ProtocolComposer Functions \u00b6 Name Summary canCommunicate [jvm] Content abstract fun canCommunicate (src: Protocol , dst: Protocol ): Boolean communicate [jvm] Content abstract fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mandatoryParticipatingHosts [jvm] Content abstract fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host > toString [jvm] Content open fun toString (): String visibleGuardHosts [jvm] Content abstract fun visibleGuardHosts (protocol: Protocol ): Set < Host > Inheritors \u00b6 Name SimpleProtocolComposer","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/#protocolcomposer","text":"[jvm] interface ProtocolComposer","title":"ProtocolComposer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/#functions","text":"Name Summary canCommunicate [jvm] Content abstract fun canCommunicate (src: Protocol , dst: Protocol ): Boolean communicate [jvm] Content abstract fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mandatoryParticipatingHosts [jvm] Content abstract fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host > toString [jvm] Content open fun toString (): String visibleGuardHosts [jvm] Content abstract fun visibleGuardHosts (protocol: Protocol ): Set < Host >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/#inheritors","text":"Name SimpleProtocolComposer","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/can-communicate/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolComposer / canCommunicate canCommunicate \u00b6 [jvm] Content abstract fun canCommunicate (src: Protocol , dst: Protocol ): Boolean","title":"Can communicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/can-communicate/#cancommunicate","text":"[jvm] Content abstract fun canCommunicate (src: Protocol , dst: Protocol ): Boolean","title":"canCommunicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/communicate/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolComposer / communicate communicate \u00b6 [jvm] Content abstract fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication","title":"Communicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/communicate/#communicate","text":"[jvm] Content abstract fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication","title":"communicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/mandatory-participating-hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolComposer / mandatoryParticipatingHosts mandatoryParticipatingHosts \u00b6 [jvm] Content abstract fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host >","title":"Mandatory participating hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/mandatory-participating-hosts/#mandatoryparticipatinghosts","text":"[jvm] Content abstract fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host >","title":"mandatoryParticipatingHosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/visible-guard-hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolComposer / visibleGuardHosts visibleGuardHosts \u00b6 [jvm] Content abstract fun visibleGuardHosts (protocol: Protocol ): Set < Host >","title":"Visible guard hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-composer/visible-guard-hosts/#visibleguardhosts","text":"[jvm] Content abstract fun visibleGuardHosts (protocol: Protocol ): Set < Host >","title":"visibleGuardHosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolFactory ProtocolFactory \u00b6 [jvm] interface ProtocolFactory This interface specifies factories for protocol selection. The role of a factory is twofold: First, it outputs the set of viable protocols which may be selected at that node. A protocol is viable for a node if it satisfies the selector's custom syntactic restrictions. Second, it outputs a constraint for that node (by default, the constraint is trivial). The constraints encode all of the other interdependencies present in protocol selection. Functions \u00b6 Name Summary availableProtocols [jvm] Content abstract fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content abstract fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content abstract fun viableProtocols (node: DeclarationNode ): Set < Protocol > abstract fun viableProtocols (node: LetNode ): Set < Protocol > abstract fun viableProtocols (node: ParameterNode ): Set < Protocol > Inheritors \u00b6 Name ABYFactory CommitmentFactory LocalFactory UnionProtocolFactory ReplicationFactory ZKPFactory","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/#protocolfactory","text":"[jvm] interface ProtocolFactory This interface specifies factories for protocol selection. The role of a factory is twofold: First, it outputs the set of viable protocols which may be selected at that node. A protocol is viable for a node if it satisfies the selector's custom syntactic restrictions. Second, it outputs a constraint for that node (by default, the constraint is trivial). The constraints encode all of the other interdependencies present in protocol selection.","title":"ProtocolFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/#functions","text":"Name Summary availableProtocols [jvm] Content abstract fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content abstract fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content abstract fun viableProtocols (node: DeclarationNode ): Set < Protocol > abstract fun viableProtocols (node: LetNode ): Set < Protocol > abstract fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/#inheritors","text":"Name ABYFactory CommitmentFactory LocalFactory UnionProtocolFactory ReplicationFactory ZKPFactory","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/available-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolFactory / availableProtocols availableProtocols \u00b6 [jvm] Content abstract fun availableProtocols (): Set < ProtocolName >","title":"Available protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/available-protocols/#availableprotocols","text":"[jvm] Content abstract fun availableProtocols (): Set < ProtocolName >","title":"availableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolFactory / constraint constraint \u00b6 [jvm] Content open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint","title":"Constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/constraint/#constraint","text":"[jvm] Content open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint","title":"constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/guard-visibility-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolFactory / guardVisibilityConstraint guardVisibilityConstraint \u00b6 [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"Guard visibility constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/guard-visibility-constraint/#guardvisibilityconstraint","text":"[jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"guardVisibilityConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolFactory / protocols protocols \u00b6 [jvm] Content abstract fun protocols (): List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/protocols/#protocols","text":"[jvm] Content abstract fun protocols (): List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolFactory / viableProtocols viableProtocols \u00b6 [jvm] Content abstract fun viableProtocols (node: LetNode ): Set < Protocol > abstract fun viableProtocols (node: DeclarationNode ): Set < Protocol > abstract fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-factory/viable-protocols/#viableprotocols","text":"[jvm] Content abstract fun viableProtocols (node: LetNode ): Set < Protocol > abstract fun viableProtocols (node: DeclarationNode ): Set < Protocol > abstract fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-selector/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolSelector ProtocolSelector \u00b6 [jvm] interface ProtocolSelector This interface specifies selectors for protocol selection. Selectors are given a partial assignment of protocols selected so far, and either a LetNode or DeclarationNode, and outputs a set of protocols which can implement that node. Protocol selectors do NOT have to enforce that the selected protocols have enough authority to implement the node. This invariant is enforced during protocol selection. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int select [jvm] Content abstract fun select (node: DeclarationNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: LetNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: ParameterNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-selector/#protocolselector","text":"[jvm] interface ProtocolSelector This interface specifies selectors for protocol selection. Selectors are given a partial assignment of protocols selected so far, and either a LetNode or DeclarationNode, and outputs a set of protocols which can implement that node. Protocol selectors do NOT have to enforce that the selected protocols have enough authority to implement the node. This invariant is enforced during protocol selection.","title":"ProtocolSelector"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-selector/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int select [jvm] Content abstract fun select (node: DeclarationNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: LetNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: ParameterNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-selector/select/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ProtocolSelector / select select \u00b6 [jvm] Content abstract fun select (node: LetNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: DeclarationNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: ParameterNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol >","title":"Select"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-protocol-selector/select/#select","text":"[jvm] Content abstract fun select (node: LetNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: DeclarationNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol > abstract fun select (node: ParameterNode , currentAssignment: Map < Variable , Protocol >): Set < Protocol >","title":"select"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ReplicationFactory ReplicationFactory \u00b6 [jvm] class ReplicationFactory ( program : ProgramNode ) : ProtocolFactory Functions \u00b6 Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > Properties \u00b6 Name Summary program [jvm] val program : ProgramNode protocols [jvm] val protocols : List < SpecializedProtocol >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/#replicationfactory","text":"[jvm] class ReplicationFactory ( program : ProgramNode ) : ProtocolFactory","title":"ReplicationFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/#functions","text":"Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: DeclarationNode ): SelectionConstraint open fun constraint (node: LetNode ): SelectionConstraint open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/#properties","text":"Name Summary program [jvm] val program : ProgramNode protocols [jvm] val protocols : List < SpecializedProtocol >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/-replication-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ReplicationFactory / ReplicationFactory ReplicationFactory \u00b6 [jvm] Content fun ReplicationFactory (program: ProgramNode )","title":" replication factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/-replication-factory/#replicationfactory","text":"[jvm] Content fun ReplicationFactory (program: ProgramNode )","title":"ReplicationFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/available-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ReplicationFactory / availableProtocols availableProtocols \u00b6 [jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"Available protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/available-protocols/#availableprotocols","text":"[jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"availableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/program/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ReplicationFactory / program program \u00b6 [jvm] Content val program : ProgramNode","title":"Program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/program/#program","text":"[jvm] Content val program : ProgramNode","title":"program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ReplicationFactory / protocols protocols \u00b6 [jvm] Content open override fun protocols (): List < SpecializedProtocol > val protocols : List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/protocols/#protocols","text":"[jvm] Content open override fun protocols (): List < SpecializedProtocol > val protocols : List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ReplicationFactory / viableProtocols viableProtocols \u00b6 [jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-replication-factory/viable-protocols/#viableprotocols","text":"[jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SelectionConstraint SelectionConstraint \u00b6 [jvm] sealed class SelectionConstraint : PrettyPrintable Custom selection constraints specified for constraint solving during splitting. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document Inheritors \u00b6 Name HostVariable GuardVisibilityFlag Literal Implies Or VariableIn VariableEquals CostEquals CostLessThanEqualTo Not And Extensions \u00b6 Name Summary costVariables [jvm] Content fun SelectionConstraint . costVariables (): Set < CostVariable > guardVisibilityVariables [jvm] Content fun SelectionConstraint . guardVisibilityVariables (): Set < GuardVisibilityFlag > hostVariables [jvm] Content fun SelectionConstraint . hostVariables (): Set < HostVariable >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint/#selectionconstraint","text":"[jvm] sealed class SelectionConstraint : PrettyPrintable Custom selection constraints specified for constraint solving during splitting.","title":"SelectionConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint/#inheritors","text":"Name HostVariable GuardVisibilityFlag Literal Implies Or VariableIn VariableEquals CostEquals CostLessThanEqualTo Not And","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint/#extensions","text":"Name Summary costVariables [jvm] Content fun SelectionConstraint . costVariables (): Set < CostVariable > guardVisibilityVariables [jvm] Content fun SelectionConstraint . guardVisibilityVariables (): Set < GuardVisibilityFlag > hostVariables [jvm] Content fun SelectionConstraint . hostVariables (): Set < HostVariable >","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SelectionConstraintGenerator SelectionConstraintGenerator \u00b6 [jvm] class SelectionConstraintGenerator ( program : ProgramNode , protocolFactory : ProtocolFactory , protocolComposer : ProtocolComposer , costEstimator : CostEstimator < IntegerCost >, ctx : Context) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getConstraints [jvm] Content fun getConstraints (node: Node ): Set < SelectionConstraint > hashCode [jvm] Content open fun hashCode (): Int symbolicCost [jvm] Content fun symbolicCost (node: Node ): Cost < SymbolicCost > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content fun viableProtocols (node: DeclarationNode ): Set < Protocol > fun viableProtocols (node: LetNode ): Set < Protocol > fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/#selectionconstraintgenerator","text":"[jvm] class SelectionConstraintGenerator ( program : ProgramNode , protocolFactory : ProtocolFactory , protocolComposer : ProtocolComposer , costEstimator : CostEstimator < IntegerCost >, ctx : Context)","title":"SelectionConstraintGenerator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getConstraints [jvm] Content fun getConstraints (node: Node ): Set < SelectionConstraint > hashCode [jvm] Content open fun hashCode (): Int symbolicCost [jvm] Content fun symbolicCost (node: Node ): Cost < SymbolicCost > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content fun viableProtocols (node: DeclarationNode ): Set < Protocol > fun viableProtocols (node: LetNode ): Set < Protocol > fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/-selection-constraint-generator/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SelectionConstraintGenerator / SelectionConstraintGenerator SelectionConstraintGenerator \u00b6 [jvm] Content fun SelectionConstraintGenerator (program: ProgramNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, ctx: Context)","title":" selection constraint generator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/-selection-constraint-generator/#selectionconstraintgenerator","text":"[jvm] Content fun SelectionConstraintGenerator (program: ProgramNode , protocolFactory: ProtocolFactory , protocolComposer: ProtocolComposer , costEstimator: CostEstimator < IntegerCost >, ctx: Context)","title":"SelectionConstraintGenerator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/get-constraints/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SelectionConstraintGenerator / getConstraints getConstraints \u00b6 [jvm] Content fun getConstraints (node: Node ): Set < SelectionConstraint >","title":"Get constraints"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/get-constraints/#getconstraints","text":"[jvm] Content fun getConstraints (node: Node ): Set < SelectionConstraint >","title":"getConstraints"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/symbolic-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SelectionConstraintGenerator / symbolicCost symbolicCost \u00b6 [jvm] Content fun symbolicCost (node: Node ): Cost < SymbolicCost >","title":"Symbolic cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/symbolic-cost/#symboliccost","text":"[jvm] Content fun symbolicCost (node: Node ): Cost < SymbolicCost >","title":"symbolicCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SelectionConstraintGenerator / viableProtocols viableProtocols \u00b6 [jvm] Content fun viableProtocols (node: LetNode ): Set < Protocol > fun viableProtocols (node: DeclarationNode ): Set < Protocol > fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-selection-constraint-generator/viable-protocols/#viableprotocols","text":"[jvm] Content fun viableProtocols (node: LetNode ): Set < Protocol > fun viableProtocols (node: DeclarationNode ): Set < Protocol > fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostEstimator SimpleCostEstimator \u00b6 [jvm] class SimpleCostEstimator ( protocolComposer : ProtocolComposer , costRegime : SimpleCostRegime ) : CostEstimator < IntegerCost > Cost estimator for Local, Replication and ABY protocols. Approximates two communication features: NUM_MESSAGES: number of messages exchanged between hosts BYTES_TRANSFERRED: size of data transferred between hosts in high latency regimes, NUM_MESSAGES is weighted more; in low latency regimes, BYTES_TRANSFERRED is weighted more. costs for ABY mixed protocol derived from Table 2 in Ishaq et al, CCS 2019 cost is from microsecond figure for non-amortized n=1, divided by 10 and rounded Constructors \u00b6 Name Summary SimpleCostEstimator [jvm] fun SimpleCostEstimator (protocolComposer: ProtocolComposer , costRegime: SimpleCostRegime ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary communicationCost [jvm] Content open override fun communicationCost (source: Protocol , destination: Protocol , host: Host ?): Cost < IntegerCost > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. equals [jvm] Content open operator fun equals (other: Any ?): Boolean executionCost [jvm] Content open override fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < IntegerCost > More info Estimated cost of executing stmt at protocol. featureWeights [jvm] Content open override fun featureWeights (): Cost < IntegerCost > More info Cost weights of features. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zeroCost [jvm] Content open override fun zeroCost (): Cost < IntegerCost > More info \"Identity\" cost.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/#simplecostestimator","text":"[jvm] class SimpleCostEstimator ( protocolComposer : ProtocolComposer , costRegime : SimpleCostRegime ) : CostEstimator < IntegerCost > Cost estimator for Local, Replication and ABY protocols. Approximates two communication features: NUM_MESSAGES: number of messages exchanged between hosts BYTES_TRANSFERRED: size of data transferred between hosts in high latency regimes, NUM_MESSAGES is weighted more; in low latency regimes, BYTES_TRANSFERRED is weighted more. costs for ABY mixed protocol derived from Table 2 in Ishaq et al, CCS 2019 cost is from microsecond figure for non-amortized n=1, divided by 10 and rounded","title":"SimpleCostEstimator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/#constructors","text":"Name Summary SimpleCostEstimator [jvm] fun SimpleCostEstimator (protocolComposer: ProtocolComposer , costRegime: SimpleCostRegime )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/#functions","text":"Name Summary communicationCost [jvm] Content open override fun communicationCost (source: Protocol , destination: Protocol , host: Host ?): Cost < IntegerCost > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. equals [jvm] Content open operator fun equals (other: Any ?): Boolean executionCost [jvm] Content open override fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < IntegerCost > More info Estimated cost of executing stmt at protocol. featureWeights [jvm] Content open override fun featureWeights (): Cost < IntegerCost > More info Cost weights of features. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zeroCost [jvm] Content open override fun zeroCost (): Cost < IntegerCost > More info \"Identity\" cost.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/-simple-cost-estimator/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostEstimator / SimpleCostEstimator SimpleCostEstimator \u00b6 [jvm] Content fun SimpleCostEstimator (protocolComposer: ProtocolComposer , costRegime: SimpleCostRegime )","title":" simple cost estimator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/-simple-cost-estimator/#simplecostestimator","text":"[jvm] Content fun SimpleCostEstimator (protocolComposer: ProtocolComposer , costRegime: SimpleCostRegime )","title":"SimpleCostEstimator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/communication-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostEstimator / communicationCost communicationCost \u00b6 [jvm] Content open override fun communicationCost (source: Protocol , destination: Protocol , host: Host ?): Cost < IntegerCost > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. If host is null, then computes the cost for all the hosts in destination.","title":"Communication cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/communication-cost/#communicationcost","text":"[jvm] Content open override fun communicationCost (source: Protocol , destination: Protocol , host: Host ?): Cost < IntegerCost > More info Estimated cost of sending a message of type messageType from source to destination relative to host in destination. If host is null, then computes the cost for all the hosts in destination.","title":"communicationCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/execution-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostEstimator / executionCost executionCost \u00b6 [jvm] Content open override fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < IntegerCost > More info Estimated cost of executing stmt at protocol.","title":"Execution cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/execution-cost/#executioncost","text":"[jvm] Content open override fun executionCost (stmt: SimpleStatementNode , protocol: Protocol ): Cost < IntegerCost > More info Estimated cost of executing stmt at protocol.","title":"executionCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/feature-weights/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostEstimator / featureWeights featureWeights \u00b6 [jvm] Content open override fun featureWeights (): Cost < IntegerCost > More info Cost weights of features.","title":"Feature weights"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/feature-weights/#featureweights","text":"[jvm] Content open override fun featureWeights (): Cost < IntegerCost > More info Cost weights of features.","title":"featureWeights"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/zero-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostEstimator / zeroCost zeroCost \u00b6 [jvm] Content open override fun zeroCost (): Cost < IntegerCost > More info \"Identity\" cost.","title":"Zero cost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/zero-cost/#zerocost","text":"[jvm] Content open override fun zeroCost (): Cost < IntegerCost > More info \"Identity\" cost.","title":"zeroCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostEstimator / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-estimator/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostRegime SimpleCostRegime \u00b6 [jvm] enum SimpleCostRegime : Enum < SimpleCostRegime > Entries \u00b6 Name Summary LAN [jvm] LAN () WAN [jvm] WAN () Functions \u00b6 Name Summary compareTo [jvm] Content operator override fun compareTo (other: SimpleCostRegime ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < SimpleCostRegime > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/#simplecostregime","text":"[jvm] enum SimpleCostRegime : Enum < SimpleCostRegime >","title":"SimpleCostRegime"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/#entries","text":"Name Summary LAN [jvm] LAN () WAN [jvm] WAN ()","title":"Entries"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/#functions","text":"Name Summary compareTo [jvm] Content operator override fun compareTo (other: SimpleCostRegime ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < SimpleCostRegime > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostRegime / LAN LAN \u00b6 [jvm] LAN () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: SimpleCostRegime ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < SimpleCostRegime > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/#lan","text":"[jvm] LAN ()","title":"LAN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: SimpleCostRegime ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < SimpleCostRegime > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostRegime / LAN / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostRegime / LAN / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-l-a-n/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostRegime / WAN WAN \u00b6 [jvm] WAN () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: SimpleCostRegime ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < SimpleCostRegime > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/#wan","text":"[jvm] WAN ()","title":"WAN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: SimpleCostRegime ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < SimpleCostRegime > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostRegime / WAN / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleCostRegime / WAN / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-cost-regime/-w-a-n/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleProtocolComposer SimpleProtocolComposer \u00b6 [jvm] object SimpleProtocolComposer : ProtocolComposer Describe how protocols should communicate / compose with each other. Functions \u00b6 Name Summary canCommunicate [jvm] Content open override fun canCommunicate (src: Protocol , dst: Protocol ): Boolean communicate [jvm] Content open override fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mandatoryParticipatingHosts [jvm] Content open override fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host > toString [jvm] Content open fun toString (): String visibleGuardHosts [jvm] Content open override fun visibleGuardHosts (protocol: Protocol ): Set < Host >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/#simpleprotocolcomposer","text":"[jvm] object SimpleProtocolComposer : ProtocolComposer Describe how protocols should communicate / compose with each other.","title":"SimpleProtocolComposer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/#functions","text":"Name Summary canCommunicate [jvm] Content open override fun canCommunicate (src: Protocol , dst: Protocol ): Boolean communicate [jvm] Content open override fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mandatoryParticipatingHosts [jvm] Content open override fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host > toString [jvm] Content open fun toString (): String visibleGuardHosts [jvm] Content open override fun visibleGuardHosts (protocol: Protocol ): Set < Host >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/can-communicate/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleProtocolComposer / canCommunicate canCommunicate \u00b6 [jvm] Content open override fun canCommunicate (src: Protocol , dst: Protocol ): Boolean","title":"Can communicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/can-communicate/#cancommunicate","text":"[jvm] Content open override fun canCommunicate (src: Protocol , dst: Protocol ): Boolean","title":"canCommunicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/communicate/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleProtocolComposer / communicate communicate \u00b6 [jvm] Content open override fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication","title":"Communicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/communicate/#communicate","text":"[jvm] Content open override fun communicate (src: Protocol , dst: Protocol ): ProtocolCommunication","title":"communicate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/mandatory-participating-hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleProtocolComposer / mandatoryParticipatingHosts mandatoryParticipatingHosts \u00b6 [jvm] Content open override fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host >","title":"Mandatory participating hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/mandatory-participating-hosts/#mandatoryparticipatinghosts","text":"[jvm] Content open override fun mandatoryParticipatingHosts (protocol: Protocol , stmt: SimpleStatementNode ): Set < Host >","title":"mandatoryParticipatingHosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/visible-guard-hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleProtocolComposer / visibleGuardHosts visibleGuardHosts \u00b6 [jvm] Content open override fun visibleGuardHosts (protocol: Protocol ): Set < Host >","title":"Visible guard hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-composer/visible-guard-hosts/#visibleguardhosts","text":"[jvm] Content open override fun visibleGuardHosts (protocol: Protocol ): Set < Host >","title":"visibleGuardHosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleProtocolFactory SimpleProtocolFactory \u00b6 [jvm] class SimpleProtocolFactory ( program : ProgramNode , localFactory : LocalFactory , replicationFactory : ReplicationFactory , abyFactory : ABYFactory , zkpFactory : ZKPFactory , commitmentFactory : CommitmentFactory ) : UnionProtocolFactory Factory for Local, Replication and ABY, and Commitment protocols. Constructors \u00b6 Name Summary SimpleProtocolFactory [jvm] fun SimpleProtocolFactory (program: ProgramNode , localFactory: LocalFactory = LocalFactory(program), replicationFactory: ReplicationFactory = ReplicationFactory(program), abyFactory: ABYFactory = ABYFactory(program), zkpFactory: ZKPFactory = ZKPFactory(program), commitmentFactory: CommitmentFactory = CommitmentFactory(program)) Functions \u00b6 Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: ParameterNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-factory/#simpleprotocolfactory","text":"[jvm] class SimpleProtocolFactory ( program : ProgramNode , localFactory : LocalFactory , replicationFactory : ReplicationFactory , abyFactory : ABYFactory , zkpFactory : ZKPFactory , commitmentFactory : CommitmentFactory ) : UnionProtocolFactory Factory for Local, Replication and ABY, and Commitment protocols.","title":"SimpleProtocolFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-factory/#constructors","text":"Name Summary SimpleProtocolFactory [jvm] fun SimpleProtocolFactory (program: ProgramNode , localFactory: LocalFactory = LocalFactory(program), replicationFactory: ReplicationFactory = ReplicationFactory(program), abyFactory: ABYFactory = ABYFactory(program), zkpFactory: ZKPFactory = ZKPFactory(program), commitmentFactory: CommitmentFactory = CommitmentFactory(program))","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-factory/#functions","text":"Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: ParameterNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-factory/-simple-protocol-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SimpleProtocolFactory / SimpleProtocolFactory SimpleProtocolFactory \u00b6 [jvm] Content fun SimpleProtocolFactory (program: ProgramNode , localFactory: LocalFactory = LocalFactory(program), replicationFactory: ReplicationFactory = ReplicationFactory(program), abyFactory: ABYFactory = ABYFactory(program), zkpFactory: ZKPFactory = ZKPFactory(program), commitmentFactory: CommitmentFactory = CommitmentFactory(program))","title":" simple protocol factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-simple-protocol-factory/-simple-protocol-factory/#simpleprotocolfactory","text":"[jvm] Content fun SimpleProtocolFactory (program: ProgramNode , localFactory: LocalFactory = LocalFactory(program), replicationFactory: ReplicationFactory = ReplicationFactory(program), abyFactory: ABYFactory = ABYFactory(program), zkpFactory: ZKPFactory = ZKPFactory(program), commitmentFactory: CommitmentFactory = CommitmentFactory(program))","title":"SimpleProtocolFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SymbolicCost SymbolicCost \u00b6 [jvm] sealed class SymbolicCost : CostMonoid < SymbolicCost > Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document Inheritors \u00b6 Name CostLiteral CostVariable CostAdd CostMul CostMux Extensions \u00b6 Name Summary costVariables [jvm] Content fun SymbolicCost . costVariables (): Set < CostVariable > More info Some convenience functions.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/#symboliccost","text":"[jvm] sealed class SymbolicCost : CostMonoid < SymbolicCost >","title":"SymbolicCost"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/#functions","text":"Name Summary concat [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content open override fun zero (): SymbolicCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/#inheritors","text":"Name CostLiteral CostVariable CostAdd CostMul CostMux","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/#extensions","text":"Name Summary costVariables [jvm] Content fun SymbolicCost . costVariables (): Set < CostVariable > More info Some convenience functions.","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/concat/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SymbolicCost / concat concat \u00b6 [jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost","title":"Concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/concat/#concat","text":"[jvm] Content open override fun concat (other: SymbolicCost ): SymbolicCost","title":"concat"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/zero/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SymbolicCost / zero zero \u00b6 [jvm] Content open override fun zero (): SymbolicCost","title":"Zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/zero/#zero","text":"[jvm] Content open override fun zero (): SymbolicCost","title":"zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SymbolicCost / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content fun zero (): SymbolicCost","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String zero [jvm] Content fun zero (): SymbolicCost","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/-companion/zero/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / SymbolicCost / Companion / zero zero \u00b6 [jvm] Content fun zero (): SymbolicCost","title":"Zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-symbolic-cost/-companion/zero/#zero","text":"[jvm] Content fun zero (): SymbolicCost","title":"zero"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / UnionProtocolFactory UnionProtocolFactory \u00b6 [jvm] open class UnionProtocolFactory ( selectors : Set < ProtocolFactory >) : ProtocolFactory Union of protocol selectors. unions takes a number of selectors and implements their collective union. Constructors \u00b6 Name Summary UnionProtocolFactory [jvm] fun UnionProtocolFactory (vararg selectors: ProtocolFactory ) UnionProtocolFactory [jvm] fun UnionProtocolFactory (selectors: Set < ProtocolFactory >) Functions \u00b6 Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: ParameterNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > Inheritors \u00b6 Name SimpleProtocolFactory","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/#unionprotocolfactory","text":"[jvm] open class UnionProtocolFactory ( selectors : Set < ProtocolFactory >) : ProtocolFactory Union of protocol selectors. unions takes a number of selectors and implements their collective union.","title":"UnionProtocolFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/#constructors","text":"Name Summary UnionProtocolFactory [jvm] fun UnionProtocolFactory (vararg selectors: ProtocolFactory ) UnionProtocolFactory [jvm] fun UnionProtocolFactory (selectors: Set < ProtocolFactory >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/#functions","text":"Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: ParameterNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/#inheritors","text":"Name SimpleProtocolFactory","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/-union-protocol-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / UnionProtocolFactory / UnionProtocolFactory UnionProtocolFactory \u00b6 [jvm] Content fun UnionProtocolFactory (vararg selectors: ProtocolFactory ) fun UnionProtocolFactory (selectors: Set < ProtocolFactory >)","title":" union protocol factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/-union-protocol-factory/#unionprotocolfactory","text":"[jvm] Content fun UnionProtocolFactory (vararg selectors: ProtocolFactory ) fun UnionProtocolFactory (selectors: Set < ProtocolFactory >)","title":"UnionProtocolFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/available-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / UnionProtocolFactory / availableProtocols availableProtocols \u00b6 [jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"Available protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/available-protocols/#availableprotocols","text":"[jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"availableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / UnionProtocolFactory / constraint constraint \u00b6 [jvm] Content open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint","title":"Constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/constraint/#constraint","text":"[jvm] Content open override fun constraint (node: LetNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint open override fun constraint (node: UpdateNode ): SelectionConstraint","title":"constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/guard-visibility-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / UnionProtocolFactory / guardVisibilityConstraint guardVisibilityConstraint \u00b6 [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"Guard visibility constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/guard-visibility-constraint/#guardvisibilityconstraint","text":"[jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"guardVisibilityConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / UnionProtocolFactory / protocols protocols \u00b6 [jvm] Content open override fun protocols (): List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/protocols/#protocols","text":"[jvm] Content open override fun protocols (): List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / UnionProtocolFactory / viableProtocols viableProtocols \u00b6 [jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-union-protocol-factory/viable-protocols/#viableprotocols","text":"[jvm] Content open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals VariableEquals \u00b6 [jvm] data class VariableEquals ( var1 : FunctionVariable , var2 : FunctionVariable ) : SelectionConstraint Protocols for v1 and v2 are equal. Constructors \u00b6 Name Summary VariableEquals [jvm] fun VariableEquals (var1: FunctionVariable , var2: FunctionVariable ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): FunctionVariable component2 [jvm] Content operator fun component2 (): FunctionVariable copy [jvm] Content fun copy (var1: FunctionVariable , var2: FunctionVariable ): VariableEquals equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document var1 [jvm] val var1 : FunctionVariable var2 [jvm] val var2 : FunctionVariable","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/#variableequals","text":"[jvm] data class VariableEquals ( var1 : FunctionVariable , var2 : FunctionVariable ) : SelectionConstraint Protocols for v1 and v2 are equal.","title":"VariableEquals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/#constructors","text":"Name Summary VariableEquals [jvm] fun VariableEquals (var1: FunctionVariable , var2: FunctionVariable )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): FunctionVariable component2 [jvm] Content operator fun component2 (): FunctionVariable copy [jvm] Content fun copy (var1: FunctionVariable , var2: FunctionVariable ): VariableEquals equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document var1 [jvm] val var1 : FunctionVariable var2 [jvm] val var2 : FunctionVariable","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/-variable-equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals / VariableEquals VariableEquals \u00b6 [jvm] Content fun VariableEquals (var1: FunctionVariable , var2: FunctionVariable )","title":" variable equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/-variable-equals/#variableequals","text":"[jvm] Content fun VariableEquals (var1: FunctionVariable , var2: FunctionVariable )","title":"VariableEquals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals / component1 component1 \u00b6 [jvm] Content operator fun component1 (): FunctionVariable","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/component1/#component1","text":"[jvm] Content operator fun component1 (): FunctionVariable","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals / component2 component2 \u00b6 [jvm] Content operator fun component2 (): FunctionVariable","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/component2/#component2","text":"[jvm] Content operator fun component2 (): FunctionVariable","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals / copy copy \u00b6 [jvm] Content fun copy (var1: FunctionVariable , var2: FunctionVariable ): VariableEquals","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/copy/#copy","text":"[jvm] Content fun copy (var1: FunctionVariable , var2: FunctionVariable ): VariableEquals","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/var1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals / var1 var1 \u00b6 [jvm] Content val var1 : FunctionVariable","title":"Var1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/var1/#var1","text":"[jvm] Content val var1 : FunctionVariable","title":"var1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/var2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableEquals / var2 var2 \u00b6 [jvm] Content val var2 : FunctionVariable","title":"Var2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-equals/var2/#var2","text":"[jvm] Content val var2 : FunctionVariable","title":"var2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn VariableIn \u00b6 [jvm] data class VariableIn ( variable : FunctionVariable , protocols : Set < Protocol >) : SelectionConstraint VariableIn(v, P) holds when v is selected to be a protocol in P Constructors \u00b6 Name Summary VariableIn [jvm] fun VariableIn (variable: FunctionVariable , protocols: Set < Protocol >) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): FunctionVariable component2 [jvm] Content operator fun component2 (): Set < Protocol > copy [jvm] Content fun copy (variable: FunctionVariable , protocols: Set < Protocol >): VariableIn equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document protocols [jvm] val protocols : Set < Protocol > variable [jvm] val variable : FunctionVariable","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/#variablein","text":"[jvm] data class VariableIn ( variable : FunctionVariable , protocols : Set < Protocol >) : SelectionConstraint VariableIn(v, P) holds when v is selected to be a protocol in P","title":"VariableIn"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/#constructors","text":"Name Summary VariableIn [jvm] fun VariableIn (variable: FunctionVariable , protocols: Set < Protocol >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): FunctionVariable component2 [jvm] Content operator fun component2 (): Set < Protocol > copy [jvm] Content fun copy (variable: FunctionVariable , protocols: Set < Protocol >): VariableIn equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document protocols [jvm] val protocols : Set < Protocol > variable [jvm] val variable : FunctionVariable","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/-variable-in/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn / VariableIn VariableIn \u00b6 [jvm] Content fun VariableIn (variable: FunctionVariable , protocols: Set < Protocol >)","title":" variable in"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/-variable-in/#variablein","text":"[jvm] Content fun VariableIn (variable: FunctionVariable , protocols: Set < Protocol >)","title":"VariableIn"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn / component1 component1 \u00b6 [jvm] Content operator fun component1 (): FunctionVariable","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/component1/#component1","text":"[jvm] Content operator fun component1 (): FunctionVariable","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Set < Protocol >","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/component2/#component2","text":"[jvm] Content operator fun component2 (): Set < Protocol >","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn / copy copy \u00b6 [jvm] Content fun copy (variable: FunctionVariable , protocols: Set < Protocol >): VariableIn","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/copy/#copy","text":"[jvm] Content fun copy (variable: FunctionVariable , protocols: Set < Protocol >): VariableIn","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn / protocols protocols \u00b6 [jvm] Content val protocols : Set < Protocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/protocols/#protocols","text":"[jvm] Content val protocols : Set < Protocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / VariableIn / variable variable \u00b6 [jvm] Content val variable : FunctionVariable","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-variable-in/variable/#variable","text":"[jvm] Content val variable : FunctionVariable","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory ZKPFactory \u00b6 [jvm] class ZKPFactory ( program : ProgramNode ) : ProtocolFactory Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint [jvm] Content open override fun constraint (node: LetNode ): SelectionConstraint More info ZKP can only read from, and only send to, itself, local, and replicated equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > Properties \u00b6 Name Summary program [jvm] val program : ProgramNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/#zkpfactory","text":"[jvm] class ZKPFactory ( program : ProgramNode ) : ProtocolFactory","title":"ZKPFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/#functions","text":"Name Summary availableProtocols [jvm] Content open override fun availableProtocols (): Set < ProtocolName > constraint [jvm] Content open fun constraint (node: ParameterNode ): SelectionConstraint open fun constraint (node: UpdateNode ): SelectionConstraint open override fun constraint (node: DeclarationNode ): SelectionConstraint [jvm] Content open override fun constraint (node: LetNode ): SelectionConstraint More info ZKP can only read from, and only send to, itself, local, and replicated equals [jvm] Content open operator fun equals (other: Any ?): Boolean guardVisibilityConstraint [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content open override fun protocols (): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String viableProtocols [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/#properties","text":"Name Summary program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/-z-k-p-factory/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / ZKPFactory ZKPFactory \u00b6 [jvm] Content fun ZKPFactory (program: ProgramNode )","title":" z k p factory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/-z-k-p-factory/#zkpfactory","text":"[jvm] Content fun ZKPFactory (program: ProgramNode )","title":"ZKPFactory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/available-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / availableProtocols availableProtocols \u00b6 [jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"Available protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/available-protocols/#availableprotocols","text":"[jvm] Content open override fun availableProtocols (): Set < ProtocolName >","title":"availableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / constraint constraint \u00b6 [jvm] Content open override fun constraint (node: LetNode ): SelectionConstraint More info ZKP can only read from, and only send to, itself, local, and replicated [jvm] Content open override fun constraint (node: DeclarationNode ): SelectionConstraint","title":"Constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/constraint/#constraint","text":"[jvm] Content open override fun constraint (node: LetNode ): SelectionConstraint More info ZKP can only read from, and only send to, itself, local, and replicated [jvm] Content open override fun constraint (node: DeclarationNode ): SelectionConstraint","title":"constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/guard-visibility-constraint/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / guardVisibilityConstraint guardVisibilityConstraint \u00b6 [jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"Guard visibility constraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/guard-visibility-constraint/#guardvisibilityconstraint","text":"[jvm] Content open override fun guardVisibilityConstraint (protocol: Protocol , node: IfNode ): SelectionConstraint","title":"guardVisibilityConstraint"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/program/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / program program \u00b6 [jvm] Content val program : ProgramNode","title":"Program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/program/#program","text":"[jvm] Content val program : ProgramNode","title":"program"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / protocols protocols \u00b6 [jvm] Content open override fun protocols (): List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/protocols/#protocols","text":"[jvm] Content open override fun protocols (): List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/viable-protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / viableProtocols viableProtocols \u00b6 [jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol >","title":"Viable protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/viable-protocols/#viableprotocols","text":"[jvm] Content open override fun viableProtocols (node: DeclarationNode ): Set < Protocol > open override fun viableProtocols (node: ParameterNode ): Set < Protocol > open override fun viableProtocols (node: LetNode ): Set < Protocol >","title":"viableProtocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int protocols [jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/-companion/protocols/","text":"// compiler / edu.cornell.cs.apl.viaduct.selection / ZKPFactory / Companion / protocols protocols \u00b6 [jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol >","title":"Protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.selection/-z-k-p-factory/-companion/protocols/#protocols","text":"[jvm] Content fun protocols (program: ProgramNode ): List < SpecializedProtocol >","title":"protocols"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax Package edu.cornell.cs.apl.viaduct.syntax \u00b6 Types \u00b6 Name Summary ArgumentLabel [jvm] Content data class ArgumentLabel ( name : String ) : Name , Comparable < ArgumentLabel > More info The name assigned to an argument. ArgumentLabelNode [jvm] Content typealias ArgumentLabelNode = Located < ArgumentLabel > ArgumentLabelStyle [jvm] Content object ArgumentLabelStyle : Style More info The display style of ArgumentLabel s. Arguments [jvm] Content class Arguments T > : HasSourceLocation , List < T > More info A list of arguments. Associativity [jvm] Content enum Associativity : Enum < Associativity > More info Determines how operators of the same Precedence are grouped in the absence of parentheses. BinaryOperator [jvm] Content interface BinaryOperator : Operator More info An operator that takes two arguments. ClassNameNode [jvm] Content typealias ClassNameNode = Located < ClassName > ClosedOperator [jvm] Content interface ClosedOperator : Operator More info An operator that surrounds its operands. FunctionName [jvm] Content data class FunctionName ( name : String ) : Name More info The name of a function. FunctionNameNode [jvm] Content typealias FunctionNameNode = Located < FunctionName > FunctionNameStyle [jvm] Content object FunctionNameStyle : Style HasSourceLocation [jvm] Content interface HasSourceLocation More info A node in the abstract syntax tree that has a SourceLocation . HighestPrecedence [jvm] Content object HighestPrecedence : Precedence More info The precedence that is higher than all other precedences. Host [jvm] Content data class Host ( name : String ) : Name , Comparable < Host > More info A participant in the distributed computation. HostNode [jvm] Content typealias HostNode = Located < Host > HostStyle [jvm] Content object HostStyle : Style More info The display style of Host s. HostTrustConfiguration [jvm] Content class HostTrustConfiguration : Map < Host , LabelExpression > , Function1 < Host , LabelExpression > More info A map that associates each host with its authority label. InfixOperator [jvm] Content interface InfixOperator : Operator More info An operator that is written between its operands. InputPort [jvm] Content data class InputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort JumpLabel [jvm] Content data class JumpLabel ( name : String ) : Name More info The target label for unstructured control statements like continue and break. JumpLabelNode [jvm] Content typealias JumpLabelNode = Located < JumpLabel > JumpLabelStyle [jvm] Content object JumpLabelStyle : Style More info The display style of JumpLabel s. LabelNode [jvm] Content typealias LabelNode = Located < LabelExpression > Located [jvm] Content data class Located T : PrettyPrintable>( value : T , sourceLocation : SourceLocation ) : HasSourceLocation , PrettyPrintable More info Attaches a source location to an arbitrary type. LowestPrecedence [jvm] Content object LowestPrecedence : Precedence More info The precedence that is lower than all other precedences. MethodNameNode [jvm] Content typealias MethodNameNode = Located < MethodName > Name [jvm] Content interface Name : PrettyPrintable More info An object that names things. NamedArguments [jvm] Content class NamedArguments T > : HasSourceLocation More info A list of labelled arguments. ObjectVariable [jvm] Content data class ObjectVariable ( name : String ) : Variable More info A variable that binds an object. ObjectVariableNode [jvm] Content typealias ObjectVariableNode = Located < ObjectVariable > Operator [jvm] Content interface Operator More info A pure function from values to a value. Order [jvm] Content enum Order : Enum < Order > More info The result of comparing two Precedence s. OutputPort [jvm] Content data class OutputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort ParameterDirection [jvm] Content enum ParameterDirection : Enum < ParameterDirection > , PrettyPrintable More info Specifies whether a parameter is an IN parameter (can be used) or an OUT (has to be assigned in the function body). PortId [jvm] Content typealias PortId = String PostfixOperator [jvm] Content interface PostfixOperator : Operator More info An operator that is written after its operands. Precedence [jvm] Content interface Precedence More info Determines the order of operations in the absence of parentheses. PrefixOperator [jvm] Content interface PrefixOperator : Operator More info An operator that is written before its operands. Protocol [jvm] Content abstract class Protocol : Name , Comparable < Protocol > More info An abstract location where computations can be placed. ProtocolName [jvm] Content data class ProtocolName ( name : String ) : Name , Comparable < ProtocolName > More info The name of a cryptographic protocol. ProtocolNameNode [jvm] Content typealias ProtocolNameNode = Located < ProtocolName > ProtocolNameStyle [jvm] Content object ProtocolNameStyle : Style More info The display style of ProtocolName s. ProtocolNode [jvm] Content typealias ProtocolNode = Located < Protocol > ProtocolPort [jvm] Content interface ProtocolPort ProtocolProjection [jvm] Content data class ProtocolProjection ( protocol : Protocol , host : Host ) : Name , Comparable < ProtocolProjection > QueryNameNode [jvm] Content typealias QueryNameNode = Located < QueryName > SourceLocation [jvm] Content typealias SourceLocation = SourceRange More info Specifies what portion of the source code an abstract syntax tree node corresponds to. SpecializedProtocol [jvm] Content class SpecializedProtocol ( protocol : Protocol , hostTrustConfiguration : HostTrustConfiguration ) More info A Protocol specialized to a particular HostTrustConfiguration . Temporary [jvm] Content data class Temporary ( name : String ) : Variable More info A variable that binds base values. TemporaryNode [jvm] Content typealias TemporaryNode = Located < Temporary > UnaryOperator [jvm] Content interface UnaryOperator : Operator More info An operator that takes a single argument. UpdateNameNode [jvm] Content typealias UpdateNameNode = Located < UpdateName > ValueNode [jvm] Content typealias ValueNode = Located < Value > ValueTypeNode [jvm] Content typealias ValueTypeNode = Located < ValueType > Variable [jvm] Content sealed class Variable : Name More info A variable is a name that stands for a value or an object instance. VariableStyle [jvm] Content object VariableStyle : Style More info The display style of Variable s. Functions \u00b6 Name Summary bindsTighterThan [jvm] Content fun Operator . bindsTighterThan (other: Operator ): Boolean More info Returns true when this operator has precedence higher than or equal to other. Properties \u00b6 Name Summary arity [jvm] val Operator . arity : Int The number of arguments this operator takes.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/#package-educornellcsaplviaductsyntax","text":"","title":"Package edu.cornell.cs.apl.viaduct.syntax"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/#types","text":"Name Summary ArgumentLabel [jvm] Content data class ArgumentLabel ( name : String ) : Name , Comparable < ArgumentLabel > More info The name assigned to an argument. ArgumentLabelNode [jvm] Content typealias ArgumentLabelNode = Located < ArgumentLabel > ArgumentLabelStyle [jvm] Content object ArgumentLabelStyle : Style More info The display style of ArgumentLabel s. Arguments [jvm] Content class Arguments T > : HasSourceLocation , List < T > More info A list of arguments. Associativity [jvm] Content enum Associativity : Enum < Associativity > More info Determines how operators of the same Precedence are grouped in the absence of parentheses. BinaryOperator [jvm] Content interface BinaryOperator : Operator More info An operator that takes two arguments. ClassNameNode [jvm] Content typealias ClassNameNode = Located < ClassName > ClosedOperator [jvm] Content interface ClosedOperator : Operator More info An operator that surrounds its operands. FunctionName [jvm] Content data class FunctionName ( name : String ) : Name More info The name of a function. FunctionNameNode [jvm] Content typealias FunctionNameNode = Located < FunctionName > FunctionNameStyle [jvm] Content object FunctionNameStyle : Style HasSourceLocation [jvm] Content interface HasSourceLocation More info A node in the abstract syntax tree that has a SourceLocation . HighestPrecedence [jvm] Content object HighestPrecedence : Precedence More info The precedence that is higher than all other precedences. Host [jvm] Content data class Host ( name : String ) : Name , Comparable < Host > More info A participant in the distributed computation. HostNode [jvm] Content typealias HostNode = Located < Host > HostStyle [jvm] Content object HostStyle : Style More info The display style of Host s. HostTrustConfiguration [jvm] Content class HostTrustConfiguration : Map < Host , LabelExpression > , Function1 < Host , LabelExpression > More info A map that associates each host with its authority label. InfixOperator [jvm] Content interface InfixOperator : Operator More info An operator that is written between its operands. InputPort [jvm] Content data class InputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort JumpLabel [jvm] Content data class JumpLabel ( name : String ) : Name More info The target label for unstructured control statements like continue and break. JumpLabelNode [jvm] Content typealias JumpLabelNode = Located < JumpLabel > JumpLabelStyle [jvm] Content object JumpLabelStyle : Style More info The display style of JumpLabel s. LabelNode [jvm] Content typealias LabelNode = Located < LabelExpression > Located [jvm] Content data class Located T : PrettyPrintable>( value : T , sourceLocation : SourceLocation ) : HasSourceLocation , PrettyPrintable More info Attaches a source location to an arbitrary type. LowestPrecedence [jvm] Content object LowestPrecedence : Precedence More info The precedence that is lower than all other precedences. MethodNameNode [jvm] Content typealias MethodNameNode = Located < MethodName > Name [jvm] Content interface Name : PrettyPrintable More info An object that names things. NamedArguments [jvm] Content class NamedArguments T > : HasSourceLocation More info A list of labelled arguments. ObjectVariable [jvm] Content data class ObjectVariable ( name : String ) : Variable More info A variable that binds an object. ObjectVariableNode [jvm] Content typealias ObjectVariableNode = Located < ObjectVariable > Operator [jvm] Content interface Operator More info A pure function from values to a value. Order [jvm] Content enum Order : Enum < Order > More info The result of comparing two Precedence s. OutputPort [jvm] Content data class OutputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort ParameterDirection [jvm] Content enum ParameterDirection : Enum < ParameterDirection > , PrettyPrintable More info Specifies whether a parameter is an IN parameter (can be used) or an OUT (has to be assigned in the function body). PortId [jvm] Content typealias PortId = String PostfixOperator [jvm] Content interface PostfixOperator : Operator More info An operator that is written after its operands. Precedence [jvm] Content interface Precedence More info Determines the order of operations in the absence of parentheses. PrefixOperator [jvm] Content interface PrefixOperator : Operator More info An operator that is written before its operands. Protocol [jvm] Content abstract class Protocol : Name , Comparable < Protocol > More info An abstract location where computations can be placed. ProtocolName [jvm] Content data class ProtocolName ( name : String ) : Name , Comparable < ProtocolName > More info The name of a cryptographic protocol. ProtocolNameNode [jvm] Content typealias ProtocolNameNode = Located < ProtocolName > ProtocolNameStyle [jvm] Content object ProtocolNameStyle : Style More info The display style of ProtocolName s. ProtocolNode [jvm] Content typealias ProtocolNode = Located < Protocol > ProtocolPort [jvm] Content interface ProtocolPort ProtocolProjection [jvm] Content data class ProtocolProjection ( protocol : Protocol , host : Host ) : Name , Comparable < ProtocolProjection > QueryNameNode [jvm] Content typealias QueryNameNode = Located < QueryName > SourceLocation [jvm] Content typealias SourceLocation = SourceRange More info Specifies what portion of the source code an abstract syntax tree node corresponds to. SpecializedProtocol [jvm] Content class SpecializedProtocol ( protocol : Protocol , hostTrustConfiguration : HostTrustConfiguration ) More info A Protocol specialized to a particular HostTrustConfiguration . Temporary [jvm] Content data class Temporary ( name : String ) : Variable More info A variable that binds base values. TemporaryNode [jvm] Content typealias TemporaryNode = Located < Temporary > UnaryOperator [jvm] Content interface UnaryOperator : Operator More info An operator that takes a single argument. UpdateNameNode [jvm] Content typealias UpdateNameNode = Located < UpdateName > ValueNode [jvm] Content typealias ValueNode = Located < Value > ValueTypeNode [jvm] Content typealias ValueTypeNode = Located < ValueType > Variable [jvm] Content sealed class Variable : Name More info A variable is a name that stands for a value or an object instance. VariableStyle [jvm] Content object VariableStyle : Style More info The display style of Variable s.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/#functions","text":"Name Summary bindsTighterThan [jvm] Content fun Operator . bindsTighterThan (other: Operator ): Boolean More info Returns true when this operator has precedence higher than or equal to other.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/#properties","text":"Name Summary arity [jvm] val Operator . arity : Int The number of arguments this operator takes.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/arity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / arity arity \u00b6 [jvm] Content val Operator . arity : Int More info The number of arguments this operator takes.","title":"Arity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/arity/#arity","text":"[jvm] Content val Operator . arity : Int More info The number of arguments this operator takes.","title":"arity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/binds-tighter-than/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / bindsTighterThan bindsTighterThan \u00b6 [jvm] Content fun Operator . bindsTighterThan (other: Operator ): Boolean More info Returns true when this operator has precedence higher than or equal to other. This function is reflexive, that is, x.bindsTighterThan(x) returns true. However, it is not necessarily transitive, and it does not order all operators. Two operators x and y have the same precedence if x.bindsTighterThan(y) and y.bindsTighterThan(x).","title":"Binds tighter than"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/binds-tighter-than/#bindstighterthan","text":"[jvm] Content fun Operator . bindsTighterThan (other: Operator ): Boolean More info Returns true when this operator has precedence higher than or equal to other. This function is reflexive, that is, x.bindsTighterThan(x) returns true. However, it is not necessarily transitive, and it does not order all operators. Two operators x and y have the same precedence if x.bindsTighterThan(y) and y.bindsTighterThan(x).","title":"bindsTighterThan"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel ArgumentLabel \u00b6 [jvm] data class ArgumentLabel ( name : String ) : Name , Comparable < ArgumentLabel > The name assigned to an argument. Constructors \u00b6 Name Summary ArgumentLabel [jvm] fun ArgumentLabel (name: String ) Functions \u00b6 Name Summary compareTo [jvm] Content open operator override fun compareTo (other: ArgumentLabel ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ArgumentLabel equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/#argumentlabel","text":"[jvm] data class ArgumentLabel ( name : String ) : Name , Comparable < ArgumentLabel > The name assigned to an argument.","title":"ArgumentLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/#constructors","text":"Name Summary ArgumentLabel [jvm] fun ArgumentLabel (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/#functions","text":"Name Summary compareTo [jvm] Content open operator override fun compareTo (other: ArgumentLabel ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ArgumentLabel equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/-argument-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel / ArgumentLabel ArgumentLabel \u00b6 [jvm] Content fun ArgumentLabel (name: String )","title":" argument label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/-argument-label/#argumentlabel","text":"[jvm] Content fun ArgumentLabel (name: String )","title":"ArgumentLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel / compareTo compareTo \u00b6 [jvm] Content open operator override fun compareTo (other: ArgumentLabel ): Int","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/compare-to/#compareto","text":"[jvm] Content open operator override fun compareTo (other: ArgumentLabel ): Int","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel / copy copy \u00b6 [jvm] Content fun copy (name: String ): ArgumentLabel","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/copy/#copy","text":"[jvm] Content fun copy (name: String ): ArgumentLabel","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabel / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ArgumentLabelStyle ArgumentLabelStyle \u00b6 [jvm] object ArgumentLabelStyle : Style The display style of ArgumentLabel s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label-style/#argumentlabelstyle","text":"[jvm] object ArgumentLabelStyle : Style The display style of ArgumentLabel s.","title":"ArgumentLabelStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-argument-label-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Arguments Arguments \u00b6 [jvm] class Arguments T > : HasSourceLocation , List < T > A list of arguments. Constructors \u00b6 Name Summary Arguments [jvm] fun Arguments (sourceLocation: SourceLocation )An empty argument list. Arguments [jvm] fun T > Arguments (arguments: List < T >, sourceLocation: SourceLocation ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary contains [jvm] Content open operator override fun contains (element: T ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < T >): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer T >) get [jvm] Content open operator override fun get (index: Int ): T hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: T ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < T > lastIndexOf [jvm] Content open override fun lastIndexOf (element: T ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < T > open override fun listIterator (index: Int ): ListIterator < T > parallelStream [jvm] Content open fun parallelStream (): Stream < T > spliterator [jvm] Content open override fun spliterator (): Spliterator < T > stream [jvm] Content open fun stream (): Stream < T > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < T > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/#arguments","text":"[jvm] class Arguments T > : HasSourceLocation , List < T > A list of arguments.","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/#constructors","text":"Name Summary Arguments [jvm] fun Arguments (sourceLocation: SourceLocation )An empty argument list. Arguments [jvm] fun T > Arguments (arguments: List < T >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/#functions","text":"Name Summary contains [jvm] Content open operator override fun contains (element: T ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < T >): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer T >) get [jvm] Content open operator override fun get (index: Int ): T hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: T ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < T > lastIndexOf [jvm] Content open override fun lastIndexOf (element: T ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < T > open override fun listIterator (index: Int ): ListIterator < T > parallelStream [jvm] Content open fun parallelStream (): Stream < T > spliterator [jvm] Content open override fun spliterator (): Spliterator < T > stream [jvm] Content open fun stream (): Stream < T > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < T > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/#properties","text":"Name Summary size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Arguments / Arguments Arguments \u00b6 [jvm] Content fun Arguments (sourceLocation: SourceLocation ) More info An empty argument list. [jvm] Content fun T > Arguments (arguments: List < T >, sourceLocation: SourceLocation )","title":" arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/-arguments/#arguments","text":"[jvm] Content fun Arguments (sourceLocation: SourceLocation ) More info An empty argument list. [jvm] Content fun T > Arguments (arguments: List < T >, sourceLocation: SourceLocation )","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Arguments / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Arguments / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean from [jvm] Content @ JvmStatic () fun < T : HasSourceLocation > from (vararg arguments: T ): Arguments < T > More info Constructs an Arguments instance while inferring source location from arguments. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean from [jvm] Content @ JvmStatic () fun < T : HasSourceLocation > from (vararg arguments: T ): Arguments < T > More info Constructs an Arguments instance while inferring source location from arguments. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/-companion/from/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Arguments / Companion / from from \u00b6 [jvm] Content @ JvmStatic () fun < T : HasSourceLocation > from (vararg arguments: T ): Arguments < T > More info Constructs an Arguments instance while inferring source location from arguments. Source location is the location of the first argument merged with the location of the last argument. arguments must be non-empty.","title":"From"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-arguments/-companion/from/#from","text":"[jvm] Content @ JvmStatic () fun < T : HasSourceLocation > from (vararg arguments: T ): Arguments < T > More info Constructs an Arguments instance while inferring source location from arguments. Source location is the location of the first argument merged with the location of the last argument. arguments must be non-empty.","title":"from"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity Associativity \u00b6 [jvm] enum Associativity : Enum < Associativity > Determines how operators of the same Precedence are grouped in the absence of parentheses. For example, the expression x ~ y ~ z would be parsed as follows given the corresponding associativity of ~: Left associative: (x ~ y) ~ z Right associative: x ~ (y ~ z) Non-associative: syntax error. Entries \u00b6 Name Summary LEFT [jvm] LEFT () RIGHT [jvm] RIGHT () NON [jvm] NON () Functions \u00b6 Name Summary compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/#associativity","text":"[jvm] enum Associativity : Enum < Associativity > Determines how operators of the same Precedence are grouped in the absence of parentheses. For example, the expression x ~ y ~ z would be parsed as follows given the corresponding associativity of ~: Left associative: (x ~ y) ~ z Right associative: x ~ (y ~ z) Non-associative: syntax error.","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/#entries","text":"Name Summary LEFT [jvm] LEFT () RIGHT [jvm] RIGHT () NON [jvm] NON ()","title":"Entries"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/#functions","text":"Name Summary compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / LEFT LEFT \u00b6 [jvm] LEFT () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/#left","text":"[jvm] LEFT ()","title":"LEFT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / LEFT / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / LEFT / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-l-e-f-t/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / NON NON \u00b6 [jvm] NON () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/#non","text":"[jvm] NON ()","title":"NON"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / NON / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / NON / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-n-o-n/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / RIGHT RIGHT \u00b6 [jvm] RIGHT () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/#right","text":"[jvm] RIGHT ()","title":"RIGHT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Associativity ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Associativity > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / RIGHT / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Associativity / RIGHT / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-associativity/-r-i-g-h-t/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / BinaryOperator BinaryOperator \u00b6 [jvm] interface BinaryOperator : Operator An operator that takes two arguments. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content abstract fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name BinaryPrefixOperator BinaryInfixOperator","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/#binaryoperator","text":"[jvm] interface BinaryOperator : Operator An operator that takes two arguments.","title":"BinaryOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content abstract fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/#inheritors","text":"Name BinaryPrefixOperator BinaryInfixOperator","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / BinaryOperator / apply apply \u00b6 [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/apply/#apply","text":"[jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / BinaryOperator / asDocument asDocument \u00b6 [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content abstract fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2.","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-binary-operator/as-document/#asdocument","text":"[jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content abstract fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2.","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-closed-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ClosedOperator ClosedOperator \u00b6 [jvm] interface ClosedOperator : Operator An operator that surrounds its operands. An operator is closed if all its operands are contained between its named parts. For example, a pair of parentheses ((x)) is a closed operator. Closed operators are non-associative. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-closed-operator/#closedoperator","text":"[jvm] interface ClosedOperator : Operator An operator that surrounds its operands. An operator is closed if all its operands are contained between its named parts. For example, a pair of parentheses ((x)) is a closed operator. Closed operators are non-associative.","title":"ClosedOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-closed-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-closed-operator/#properties","text":"Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-closed-operator/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ClosedOperator / associativity associativity \u00b6 [jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence. See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-closed-operator/associativity/#associativity","text":"[jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence.","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-closed-operator/associativity/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionName FunctionName \u00b6 [jvm] data class FunctionName ( name : String ) : Name The name of a function. Constructors \u00b6 Name Summary FunctionName [jvm] fun FunctionName (name: String ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): FunctionName equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/#functionname","text":"[jvm] data class FunctionName ( name : String ) : Name The name of a function.","title":"FunctionName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/#constructors","text":"Name Summary FunctionName [jvm] fun FunctionName (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): FunctionName equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/-function-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionName / FunctionName FunctionName \u00b6 [jvm] Content fun FunctionName (name: String )","title":" function name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/-function-name/#functionname","text":"[jvm] Content fun FunctionName (name: String )","title":"FunctionName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionName / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionName / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionName / copy copy \u00b6 [jvm] Content fun copy (name: String ): FunctionName","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/copy/#copy","text":"[jvm] Content fun copy (name: String ): FunctionName","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionName / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionName / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / FunctionNameStyle FunctionNameStyle \u00b6 [jvm] object FunctionNameStyle : Style Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name-style/#functionnamestyle","text":"[jvm] object FunctionNameStyle : Style","title":"FunctionNameStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-function-name-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-has-source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HasSourceLocation HasSourceLocation \u00b6 [jvm] interface HasSourceLocation A node in the abstract syntax tree that has a SourceLocation . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name Arguments Located NamedArguments CommunicationNode Node Node","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-has-source-location/#hassourcelocation","text":"[jvm] interface HasSourceLocation A node in the abstract syntax tree that has a SourceLocation .","title":"HasSourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-has-source-location/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-has-source-location/#properties","text":"Name Summary sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-has-source-location/#inheritors","text":"Name Arguments Located NamedArguments CommunicationNode Node Node","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-has-source-location/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HasSourceLocation / sourceLocation sourceLocation \u00b6 [jvm] Content abstract val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-has-source-location/source-location/#sourcelocation","text":"[jvm] Content abstract val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-highest-precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HighestPrecedence HighestPrecedence \u00b6 [jvm] object HighestPrecedence : Precedence The precedence that is higher than all other precedences. Functions \u00b6 Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-highest-precedence/#highestprecedence","text":"[jvm] object HighestPrecedence : Precedence The precedence that is higher than all other precedences.","title":"HighestPrecedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-highest-precedence/#functions","text":"Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-highest-precedence/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HighestPrecedence / compareTo compareTo \u00b6 [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-highest-precedence/compare-to/#compareto","text":"[jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host Host \u00b6 [jvm] data class Host ( name : String ) : Name , Comparable < Host > A participant in the distributed computation. A host is a location that can run (one or more) processes; it has inputs and outputs. Constructors \u00b6 Name Summary Host [jvm] fun Host (name: String ) Functions \u00b6 Name Summary compareTo [jvm] Content open operator override fun compareTo (other: Host ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): Host equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/#host","text":"[jvm] data class Host ( name : String ) : Name , Comparable < Host > A participant in the distributed computation. A host is a location that can run (one or more) processes; it has inputs and outputs.","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/#constructors","text":"Name Summary Host [jvm] fun Host (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/#functions","text":"Name Summary compareTo [jvm] Content open operator override fun compareTo (other: Host ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): Host equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/-host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host / Host Host \u00b6 [jvm] Content fun Host (name: String )","title":" host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/-host/#host","text":"[jvm] Content fun Host (name: String )","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host / compareTo compareTo \u00b6 [jvm] Content open operator override fun compareTo (other: Host ): Int","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/compare-to/#compareto","text":"[jvm] Content open operator override fun compareTo (other: Host ): Int","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host / copy copy \u00b6 [jvm] Content fun copy (name: String ): Host","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/copy/#copy","text":"[jvm] Content fun copy (name: String ): Host","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Host / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HostStyle HostStyle \u00b6 [jvm] object HostStyle : Style The display style of Host s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-style/#hoststyle","text":"[jvm] object HostStyle : Style The display style of Host s.","title":"HostStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HostTrustConfiguration HostTrustConfiguration \u00b6 [jvm] class HostTrustConfiguration : Map < Host , LabelExpression > , Function1 < Host , LabelExpression > A map that associates each host with its authority label. Constructors \u00b6 Name Summary HostTrustConfiguration [jvm] fun HostTrustConfiguration (program: ProgramNode ) Functions \u00b6 Name Summary containsKey [jvm] Content open override fun containsKey (key: Host ): Boolean containsValue [jvm] Content open override fun containsValue (value: LabelExpression ): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: BiConsumer Host , in LabelExpression >) get [jvm] Content open operator override fun get (key: Host ): LabelExpression ? getOrDefault [jvm] Content open fun getOrDefault (key: Host , defaultValue: LabelExpression ): LabelExpression hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content open operator override fun invoke (host: Host ): LabelExpression isEmpty [jvm] Content open override fun isEmpty (): Boolean toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary entries [jvm] open override val entries : Set < Map.Entry < Host , LabelExpression >> keys [jvm] open override val keys : Set < Host > size [jvm] open override val size : Int values [jvm] open override val values : Collection < LabelExpression >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/#hosttrustconfiguration","text":"[jvm] class HostTrustConfiguration : Map < Host , LabelExpression > , Function1 < Host , LabelExpression > A map that associates each host with its authority label.","title":"HostTrustConfiguration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/#constructors","text":"Name Summary HostTrustConfiguration [jvm] fun HostTrustConfiguration (program: ProgramNode )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/#functions","text":"Name Summary containsKey [jvm] Content open override fun containsKey (key: Host ): Boolean containsValue [jvm] Content open override fun containsValue (value: LabelExpression ): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: BiConsumer Host , in LabelExpression >) get [jvm] Content open operator override fun get (key: Host ): LabelExpression ? getOrDefault [jvm] Content open fun getOrDefault (key: Host , defaultValue: LabelExpression ): LabelExpression hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content open operator override fun invoke (host: Host ): LabelExpression isEmpty [jvm] Content open override fun isEmpty (): Boolean toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/#properties","text":"Name Summary entries [jvm] open override val entries : Set < Map.Entry < Host , LabelExpression >> keys [jvm] open override val keys : Set < Host > size [jvm] open override val size : Int values [jvm] open override val values : Collection < LabelExpression >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/-host-trust-configuration/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HostTrustConfiguration / HostTrustConfiguration HostTrustConfiguration \u00b6 [jvm] Content fun HostTrustConfiguration (program: ProgramNode )","title":" host trust configuration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/-host-trust-configuration/#hosttrustconfiguration","text":"[jvm] Content fun HostTrustConfiguration (program: ProgramNode )","title":"HostTrustConfiguration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/invoke/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / HostTrustConfiguration / invoke invoke \u00b6 [jvm] Content open operator override fun invoke (host: Host ): LabelExpression","title":"Invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-host-trust-configuration/invoke/#invoke","text":"[jvm] Content open operator override fun invoke (host: Host ): LabelExpression","title":"invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-infix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InfixOperator InfixOperator \u00b6 [jvm] interface InfixOperator : Operator An operator that is written between its operands. An infix operator has an operand that comes before and an operand that comes after all its named parts. For example, addition (x + y) and the conditional operator (b ? x : y) are infix operators. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name BinaryInfixOperator Mux","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-infix-operator/#infixoperator","text":"[jvm] interface InfixOperator : Operator An operator that is written between its operands. An infix operator has an operand that comes before and an operand that comes after all its named parts. For example, addition (x + y) and the conditional operator (b ? x : y) are infix operators.","title":"InfixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-infix-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-infix-operator/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-infix-operator/#inheritors","text":"Name BinaryInfixOperator Mux","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort InputPort \u00b6 [jvm] data class InputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort Functions \u00b6 Name Summary asProjection [jvm] Content open fun asProjection (): ProtocolProjection component1 [jvm] Content operator fun component1 (): Protocol component2 [jvm] Content operator fun component2 (): Host component3 [jvm] Content operator fun component3 (): PortId copy [jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): InputPort equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary host [jvm] open override val host : Host id [jvm] open override val id : PortId protocol [jvm] open override val protocol : Protocol","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/#inputport","text":"[jvm] data class InputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort","title":"InputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/#functions","text":"Name Summary asProjection [jvm] Content open fun asProjection (): ProtocolProjection component1 [jvm] Content operator fun component1 (): Protocol component2 [jvm] Content operator fun component2 (): Host component3 [jvm] Content operator fun component3 (): PortId copy [jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): InputPort equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/#properties","text":"Name Summary host [jvm] open override val host : Host id [jvm] open override val id : PortId protocol [jvm] open override val protocol : Protocol","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/-input-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / InputPort InputPort \u00b6 [jvm] Content fun InputPort (protocol: Protocol , host: Host , id: PortId )","title":" input port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/-input-port/#inputport","text":"[jvm] Content fun InputPort (protocol: Protocol , host: Host , id: PortId )","title":"InputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Protocol","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/component1/#component1","text":"[jvm] Content operator fun component1 (): Protocol","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Host","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/component2/#component2","text":"[jvm] Content operator fun component2 (): Host","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/component3/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / component3 component3 \u00b6 [jvm] Content operator fun component3 (): PortId","title":"Component3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/component3/#component3","text":"[jvm] Content operator fun component3 (): PortId","title":"component3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / copy copy \u00b6 [jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): InputPort","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/copy/#copy","text":"[jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): InputPort","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / host host \u00b6 [jvm] Content open override val host : Host","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/host/#host","text":"[jvm] Content open override val host : Host","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/id/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / id id \u00b6 [jvm] Content open override val id : PortId","title":"Id"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/id/#id","text":"[jvm] Content open override val id : PortId","title":"id"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / InputPort / protocol protocol \u00b6 [jvm] Content open override val protocol : Protocol","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-input-port/protocol/#protocol","text":"[jvm] Content open override val protocol : Protocol","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabel JumpLabel \u00b6 [jvm] data class JumpLabel ( name : String ) : Name The target label for unstructured control statements like continue and break. Constructors \u00b6 Name Summary JumpLabel [jvm] fun JumpLabel (name: String ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): JumpLabel equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/#jumplabel","text":"[jvm] data class JumpLabel ( name : String ) : Name The target label for unstructured control statements like continue and break.","title":"JumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/#constructors","text":"Name Summary JumpLabel [jvm] fun JumpLabel (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): JumpLabel equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/-jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabel / JumpLabel JumpLabel \u00b6 [jvm] Content fun JumpLabel (name: String )","title":" jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/-jump-label/#jumplabel","text":"[jvm] Content fun JumpLabel (name: String )","title":"JumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabel / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabel / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabel / copy copy \u00b6 [jvm] Content fun copy (name: String ): JumpLabel","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/copy/#copy","text":"[jvm] Content fun copy (name: String ): JumpLabel","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabel / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabel / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabelStyle JumpLabelStyle \u00b6 [jvm] object JumpLabelStyle : Style The display style of JumpLabel s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label-style/#jumplabelstyle","text":"[jvm] object JumpLabelStyle : Style The display style of JumpLabel s.","title":"JumpLabelStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label-style/foreground-color/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / JumpLabelStyle / foregroundColor foregroundColor \u00b6 [jvm] Content open override val foregroundColor : AnsiColor","title":"Foreground color"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-jump-label-style/foreground-color/#foregroundcolor","text":"[jvm] Content open override val foregroundColor : AnsiColor","title":"foregroundColor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located Located \u00b6 [jvm] data class Located T : PrettyPrintable>( value : T , sourceLocation : SourceLocation ) : HasSourceLocation , PrettyPrintable Attaches a source location to an arbitrary type. Constructors \u00b6 Name Summary Located [jvm] fun T : PrettyPrintable> Located (value: T , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): T component2 [jvm] Content operator fun component2 (): SourceLocation copy [jvm] Content fun copy (value: T , sourceLocation: SourceLocation ): Located < T > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation value [jvm] val value : T","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/#located","text":"[jvm] data class Located T : PrettyPrintable>( value : T , sourceLocation : SourceLocation ) : HasSourceLocation , PrettyPrintable Attaches a source location to an arbitrary type.","title":"Located"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/#constructors","text":"Name Summary Located [jvm] fun T : PrettyPrintable> Located (value: T , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): T component2 [jvm] Content operator fun component2 (): SourceLocation copy [jvm] Content fun copy (value: T , sourceLocation: SourceLocation ): Located < T > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation value [jvm] val value : T","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/-located/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located / Located Located \u00b6 [jvm] Content fun T : PrettyPrintable> Located (value: T , sourceLocation: SourceLocation )","title":" located"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/-located/#located","text":"[jvm] Content fun T : PrettyPrintable> Located (value: T , sourceLocation: SourceLocation )","title":"Located"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located / component1 component1 \u00b6 [jvm] Content operator fun component1 (): T","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/component1/#component1","text":"[jvm] Content operator fun component1 (): T","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located / component2 component2 \u00b6 [jvm] Content operator fun component2 (): SourceLocation","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/component2/#component2","text":"[jvm] Content operator fun component2 (): SourceLocation","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located / copy copy \u00b6 [jvm] Content fun copy (value: T , sourceLocation: SourceLocation ): Located < T >","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/copy/#copy","text":"[jvm] Content fun copy (value: T , sourceLocation: SourceLocation ): Located < T >","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Located / value value \u00b6 [jvm] Content val value : T","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-located/value/#value","text":"[jvm] Content val value : T","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-lowest-precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / LowestPrecedence LowestPrecedence \u00b6 [jvm] object LowestPrecedence : Precedence The precedence that is lower than all other precedences. Functions \u00b6 Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-lowest-precedence/#lowestprecedence","text":"[jvm] object LowestPrecedence : Precedence The precedence that is lower than all other precedences.","title":"LowestPrecedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-lowest-precedence/#functions","text":"Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-lowest-precedence/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / LowestPrecedence / compareTo compareTo \u00b6 [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-lowest-precedence/compare-to/#compareto","text":"[jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Name Name \u00b6 [jvm] interface Name : PrettyPrintable An object that names things. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] abstract val nameCategory : String Class of things this object names. Inheritors \u00b6 Name ArgumentLabel FunctionName Host JumpLabel Protocol ProtocolName ProtocolProjection Variable ClassName MethodName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/#name","text":"[jvm] interface Name : PrettyPrintable An object that names things.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] abstract val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/#inheritors","text":"Name ArgumentLabel FunctionName Host JumpLabel Protocol ProtocolName ProtocolProjection Variable ClassName MethodName","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Name / nameCategory nameCategory \u00b6 [jvm] Content abstract val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/name-category/#namecategory","text":"[jvm] Content abstract val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Name / name name \u00b6 [jvm] Content abstract val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-name/name/#name","text":"[jvm] Content abstract val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / NamedArguments NamedArguments \u00b6 [jvm] class NamedArguments T > : HasSourceLocation A list of labelled arguments. Constructors \u00b6 Name Summary NamedArguments [jvm] fun NamedArguments (sourceLocation: SourceLocation )An empty argument list. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary assertHasNoExtraArguments [jvm] Content fun assertHasNoExtraArguments (expectedArguments: Set < ArgumentLabel >) More info Asserts that the argument list only contains arguments with labels in expectedArguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content operator fun get (label: ArgumentLabel ): T More info Returns the argument associated with label label. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/#namedarguments","text":"[jvm] class NamedArguments T > : HasSourceLocation A list of labelled arguments.","title":"NamedArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/#constructors","text":"Name Summary NamedArguments [jvm] fun NamedArguments (sourceLocation: SourceLocation )An empty argument list.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/#functions","text":"Name Summary assertHasNoExtraArguments [jvm] Content fun assertHasNoExtraArguments (expectedArguments: Set < ArgumentLabel >) More info Asserts that the argument list only contains arguments with labels in expectedArguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean get [jvm] Content operator fun get (label: ArgumentLabel ): T More info Returns the argument associated with label label. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/#properties","text":"Name Summary sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/-named-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / NamedArguments / NamedArguments NamedArguments \u00b6 [jvm] Content fun NamedArguments (sourceLocation: SourceLocation ) More info An empty argument list.","title":" named arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/-named-arguments/#namedarguments","text":"[jvm] Content fun NamedArguments (sourceLocation: SourceLocation ) More info An empty argument list.","title":"NamedArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/assert-has-no-extra-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / NamedArguments / assertHasNoExtraArguments assertHasNoExtraArguments \u00b6 [jvm] Content fun assertHasNoExtraArguments (expectedArguments: Set < ArgumentLabel >) More info Asserts that the argument list only contains arguments with labels in expectedArguments. Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.UnexpectedArgumentError if the argument list contains extra arguments.","title":"Assert has no extra arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/assert-has-no-extra-arguments/#asserthasnoextraarguments","text":"[jvm] Content fun assertHasNoExtraArguments (expectedArguments: Set < ArgumentLabel >) More info Asserts that the argument list only contains arguments with labels in expectedArguments.","title":"assertHasNoExtraArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/assert-has-no-extra-arguments/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.UnexpectedArgumentError if the argument list contains extra arguments.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/get/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / NamedArguments / get get \u00b6 [jvm] Content operator fun get (label: ArgumentLabel ): T More info Returns the argument associated with label label. Throws \u00b6 Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if there is no argument with label label.","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/get/#get","text":"[jvm] Content operator fun get (label: ArgumentLabel ): T More info Returns the argument associated with label label.","title":"get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/get/#throws","text":"Name Summary edu.cornell.cs.apl.viaduct.errors.UndefinedNameError if there is no argument with label label.","title":"Throws"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / NamedArguments / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / NamedArguments / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content @ JvmStatic () operator fun < T > invoke (arguments: List < Pair < ArgumentLabelNode , T >>, sourceLocation: SourceLocation ): NamedArguments < T > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content @ JvmStatic () operator fun < T > invoke (arguments: List < Pair < ArgumentLabelNode , T >>, sourceLocation: SourceLocation ): NamedArguments < T > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/-companion/invoke/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / NamedArguments / Companion / invoke invoke \u00b6 [jvm] Content @ JvmStatic () operator fun < T > invoke (arguments: List < Pair < ArgumentLabelNode , T >>, sourceLocation: SourceLocation ): NamedArguments < T >","title":"Invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-named-arguments/-companion/invoke/#invoke","text":"[jvm] Content @ JvmStatic () operator fun < T > invoke (arguments: List < Pair < ArgumentLabelNode , T >>, sourceLocation: SourceLocation ): NamedArguments < T >","title":"invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ObjectVariable ObjectVariable \u00b6 [jvm] data class ObjectVariable ( name : String ) : Variable A variable that binds an object. Constructors \u00b6 Name Summary ObjectVariable [jvm] fun ObjectVariable (name: String ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ObjectVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/#objectvariable","text":"[jvm] data class ObjectVariable ( name : String ) : Variable A variable that binds an object.","title":"ObjectVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/#constructors","text":"Name Summary ObjectVariable [jvm] fun ObjectVariable (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ObjectVariable equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/-object-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ObjectVariable / ObjectVariable ObjectVariable \u00b6 [jvm] Content fun ObjectVariable (name: String )","title":" object variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/-object-variable/#objectvariable","text":"[jvm] Content fun ObjectVariable (name: String )","title":"ObjectVariable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ObjectVariable / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ObjectVariable / copy copy \u00b6 [jvm] Content fun copy (name: String ): ObjectVariable","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/copy/#copy","text":"[jvm] Content fun copy (name: String ): ObjectVariable","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ObjectVariable / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ObjectVariable / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-object-variable/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Operator Operator \u00b6 [jvm] interface Operator A pure function from values to a value. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name PrefixOperator InfixOperator PostfixOperator ClosedOperator UnaryOperator BinaryOperator Extensions \u00b6 Name Summary arity [jvm] Content val Operator . arity : Int More info The number of arguments this operator takes. bindsTighterThan [jvm] Content fun Operator . bindsTighterThan (other: Operator ): Boolean More info Returns true when this operator has precedence higher than or equal to other.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/#operator","text":"[jvm] interface Operator A pure function from values to a value.","title":"Operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/#inheritors","text":"Name PrefixOperator InfixOperator PostfixOperator ClosedOperator UnaryOperator BinaryOperator","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/#extensions","text":"Name Summary arity [jvm] Content val Operator . arity : Int More info The number of arguments this operator takes. bindsTighterThan [jvm] Content fun Operator . bindsTighterThan (other: Operator ): Boolean More info Returns true when this operator has precedence higher than or equal to other.","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/alternative-types/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Operator / alternativeTypes alternativeTypes \u00b6 [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against.","title":"Alternative types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/alternative-types/#alternativetypes","text":"[jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against.","title":"alternativeTypes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Operator / apply apply \u00b6 [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/apply/#apply","text":"[jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Operator / asDocument asDocument \u00b6 [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments.","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/as-document/#asdocument","text":"[jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments.","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Operator / associativity associativity \u00b6 [jvm] Content abstract val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence. See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/associativity/#associativity","text":"[jvm] Content abstract val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence.","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/associativity/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Operator / precedence precedence \u00b6 [jvm] Content abstract val precedence : Precedence More info Determines the order of this operator with respect to (a subset of) other operators. Operators with higher precedence bind tighter than operators with lower precedence (for example, multiplication has higher precedence than addition). See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/precedence/#precedence","text":"[jvm] Content abstract val precedence : Precedence More info Determines the order of this operator with respect to (a subset of) other operators. Operators with higher precedence bind tighter than operators with lower precedence (for example, multiplication has higher precedence than addition).","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/precedence/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Precedence","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Operator / type type \u00b6 [jvm] Content abstract val type : FunctionType More info The type of this operator.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-operator/type/#type","text":"[jvm] Content abstract val type : FunctionType More info The type of this operator.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order Order \u00b6 [jvm] enum Order : Enum < Order > The result of comparing two Precedence s. Entries \u00b6 Name Summary LOWER [jvm] LOWER () HIGHER [jvm] HIGHER () UNDETERMINED [jvm] UNDETERMINED () Functions \u00b6 Name Summary compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/#order","text":"[jvm] enum Order : Enum < Order > The result of comparing two Precedence s.","title":"Order"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/#entries","text":"Name Summary LOWER [jvm] LOWER () HIGHER [jvm] HIGHER () UNDETERMINED [jvm] UNDETERMINED ()","title":"Entries"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/#functions","text":"Name Summary compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / HIGHER HIGHER \u00b6 [jvm] HIGHER () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/#higher","text":"[jvm] HIGHER ()","title":"HIGHER"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / HIGHER / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / HIGHER / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / LOWER LOWER \u00b6 [jvm] LOWER () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/#lower","text":"[jvm] LOWER ()","title":"LOWER"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / LOWER / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / LOWER / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / UNDETERMINED UNDETERMINED \u00b6 [jvm] UNDETERMINED () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/#undetermined","text":"[jvm] UNDETERMINED ()","title":"UNDETERMINED"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: Order ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < Order > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / UNDETERMINED / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Order / UNDETERMINED / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort OutputPort \u00b6 [jvm] data class OutputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort Functions \u00b6 Name Summary asProjection [jvm] Content open fun asProjection (): ProtocolProjection component1 [jvm] Content operator fun component1 (): Protocol component2 [jvm] Content operator fun component2 (): Host component3 [jvm] Content operator fun component3 (): PortId copy [jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): OutputPort equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary host [jvm] open override val host : Host id [jvm] open override val id : PortId protocol [jvm] open override val protocol : Protocol","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/#outputport","text":"[jvm] data class OutputPort ( protocol : Protocol , host : Host , id : PortId ) : ProtocolPort","title":"OutputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/#functions","text":"Name Summary asProjection [jvm] Content open fun asProjection (): ProtocolProjection component1 [jvm] Content operator fun component1 (): Protocol component2 [jvm] Content operator fun component2 (): Host component3 [jvm] Content operator fun component3 (): PortId copy [jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): OutputPort equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/#properties","text":"Name Summary host [jvm] open override val host : Host id [jvm] open override val id : PortId protocol [jvm] open override val protocol : Protocol","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/-output-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / OutputPort OutputPort \u00b6 [jvm] Content fun OutputPort (protocol: Protocol , host: Host , id: PortId )","title":" output port"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/-output-port/#outputport","text":"[jvm] Content fun OutputPort (protocol: Protocol , host: Host , id: PortId )","title":"OutputPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Protocol","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/component1/#component1","text":"[jvm] Content operator fun component1 (): Protocol","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Host","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/component2/#component2","text":"[jvm] Content operator fun component2 (): Host","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/component3/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / component3 component3 \u00b6 [jvm] Content operator fun component3 (): PortId","title":"Component3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/component3/#component3","text":"[jvm] Content operator fun component3 (): PortId","title":"component3"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / copy copy \u00b6 [jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): OutputPort","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/copy/#copy","text":"[jvm] Content fun copy (protocol: Protocol , host: Host , id: PortId ): OutputPort","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / host host \u00b6 [jvm] Content open override val host : Host","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/host/#host","text":"[jvm] Content open override val host : Host","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/id/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / id id \u00b6 [jvm] Content open override val id : PortId","title":"Id"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/id/#id","text":"[jvm] Content open override val id : PortId","title":"id"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / OutputPort / protocol protocol \u00b6 [jvm] Content open override val protocol : Protocol","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-output-port/protocol/#protocol","text":"[jvm] Content open override val protocol : Protocol","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection ParameterDirection \u00b6 [jvm] enum ParameterDirection : Enum < ParameterDirection > , PrettyPrintable Specifies whether a parameter is an IN parameter (can be used) or an OUT (has to be assigned in the function body). Entries \u00b6 Name Summary PARAM_IN [jvm] PARAM_IN () PARAM_OUT [jvm] PARAM_OUT () Functions \u00b6 Name Summary compareTo [jvm] Content operator override fun compareTo (other: ParameterDirection ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ParameterDirection > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/#parameterdirection","text":"[jvm] enum ParameterDirection : Enum < ParameterDirection > , PrettyPrintable Specifies whether a parameter is an IN parameter (can be used) or an OUT (has to be assigned in the function body).","title":"ParameterDirection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/#entries","text":"Name Summary PARAM_IN [jvm] PARAM_IN () PARAM_OUT [jvm] PARAM_OUT ()","title":"Entries"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/#functions","text":"Name Summary compareTo [jvm] Content operator override fun compareTo (other: ParameterDirection ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ParameterDirection > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_IN PARAM_IN \u00b6 [jvm] PARAM_IN () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ParameterDirection ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ParameterDirection > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/#param_in","text":"[jvm] PARAM_IN ()","title":"PARAM_IN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ParameterDirection ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ParameterDirection > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_IN / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_IN / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_IN / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-i-n/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_OUT PARAM_OUT \u00b6 [jvm] PARAM_OUT () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ParameterDirection ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ParameterDirection > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/#param_out","text":"[jvm] PARAM_OUT ()","title":"PARAM_OUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ParameterDirection ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ParameterDirection > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_OUT / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_OUT / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/ordinal/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ParameterDirection / PARAM_OUT / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-parameter-direction/-p-a-r-a-m_-o-u-t/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-postfix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / PostfixOperator PostfixOperator \u00b6 [jvm] interface PostfixOperator : Operator An operator that is written after its operands. A postfix operator has an operand that comes before all its named parts. For example, taking the factorial (x!) is a postfix operator. Postfix operators are left associative. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-postfix-operator/#postfixoperator","text":"[jvm] interface PostfixOperator : Operator An operator that is written after its operands. A postfix operator has an operand that comes before all its named parts. For example, taking the factorial (x!) is a postfix operator. Postfix operators are left associative.","title":"PostfixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-postfix-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-postfix-operator/#properties","text":"Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-postfix-operator/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / PostfixOperator / associativity associativity \u00b6 [jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence. See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-postfix-operator/associativity/#associativity","text":"[jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence.","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-postfix-operator/associativity/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Precedence Precedence \u00b6 [jvm] interface Precedence Determines the order of operations in the absence of parentheses. For example, multiplication (conventionally) has higher precedence than addition, so x + y * z is parsed as x + (y * z). Functions \u00b6 Name Summary compareTo [jvm] Content open fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name HighestPrecedence LowestPrecedence LogicalOperatorPrecedence ComparisonOperatorPrecedence AdditiveOperatorPrecedence MultiplicativeOperatorPrecedence","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-precedence/#precedence","text":"[jvm] interface Precedence Determines the order of operations in the absence of parentheses. For example, multiplication (conventionally) has higher precedence than addition, so x + y * z is parsed as x + (y * z).","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-precedence/#functions","text":"Name Summary compareTo [jvm] Content open fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-precedence/#inheritors","text":"Name HighestPrecedence LowestPrecedence LogicalOperatorPrecedence ComparisonOperatorPrecedence AdditiveOperatorPrecedence MultiplicativeOperatorPrecedence","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-precedence/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Precedence / compareTo compareTo \u00b6 [jvm] Content open fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-precedence/compare-to/#compareto","text":"[jvm] Content open fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / PrefixOperator PrefixOperator \u00b6 [jvm] interface PrefixOperator : Operator An operator that is written before its operands. A prefix operator has an operand that comes after all its named parts. For example, negation (-x) and if expressions (if b then x else y) are prefix operators. Prefix operators are right associative. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name UnaryPrefixOperator BinaryPrefixOperator","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/#prefixoperator","text":"[jvm] interface PrefixOperator : Operator An operator that is written before its operands. A prefix operator has an operand that comes after all its named parts. For example, negation (-x) and if expressions (if b then x else y) are prefix operators. Prefix operators are right associative.","title":"PrefixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/#properties","text":"Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/#inheritors","text":"Name UnaryPrefixOperator BinaryPrefixOperator","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / PrefixOperator / associativity associativity \u00b6 [jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence. See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/associativity/#associativity","text":"[jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence.","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-prefix-operator/associativity/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol Protocol \u00b6 [jvm] abstract class Protocol : Name , Comparable < Protocol > An abstract location where computations can be placed. A protocol simultaneously names a location and determines the (cryptographic) mechanism for executing the code placed at that location. A protocol is a ProtocolName applied to a sequence of named arguments. The name and the arguments uniquely determine the protocol (see Protocol.equals ). Constructors \u00b6 Name Summary Protocol [jvm] fun Protocol () Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary authority [jvm] Content abstract fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] abstract val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] abstract val protocolName : ProtocolName The name of the (cryptographic) protocol. Inheritors \u00b6 Name ABY Adversary Commitment HostInterface Ideal Plaintext Synchronization ZKP","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/#protocol","text":"[jvm] abstract class Protocol : Name , Comparable < Protocol > An abstract location where computations can be placed. A protocol simultaneously names a location and determines the (cryptographic) mechanism for executing the code placed at that location. A protocol is a ProtocolName applied to a sequence of named arguments. The name and the arguments uniquely determine the protocol (see Protocol.equals ).","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/#constructors","text":"Name Summary Protocol [jvm] fun Protocol ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/#functions","text":"Name Summary authority [jvm] Content abstract fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts. compareTo [jvm] Content operator override fun compareTo (other: Protocol ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/#properties","text":"Name Summary arguments [jvm] abstract val arguments : Map < String , Value >The named arguments applied to protocolName . asDocument [jvm] open override val asDocument : Document hosts [jvm] val hosts : HostSetValue Hosts involved in this protocol. internalInputPorts [jvm] val internalInputPorts : Map < Host , InputPort > internalOutputPorts [jvm] val internalOutputPorts : Map < Host , OutputPort > name [jvm] override val name : String The given name. nameCategory [jvm] override val nameCategory : String Class of things this object names. protocolName [jvm] abstract val protocolName : ProtocolName The name of the (cryptographic) protocol.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/#inheritors","text":"Name ABY Adversary Commitment HostInterface Ideal Plaintext Synchronization ZKP","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / Protocol Protocol \u00b6 [jvm] Content fun Protocol ()","title":" protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-protocol/#protocol","text":"[jvm] Content fun Protocol ()","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / arguments arguments \u00b6 [jvm] Content abstract val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/arguments/#arguments","text":"[jvm] Content abstract val arguments : Map < String , Value > More info The named arguments applied to protocolName .","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / authority authority \u00b6 [jvm] Content abstract fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/authority/#authority","text":"[jvm] Content abstract fun authority (hostTrustConfiguration: HostTrustConfiguration ): Label More info Returns the authority label of this protocol given the authority labels of the participating hosts.","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / compareTo compareTo \u00b6 [jvm] Content operator override fun compareTo (other: Protocol ): Int","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/compare-to/#compareto","text":"[jvm] Content operator override fun compareTo (other: Protocol ): Int","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / equals equals \u00b6 [jvm] Content operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/equals/#equals","text":"[jvm] Content operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/hash-code/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / hashCode hashCode \u00b6 [jvm] Content override fun hashCode (): Int","title":"Hash code"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/hash-code/#hashcode","text":"[jvm] Content override fun hashCode (): Int","title":"hashCode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / hosts hosts \u00b6 [jvm] Content val hosts : HostSetValue More info Hosts involved in this protocol.","title":"Hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/hosts/#hosts","text":"[jvm] Content val hosts : HostSetValue More info Hosts involved in this protocol.","title":"hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/internal-input-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / internalInputPorts internalInputPorts \u00b6 [jvm] Content val internalInputPorts : Map < Host , InputPort >","title":"Internal input ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/internal-input-ports/#internalinputports","text":"[jvm] Content val internalInputPorts : Map < Host , InputPort >","title":"internalInputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/internal-output-ports/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / internalOutputPorts internalOutputPorts \u00b6 [jvm] Content val internalOutputPorts : Map < Host , OutputPort >","title":"Internal output ports"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/internal-output-ports/#internaloutputports","text":"[jvm] Content val internalOutputPorts : Map < Host , OutputPort >","title":"internalOutputPorts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / nameCategory nameCategory \u00b6 [jvm] Content override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/name-category/#namecategory","text":"[jvm] Content override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / name name \u00b6 [jvm] Content override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/name/#name","text":"[jvm] Content override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / protocolName protocolName \u00b6 [jvm] Content abstract val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"Protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/protocol-name/#protocolname","text":"[jvm] Content abstract val protocolName : ProtocolName More info The name of the (cryptographic) protocol.","title":"protocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary INTERNAL_INPUT [jvm] const val INTERNAL_INPUT : String INTERNAL_OUTPUT [jvm] const val INTERNAL_OUTPUT : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/#properties","text":"Name Summary INTERNAL_INPUT [jvm] const val INTERNAL_INPUT : String INTERNAL_OUTPUT [jvm] const val INTERNAL_OUTPUT : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/-i-n-t-e-r-n-a-l_-i-n-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / Companion / INTERNAL_INPUT INTERNAL_INPUT \u00b6 [jvm] Content const val INTERNAL_INPUT : String","title":" i n t e r n a l  i n p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/-i-n-t-e-r-n-a-l_-i-n-p-u-t/#internal_input","text":"[jvm] Content const val INTERNAL_INPUT : String","title":"INTERNAL_INPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/-i-n-t-e-r-n-a-l_-o-u-t-p-u-t/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Protocol / Companion / INTERNAL_OUTPUT INTERNAL_OUTPUT \u00b6 [jvm] Content const val INTERNAL_OUTPUT : String","title":" i n t e r n a l  o u t p u t"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol/-companion/-i-n-t-e-r-n-a-l_-o-u-t-p-u-t/#internal_output","text":"[jvm] Content const val INTERNAL_OUTPUT : String","title":"INTERNAL_OUTPUT"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName ProtocolName \u00b6 [jvm] data class ProtocolName ( name : String ) : Name , Comparable < ProtocolName > The name of a cryptographic protocol. A Protocol is (essentially) a ProtocolName applied to arguments. Constructors \u00b6 Name Summary ProtocolName [jvm] fun ProtocolName (name: String ) Functions \u00b6 Name Summary compareTo [jvm] Content open operator override fun compareTo (other: ProtocolName ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ProtocolName equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/#protocolname","text":"[jvm] data class ProtocolName ( name : String ) : Name , Comparable < ProtocolName > The name of a cryptographic protocol. A Protocol is (essentially) a ProtocolName applied to arguments.","title":"ProtocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/#constructors","text":"Name Summary ProtocolName [jvm] fun ProtocolName (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/#functions","text":"Name Summary compareTo [jvm] Content open operator override fun compareTo (other: ProtocolName ): Int component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ProtocolName equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/-protocol-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName / ProtocolName ProtocolName \u00b6 [jvm] Content fun ProtocolName (name: String )","title":" protocol name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/-protocol-name/#protocolname","text":"[jvm] Content fun ProtocolName (name: String )","title":"ProtocolName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName / compareTo compareTo \u00b6 [jvm] Content open operator override fun compareTo (other: ProtocolName ): Int","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/compare-to/#compareto","text":"[jvm] Content open operator override fun compareTo (other: ProtocolName ): Int","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName / copy copy \u00b6 [jvm] Content fun copy (name: String ): ProtocolName","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/copy/#copy","text":"[jvm] Content fun copy (name: String ): ProtocolName","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolName / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolNameStyle ProtocolNameStyle \u00b6 [jvm] object ProtocolNameStyle : Style The display style of ProtocolName s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name-style/#protocolnamestyle","text":"[jvm] object ProtocolNameStyle : Style The display style of ProtocolName s.","title":"ProtocolNameStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-name-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolPort ProtocolPort \u00b6 [jvm] interface ProtocolPort Functions \u00b6 Name Summary asProjection [jvm] Content open fun asProjection (): ProtocolProjection equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary host [jvm] abstract val host : Host id [jvm] abstract val id : PortId protocol [jvm] abstract val protocol : Protocol Inheritors \u00b6 Name InputPort OutputPort","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/#protocolport","text":"[jvm] interface ProtocolPort","title":"ProtocolPort"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/#functions","text":"Name Summary asProjection [jvm] Content open fun asProjection (): ProtocolProjection equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/#properties","text":"Name Summary host [jvm] abstract val host : Host id [jvm] abstract val id : PortId protocol [jvm] abstract val protocol : Protocol","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/#inheritors","text":"Name InputPort OutputPort","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/as-projection/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolPort / asProjection asProjection \u00b6 [jvm] Content open fun asProjection (): ProtocolProjection","title":"As projection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/as-projection/#asprojection","text":"[jvm] Content open fun asProjection (): ProtocolProjection","title":"asProjection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolPort / host host \u00b6 [jvm] Content abstract val host : Host","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/host/#host","text":"[jvm] Content abstract val host : Host","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/id/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolPort / id id \u00b6 [jvm] Content abstract val id : PortId","title":"Id"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/id/#id","text":"[jvm] Content abstract val id : PortId","title":"id"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolPort / protocol protocol \u00b6 [jvm] Content abstract val protocol : Protocol","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-port/protocol/#protocol","text":"[jvm] Content abstract val protocol : Protocol","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection ProtocolProjection \u00b6 [jvm] data class ProtocolProjection ( protocol : Protocol , host : Host ) : Name , Comparable < ProtocolProjection > Functions \u00b6 Name Summary compareTo [jvm] Content open operator override fun compareTo (other: ProtocolProjection ): Int component1 [jvm] Content operator fun component1 (): Protocol component2 [jvm] Content operator fun component2 (): Host copy [jvm] Content fun copy (protocol: Protocol , host: Host ): ProtocolProjection equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document host [jvm] val host : Host name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names. protocol [jvm] val protocol : Protocol","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/#protocolprojection","text":"[jvm] data class ProtocolProjection ( protocol : Protocol , host : Host ) : Name , Comparable < ProtocolProjection >","title":"ProtocolProjection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/#functions","text":"Name Summary compareTo [jvm] Content open operator override fun compareTo (other: ProtocolProjection ): Int component1 [jvm] Content operator fun component1 (): Protocol component2 [jvm] Content operator fun component2 (): Host copy [jvm] Content fun copy (protocol: Protocol , host: Host ): ProtocolProjection equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document host [jvm] val host : Host name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names. protocol [jvm] val protocol : Protocol","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/-protocol-projection/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / ProtocolProjection ProtocolProjection \u00b6 [jvm] Content fun ProtocolProjection (protocol: Protocol , host: Host )","title":" protocol projection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/-protocol-projection/#protocolprojection","text":"[jvm] Content fun ProtocolProjection (protocol: Protocol , host: Host )","title":"ProtocolProjection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / compareTo compareTo \u00b6 [jvm] Content open operator override fun compareTo (other: ProtocolProjection ): Int","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/compare-to/#compareto","text":"[jvm] Content open operator override fun compareTo (other: ProtocolProjection ): Int","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Protocol","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/component1/#component1","text":"[jvm] Content operator fun component1 (): Protocol","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/component2/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Host","title":"Component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/component2/#component2","text":"[jvm] Content operator fun component2 (): Host","title":"component2"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / copy copy \u00b6 [jvm] Content fun copy (protocol: Protocol , host: Host ): ProtocolProjection","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/copy/#copy","text":"[jvm] Content fun copy (protocol: Protocol , host: Host ): ProtocolProjection","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / host host \u00b6 [jvm] Content val host : Host","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/host/#host","text":"[jvm] Content val host : Host","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / protocol protocol \u00b6 [jvm] Content val protocol : Protocol","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/protocol/#protocol","text":"[jvm] Content val protocol : Protocol","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / ProtocolProjection / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-protocol-projection/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / SpecializedProtocol SpecializedProtocol \u00b6 [jvm] class SpecializedProtocol ( protocol : Protocol , hostTrustConfiguration : HostTrustConfiguration ) A Protocol specialized to a particular HostTrustConfiguration . Caches authority for efficient access. Constructors \u00b6 Name Summary SpecializedProtocol [jvm] fun SpecializedProtocol (protocol: Protocol , hostTrustConfiguration: HostTrustConfiguration ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary authority [jvm] val authority : Label protocol [jvm] val protocol : Protocol","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/#specializedprotocol","text":"[jvm] class SpecializedProtocol ( protocol : Protocol , hostTrustConfiguration : HostTrustConfiguration ) A Protocol specialized to a particular HostTrustConfiguration . Caches authority for efficient access.","title":"SpecializedProtocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/#constructors","text":"Name Summary SpecializedProtocol [jvm] fun SpecializedProtocol (protocol: Protocol , hostTrustConfiguration: HostTrustConfiguration )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/#properties","text":"Name Summary authority [jvm] val authority : Label protocol [jvm] val protocol : Protocol","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/-specialized-protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / SpecializedProtocol / SpecializedProtocol SpecializedProtocol \u00b6 [jvm] Content fun SpecializedProtocol (protocol: Protocol , hostTrustConfiguration: HostTrustConfiguration )","title":" specialized protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/-specialized-protocol/#specializedprotocol","text":"[jvm] Content fun SpecializedProtocol (protocol: Protocol , hostTrustConfiguration: HostTrustConfiguration )","title":"SpecializedProtocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / SpecializedProtocol / authority authority \u00b6 [jvm] Content val authority : Label","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/authority/#authority","text":"[jvm] Content val authority : Label","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / SpecializedProtocol / protocol protocol \u00b6 [jvm] Content val protocol : Protocol","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-specialized-protocol/protocol/#protocol","text":"[jvm] Content val protocol : Protocol","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Temporary Temporary \u00b6 [jvm] data class Temporary ( name : String ) : Variable A variable that binds base values. Temporaries are generated internally to name expression results. Constructors \u00b6 Name Summary Temporary [jvm] fun Temporary (name: String ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): Temporary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/#temporary","text":"[jvm] data class Temporary ( name : String ) : Variable A variable that binds base values. Temporaries are generated internally to name expression results.","title":"Temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/#constructors","text":"Name Summary Temporary [jvm] fun Temporary (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): Temporary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/-temporary/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Temporary / Temporary Temporary \u00b6 [jvm] Content fun Temporary (name: String )","title":" temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/-temporary/#temporary","text":"[jvm] Content fun Temporary (name: String )","title":"Temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Temporary / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Temporary / copy copy \u00b6 [jvm] Content fun copy (name: String ): Temporary","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/copy/#copy","text":"[jvm] Content fun copy (name: String ): Temporary","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Temporary / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Temporary / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-temporary/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / UnaryOperator UnaryOperator \u00b6 [jvm] interface UnaryOperator : Operator An operator that takes a single argument. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name UnaryPrefixOperator","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/#unaryoperator","text":"[jvm] interface UnaryOperator : Operator An operator that takes a single argument.","title":"UnaryOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content abstract fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/#inheritors","text":"Name UnaryPrefixOperator","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / UnaryOperator / apply apply \u00b6 [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/apply/#apply","text":"[jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / UnaryOperator / asDocument asDocument \u00b6 [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content abstract fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument.","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-unary-operator/as-document/#asdocument","text":"[jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content abstract fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument.","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Variable Variable \u00b6 [jvm] sealed class Variable : Name A variable is a name that stands for a value or an object instance. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] abstract val nameCategory : String Class of things this object names. Inheritors \u00b6 Name Temporary ObjectVariable","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable/#variable","text":"[jvm] sealed class Variable : Name A variable is a name that stands for a value or an object instance.","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] abstract val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable/#inheritors","text":"Name Temporary ObjectVariable","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / Variable / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / VariableStyle VariableStyle \u00b6 [jvm] object VariableStyle : Style The display style of Variable s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable-style/#variablestyle","text":"[jvm] object VariableStyle : Style The display style of Variable s.","title":"VariableStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable-style/foreground-color/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax / VariableStyle / foregroundColor foregroundColor \u00b6 [jvm] Content open override val foregroundColor : AnsiColor","title":"Foreground color"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax/-variable-style/foreground-color/#foregroundcolor","text":"[jvm] Content open override val foregroundColor : AnsiColor","title":"foregroundColor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes Package edu.cornell.cs.apl.viaduct.syntax.datatypes \u00b6 Types \u00b6 Name Summary ClassName [jvm] Content data class ClassName ( name : String ) : Name More info The name of a primitive or user-defined class. ClassNameStyle [jvm] Content object ClassNameStyle : Style More info The display style of ClassName s. Get [jvm] Content object Get : QueryName More info Returns the value stored at a given index in a container. MethodName [jvm] Content interface MethodName : Name More info An object method. MethodNameStyle [jvm] Content object MethodNameStyle : Style More info The display style of MethodName s. Modify [jvm] Content data class Modify ( operator : BinaryOperator ) : UpdateName More info Applies a binary operator to the current value and the given argument, and sets the stored value to the result. QueryName [jvm] Content interface QueryName : MethodName More info A read-only method that returns information about the object without modifying it. Set [jvm] Content object Set : UpdateName More info Replaces the value stored at a given index in a container with a new value. UpdateName [jvm] Content interface UpdateName : MethodName More info A write-only methods that modifies an object but returns no result. Properties \u00b6 Name Summary ImmutableCell [jvm] val ImmutableCell : ClassName A class that stores a single unmodifiable value. MutableCell [jvm] val MutableCell : ClassName A class that stores a single modifiable value. Vector [jvm] val Vector : ClassName A class that stores a list of mutable cells.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/#package-educornellcsaplviaductsyntaxdatatypes","text":"","title":"Package edu.cornell.cs.apl.viaduct.syntax.datatypes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/#types","text":"Name Summary ClassName [jvm] Content data class ClassName ( name : String ) : Name More info The name of a primitive or user-defined class. ClassNameStyle [jvm] Content object ClassNameStyle : Style More info The display style of ClassName s. Get [jvm] Content object Get : QueryName More info Returns the value stored at a given index in a container. MethodName [jvm] Content interface MethodName : Name More info An object method. MethodNameStyle [jvm] Content object MethodNameStyle : Style More info The display style of MethodName s. Modify [jvm] Content data class Modify ( operator : BinaryOperator ) : UpdateName More info Applies a binary operator to the current value and the given argument, and sets the stored value to the result. QueryName [jvm] Content interface QueryName : MethodName More info A read-only method that returns information about the object without modifying it. Set [jvm] Content object Set : UpdateName More info Replaces the value stored at a given index in a container with a new value. UpdateName [jvm] Content interface UpdateName : MethodName More info A write-only methods that modifies an object but returns no result.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/#properties","text":"Name Summary ImmutableCell [jvm] val ImmutableCell : ClassName A class that stores a single unmodifiable value. MutableCell [jvm] val MutableCell : ClassName A class that stores a single modifiable value. Vector [jvm] val Vector : ClassName A class that stores a list of mutable cells.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-immutable-cell/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ImmutableCell ImmutableCell \u00b6 [jvm] Content val ImmutableCell : ClassName More info A class that stores a single unmodifiable value.","title":" immutable cell"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-immutable-cell/#immutablecell","text":"[jvm] Content val ImmutableCell : ClassName More info A class that stores a single unmodifiable value.","title":"ImmutableCell"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-mutable-cell/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / MutableCell MutableCell \u00b6 [jvm] Content val MutableCell : ClassName More info A class that stores a single modifiable value.","title":" mutable cell"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-mutable-cell/#mutablecell","text":"[jvm] Content val MutableCell : ClassName More info A class that stores a single modifiable value.","title":"MutableCell"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-vector/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Vector Vector \u00b6 [jvm] Content val Vector : ClassName More info A class that stores a list of mutable cells.","title":" vector"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-vector/#vector","text":"[jvm] Content val Vector : ClassName More info A class that stores a list of mutable cells.","title":"Vector"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassName ClassName \u00b6 [jvm] data class ClassName ( name : String ) : Name The name of a primitive or user-defined class. Constructors \u00b6 Name Summary ClassName [jvm] fun ClassName (name: String ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ClassName equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/#classname","text":"[jvm] data class ClassName ( name : String ) : Name The name of a primitive or user-defined class.","title":"ClassName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/#constructors","text":"Name Summary ClassName [jvm] fun ClassName (name: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (name: String ): ClassName equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/-class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassName / ClassName ClassName \u00b6 [jvm] Content fun ClassName (name: String )","title":" class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/-class-name/#classname","text":"[jvm] Content fun ClassName (name: String )","title":"ClassName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassName / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassName / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassName / copy copy \u00b6 [jvm] Content fun copy (name: String ): ClassName","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/copy/#copy","text":"[jvm] Content fun copy (name: String ): ClassName","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassName / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassName / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / ClassNameStyle ClassNameStyle \u00b6 [jvm] object ClassNameStyle : Style The display style of ClassName s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name-style/#classnamestyle","text":"[jvm] object ClassNameStyle : Style The display style of ClassName s.","title":"ClassNameStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-class-name-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-get/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Get Get \u00b6 [jvm] object Get : QueryName Returns the value stored at a given index in a container. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-get/#get","text":"[jvm] object Get : QueryName Returns the value stored at a given index in a container.","title":"Get"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-get/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-get/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-get/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Get / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-get/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / MethodName MethodName \u00b6 [jvm] interface MethodName : Name An object method. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names. Inheritors \u00b6 Name QueryName UpdateName","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/#methodname","text":"[jvm] interface MethodName : Name An object method.","title":"MethodName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/#inheritors","text":"Name QueryName UpdateName","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / MethodName / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / MethodName / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / MethodNameStyle MethodNameStyle \u00b6 [jvm] object MethodNameStyle : Style The display style of MethodName s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name-style/#methodnamestyle","text":"[jvm] object MethodNameStyle : Style The display style of MethodName s.","title":"MethodNameStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name-style/foreground-color/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / MethodNameStyle / foregroundColor foregroundColor \u00b6 [jvm] Content open override val foregroundColor : AnsiColor","title":"Foreground color"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-method-name-style/foreground-color/#foregroundcolor","text":"[jvm] Content open override val foregroundColor : AnsiColor","title":"foregroundColor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Modify Modify \u00b6 [jvm] data class Modify ( operator : BinaryOperator ) : UpdateName Applies a binary operator to the current value and the given argument, and sets the stored value to the result. Constructors \u00b6 Name Summary Modify [jvm] fun Modify (operator: BinaryOperator ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): BinaryOperator copy [jvm] Content fun copy (operator: BinaryOperator ): Modify equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names. operator [jvm] val operator : BinaryOperator","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/#modify","text":"[jvm] data class Modify ( operator : BinaryOperator ) : UpdateName Applies a binary operator to the current value and the given argument, and sets the stored value to the result.","title":"Modify"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/#constructors","text":"Name Summary Modify [jvm] fun Modify (operator: BinaryOperator )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): BinaryOperator copy [jvm] Content fun copy (operator: BinaryOperator ): Modify equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names. operator [jvm] val operator : BinaryOperator","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/-modify/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Modify / Modify Modify \u00b6 [jvm] Content fun Modify (operator: BinaryOperator )","title":" modify"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/-modify/#modify","text":"[jvm] Content fun Modify (operator: BinaryOperator )","title":"Modify"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Modify / component1 component1 \u00b6 [jvm] Content operator fun component1 (): BinaryOperator","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/component1/#component1","text":"[jvm] Content operator fun component1 (): BinaryOperator","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Modify / copy copy \u00b6 [jvm] Content fun copy (operator: BinaryOperator ): Modify","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/copy/#copy","text":"[jvm] Content fun copy (operator: BinaryOperator ): Modify","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Modify / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Modify / operator operator \u00b6 [jvm] Content val operator : BinaryOperator","title":"Operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-modify/operator/#operator","text":"[jvm] Content val operator : BinaryOperator","title":"operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-query-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / QueryName QueryName \u00b6 [jvm] interface QueryName : MethodName A read-only method that returns information about the object without modifying it. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names. Inheritors \u00b6 Name Get","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-query-name/#queryname","text":"[jvm] interface QueryName : MethodName A read-only method that returns information about the object without modifying it.","title":"QueryName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-query-name/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-query-name/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-query-name/#inheritors","text":"Name Get","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-query-name/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / QueryName / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-query-name/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-set/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Set Set \u00b6 [jvm] object Set : UpdateName Replaces the value stored at a given index in a container with a new value. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-set/#set","text":"[jvm] object Set : UpdateName Replaces the value stored at a given index in a container with a new value.","title":"Set"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-set/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-set/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] open override val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-set/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / Set / name name \u00b6 [jvm] Content open override val name : String More info The given name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-set/name/#name","text":"[jvm] Content open override val name : String More info The given name.","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-update-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / UpdateName UpdateName \u00b6 [jvm] interface UpdateName : MethodName A write-only methods that modifies an object but returns no result. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names. Inheritors \u00b6 Name Set Modify","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-update-name/#updatename","text":"[jvm] interface UpdateName : MethodName A write-only methods that modifies an object but returns no result.","title":"UpdateName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-update-name/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-update-name/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] abstract val name : String The given name. nameCategory [jvm] open override val nameCategory : String Class of things this object names.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-update-name/#inheritors","text":"Name Set Modify","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-update-name/name-category/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.datatypes / UpdateName / nameCategory nameCategory \u00b6 [jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"Name category"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.datatypes/-update-name/name-category/#namecategory","text":"[jvm] Content open override val nameCategory : String More info Class of things this object names.","title":"nameCategory"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate Package edu.cornell.cs.apl.viaduct.syntax.intermediate \u00b6 [jvm] The abstract syntax of the internal language. Types \u00b6 Name Summary AssertionNode [jvm] Content class AssertionNode ( condition : AtomicExpressionNode , sourceLocation : SourceLocation ) : StatementNode More info Asserting that a condition is true, and failing otherwise. AtomicExpressionNode [jvm] Content sealed class AtomicExpressionNode : PureExpressionNode More info An expression that requires no computation to reduce to a value. BlockNode [jvm] Content class BlockNode : StatementNode , List < StatementNode > More info A sequence of statements. BreakNode [jvm] Content class BreakNode ( jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode More info Breaking out of a loop. CommunicationNode [jvm] Content interface CommunicationNode : HasSourceLocation , PrettyPrintable More info A node for sending or receiving messages. ControlNode [jvm] Content sealed class ControlNode : StatementNode More info A statement that affects control flow. DeclarationNode [jvm] Content class DeclarationNode ( name : ObjectVariableNode , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode , ObjectDeclaration More info Constructing a new object and binding it to a variable. DeclassificationNode [jvm] Content class DeclassificationNode ( expression : AtomicExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode More info Revealing the the result of an expression (reducing confidentiality). DowngradeNode [jvm] Content sealed class DowngradeNode : PureExpressionNode More info Reducing the confidentiality or increasing the integrity of the result of an expression. EndorsementNode [jvm] Content class EndorsementNode ( expression : AtomicExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode More info Trusting the result of an expression (increasing integrity). ExpressionArgumentNode [jvm] Content class ExpressionArgumentNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode ExpressionNode [jvm] Content sealed class ExpressionNode : Node More info A computation that produces a result. ExternalCommunicationNode [jvm] Content interface ExternalCommunicationNode : CommunicationNode More info Communication happening between a protocol and a host. FunctionArgumentNode [jvm] Content sealed class FunctionArgumentNode : Node FunctionCallNode [jvm] Content class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : ControlNode More info Function call. FunctionDeclarationNode [jvm] Content class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A declaration of a function that can be called by a process. FunctionInputArgumentNode [jvm] Content sealed class FunctionInputArgumentNode : FunctionArgumentNode FunctionOutputArgumentNode [jvm] Content sealed class FunctionOutputArgumentNode : FunctionArgumentNode HostDeclarationNode [jvm] Content class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info Declaration of a participant and their authority. IfNode [jvm] Content class IfNode ( guard : AtomicExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : ControlNode More info Executing statements conditionally. InfiniteLoopNode [jvm] Content class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode More info A loop that is executed until a break statement is encountered. InputNode [jvm] Content class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode , ExternalCommunicationNode More info An external input. InternalCommunicationNode [jvm] Content interface InternalCommunicationNode : CommunicationNode More info Communication happening between protocols. LetNode [jvm] Content class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode More info Binding the result of an expression to a new temporary variable. LiteralNode [jvm] Content class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode More info A literal constant. Node [jvm] Content abstract class Node : TreeNode< Node > , HasSourceLocation , PrettyPrintable More info A node in the intermediate language abstract syntax tree. ObjectDeclaration [jvm] Content interface ObjectDeclaration ObjectDeclarationArgumentNode [jvm] Content class ObjectDeclarationArgumentNode ( name : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode ObjectReferenceArgumentNode [jvm] Content class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode OperatorApplicationNode [jvm] Content class OperatorApplicationNode ( operator : Operator , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode More info An n-ary operator applied to n arguments. OutParameterArgumentNode [jvm] Content class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode OutParameterConstructorInitializerNode [jvm] Content class OutParameterConstructorInitializerNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : OutParameterInitializerNode OutParameterExpressionInitializerNode [jvm] Content class OutParameterExpressionInitializerNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : OutParameterInitializerNode OutParameterInitializationNode [jvm] Content class OutParameterInitializationNode ( name : ObjectVariableNode , initializer : OutParameterInitializerNode , sourceLocation : SourceLocation ) : SimpleStatementNode OutParameterInitializerNode [jvm] Content sealed class OutParameterInitializerNode : Node OutputNode [jvm] Content class OutputNode ( message : AtomicExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode , ExternalCommunicationNode More info An external output. ParameterNode [jvm] Content class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node , ObjectDeclaration More info A parameter to a function declaration. ProcessDeclarationNode [jvm] Content class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A process declaration associating a protocol with the code that process should run. ProgramNode [jvm] Content class ProgramNode : Node , List < TopLevelDeclarationNode > More info The intermediate level representation of a program. PureExpressionNode [jvm] Content sealed class PureExpressionNode : ExpressionNode QueryNode [jvm] Content class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode More info A query method applied to an object. ReadNode [jvm] Content class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode More info Reading the value stored in a temporary. ReceiveNode [jvm] Content class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode , InternalCommunicationNode More info Receiving a value from another protocol. SendNode [jvm] Content class SendNode ( message : AtomicExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode , InternalCommunicationNode More info Sending a value to another protocol. SimpleStatementNode [jvm] Content sealed class SimpleStatementNode : StatementNode More info A statement that is not a combination of other statements, and that does not affect control flow. StatementNode [jvm] Content sealed class StatementNode : Node More info A computation with side effects. TopLevelDeclarationNode [jvm] Content sealed class TopLevelDeclarationNode : Node More info A declaration at the top level of a file. UpdateNode [jvm] Content class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode More info An update method applied to an object. Functions \u00b6 Name Summary deepCopy [jvm] Content fun Node . deepCopy (): Node More info Like Node.copy , but recursively copies all descendant nodes also.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/#package-educornellcsaplviaductsyntaxintermediate","text":"[jvm] The abstract syntax of the internal language.","title":"Package edu.cornell.cs.apl.viaduct.syntax.intermediate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/#types","text":"Name Summary AssertionNode [jvm] Content class AssertionNode ( condition : AtomicExpressionNode , sourceLocation : SourceLocation ) : StatementNode More info Asserting that a condition is true, and failing otherwise. AtomicExpressionNode [jvm] Content sealed class AtomicExpressionNode : PureExpressionNode More info An expression that requires no computation to reduce to a value. BlockNode [jvm] Content class BlockNode : StatementNode , List < StatementNode > More info A sequence of statements. BreakNode [jvm] Content class BreakNode ( jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode More info Breaking out of a loop. CommunicationNode [jvm] Content interface CommunicationNode : HasSourceLocation , PrettyPrintable More info A node for sending or receiving messages. ControlNode [jvm] Content sealed class ControlNode : StatementNode More info A statement that affects control flow. DeclarationNode [jvm] Content class DeclarationNode ( name : ObjectVariableNode , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode , ObjectDeclaration More info Constructing a new object and binding it to a variable. DeclassificationNode [jvm] Content class DeclassificationNode ( expression : AtomicExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode More info Revealing the the result of an expression (reducing confidentiality). DowngradeNode [jvm] Content sealed class DowngradeNode : PureExpressionNode More info Reducing the confidentiality or increasing the integrity of the result of an expression. EndorsementNode [jvm] Content class EndorsementNode ( expression : AtomicExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode More info Trusting the result of an expression (increasing integrity). ExpressionArgumentNode [jvm] Content class ExpressionArgumentNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode ExpressionNode [jvm] Content sealed class ExpressionNode : Node More info A computation that produces a result. ExternalCommunicationNode [jvm] Content interface ExternalCommunicationNode : CommunicationNode More info Communication happening between a protocol and a host. FunctionArgumentNode [jvm] Content sealed class FunctionArgumentNode : Node FunctionCallNode [jvm] Content class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : ControlNode More info Function call. FunctionDeclarationNode [jvm] Content class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A declaration of a function that can be called by a process. FunctionInputArgumentNode [jvm] Content sealed class FunctionInputArgumentNode : FunctionArgumentNode FunctionOutputArgumentNode [jvm] Content sealed class FunctionOutputArgumentNode : FunctionArgumentNode HostDeclarationNode [jvm] Content class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info Declaration of a participant and their authority. IfNode [jvm] Content class IfNode ( guard : AtomicExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : ControlNode More info Executing statements conditionally. InfiniteLoopNode [jvm] Content class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode More info A loop that is executed until a break statement is encountered. InputNode [jvm] Content class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode , ExternalCommunicationNode More info An external input. InternalCommunicationNode [jvm] Content interface InternalCommunicationNode : CommunicationNode More info Communication happening between protocols. LetNode [jvm] Content class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode More info Binding the result of an expression to a new temporary variable. LiteralNode [jvm] Content class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode More info A literal constant. Node [jvm] Content abstract class Node : TreeNode< Node > , HasSourceLocation , PrettyPrintable More info A node in the intermediate language abstract syntax tree. ObjectDeclaration [jvm] Content interface ObjectDeclaration ObjectDeclarationArgumentNode [jvm] Content class ObjectDeclarationArgumentNode ( name : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode ObjectReferenceArgumentNode [jvm] Content class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode OperatorApplicationNode [jvm] Content class OperatorApplicationNode ( operator : Operator , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode More info An n-ary operator applied to n arguments. OutParameterArgumentNode [jvm] Content class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode OutParameterConstructorInitializerNode [jvm] Content class OutParameterConstructorInitializerNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : OutParameterInitializerNode OutParameterExpressionInitializerNode [jvm] Content class OutParameterExpressionInitializerNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : OutParameterInitializerNode OutParameterInitializationNode [jvm] Content class OutParameterInitializationNode ( name : ObjectVariableNode , initializer : OutParameterInitializerNode , sourceLocation : SourceLocation ) : SimpleStatementNode OutParameterInitializerNode [jvm] Content sealed class OutParameterInitializerNode : Node OutputNode [jvm] Content class OutputNode ( message : AtomicExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode , ExternalCommunicationNode More info An external output. ParameterNode [jvm] Content class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node , ObjectDeclaration More info A parameter to a function declaration. ProcessDeclarationNode [jvm] Content class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A process declaration associating a protocol with the code that process should run. ProgramNode [jvm] Content class ProgramNode : Node , List < TopLevelDeclarationNode > More info The intermediate level representation of a program. PureExpressionNode [jvm] Content sealed class PureExpressionNode : ExpressionNode QueryNode [jvm] Content class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode More info A query method applied to an object. ReadNode [jvm] Content class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode More info Reading the value stored in a temporary. ReceiveNode [jvm] Content class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode , InternalCommunicationNode More info Receiving a value from another protocol. SendNode [jvm] Content class SendNode ( message : AtomicExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode , InternalCommunicationNode More info Sending a value to another protocol. SimpleStatementNode [jvm] Content sealed class SimpleStatementNode : StatementNode More info A statement that is not a combination of other statements, and that does not affect control flow. StatementNode [jvm] Content sealed class StatementNode : Node More info A computation with side effects. TopLevelDeclarationNode [jvm] Content sealed class TopLevelDeclarationNode : Node More info A declaration at the top level of a file. UpdateNode [jvm] Content class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode More info An update method applied to an object.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/#functions","text":"Name Summary deepCopy [jvm] Content fun Node . deepCopy (): Node More info Like Node.copy , but recursively copies all descendant nodes also.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/deep-copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / deepCopy deepCopy \u00b6 [jvm] Content fun Node . deepCopy (): Node More info Like Node.copy , but recursively copies all descendant nodes also.","title":"Deep copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/deep-copy/#deepcopy","text":"[jvm] Content fun Node . deepCopy (): Node More info Like Node.copy , but recursively copies all descendant nodes also.","title":"deepCopy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AssertionNode AssertionNode \u00b6 [jvm] class AssertionNode ( condition : AtomicExpressionNode , sourceLocation : SourceLocation ) : StatementNode Asserting that a condition is true, and failing otherwise. Constructors \u00b6 Name Summary AssertionNode [jvm] fun AssertionNode (condition: AtomicExpressionNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): AssertionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): AssertionNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > condition [jvm] val condition : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/#assertionnode","text":"[jvm] class AssertionNode ( condition : AtomicExpressionNode , sourceLocation : SourceLocation ) : StatementNode Asserting that a condition is true, and failing otherwise.","title":"AssertionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/#constructors","text":"Name Summary AssertionNode [jvm] fun AssertionNode (condition: AtomicExpressionNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): AssertionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): AssertionNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > condition [jvm] val condition : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/-assertion-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AssertionNode / AssertionNode AssertionNode \u00b6 [jvm] Content fun AssertionNode (condition: AtomicExpressionNode , sourceLocation: SourceLocation )","title":" assertion node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/-assertion-node/#assertionnode","text":"[jvm] Content fun AssertionNode (condition: AtomicExpressionNode , sourceLocation: SourceLocation )","title":"AssertionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AssertionNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/condition/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AssertionNode / condition condition \u00b6 [jvm] Content val condition : AtomicExpressionNode","title":"Condition"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/condition/#condition","text":"[jvm] Content val condition : AtomicExpressionNode","title":"condition"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AssertionNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): AssertionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): AssertionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AssertionNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AssertionNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): AssertionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-assertion-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): AssertionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AtomicExpressionNode AtomicExpressionNode \u00b6 [jvm] sealed class AtomicExpressionNode : PureExpressionNode An expression that requires no computation to reduce to a value. Functions \u00b6 Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): AtomicExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): AtomicExpressionNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < Nothing > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name LiteralNode ReadNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/#atomicexpressionnode","text":"[jvm] sealed class AtomicExpressionNode : PureExpressionNode An expression that requires no computation to reduce to a value.","title":"AtomicExpressionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/#functions","text":"Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): AtomicExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): AtomicExpressionNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < Nothing > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/#inheritors","text":"Name LiteralNode ReadNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AtomicExpressionNode / children children \u00b6 [jvm] Content override val children : Iterable < Nothing >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/children/#children","text":"[jvm] Content override val children : Iterable < Nothing >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AtomicExpressionNode / copy copy \u00b6 [jvm] Content abstract override fun copy (children: List < Node >): AtomicExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/copy/#copy","text":"[jvm] Content abstract override fun copy (children: List < Node >): AtomicExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / AtomicExpressionNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content abstract override fun toSurfaceNode (): AtomicExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-atomic-expression-node/to-surface-node/#tosurfacenode","text":"[jvm] Content abstract override fun toSurfaceNode (): AtomicExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode BlockNode \u00b6 [jvm] class BlockNode : StatementNode , List < StatementNode > A sequence of statements. Constructors \u00b6 Name Summary BlockNode [jvm] fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) BlockNode [jvm] fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary contains [jvm] Content open operator override fun contains (element: StatementNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < StatementNode >): Boolean copy [jvm] Content open override fun copy (children: List < Node >): BlockNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer StatementNode >) get [jvm] Content open operator override fun get (index: Int ): StatementNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: StatementNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < StatementNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: StatementNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < StatementNode > open override fun listIterator (index: Int ): ListIterator < StatementNode > parallelStream [jvm] Content open fun parallelStream (): Stream < StatementNode > printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document spliterator [jvm] Content open override fun spliterator (): Spliterator < StatementNode > stream [jvm] Content open fun stream (): Stream < StatementNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < StatementNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): BlockNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < StatementNode > size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation statements [jvm] val statements : PersistentList< StatementNode >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/#blocknode","text":"[jvm] class BlockNode : StatementNode , List < StatementNode > A sequence of statements.","title":"BlockNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/#constructors","text":"Name Summary BlockNode [jvm] fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) BlockNode [jvm] fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/#functions","text":"Name Summary contains [jvm] Content open operator override fun contains (element: StatementNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < StatementNode >): Boolean copy [jvm] Content open override fun copy (children: List < Node >): BlockNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer StatementNode >) get [jvm] Content open operator override fun get (index: Int ): StatementNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: StatementNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < StatementNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: StatementNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < StatementNode > open override fun listIterator (index: Int ): ListIterator < StatementNode > parallelStream [jvm] Content open fun parallelStream (): Stream < StatementNode > printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document spliterator [jvm] Content open override fun spliterator (): Spliterator < StatementNode > stream [jvm] Content open fun stream (): Stream < StatementNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < StatementNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): BlockNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < StatementNode > size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation statements [jvm] val statements : PersistentList< StatementNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/-block-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode / BlockNode BlockNode \u00b6 [jvm] Content fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation )","title":" block node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/-block-node/#blocknode","text":"[jvm] Content fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation )","title":"BlockNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode / children children \u00b6 [jvm] Content open override val children : Iterable < StatementNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/children/#children","text":"[jvm] Content open override val children : Iterable < StatementNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): BlockNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): BlockNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/print-metadata/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode / printMetadata printMetadata \u00b6 [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"Print metadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/print-metadata/#printmetadata","text":"[jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"printMetadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/statements/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode / statements statements \u00b6 [jvm] Content val statements : PersistentList< StatementNode >","title":"Statements"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/statements/#statements","text":"[jvm] Content val statements : PersistentList< StatementNode >","title":"statements"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BlockNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): BlockNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-block-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): BlockNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BreakNode BreakNode \u00b6 [jvm] class BreakNode ( jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode Breaking out of a loop. Parameters \u00b6 jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop. Constructors \u00b6 Name Summary BreakNode [jvm] fun BreakNode (jumpLabel: JumpLabelNode , sourceLocation: SourceLocation )Label of the loop to break out of. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): BreakNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): BreakNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Nothing > jumpLabel [jvm] val jumpLabel : JumpLabelNode Label of the loop to break out of. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/#breaknode","text":"[jvm] class BreakNode ( jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode Breaking out of a loop.","title":"BreakNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/#parameters","text":"jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/#constructors","text":"Name Summary BreakNode [jvm] fun BreakNode (jumpLabel: JumpLabelNode , sourceLocation: SourceLocation )Label of the loop to break out of.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): BreakNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): BreakNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Nothing > jumpLabel [jvm] val jumpLabel : JumpLabelNode Label of the loop to break out of. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/-break-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BreakNode / BreakNode BreakNode \u00b6 [jvm] Content fun BreakNode (jumpLabel: JumpLabelNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":" break node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/-break-node/#breaknode","text":"[jvm] Content fun BreakNode (jumpLabel: JumpLabelNode , sourceLocation: SourceLocation ) More info","title":"BreakNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/-break-node/#parameters","text":"jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BreakNode / children children \u00b6 [jvm] Content open override val children : Iterable < Nothing >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/children/#children","text":"[jvm] Content open override val children : Iterable < Nothing >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BreakNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): BreakNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): BreakNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BreakNode / jumpLabel jumpLabel \u00b6 [jvm] Content val jumpLabel : JumpLabelNode More info Parameters \u00b6 jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/jump-label/#jumplabel","text":"[jvm] Content val jumpLabel : JumpLabelNode More info","title":"jumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/jump-label/#parameters","text":"jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BreakNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / BreakNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): BreakNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-break-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): BreakNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-communication-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / CommunicationNode CommunicationNode \u00b6 [jvm] interface CommunicationNode : HasSourceLocation , PrettyPrintable A node for sending or receiving messages. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name ExternalCommunicationNode InternalCommunicationNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-communication-node/#communicationnode","text":"[jvm] interface CommunicationNode : HasSourceLocation , PrettyPrintable A node for sending or receiving messages.","title":"CommunicationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-communication-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-communication-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-communication-node/#inheritors","text":"Name ExternalCommunicationNode InternalCommunicationNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-control-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ControlNode ControlNode \u00b6 [jvm] sealed class ControlNode : StatementNode A statement that affects control flow. Functions \u00b6 Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): ControlNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): StatementNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name FunctionCallNode IfNode InfiniteLoopNode BreakNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-control-node/#controlnode","text":"[jvm] sealed class ControlNode : StatementNode A statement that affects control flow.","title":"ControlNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-control-node/#functions","text":"Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): ControlNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): StatementNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-control-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-control-node/#inheritors","text":"Name FunctionCallNode IfNode InfiniteLoopNode BreakNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-control-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ControlNode / copy copy \u00b6 [jvm] Content abstract override fun copy (children: List < Node >): ControlNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-control-node/copy/#copy","text":"[jvm] Content abstract override fun copy (children: List < Node >): ControlNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode DeclarationNode \u00b6 [jvm] class DeclarationNode ( name : ObjectVariableNode , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode , ObjectDeclaration Constructing a new object and binding it to a variable. Constructors \u00b6 Name Summary DeclarationNode [jvm] fun DeclarationNode (name: ObjectVariableNode , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, arguments: Arguments < AtomicExpressionNode >, protocol: ProtocolNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): DeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): DeclarationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > className [jvm] open override val className : ClassNameNode declarationAsNode [jvm] open override val declarationAsNode : StatementNode labelArguments [jvm] open override val labelArguments : Arguments < LabelNode >? name [jvm] open override val name : ObjectVariableNode protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] open override val typeArguments : Arguments < ValueTypeNode > Extensions \u00b6 Name Summary readsFrom [jvm] Content fun DeclarationNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint sendsTo [jvm] Content fun DeclarationNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/#declarationnode","text":"[jvm] class DeclarationNode ( name : ObjectVariableNode , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode , ObjectDeclaration Constructing a new object and binding it to a variable.","title":"DeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/#constructors","text":"Name Summary DeclarationNode [jvm] fun DeclarationNode (name: ObjectVariableNode , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, arguments: Arguments < AtomicExpressionNode >, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): DeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): DeclarationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > className [jvm] open override val className : ClassNameNode declarationAsNode [jvm] open override val declarationAsNode : StatementNode labelArguments [jvm] open override val labelArguments : Arguments < LabelNode >? name [jvm] open override val name : ObjectVariableNode protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] open override val typeArguments : Arguments < ValueTypeNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/#extensions","text":"Name Summary readsFrom [jvm] Content fun DeclarationNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint sendsTo [jvm] Content fun DeclarationNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / DeclarationNode DeclarationNode \u00b6 [jvm] Content fun DeclarationNode (name: ObjectVariableNode , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, arguments: Arguments < AtomicExpressionNode >, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":" declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/-declaration-node/#declarationnode","text":"[jvm] Content fun DeclarationNode (name: ObjectVariableNode , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, arguments: Arguments < AtomicExpressionNode >, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"DeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / className className \u00b6 [jvm] Content open override val className : ClassNameNode","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/class-name/#classname","text":"[jvm] Content open override val className : ClassNameNode","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): DeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): DeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/declaration-as-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / declarationAsNode declarationAsNode \u00b6 [jvm] Content open override val declarationAsNode : StatementNode","title":"Declaration as node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/declaration-as-node/#declarationasnode","text":"[jvm] Content open override val declarationAsNode : StatementNode","title":"declarationAsNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/label-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / labelArguments labelArguments \u00b6 [jvm] Content open override val labelArguments : Arguments < LabelNode >?","title":"Label arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/label-arguments/#labelarguments","text":"[jvm] Content open override val labelArguments : Arguments < LabelNode >?","title":"labelArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / name name \u00b6 [jvm] Content open override val name : ObjectVariableNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/name/#name","text":"[jvm] Content open override val name : ObjectVariableNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode ?","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode ?","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): DeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): DeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclarationNode / typeArguments typeArguments \u00b6 [jvm] Content open override val typeArguments : Arguments < ValueTypeNode >","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declaration-node/type-arguments/#typearguments","text":"[jvm] Content open override val typeArguments : Arguments < ValueTypeNode >","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode DeclassificationNode \u00b6 [jvm] class DeclassificationNode ( expression : AtomicExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode Revealing the the result of an expression (reducing confidentiality). Constructors \u00b6 Name Summary DeclassificationNode [jvm] fun DeclassificationNode (expression: AtomicExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): DeclassificationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): DeclassificationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < AtomicExpressionNode > expression [jvm] open override val expression : AtomicExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode The label after the downgrade.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/#declassificationnode","text":"[jvm] class DeclassificationNode ( expression : AtomicExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode Revealing the the result of an expression (reducing confidentiality).","title":"DeclassificationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/#constructors","text":"Name Summary DeclassificationNode [jvm] fun DeclassificationNode (expression: AtomicExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): DeclassificationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): DeclassificationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < AtomicExpressionNode > expression [jvm] open override val expression : AtomicExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode The label after the downgrade.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/-declassification-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode / DeclassificationNode DeclassificationNode \u00b6 [jvm] Content fun DeclassificationNode (expression: AtomicExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation )","title":" declassification node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/-declassification-node/#declassificationnode","text":"[jvm] Content fun DeclassificationNode (expression: AtomicExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation )","title":"DeclassificationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): DeclassificationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): DeclassificationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode / expression expression \u00b6 [jvm] Content open override val expression : AtomicExpressionNode More info Expression whose label is being downgraded.","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/expression/#expression","text":"[jvm] Content open override val expression : AtomicExpressionNode More info Expression whose label is being downgraded.","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/from-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode / fromLabel fromLabel \u00b6 [jvm] Content open override val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"From label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/from-label/#fromlabel","text":"[jvm] Content open override val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"fromLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/to-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode / toLabel toLabel \u00b6 [jvm] Content open override val toLabel : LabelNode More info The label after the downgrade.","title":"To label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/to-label/#tolabel","text":"[jvm] Content open override val toLabel : LabelNode More info The label after the downgrade.","title":"toLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DeclassificationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): DeclassificationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-declassification-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): DeclassificationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DowngradeNode DowngradeNode \u00b6 [jvm] sealed class DowngradeNode : PureExpressionNode Reducing the confidentiality or increasing the integrity of the result of an expression. Functions \u00b6 Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): DowngradeNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < AtomicExpressionNode > expression [jvm] abstract val expression : AtomicExpressionNode Expression whose label is being downgraded. fromLabel [jvm] abstract val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] abstract val sourceLocation : SourceLocation toLabel [jvm] abstract val toLabel : LabelNode ?The label after the downgrade. Inheritors \u00b6 Name DeclassificationNode EndorsementNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/#downgradenode","text":"[jvm] sealed class DowngradeNode : PureExpressionNode Reducing the confidentiality or increasing the integrity of the result of an expression.","title":"DowngradeNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/#functions","text":"Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): DowngradeNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < AtomicExpressionNode > expression [jvm] abstract val expression : AtomicExpressionNode Expression whose label is being downgraded. fromLabel [jvm] abstract val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] abstract val sourceLocation : SourceLocation toLabel [jvm] abstract val toLabel : LabelNode ?The label after the downgrade.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/#inheritors","text":"Name DeclassificationNode EndorsementNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DowngradeNode / children children \u00b6 [jvm] Content override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/children/#children","text":"[jvm] Content override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DowngradeNode / copy copy \u00b6 [jvm] Content abstract override fun copy (children: List < Node >): DowngradeNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/copy/#copy","text":"[jvm] Content abstract override fun copy (children: List < Node >): DowngradeNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DowngradeNode / expression expression \u00b6 [jvm] Content abstract val expression : AtomicExpressionNode More info Expression whose label is being downgraded.","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/expression/#expression","text":"[jvm] Content abstract val expression : AtomicExpressionNode More info Expression whose label is being downgraded.","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/from-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DowngradeNode / fromLabel fromLabel \u00b6 [jvm] Content abstract val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"From label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/from-label/#fromlabel","text":"[jvm] Content abstract val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"fromLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/to-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / DowngradeNode / toLabel toLabel \u00b6 [jvm] Content abstract val toLabel : LabelNode ? More info The label after the downgrade.","title":"To label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-downgrade-node/to-label/#tolabel","text":"[jvm] Content abstract val toLabel : LabelNode ? More info The label after the downgrade.","title":"toLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode EndorsementNode \u00b6 [jvm] class EndorsementNode ( expression : AtomicExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode Trusting the result of an expression (increasing integrity). Constructors \u00b6 Name Summary EndorsementNode [jvm] fun EndorsementNode (expression: AtomicExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): EndorsementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): EndorsementNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < AtomicExpressionNode > expression [jvm] open override val expression : AtomicExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode ?The label after the downgrade.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/#endorsementnode","text":"[jvm] class EndorsementNode ( expression : AtomicExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode Trusting the result of an expression (increasing integrity).","title":"EndorsementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/#constructors","text":"Name Summary EndorsementNode [jvm] fun EndorsementNode (expression: AtomicExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): EndorsementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): EndorsementNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < AtomicExpressionNode > expression [jvm] open override val expression : AtomicExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode ?The label after the downgrade.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/-endorsement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode / EndorsementNode EndorsementNode \u00b6 [jvm] Content fun EndorsementNode (expression: AtomicExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation )","title":" endorsement node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/-endorsement-node/#endorsementnode","text":"[jvm] Content fun EndorsementNode (expression: AtomicExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation )","title":"EndorsementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): EndorsementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): EndorsementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode / expression expression \u00b6 [jvm] Content open override val expression : AtomicExpressionNode More info Expression whose label is being downgraded.","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/expression/#expression","text":"[jvm] Content open override val expression : AtomicExpressionNode More info Expression whose label is being downgraded.","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/from-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode / fromLabel fromLabel \u00b6 [jvm] Content open override val fromLabel : LabelNode More info The label expression must have before the downgrade.","title":"From label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/from-label/#fromlabel","text":"[jvm] Content open override val fromLabel : LabelNode More info The label expression must have before the downgrade.","title":"fromLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/to-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode / toLabel toLabel \u00b6 [jvm] Content open override val toLabel : LabelNode ? More info The label after the downgrade.","title":"To label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/to-label/#tolabel","text":"[jvm] Content open override val toLabel : LabelNode ? More info The label after the downgrade.","title":"toLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / EndorsementNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): EndorsementNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-endorsement-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): EndorsementNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionArgumentNode ExpressionArgumentNode \u00b6 [jvm] class ExpressionArgumentNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ExpressionArgumentNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > expression [jvm] val expression : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/#expressionargumentnode","text":"[jvm] class ExpressionArgumentNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode","title":"ExpressionArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ExpressionArgumentNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > expression [jvm] val expression : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/-expression-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionArgumentNode / ExpressionArgumentNode ExpressionArgumentNode \u00b6 [jvm] Content fun ExpressionArgumentNode (expression: AtomicExpressionNode , sourceLocation: SourceLocation )","title":" expression argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/-expression-argument-node/#expressionargumentnode","text":"[jvm] Content fun ExpressionArgumentNode (expression: AtomicExpressionNode , sourceLocation: SourceLocation )","title":"ExpressionArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionArgumentNode / children children \u00b6 [jvm] Content open override val children : Iterable < ExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/children/#children","text":"[jvm] Content open override val children : Iterable < ExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionArgumentNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionArgumentNode / expression expression \u00b6 [jvm] Content val expression : AtomicExpressionNode","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/expression/#expression","text":"[jvm] Content val expression : AtomicExpressionNode","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionArgumentNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ExpressionArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-argument-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ExpressionArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionNode ExpressionNode \u00b6 [jvm] sealed class ExpressionNode : Node A computation that produces a result. Functions \u00b6 Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): ExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract override val children : Iterable < AtomicExpressionNode > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name PureExpressionNode InputNode ReceiveNode Extensions \u00b6 Name Summary involvedVariables [jvm] Content fun ExpressionNode . involvedVariables (): List < Variable > readsFrom [jvm] Content fun ExpressionNode . readsFrom (nameAnalysis: NameAnalysis , prots: Set < Protocol >): SelectionConstraint More info States whether an expression reads only from the protocols in prots","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/#expressionnode","text":"[jvm] sealed class ExpressionNode : Node A computation that produces a result.","title":"ExpressionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/#functions","text":"Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): ExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract override val children : Iterable < AtomicExpressionNode > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/#inheritors","text":"Name PureExpressionNode InputNode ReceiveNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/#extensions","text":"Name Summary involvedVariables [jvm] Content fun ExpressionNode . involvedVariables (): List < Variable > readsFrom [jvm] Content fun ExpressionNode . readsFrom (nameAnalysis: NameAnalysis , prots: Set < Protocol >): SelectionConstraint More info States whether an expression reads only from the protocols in prots","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionNode / children children \u00b6 [jvm] Content abstract override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/children/#children","text":"[jvm] Content abstract override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionNode / copy copy \u00b6 [jvm] Content abstract override fun copy (children: List < Node >): ExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/copy/#copy","text":"[jvm] Content abstract override fun copy (children: List < Node >): ExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExpressionNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-expression-node/to-surface-node/#tosurfacenode","text":"[jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-external-communication-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExternalCommunicationNode ExternalCommunicationNode \u00b6 [jvm] interface ExternalCommunicationNode : CommunicationNode Communication happening between a protocol and a host. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document host [jvm] abstract val host : HostNode sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name InputNode OutputNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-external-communication-node/#externalcommunicationnode","text":"[jvm] interface ExternalCommunicationNode : CommunicationNode Communication happening between a protocol and a host.","title":"ExternalCommunicationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-external-communication-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-external-communication-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document host [jvm] abstract val host : HostNode sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-external-communication-node/#inheritors","text":"Name InputNode OutputNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-external-communication-node/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ExternalCommunicationNode / host host \u00b6 [jvm] Content abstract val host : HostNode","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-external-communication-node/host/#host","text":"[jvm] Content abstract val host : HostNode","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionArgumentNode FunctionArgumentNode \u00b6 [jvm] sealed class FunctionArgumentNode : Node Functions \u00b6 Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name FunctionInputArgumentNode FunctionOutputArgumentNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-argument-node/#functionargumentnode","text":"[jvm] sealed class FunctionArgumentNode : Node","title":"FunctionArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-argument-node/#functions","text":"Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-argument-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-argument-node/#inheritors","text":"Name FunctionInputArgumentNode FunctionOutputArgumentNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode FunctionCallNode \u00b6 [jvm] class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : ControlNode Function call. Constructors \u00b6 Name Summary FunctionCallNode [jvm] fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): FunctionCallNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): FunctionCallNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < FunctionArgumentNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Node > name [jvm] val name : FunctionNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/#functioncallnode","text":"[jvm] class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : ControlNode Function call.","title":"FunctionCallNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/#constructors","text":"Name Summary FunctionCallNode [jvm] fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): FunctionCallNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): FunctionCallNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < FunctionArgumentNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Node > name [jvm] val name : FunctionNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/-function-call-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode / FunctionCallNode FunctionCallNode \u00b6 [jvm] Content fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation )","title":" function call node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/-function-call-node/#functioncallnode","text":"[jvm] Content fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation )","title":"FunctionCallNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < FunctionArgumentNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < FunctionArgumentNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode / children children \u00b6 [jvm] Content open override val children : Iterable < Node >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/children/#children","text":"[jvm] Content open override val children : Iterable < Node >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): FunctionCallNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): FunctionCallNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode / name name \u00b6 [jvm] Content val name : FunctionNameNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/name/#name","text":"[jvm] Content val name : FunctionNameNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionCallNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): FunctionCallNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-call-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): FunctionCallNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode FunctionDeclarationNode \u00b6 [jvm] class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A declaration of a function that can be called by a process. Parameters \u00b6 jvm Name Summary parameters A list of formal parameters. body The function body. Constructors \u00b6 Name Summary FunctionDeclarationNode [jvm] fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation )A list of formal parameters. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean getParameter [jvm] Content fun getParameter (name: ObjectVariable ): ParameterNode ? getParameterAtIndex [jvm] Content fun getParameterAtIndex (i: Int ): ParameterNode ? hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document body [jvm] val body : BlockNode The function body. children [jvm] open override val children : Iterable < Node > name [jvm] val name : FunctionNameNode parameters [jvm] val parameters : Arguments < ParameterNode >A list of formal parameters. pcLabel [jvm] val pcLabel : LabelNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/#functiondeclarationnode","text":"[jvm] class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A declaration of a function that can be called by a process.","title":"FunctionDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/#parameters","text":"jvm Name Summary parameters A list of formal parameters. body The function body.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/#constructors","text":"Name Summary FunctionDeclarationNode [jvm] fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation )A list of formal parameters.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean getParameter [jvm] Content fun getParameter (name: ObjectVariable ): ParameterNode ? getParameterAtIndex [jvm] Content fun getParameterAtIndex (i: Int ): ParameterNode ? hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document body [jvm] val body : BlockNode The function body. children [jvm] open override val children : Iterable < Node > name [jvm] val name : FunctionNameNode parameters [jvm] val parameters : Arguments < ParameterNode >A list of formal parameters. pcLabel [jvm] val pcLabel : LabelNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/-function-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / FunctionDeclarationNode FunctionDeclarationNode \u00b6 [jvm] Content fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary parameters A list of formal parameters. body The function body.","title":" function declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/-function-declaration-node/#functiondeclarationnode","text":"[jvm] Content fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation ) More info","title":"FunctionDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/-function-declaration-node/#parameters","text":"jvm Name Summary parameters A list of formal parameters. body The function body.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / body body \u00b6 [jvm] Content val body : BlockNode More info Parameters \u00b6 jvm Name Summary body The function body.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/body/#body","text":"[jvm] Content val body : BlockNode More info","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/body/#parameters","text":"jvm Name Summary body The function body.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / children children \u00b6 [jvm] Content open override val children : Iterable < Node >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/children/#children","text":"[jvm] Content open override val children : Iterable < Node >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/get-parameter-at-index/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / getParameterAtIndex getParameterAtIndex \u00b6 [jvm] Content fun getParameterAtIndex (i: Int ): ParameterNode ?","title":"Get parameter at index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/get-parameter-at-index/#getparameteratindex","text":"[jvm] Content fun getParameterAtIndex (i: Int ): ParameterNode ?","title":"getParameterAtIndex"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/get-parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / getParameter getParameter \u00b6 [jvm] Content fun getParameter (name: ObjectVariable ): ParameterNode ?","title":"Get parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/get-parameter/#getparameter","text":"[jvm] Content fun getParameter (name: ObjectVariable ): ParameterNode ?","title":"getParameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / name name \u00b6 [jvm] Content val name : FunctionNameNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/name/#name","text":"[jvm] Content val name : FunctionNameNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / parameters parameters \u00b6 [jvm] Content val parameters : Arguments < ParameterNode > More info Parameters \u00b6 jvm Name Summary parameters A list of formal parameters.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/parameters/#parameters","text":"[jvm] Content val parameters : Arguments < ParameterNode > More info","title":"parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/parameters/#parameters_1","text":"jvm Name Summary parameters A list of formal parameters.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/pc-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / pcLabel pcLabel \u00b6 [jvm] Content val pcLabel : LabelNode ?","title":"Pc label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/pc-label/#pclabel","text":"[jvm] Content val pcLabel : LabelNode ?","title":"pcLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/print-metadata/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / printMetadata printMetadata \u00b6 [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"Print metadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/print-metadata/#printmetadata","text":"[jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"printMetadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionDeclarationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-declaration-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-input-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionInputArgumentNode FunctionInputArgumentNode \u00b6 [jvm] sealed class FunctionInputArgumentNode : FunctionArgumentNode Functions \u00b6 Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name ExpressionArgumentNode ObjectReferenceArgumentNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-input-argument-node/#functioninputargumentnode","text":"[jvm] sealed class FunctionInputArgumentNode : FunctionArgumentNode","title":"FunctionInputArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-input-argument-node/#functions","text":"Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-input-argument-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-input-argument-node/#inheritors","text":"Name ExpressionArgumentNode ObjectReferenceArgumentNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-output-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / FunctionOutputArgumentNode FunctionOutputArgumentNode \u00b6 [jvm] sealed class FunctionOutputArgumentNode : FunctionArgumentNode Functions \u00b6 Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name ObjectDeclarationArgumentNode OutParameterArgumentNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-output-argument-node/#functionoutputargumentnode","text":"[jvm] sealed class FunctionOutputArgumentNode : FunctionArgumentNode","title":"FunctionOutputArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-output-argument-node/#functions","text":"Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-output-argument-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-function-output-argument-node/#inheritors","text":"Name ObjectDeclarationArgumentNode OutParameterArgumentNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode HostDeclarationNode \u00b6 [jvm] class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode Declaration of a participant and their authority. Parameters \u00b6 jvm Name Summary name Host name. authority Label specifying the trust placed in this host. Constructors \u00b6 Name Summary HostDeclarationNode [jvm] fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation )Host name. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): HostDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): HostDeclarationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document authority [jvm] val authority : LabelNode Label specifying the trust placed in this host. children [jvm] open override val children : Iterable < Nothing > name [jvm] val name : HostNode Host name. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/#hostdeclarationnode","text":"[jvm] class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode Declaration of a participant and their authority.","title":"HostDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/#parameters","text":"jvm Name Summary name Host name. authority Label specifying the trust placed in this host.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/#constructors","text":"Name Summary HostDeclarationNode [jvm] fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation )Host name.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): HostDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): HostDeclarationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document authority [jvm] val authority : LabelNode Label specifying the trust placed in this host. children [jvm] open override val children : Iterable < Nothing > name [jvm] val name : HostNode Host name. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/-host-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode / HostDeclarationNode HostDeclarationNode \u00b6 [jvm] Content fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary name Host name. authority Label specifying the trust placed in this host.","title":" host declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/-host-declaration-node/#hostdeclarationnode","text":"[jvm] Content fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation ) More info","title":"HostDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/-host-declaration-node/#parameters","text":"jvm Name Summary name Host name. authority Label specifying the trust placed in this host.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode / authority authority \u00b6 [jvm] Content val authority : LabelNode More info Parameters \u00b6 jvm Name Summary authority Label specifying the trust placed in this host.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/authority/#authority","text":"[jvm] Content val authority : LabelNode More info","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/authority/#parameters","text":"jvm Name Summary authority Label specifying the trust placed in this host.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode / children children \u00b6 [jvm] Content open override val children : Iterable < Nothing >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/children/#children","text":"[jvm] Content open override val children : Iterable < Nothing >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): HostDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): HostDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode / name name \u00b6 [jvm] Content val name : HostNode More info Parameters \u00b6 jvm Name Summary name Host name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/name/#name","text":"[jvm] Content val name : HostNode More info","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/name/#parameters","text":"jvm Name Summary name Host name.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / HostDeclarationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): HostDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-host-declaration-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): HostDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode IfNode \u00b6 [jvm] class IfNode ( guard : AtomicExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : ControlNode Executing statements conditionally. Parameters \u00b6 jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false. Constructors \u00b6 Name Summary IfNode [jvm] fun IfNode (guard: AtomicExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation )Statement to execute if the guard is true. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): IfNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): IfNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Node > elseBranch [jvm] val elseBranch : BlockNode Statement to execute if the guard is false. guard [jvm] val guard : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation thenBranch [jvm] val thenBranch : BlockNode Statement to execute if the guard is true.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/#ifnode","text":"[jvm] class IfNode ( guard : AtomicExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : ControlNode Executing statements conditionally.","title":"IfNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/#parameters","text":"jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/#constructors","text":"Name Summary IfNode [jvm] fun IfNode (guard: AtomicExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation )Statement to execute if the guard is true.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): IfNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): IfNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Node > elseBranch [jvm] val elseBranch : BlockNode Statement to execute if the guard is false. guard [jvm] val guard : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation thenBranch [jvm] val thenBranch : BlockNode Statement to execute if the guard is true.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/-if-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / IfNode IfNode \u00b6 [jvm] Content fun IfNode (guard: AtomicExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false.","title":" if node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/-if-node/#ifnode","text":"[jvm] Content fun IfNode (guard: AtomicExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation ) More info","title":"IfNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/-if-node/#parameters","text":"jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / children children \u00b6 [jvm] Content open override val children : Iterable < Node >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/children/#children","text":"[jvm] Content open override val children : Iterable < Node >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): IfNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): IfNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/else-branch/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / elseBranch elseBranch \u00b6 [jvm] Content val elseBranch : BlockNode More info Parameters \u00b6 jvm Name Summary elseBranch Statement to execute if the guard is false.","title":"Else branch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/else-branch/#elsebranch","text":"[jvm] Content val elseBranch : BlockNode More info","title":"elseBranch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/else-branch/#parameters","text":"jvm Name Summary elseBranch Statement to execute if the guard is false.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/guard/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / guard guard \u00b6 [jvm] Content val guard : AtomicExpressionNode","title":"Guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/guard/#guard","text":"[jvm] Content val guard : AtomicExpressionNode","title":"guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/print-metadata/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / printMetadata printMetadata \u00b6 [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"Print metadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/print-metadata/#printmetadata","text":"[jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"printMetadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/then-branch/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / thenBranch thenBranch \u00b6 [jvm] Content val thenBranch : BlockNode More info Parameters \u00b6 jvm Name Summary thenBranch Statement to execute if the guard is true.","title":"Then branch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/then-branch/#thenbranch","text":"[jvm] Content val thenBranch : BlockNode More info","title":"thenBranch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/then-branch/#parameters","text":"jvm Name Summary thenBranch Statement to execute if the guard is true.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / IfNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): IfNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-if-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): IfNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode InfiniteLoopNode \u00b6 [jvm] class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode A loop that is executed until a break statement is encountered. Parameters \u00b6 jvm Name Summary jumpLabel A label for the loop that break nodes can refer to. Constructors \u00b6 Name Summary InfiniteLoopNode [jvm] fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode , sourceLocation: SourceLocation )A label for the loop that break nodes can refer to. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): InfiniteLoopNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): InfiniteLoopNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document body [jvm] val body : BlockNode children [jvm] open override val children : Iterable < BlockNode > jumpLabel [jvm] val jumpLabel : JumpLabelNode A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/#infiniteloopnode","text":"[jvm] class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode , sourceLocation : SourceLocation ) : ControlNode A loop that is executed until a break statement is encountered.","title":"InfiniteLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/#parameters","text":"jvm Name Summary jumpLabel A label for the loop that break nodes can refer to.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/#constructors","text":"Name Summary InfiniteLoopNode [jvm] fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode , sourceLocation: SourceLocation )A label for the loop that break nodes can refer to.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): InfiniteLoopNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): InfiniteLoopNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document body [jvm] val body : BlockNode children [jvm] open override val children : Iterable < BlockNode > jumpLabel [jvm] val jumpLabel : JumpLabelNode A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/-infinite-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / InfiniteLoopNode InfiniteLoopNode \u00b6 [jvm] Content fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary jumpLabel A label for the loop that break nodes can refer to.","title":" infinite loop node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/-infinite-loop-node/#infiniteloopnode","text":"[jvm] Content fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode , sourceLocation: SourceLocation ) More info","title":"InfiniteLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/-infinite-loop-node/#parameters","text":"jvm Name Summary jumpLabel A label for the loop that break nodes can refer to.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / body body \u00b6 [jvm] Content val body : BlockNode","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/body/#body","text":"[jvm] Content val body : BlockNode","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / children children \u00b6 [jvm] Content open override val children : Iterable < BlockNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/children/#children","text":"[jvm] Content open override val children : Iterable < BlockNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): InfiniteLoopNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): InfiniteLoopNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / jumpLabel jumpLabel \u00b6 [jvm] Content val jumpLabel : JumpLabelNode More info Parameters \u00b6 jvm Name Summary jumpLabel A label for the loop that break nodes can refer to.","title":"Jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/jump-label/#jumplabel","text":"[jvm] Content val jumpLabel : JumpLabelNode More info","title":"jumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/jump-label/#parameters","text":"jvm Name Summary jumpLabel A label for the loop that break nodes can refer to.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/print-metadata/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / printMetadata printMetadata \u00b6 [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"Print metadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/print-metadata/#printmetadata","text":"[jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"printMetadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InfiniteLoopNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): InfiniteLoopNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-infinite-loop-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): InfiniteLoopNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode InputNode \u00b6 [jvm] class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode , ExternalCommunicationNode An external input. Parameters \u00b6 jvm Name Summary type Type of the value to receive. Constructors \u00b6 Name Summary InputNode [jvm] fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation )Type of the value to receive. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): InputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): InputNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Nothing > host [jvm] open override val host : HostNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/#inputnode","text":"[jvm] class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode , ExternalCommunicationNode An external input.","title":"InputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/#constructors","text":"Name Summary InputNode [jvm] fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation )Type of the value to receive.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): InputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): InputNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Nothing > host [jvm] open override val host : HostNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/-input-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode / InputNode InputNode \u00b6 [jvm] Content fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":" input node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/-input-node/#inputnode","text":"[jvm] Content fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation ) More info","title":"InputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/-input-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode / children children \u00b6 [jvm] Content open override val children : Iterable < Nothing >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/children/#children","text":"[jvm] Content open override val children : Iterable < Nothing >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): InputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): InputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode / host host \u00b6 [jvm] Content open override val host : HostNode","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/host/#host","text":"[jvm] Content open override val host : HostNode","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): InputNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): InputNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InputNode / type type \u00b6 [jvm] Content val type : ValueTypeNode More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/type/#type","text":"[jvm] Content val type : ValueTypeNode More info","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-input-node/type/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-internal-communication-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InternalCommunicationNode InternalCommunicationNode \u00b6 [jvm] interface InternalCommunicationNode : CommunicationNode Communication happening between protocols. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document protocol [jvm] abstract val protocol : ProtocolNode sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name ReceiveNode SendNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-internal-communication-node/#internalcommunicationnode","text":"[jvm] interface InternalCommunicationNode : CommunicationNode Communication happening between protocols.","title":"InternalCommunicationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-internal-communication-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-internal-communication-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document protocol [jvm] abstract val protocol : ProtocolNode sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-internal-communication-node/#inheritors","text":"Name ReceiveNode SendNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-internal-communication-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / InternalCommunicationNode / protocol protocol \u00b6 [jvm] Content abstract val protocol : ProtocolNode","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-internal-communication-node/protocol/#protocol","text":"[jvm] Content abstract val protocol : ProtocolNode","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode LetNode \u00b6 [jvm] class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode Binding the result of an expression to a new temporary variable. Constructors \u00b6 Name Summary LetNode [jvm] fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): LetNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): LetNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode value [jvm] val value : ExpressionNode Extensions \u00b6 Name Summary readsFrom [jvm] Content fun LetNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint More info States that if the let node is stored at any protocol in to, it reads from only the protocols in from sendsTo [jvm] Content fun LetNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint More info States that if the let node is stores at any protocol in from, it sends to only the protocols in to","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/#letnode","text":"[jvm] class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode Binding the result of an expression to a new temporary variable.","title":"LetNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/#constructors","text":"Name Summary LetNode [jvm] fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): LetNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): LetNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode value [jvm] val value : ExpressionNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/#extensions","text":"Name Summary readsFrom [jvm] Content fun LetNode . readsFrom (nameAnalysis: NameAnalysis , to: Set < Protocol >, from: Set < Protocol >): SelectionConstraint More info States that if the let node is stored at any protocol in to, it reads from only the protocols in from sendsTo [jvm] Content fun LetNode . sendsTo (nameAnalysis: NameAnalysis , from: Set < Protocol >, to: Set < Protocol >): SelectionConstraint More info States that if the let node is stores at any protocol in from, it sends to only the protocols in to","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/-let-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / LetNode LetNode \u00b6 [jvm] Content fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":" let node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/-let-node/#letnode","text":"[jvm] Content fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"LetNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / children children \u00b6 [jvm] Content open override val children : Iterable < ExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/children/#children","text":"[jvm] Content open override val children : Iterable < ExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): LetNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): LetNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode ?","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode ?","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/temporary/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / temporary temporary \u00b6 [jvm] Content val temporary : TemporaryNode","title":"Temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/temporary/#temporary","text":"[jvm] Content val temporary : TemporaryNode","title":"temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): LetNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): LetNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LetNode / value value \u00b6 [jvm] Content val value : ExpressionNode","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-let-node/value/#value","text":"[jvm] Content val value : ExpressionNode","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LiteralNode LiteralNode \u00b6 [jvm] class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode A literal constant. Constructors \u00b6 Name Summary LiteralNode [jvm] fun LiteralNode (value: Value , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): LiteralNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): LiteralNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < Nothing > sourceLocation [jvm] open override val sourceLocation : SourceLocation value [jvm] val value : Value","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/#literalnode","text":"[jvm] class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode A literal constant.","title":"LiteralNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/#constructors","text":"Name Summary LiteralNode [jvm] fun LiteralNode (value: Value , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): LiteralNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): LiteralNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < Nothing > sourceLocation [jvm] open override val sourceLocation : SourceLocation value [jvm] val value : Value","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/-literal-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LiteralNode / LiteralNode LiteralNode \u00b6 [jvm] Content fun LiteralNode (value: Value , sourceLocation: SourceLocation )","title":" literal node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/-literal-node/#literalnode","text":"[jvm] Content fun LiteralNode (value: Value , sourceLocation: SourceLocation )","title":"LiteralNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LiteralNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): LiteralNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): LiteralNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LiteralNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LiteralNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): LiteralNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): LiteralNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / LiteralNode / value value \u00b6 [jvm] Content val value : Value","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-literal-node/value/#value","text":"[jvm] Content val value : Value","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / Node Node \u00b6 [jvm] abstract class Node : TreeNode< Node > , HasSourceLocation , PrettyPrintable A node in the intermediate language abstract syntax tree. The intermediate language is similar to the surface language, but with the following changes: For and while loops are elaborated into loop-until-break statements. Expressions are in A-normal form. Briefly, this means all intermediate results are stored in immutable temporary variables. Every loop and break statement has a [JumpLabel](../../edu.cornell.cs.apl.viaduct.syntax/-jump-label/index.md). All [Variable](../../edu.cornell.cs.apl.viaduct.syntax/-variable/index.md)s within a process have unique names. Constructors \u00b6 Name Summary Node [jvm] fun Node () Functions \u00b6 Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name ExpressionNode ProgramNode StatementNode OutParameterInitializerNode FunctionArgumentNode TopLevelDeclarationNode ParameterNode Extensions \u00b6 Name Summary breakNodes [jvm] Content fun Node . breakNodes (): List < BreakNode > More info Returns all BreakNode s contained in this node. declarationNodes [jvm] Content fun Node . declarationNodes (): List < DeclarationNode > More info Returns all DeclarationNode s contained in this node. deepCopy [jvm] Content fun Node . deepCopy (): Node More info Like Node.copy , but recursively copies all descendant nodes also. freshVariableNameGenerator [jvm] Content fun Node . freshVariableNameGenerator (): FreshNameGenerator More info A FreshNameGenerator that will avoid all Variable names in this node. functionCallNodes [jvm] Content fun Node . functionCallNodes (): List < FunctionCallNode > More info Returns all FunctionCallNode s contained in this node. ifNodes [jvm] Content fun Node . ifNodes (): List < IfNode > More info Returns all IfNode s contained in this node. infiniteLoopNodes [jvm] Content fun Node . infiniteLoopNodes (): List < InfiniteLoopNode > More info Returns all InfiniteLoopNode s contained in this node. letNodes [jvm] Content fun Node . letNodes (): List < LetNode > More info Returns all LetNode s contained in this node. objectDeclarationArgumentNodes [jvm] Content fun Node . objectDeclarationArgumentNodes (): List < ObjectDeclarationArgumentNode > More info Returns all ObjectDeclarationArgumentNode s contained in this node. outputNodes [jvm] Content fun Node . outputNodes (): List < OutputNode > More info Returns all OutputNode s contained in this node. parameterNodes [jvm] Content fun Node . parameterNodes (): List < ParameterNode > More info Returns all ParameterNode s contained in this node. queryNodes [jvm] Content fun Node . queryNodes (): List < QueryNode > More info Returns all QueryNode s contained in this node. updateNodes [jvm] Content fun Node . updateNodes (): List < UpdateNode > More info Returns all UpdateNode s contained in this node.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/#node","text":"[jvm] abstract class Node : TreeNode< Node > , HasSourceLocation , PrettyPrintable A node in the intermediate language abstract syntax tree. The intermediate language is similar to the surface language, but with the following changes: For and while loops are elaborated into loop-until-break statements. Expressions are in A-normal form. Briefly, this means all intermediate results are stored in immutable temporary variables. Every loop and break statement has a [JumpLabel](../../edu.cornell.cs.apl.viaduct.syntax/-jump-label/index.md). All [Variable](../../edu.cornell.cs.apl.viaduct.syntax/-variable/index.md)s within a process have unique names.","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/#constructors","text":"Name Summary Node [jvm] fun Node ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/#functions","text":"Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/#inheritors","text":"Name ExpressionNode ProgramNode StatementNode OutParameterInitializerNode FunctionArgumentNode TopLevelDeclarationNode ParameterNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/#extensions","text":"Name Summary breakNodes [jvm] Content fun Node . breakNodes (): List < BreakNode > More info Returns all BreakNode s contained in this node. declarationNodes [jvm] Content fun Node . declarationNodes (): List < DeclarationNode > More info Returns all DeclarationNode s contained in this node. deepCopy [jvm] Content fun Node . deepCopy (): Node More info Like Node.copy , but recursively copies all descendant nodes also. freshVariableNameGenerator [jvm] Content fun Node . freshVariableNameGenerator (): FreshNameGenerator More info A FreshNameGenerator that will avoid all Variable names in this node. functionCallNodes [jvm] Content fun Node . functionCallNodes (): List < FunctionCallNode > More info Returns all FunctionCallNode s contained in this node. ifNodes [jvm] Content fun Node . ifNodes (): List < IfNode > More info Returns all IfNode s contained in this node. infiniteLoopNodes [jvm] Content fun Node . infiniteLoopNodes (): List < InfiniteLoopNode > More info Returns all InfiniteLoopNode s contained in this node. letNodes [jvm] Content fun Node . letNodes (): List < LetNode > More info Returns all LetNode s contained in this node. objectDeclarationArgumentNodes [jvm] Content fun Node . objectDeclarationArgumentNodes (): List < ObjectDeclarationArgumentNode > More info Returns all ObjectDeclarationArgumentNode s contained in this node. outputNodes [jvm] Content fun Node . outputNodes (): List < OutputNode > More info Returns all OutputNode s contained in this node. parameterNodes [jvm] Content fun Node . parameterNodes (): List < ParameterNode > More info Returns all ParameterNode s contained in this node. queryNodes [jvm] Content fun Node . queryNodes (): List < QueryNode > More info Returns all QueryNode s contained in this node. updateNodes [jvm] Content fun Node . updateNodes (): List < UpdateNode > More info Returns all UpdateNode s contained in this node.","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / Node / Node Node \u00b6 [jvm] Content fun Node ()","title":" node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/-node/#node","text":"[jvm] Content fun Node ()","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / Node / asDocument asDocument \u00b6 [jvm] Content override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/as-document/#asdocument","text":"[jvm] Content override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / Node / copy copy \u00b6 [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/copy/#copy","text":"[jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/print-metadata/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / Node / printMetadata printMetadata \u00b6 [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"Print metadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/print-metadata/#printmetadata","text":"[jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"printMetadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / Node / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-node/to-surface-node/#tosurfacenode","text":"[jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclaration ObjectDeclaration \u00b6 [jvm] interface ObjectDeclaration Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary className [jvm] abstract val className : ClassNameNode declarationAsNode [jvm] abstract val declarationAsNode : Node labelArguments [jvm] abstract val labelArguments : Arguments < LabelNode >? name [jvm] abstract val name : ObjectVariableNode typeArguments [jvm] abstract val typeArguments : Arguments < ValueTypeNode > Inheritors \u00b6 Name DeclarationNode ParameterNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/#objectdeclaration","text":"[jvm] interface ObjectDeclaration","title":"ObjectDeclaration"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/#properties","text":"Name Summary className [jvm] abstract val className : ClassNameNode declarationAsNode [jvm] abstract val declarationAsNode : Node labelArguments [jvm] abstract val labelArguments : Arguments < LabelNode >? name [jvm] abstract val name : ObjectVariableNode typeArguments [jvm] abstract val typeArguments : Arguments < ValueTypeNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/#inheritors","text":"Name DeclarationNode ParameterNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclaration / className className \u00b6 [jvm] Content abstract val className : ClassNameNode","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/class-name/#classname","text":"[jvm] Content abstract val className : ClassNameNode","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/declaration-as-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclaration / declarationAsNode declarationAsNode \u00b6 [jvm] Content abstract val declarationAsNode : Node","title":"Declaration as node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/declaration-as-node/#declarationasnode","text":"[jvm] Content abstract val declarationAsNode : Node","title":"declarationAsNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/label-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclaration / labelArguments labelArguments \u00b6 [jvm] Content abstract val labelArguments : Arguments < LabelNode >?","title":"Label arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/label-arguments/#labelarguments","text":"[jvm] Content abstract val labelArguments : Arguments < LabelNode >?","title":"labelArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclaration / name name \u00b6 [jvm] Content abstract val name : ObjectVariableNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/name/#name","text":"[jvm] Content abstract val name : ObjectVariableNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclaration / typeArguments typeArguments \u00b6 [jvm] Content abstract val typeArguments : Arguments < ValueTypeNode >","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration/type-arguments/#typearguments","text":"[jvm] Content abstract val typeArguments : Arguments < ValueTypeNode >","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclarationArgumentNode ObjectDeclarationArgumentNode \u00b6 [jvm] class ObjectDeclarationArgumentNode ( name : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ObjectDeclarationArgumentNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > name [jvm] val name : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/#objectdeclarationargumentnode","text":"[jvm] class ObjectDeclarationArgumentNode ( name : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode","title":"ObjectDeclarationArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ObjectDeclarationArgumentNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > name [jvm] val name : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/-object-declaration-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclarationArgumentNode / ObjectDeclarationArgumentNode ObjectDeclarationArgumentNode \u00b6 [jvm] Content fun ObjectDeclarationArgumentNode (name: ObjectVariableNode , sourceLocation: SourceLocation )","title":" object declaration argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/-object-declaration-argument-node/#objectdeclarationargumentnode","text":"[jvm] Content fun ObjectDeclarationArgumentNode (name: ObjectVariableNode , sourceLocation: SourceLocation )","title":"ObjectDeclarationArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclarationArgumentNode / children children \u00b6 [jvm] Content open override val children : Iterable < ExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/children/#children","text":"[jvm] Content open override val children : Iterable < ExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclarationArgumentNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclarationArgumentNode / name name \u00b6 [jvm] Content val name : ObjectVariableNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/name/#name","text":"[jvm] Content val name : ObjectVariableNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclarationArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectDeclarationArgumentNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ObjectDeclarationArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-declaration-argument-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ObjectDeclarationArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectReferenceArgumentNode ObjectReferenceArgumentNode \u00b6 [jvm] class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ObjectReferenceArgumentNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/#objectreferenceargumentnode","text":"[jvm] class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionInputArgumentNode","title":"ObjectReferenceArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ObjectReferenceArgumentNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/-object-reference-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectReferenceArgumentNode / ObjectReferenceArgumentNode ObjectReferenceArgumentNode \u00b6 [jvm] Content fun ObjectReferenceArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":" object reference argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/-object-reference-argument-node/#objectreferenceargumentnode","text":"[jvm] Content fun ObjectReferenceArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":"ObjectReferenceArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectReferenceArgumentNode / children children \u00b6 [jvm] Content open override val children : Iterable < ExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/children/#children","text":"[jvm] Content open override val children : Iterable < ExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectReferenceArgumentNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectReferenceArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectReferenceArgumentNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ObjectReferenceArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ObjectReferenceArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ObjectReferenceArgumentNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-object-reference-argument-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode OperatorApplicationNode \u00b6 [jvm] class OperatorApplicationNode ( operator : Operator , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode An n-ary operator applied to n arguments. Constructors \u00b6 Name Summary OperatorApplicationNode [jvm] fun OperatorApplicationNode (operator: Operator , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OperatorApplicationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OperatorApplicationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > operator [jvm] val operator : Operator sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/#operatorapplicationnode","text":"[jvm] class OperatorApplicationNode ( operator : Operator , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode An n-ary operator applied to n arguments.","title":"OperatorApplicationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/#constructors","text":"Name Summary OperatorApplicationNode [jvm] fun OperatorApplicationNode (operator: Operator , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OperatorApplicationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OperatorApplicationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > operator [jvm] val operator : Operator sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/-operator-application-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode / OperatorApplicationNode OperatorApplicationNode \u00b6 [jvm] Content fun OperatorApplicationNode (operator: Operator , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":" operator application node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/-operator-application-node/#operatorapplicationnode","text":"[jvm] Content fun OperatorApplicationNode (operator: Operator , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":"OperatorApplicationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): OperatorApplicationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): OperatorApplicationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode / operator operator \u00b6 [jvm] Content val operator : Operator","title":"Operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/operator/#operator","text":"[jvm] Content val operator : Operator","title":"operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OperatorApplicationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): OperatorApplicationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-operator-application-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): OperatorApplicationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterArgumentNode OutParameterArgumentNode \u00b6 [jvm] class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OutParameterArgumentNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > parameter [jvm] val parameter : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/#outparameterargumentnode","text":"[jvm] class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionOutputArgumentNode","title":"OutParameterArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OutParameterArgumentNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < ExpressionNode > parameter [jvm] val parameter : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/-out-parameter-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterArgumentNode / OutParameterArgumentNode OutParameterArgumentNode \u00b6 [jvm] Content fun OutParameterArgumentNode (parameter: ObjectVariableNode , sourceLocation: SourceLocation )","title":" out parameter argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/-out-parameter-argument-node/#outparameterargumentnode","text":"[jvm] Content fun OutParameterArgumentNode (parameter: ObjectVariableNode , sourceLocation: SourceLocation )","title":"OutParameterArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterArgumentNode / children children \u00b6 [jvm] Content open override val children : Iterable < ExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/children/#children","text":"[jvm] Content open override val children : Iterable < ExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterArgumentNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterArgumentNode / parameter parameter \u00b6 [jvm] Content val parameter : ObjectVariableNode","title":"Parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/parameter/#parameter","text":"[jvm] Content val parameter : ObjectVariableNode","title":"parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterArgumentNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): OutParameterArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-argument-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): OutParameterArgumentNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode OutParameterConstructorInitializerNode \u00b6 [jvm] class OutParameterConstructorInitializerNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : OutParameterInitializerNode Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OutParameterConstructorInitializerNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > className [jvm] val className : ClassNameNode labelArguments [jvm] val labelArguments : Arguments < LabelNode >? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] val typeArguments : Arguments < ValueTypeNode >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/#outparameterconstructorinitializernode","text":"[jvm] class OutParameterConstructorInitializerNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : OutParameterInitializerNode","title":"OutParameterConstructorInitializerNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OutParameterConstructorInitializerNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > className [jvm] val className : ClassNameNode labelArguments [jvm] val labelArguments : Arguments < LabelNode >? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] val typeArguments : Arguments < ValueTypeNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/-out-parameter-constructor-initializer-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / OutParameterConstructorInitializerNode OutParameterConstructorInitializerNode \u00b6 [jvm] Content fun OutParameterConstructorInitializerNode (className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":" out parameter constructor initializer node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/-out-parameter-constructor-initializer-node/#outparameterconstructorinitializernode","text":"[jvm] Content fun OutParameterConstructorInitializerNode (className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":"OutParameterConstructorInitializerNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / className className \u00b6 [jvm] Content val className : ClassNameNode","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/class-name/#classname","text":"[jvm] Content val className : ClassNameNode","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): OutParameterConstructorInitializerNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): OutParameterConstructorInitializerNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/label-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / labelArguments labelArguments \u00b6 [jvm] Content val labelArguments : Arguments < LabelNode >?","title":"Label arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/label-arguments/#labelarguments","text":"[jvm] Content val labelArguments : Arguments < LabelNode >?","title":"labelArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterConstructorInitializerNode / typeArguments typeArguments \u00b6 [jvm] Content val typeArguments : Arguments < ValueTypeNode >","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/type-arguments/#typearguments","text":"[jvm] Content val typeArguments : Arguments < ValueTypeNode >","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterExpressionInitializerNode OutParameterExpressionInitializerNode \u00b6 [jvm] class OutParameterExpressionInitializerNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : OutParameterInitializerNode Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > expression [jvm] val expression : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/#outparameterexpressioninitializernode","text":"[jvm] class OutParameterExpressionInitializerNode ( expression : AtomicExpressionNode , sourceLocation : SourceLocation ) : OutParameterInitializerNode","title":"OutParameterExpressionInitializerNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > expression [jvm] val expression : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/-out-parameter-expression-initializer-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterExpressionInitializerNode / OutParameterExpressionInitializerNode OutParameterExpressionInitializerNode \u00b6 [jvm] Content fun OutParameterExpressionInitializerNode (expression: AtomicExpressionNode , sourceLocation: SourceLocation )","title":" out parameter expression initializer node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/-out-parameter-expression-initializer-node/#outparameterexpressioninitializernode","text":"[jvm] Content fun OutParameterExpressionInitializerNode (expression: AtomicExpressionNode , sourceLocation: SourceLocation )","title":"OutParameterExpressionInitializerNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterExpressionInitializerNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterExpressionInitializerNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterExpressionInitializerNode / expression expression \u00b6 [jvm] Content val expression : AtomicExpressionNode","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/expression/#expression","text":"[jvm] Content val expression : AtomicExpressionNode","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterExpressionInitializerNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterExpressionInitializerNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode OutParameterInitializationNode \u00b6 [jvm] class OutParameterInitializationNode ( name : ObjectVariableNode , initializer : OutParameterInitializerNode , sourceLocation : SourceLocation ) : SimpleStatementNode Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OutParameterInitializationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OutParameterInitializationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < OutParameterInitializerNode > initializer [jvm] val initializer : OutParameterInitializerNode name [jvm] val name : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/#outparameterinitializationnode","text":"[jvm] class OutParameterInitializationNode ( name : ObjectVariableNode , initializer : OutParameterInitializerNode , sourceLocation : SourceLocation ) : SimpleStatementNode","title":"OutParameterInitializationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OutParameterInitializationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OutParameterInitializationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < OutParameterInitializerNode > initializer [jvm] val initializer : OutParameterInitializerNode name [jvm] val name : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/-out-parameter-initialization-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode / OutParameterInitializationNode OutParameterInitializationNode \u00b6 [jvm] Content fun OutParameterInitializationNode (name: ObjectVariableNode , initializer: OutParameterInitializerNode , sourceLocation: SourceLocation )","title":" out parameter initialization node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/-out-parameter-initialization-node/#outparameterinitializationnode","text":"[jvm] Content fun OutParameterInitializationNode (name: ObjectVariableNode , initializer: OutParameterInitializerNode , sourceLocation: SourceLocation )","title":"OutParameterInitializationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode / children children \u00b6 [jvm] Content open override val children : Iterable < OutParameterInitializerNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/children/#children","text":"[jvm] Content open override val children : Iterable < OutParameterInitializerNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): OutParameterInitializationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): OutParameterInitializationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/initializer/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode / initializer initializer \u00b6 [jvm] Content val initializer : OutParameterInitializerNode","title":"Initializer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/initializer/#initializer","text":"[jvm] Content val initializer : OutParameterInitializerNode","title":"initializer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode / name name \u00b6 [jvm] Content val name : ObjectVariableNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/name/#name","text":"[jvm] Content val name : ObjectVariableNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): OutParameterInitializationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initialization-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): OutParameterInitializationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initializer-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutParameterInitializerNode OutParameterInitializerNode \u00b6 [jvm] sealed class OutParameterInitializerNode : Node Functions \u00b6 Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name OutParameterExpressionInitializerNode OutParameterConstructorInitializerNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initializer-node/#outparameterinitializernode","text":"[jvm] sealed class OutParameterInitializerNode : Node","title":"OutParameterInitializerNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initializer-node/#functions","text":"Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initializer-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-out-parameter-initializer-node/#inheritors","text":"Name OutParameterExpressionInitializerNode OutParameterConstructorInitializerNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode OutputNode \u00b6 [jvm] class OutputNode ( message : AtomicExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode , ExternalCommunicationNode An external output. Constructors \u00b6 Name Summary OutputNode [jvm] fun OutputNode (message: AtomicExpressionNode , host: HostNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OutputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OutputNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > host [jvm] open override val host : HostNode message [jvm] val message : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/#outputnode","text":"[jvm] class OutputNode ( message : AtomicExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode , ExternalCommunicationNode An external output.","title":"OutputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/#constructors","text":"Name Summary OutputNode [jvm] fun OutputNode (message: AtomicExpressionNode , host: HostNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): OutputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): OutputNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > host [jvm] open override val host : HostNode message [jvm] val message : AtomicExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/-output-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode / OutputNode OutputNode \u00b6 [jvm] Content fun OutputNode (message: AtomicExpressionNode , host: HostNode , sourceLocation: SourceLocation )","title":" output node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/-output-node/#outputnode","text":"[jvm] Content fun OutputNode (message: AtomicExpressionNode , host: HostNode , sourceLocation: SourceLocation )","title":"OutputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): OutputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): OutputNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode / host host \u00b6 [jvm] Content open override val host : HostNode","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/host/#host","text":"[jvm] Content open override val host : HostNode","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/message/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode / message message \u00b6 [jvm] Content val message : AtomicExpressionNode","title":"Message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/message/#message","text":"[jvm] Content val message : AtomicExpressionNode","title":"message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / OutputNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): OutputNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-output-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): OutputNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode ParameterNode \u00b6 [jvm] class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node , ObjectDeclaration A parameter to a function declaration. Constructors \u00b6 Name Summary ParameterNode [jvm] fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < BlockNode > className [jvm] open override val className : ClassNameNode declarationAsNode [jvm] open override val declarationAsNode : Node isInParameter [jvm] val isInParameter : Boolean isOutParameter [jvm] val isOutParameter : Boolean labelArguments [jvm] open override val labelArguments : Arguments < LabelNode >? name [jvm] open override val name : ObjectVariableNode parameterDirection [jvm] val parameterDirection : ParameterDirection protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] open override val typeArguments : Arguments < ValueTypeNode >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/#parameternode","text":"[jvm] class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node , ObjectDeclaration A parameter to a function declaration.","title":"ParameterNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/#constructors","text":"Name Summary ParameterNode [jvm] fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < BlockNode > className [jvm] open override val className : ClassNameNode declarationAsNode [jvm] open override val declarationAsNode : Node isInParameter [jvm] val isInParameter : Boolean isOutParameter [jvm] val isOutParameter : Boolean labelArguments [jvm] open override val labelArguments : Arguments < LabelNode >? name [jvm] open override val name : ObjectVariableNode parameterDirection [jvm] val parameterDirection : ParameterDirection protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] open override val typeArguments : Arguments < ValueTypeNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/-parameter-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / ParameterNode ParameterNode \u00b6 [jvm] Content fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":" parameter node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/-parameter-node/#parameternode","text":"[jvm] Content fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"ParameterNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / children children \u00b6 [jvm] Content open override val children : Iterable < BlockNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/children/#children","text":"[jvm] Content open override val children : Iterable < BlockNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / className className \u00b6 [jvm] Content open override val className : ClassNameNode","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/class-name/#classname","text":"[jvm] Content open override val className : ClassNameNode","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/declaration-as-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / declarationAsNode declarationAsNode \u00b6 [jvm] Content open override val declarationAsNode : Node","title":"Declaration as node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/declaration-as-node/#declarationasnode","text":"[jvm] Content open override val declarationAsNode : Node","title":"declarationAsNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/is-in-parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / isInParameter isInParameter \u00b6 [jvm] Content val isInParameter : Boolean","title":"Is in parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/is-in-parameter/#isinparameter","text":"[jvm] Content val isInParameter : Boolean","title":"isInParameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/is-out-parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / isOutParameter isOutParameter \u00b6 [jvm] Content val isOutParameter : Boolean","title":"Is out parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/is-out-parameter/#isoutparameter","text":"[jvm] Content val isOutParameter : Boolean","title":"isOutParameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/label-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / labelArguments labelArguments \u00b6 [jvm] Content open override val labelArguments : Arguments < LabelNode >?","title":"Label arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/label-arguments/#labelarguments","text":"[jvm] Content open override val labelArguments : Arguments < LabelNode >?","title":"labelArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / name name \u00b6 [jvm] Content open override val name : ObjectVariableNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/name/#name","text":"[jvm] Content open override val name : ObjectVariableNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/parameter-direction/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / parameterDirection parameterDirection \u00b6 [jvm] Content val parameterDirection : ParameterDirection","title":"Parameter direction"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/parameter-direction/#parameterdirection","text":"[jvm] Content val parameterDirection : ParameterDirection","title":"parameterDirection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode ?","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode ?","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): Node More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ParameterNode / typeArguments typeArguments \u00b6 [jvm] Content open override val typeArguments : Arguments < ValueTypeNode >","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-parameter-node/type-arguments/#typearguments","text":"[jvm] Content open override val typeArguments : Arguments < ValueTypeNode >","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode ProcessDeclarationNode \u00b6 [jvm] class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A process declaration associating a protocol with the code that process should run. Parameters \u00b6 jvm Name Summary protocol Name of the process. body Code that will be executed by this process. Constructors \u00b6 Name Summary ProcessDeclarationNode [jvm] fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation )Name of the process. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): ProcessDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ProcessDeclarationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document body [jvm] val body : BlockNode Code that will be executed by this process. children [jvm] open override val children : Iterable < BlockNode > protocol [jvm] val protocol : ProtocolNode Name of the process. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/#processdeclarationnode","text":"[jvm] class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A process declaration associating a protocol with the code that process should run.","title":"ProcessDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/#parameters","text":"jvm Name Summary protocol Name of the process. body Code that will be executed by this process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/#constructors","text":"Name Summary ProcessDeclarationNode [jvm] fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation )Name of the process.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): ProcessDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ProcessDeclarationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document body [jvm] val body : BlockNode Code that will be executed by this process. children [jvm] open override val children : Iterable < BlockNode > protocol [jvm] val protocol : ProtocolNode Name of the process. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/-process-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / ProcessDeclarationNode ProcessDeclarationNode \u00b6 [jvm] Content fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary protocol Name of the process. body Code that will be executed by this process.","title":" process declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/-process-declaration-node/#processdeclarationnode","text":"[jvm] Content fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation ) More info","title":"ProcessDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/-process-declaration-node/#parameters","text":"jvm Name Summary protocol Name of the process. body Code that will be executed by this process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / body body \u00b6 [jvm] Content val body : BlockNode More info Parameters \u00b6 jvm Name Summary body Code that will be executed by this process.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/body/#body","text":"[jvm] Content val body : BlockNode More info","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/body/#parameters","text":"jvm Name Summary body Code that will be executed by this process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / children children \u00b6 [jvm] Content open override val children : Iterable < BlockNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/children/#children","text":"[jvm] Content open override val children : Iterable < BlockNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): ProcessDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): ProcessDeclarationNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/print-metadata/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / printMetadata printMetadata \u00b6 [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"Print metadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/print-metadata/#printmetadata","text":"[jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"printMetadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode More info Parameters \u00b6 jvm Name Summary protocol Name of the process.","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode More info","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/protocol/#parameters","text":"jvm Name Summary protocol Name of the process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProcessDeclarationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ProcessDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-process-declaration-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ProcessDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode ProgramNode \u00b6 [jvm] class ProgramNode : Node , List < TopLevelDeclarationNode > The intermediate level representation of a program. Instances are created by elaborated . Constructors \u00b6 Name Summary ProgramNode [jvm] fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary contains [jvm] Content open operator override fun contains (element: TopLevelDeclarationNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < TopLevelDeclarationNode >): Boolean copy [jvm] Content open override fun copy (children: List < Node >): ProgramNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer TopLevelDeclarationNode >) get [jvm] Content open operator override fun get (index: Int ): TopLevelDeclarationNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: TopLevelDeclarationNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < TopLevelDeclarationNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: TopLevelDeclarationNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < TopLevelDeclarationNode > open override fun listIterator (index: Int ): ListIterator < TopLevelDeclarationNode > parallelStream [jvm] Content open fun parallelStream (): Stream < TopLevelDeclarationNode > printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document spliterator [jvm] Content open override fun spliterator (): Spliterator < TopLevelDeclarationNode > stream [jvm] Content open fun stream (): Stream < TopLevelDeclarationNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < TopLevelDeclarationNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ProgramNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < TopLevelDeclarationNode > declarations [jvm] val declarations : PersistentList< TopLevelDeclarationNode > functionMap [jvm] val functionMap : Map < FunctionName , FunctionDeclarationNode > functions [jvm] val functions : Iterable < FunctionDeclarationNode > hostDeclarations [jvm] val hostDeclarations : Iterable < HostDeclarationNode > hosts [jvm] val hosts : Set < Host > size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation Extensions \u00b6 Name Summary annotateWithProtocols [jvm] Content fun ProgramNode . annotateWithProtocols (assignment: ( FunctionName , Variable ) -> Protocol ): ProgramNode More info Annotate parameters, declarations, and let nodes with protocols. check [jvm] Content fun ProgramNode . check () More info Performs all static checks on this program. hasMain [jvm] Content val ProgramNode . hasMain : Boolean main [jvm] Content val ProgramNode . main : ProcessDeclarationNode More info Returns the declaration of the MainProtocol in this program. specialize [jvm] Content fun ProgramNode . specialize (): ProgramNode More info Returns an AST where every call site is specialized into new functions as much as possible. specification [jvm] Content fun ProgramNode . specification (adversaryLabel: Label ): ProgramNode More info Returns a universal composability (UC) ideal functionality that captures the security behavior of this program. tree [jvm] Content val ProgramNode . tree : Tree< Node , ProgramNode > More info Returns the Tree instance for the program.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/#programnode","text":"[jvm] class ProgramNode : Node , List < TopLevelDeclarationNode > The intermediate level representation of a program. Instances are created by elaborated .","title":"ProgramNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/#constructors","text":"Name Summary ProgramNode [jvm] fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/#functions","text":"Name Summary contains [jvm] Content open operator override fun contains (element: TopLevelDeclarationNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < TopLevelDeclarationNode >): Boolean copy [jvm] Content open override fun copy (children: List < Node >): ProgramNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer TopLevelDeclarationNode >) get [jvm] Content open operator override fun get (index: Int ): TopLevelDeclarationNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: TopLevelDeclarationNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < TopLevelDeclarationNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: TopLevelDeclarationNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < TopLevelDeclarationNode > open override fun listIterator (index: Int ): ListIterator < TopLevelDeclarationNode > parallelStream [jvm] Content open fun parallelStream (): Stream < TopLevelDeclarationNode > printMetadata [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document spliterator [jvm] Content open override fun spliterator (): Spliterator < TopLevelDeclarationNode > stream [jvm] Content open fun stream (): Stream < TopLevelDeclarationNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < TopLevelDeclarationNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ProgramNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < TopLevelDeclarationNode > declarations [jvm] val declarations : PersistentList< TopLevelDeclarationNode > functionMap [jvm] val functionMap : Map < FunctionName , FunctionDeclarationNode > functions [jvm] val functions : Iterable < FunctionDeclarationNode > hostDeclarations [jvm] val hostDeclarations : Iterable < HostDeclarationNode > hosts [jvm] val hosts : Set < Host > size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/#extensions","text":"Name Summary annotateWithProtocols [jvm] Content fun ProgramNode . annotateWithProtocols (assignment: ( FunctionName , Variable ) -> Protocol ): ProgramNode More info Annotate parameters, declarations, and let nodes with protocols. check [jvm] Content fun ProgramNode . check () More info Performs all static checks on this program. hasMain [jvm] Content val ProgramNode . hasMain : Boolean main [jvm] Content val ProgramNode . main : ProcessDeclarationNode More info Returns the declaration of the MainProtocol in this program. specialize [jvm] Content fun ProgramNode . specialize (): ProgramNode More info Returns an AST where every call site is specialized into new functions as much as possible. specification [jvm] Content fun ProgramNode . specification (adversaryLabel: Label ): ProgramNode More info Returns a universal composability (UC) ideal functionality that captures the security behavior of this program. tree [jvm] Content val ProgramNode . tree : Tree< Node , ProgramNode > More info Returns the Tree instance for the program.","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/-program-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / ProgramNode ProgramNode \u00b6 [jvm] Content fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation )","title":" program node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/-program-node/#programnode","text":"[jvm] Content fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation )","title":"ProgramNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / children children \u00b6 [jvm] Content open override val children : Iterable < TopLevelDeclarationNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/children/#children","text":"[jvm] Content open override val children : Iterable < TopLevelDeclarationNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): ProgramNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): ProgramNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/declarations/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / declarations declarations \u00b6 [jvm] Content val declarations : PersistentList< TopLevelDeclarationNode >","title":"Declarations"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/declarations/#declarations","text":"[jvm] Content val declarations : PersistentList< TopLevelDeclarationNode >","title":"declarations"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/function-map/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / functionMap functionMap \u00b6 [jvm] Content val functionMap : Map < FunctionName , FunctionDeclarationNode >","title":"Function map"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/function-map/#functionmap","text":"[jvm] Content val functionMap : Map < FunctionName , FunctionDeclarationNode >","title":"functionMap"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/functions/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / functions functions \u00b6 [jvm] Content val functions : Iterable < FunctionDeclarationNode >","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/functions/#functions","text":"[jvm] Content val functions : Iterable < FunctionDeclarationNode >","title":"functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/host-declarations/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / hostDeclarations hostDeclarations \u00b6 [jvm] Content val hostDeclarations : Iterable < HostDeclarationNode >","title":"Host declarations"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/host-declarations/#hostdeclarations","text":"[jvm] Content val hostDeclarations : Iterable < HostDeclarationNode >","title":"hostDeclarations"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / hosts hosts \u00b6 [jvm] Content val hosts : Set < Host >","title":"Hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/hosts/#hosts","text":"[jvm] Content val hosts : Set < Host >","title":"hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/print-metadata/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / printMetadata printMetadata \u00b6 [jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"Print metadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/print-metadata/#printmetadata","text":"[jvm] Content open override fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document","title":"printMetadata"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ProgramNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ProgramNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-program-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ProgramNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-pure-expression-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / PureExpressionNode PureExpressionNode \u00b6 [jvm] sealed class PureExpressionNode : ExpressionNode Functions \u00b6 Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): ExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract override val children : Iterable < AtomicExpressionNode > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name AtomicExpressionNode OperatorApplicationNode QueryNode DowngradeNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-pure-expression-node/#pureexpressionnode","text":"[jvm] sealed class PureExpressionNode : ExpressionNode","title":"PureExpressionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-pure-expression-node/#functions","text":"Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): ExpressionNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): ExpressionNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-pure-expression-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract override val children : Iterable < AtomicExpressionNode > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-pure-expression-node/#inheritors","text":"Name AtomicExpressionNode OperatorApplicationNode QueryNode DowngradeNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode QueryNode \u00b6 [jvm] class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode A query method applied to an object. Constructors \u00b6 Name Summary QueryNode [jvm] fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): QueryNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): QueryNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > query [jvm] val query : QueryNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/#querynode","text":"[jvm] class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : PureExpressionNode A query method applied to an object.","title":"QueryNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/#constructors","text":"Name Summary QueryNode [jvm] fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): QueryNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): QueryNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > query [jvm] val query : QueryNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/-query-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / QueryNode QueryNode \u00b6 [jvm] Content fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":" query node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/-query-node/#querynode","text":"[jvm] Content fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":"QueryNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): QueryNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): QueryNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/query/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / query query \u00b6 [jvm] Content val query : QueryNameNode","title":"Query"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/query/#query","text":"[jvm] Content val query : QueryNameNode","title":"query"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): QueryNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): QueryNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / QueryNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-query-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReadNode ReadNode \u00b6 [jvm] class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode Reading the value stored in a temporary. Constructors \u00b6 Name Summary ReadNode [jvm] fun ReadNode (temporary: TemporaryNode ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): ReadNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ReadNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < Nothing > sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/#readnode","text":"[jvm] class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode Reading the value stored in a temporary.","title":"ReadNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/#constructors","text":"Name Summary ReadNode [jvm] fun ReadNode (temporary: TemporaryNode )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): ReadNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ReadNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] override val children : Iterable < Nothing > sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/-read-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReadNode / ReadNode ReadNode \u00b6 [jvm] Content fun ReadNode (temporary: TemporaryNode )","title":" read node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/-read-node/#readnode","text":"[jvm] Content fun ReadNode (temporary: TemporaryNode )","title":"ReadNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReadNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): ReadNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): ReadNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReadNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/temporary/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReadNode / temporary temporary \u00b6 [jvm] Content val temporary : TemporaryNode","title":"Temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/temporary/#temporary","text":"[jvm] Content val temporary : TemporaryNode","title":"temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReadNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ReadNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-read-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ReadNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode ReceiveNode \u00b6 [jvm] class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode , InternalCommunicationNode Receiving a value from another protocol. Parameters \u00b6 jvm Name Summary type Type of the value to receive. Constructors \u00b6 Name Summary ReceiveNode [jvm] fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation )Type of the value to receive. Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): ReceiveNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ReceiveNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Nothing > protocol [jvm] open override val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/#receivenode","text":"[jvm] class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode , InternalCommunicationNode Receiving a value from another protocol.","title":"ReceiveNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/#constructors","text":"Name Summary ReceiveNode [jvm] fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation )Type of the value to receive.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): ReceiveNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): ReceiveNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < Nothing > protocol [jvm] open override val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/-receive-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode / ReceiveNode ReceiveNode \u00b6 [jvm] Content fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":" receive node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/-receive-node/#receivenode","text":"[jvm] Content fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation ) More info","title":"ReceiveNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/-receive-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode / children children \u00b6 [jvm] Content open override val children : Iterable < Nothing >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/children/#children","text":"[jvm] Content open override val children : Iterable < Nothing >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): ReceiveNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): ReceiveNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode / protocol protocol \u00b6 [jvm] Content open override val protocol : ProtocolNode","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/protocol/#protocol","text":"[jvm] Content open override val protocol : ProtocolNode","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): ReceiveNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): ReceiveNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for PrettyPrintable.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / ReceiveNode / type type \u00b6 [jvm] Content val type : ValueTypeNode More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/type/#type","text":"[jvm] Content val type : ValueTypeNode More info","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-receive-node/type/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode SendNode \u00b6 [jvm] class SendNode ( message : AtomicExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode , InternalCommunicationNode Sending a value to another protocol. Constructors \u00b6 Name Summary SendNode [jvm] fun SendNode (message: AtomicExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): SendNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): SendNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > message [jvm] val message : AtomicExpressionNode protocol [jvm] open override val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/#sendnode","text":"[jvm] class SendNode ( message : AtomicExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode , InternalCommunicationNode Sending a value to another protocol.","title":"SendNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/#constructors","text":"Name Summary SendNode [jvm] fun SendNode (message: AtomicExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): SendNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): SendNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > message [jvm] val message : AtomicExpressionNode protocol [jvm] open override val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/-send-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode / SendNode SendNode \u00b6 [jvm] Content fun SendNode (message: AtomicExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation )","title":" send node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/-send-node/#sendnode","text":"[jvm] Content fun SendNode (message: AtomicExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation )","title":"SendNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): SendNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): SendNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/message/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode / message message \u00b6 [jvm] Content val message : AtomicExpressionNode","title":"Message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/message/#message","text":"[jvm] Content val message : AtomicExpressionNode","title":"message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode / protocol protocol \u00b6 [jvm] Content open override val protocol : ProtocolNode","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/protocol/#protocol","text":"[jvm] Content open override val protocol : ProtocolNode","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SendNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): SendNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-send-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): SendNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SimpleStatementNode SimpleStatementNode \u00b6 [jvm] sealed class SimpleStatementNode : StatementNode A statement that is not a combination of other statements, and that does not affect control flow. Functions \u00b6 Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): SimpleStatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): SimpleStatementNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract override val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name LetNode DeclarationNode UpdateNode OutParameterInitializationNode OutputNode SendNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/#simplestatementnode","text":"[jvm] sealed class SimpleStatementNode : StatementNode A statement that is not a combination of other statements, and that does not affect control flow.","title":"SimpleStatementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/#functions","text":"Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): SimpleStatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): SimpleStatementNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract override val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/#inheritors","text":"Name LetNode DeclarationNode UpdateNode OutParameterInitializationNode OutputNode SendNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SimpleStatementNode / children children \u00b6 [jvm] Content abstract override val children : Iterable < Node >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/children/#children","text":"[jvm] Content abstract override val children : Iterable < Node >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SimpleStatementNode / copy copy \u00b6 [jvm] Content abstract override fun copy (children: List < Node >): SimpleStatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/copy/#copy","text":"[jvm] Content abstract override fun copy (children: List < Node >): SimpleStatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / SimpleStatementNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content abstract override fun toSurfaceNode (): SimpleStatementNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-simple-statement-node/to-surface-node/#tosurfacenode","text":"[jvm] Content abstract override fun toSurfaceNode (): SimpleStatementNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / StatementNode StatementNode \u00b6 [jvm] sealed class StatementNode : Node A computation with side effects. Functions \u00b6 Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): StatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): StatementNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name SimpleStatementNode ControlNode AssertionNode BlockNode Extensions \u00b6 Name Summary canMux [jvm] Content fun StatementNode . canMux (): Boolean createdVariables [jvm] Content fun StatementNode . createdVariables (): List < Variable > immediateRHS [jvm] Content fun StatementNode . immediateRHS (): List < ExpressionNode > More info Recursively traverses the children of this node, then applies f to this node.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/#statementnode","text":"[jvm] sealed class StatementNode : Node A computation with side effects.","title":"StatementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/#functions","text":"Name Summary copy [jvm] Content abstract override fun copy (children: List < Node >): StatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): StatementNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/#inheritors","text":"Name SimpleStatementNode ControlNode AssertionNode BlockNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/#extensions","text":"Name Summary canMux [jvm] Content fun StatementNode . canMux (): Boolean createdVariables [jvm] Content fun StatementNode . createdVariables (): List < Variable > immediateRHS [jvm] Content fun StatementNode . immediateRHS (): List < ExpressionNode > More info Recursively traverses the children of this node, then applies f to this node.","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / StatementNode / copy copy \u00b6 [jvm] Content abstract override fun copy (children: List < Node >): StatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/copy/#copy","text":"[jvm] Content abstract override fun copy (children: List < Node >): StatementNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / StatementNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content abstract override fun toSurfaceNode (): StatementNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-statement-node/to-surface-node/#tosurfacenode","text":"[jvm] Content abstract override fun toSurfaceNode (): StatementNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-top-level-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / TopLevelDeclarationNode TopLevelDeclarationNode \u00b6 [jvm] sealed class TopLevelDeclarationNode : Node A declaration at the top level of a file. Functions \u00b6 Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name HostDeclarationNode ProcessDeclarationNode FunctionDeclarationNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-top-level-declaration-node/#topleveldeclarationnode","text":"[jvm] sealed class TopLevelDeclarationNode : Node A declaration at the top level of a file.","title":"TopLevelDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-top-level-declaration-node/#functions","text":"Name Summary copy [jvm] Content abstract fun copy (children: List < Node > = this.children.toList()): Node More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content abstract override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-top-level-declaration-node/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document children [jvm] abstract val children : Iterable < Node > sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-top-level-declaration-node/#inheritors","text":"Name HostDeclarationNode ProcessDeclarationNode FunctionDeclarationNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-top-level-declaration-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / TopLevelDeclarationNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content abstract override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-top-level-declaration-node/to-surface-node/#tosurfacenode","text":"[jvm] Content abstract override fun toSurfaceNode (): TopLevelDeclarationNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode UpdateNode \u00b6 [jvm] class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode An update method applied to an object. Constructors \u00b6 Name Summary UpdateNode [jvm] fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary copy [jvm] Content open override fun copy (children: List < Node >): UpdateNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): UpdateNode More info Returns a representation of this node in the surface syntax. Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > sourceLocation [jvm] open override val sourceLocation : SourceLocation update [jvm] val update : UpdateNameNode variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/#updatenode","text":"[jvm] class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < AtomicExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode An update method applied to an object.","title":"UpdateNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/#constructors","text":"Name Summary UpdateNode [jvm] fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/#functions","text":"Name Summary copy [jvm] Content open override fun copy (children: List < Node >): UpdateNode More info Returns a shallow copy of this node where the child nodes are replaced by children . equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int printMetadata [jvm] Content open fun printMetadata (metadata: Map < Node , PrettyPrintable>): Document toString [jvm] Content open fun toString (): String toSurfaceNode [jvm] Content open override fun toSurfaceNode (): UpdateNode More info Returns a representation of this node in the surface syntax.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < AtomicExpressionNode > asDocument [jvm] override val asDocument : Document children [jvm] open override val children : Iterable < AtomicExpressionNode > sourceLocation [jvm] open override val sourceLocation : SourceLocation update [jvm] val update : UpdateNameNode variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/-update-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / UpdateNode UpdateNode \u00b6 [jvm] Content fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":" update node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/-update-node/#updatenode","text":"[jvm] Content fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < AtomicExpressionNode >, sourceLocation: SourceLocation )","title":"UpdateNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < AtomicExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/children/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / children children \u00b6 [jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"Children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/children/#children","text":"[jvm] Content open override val children : Iterable < AtomicExpressionNode >","title":"children"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / copy copy \u00b6 [jvm] Content open override fun copy (children: List < Node >): UpdateNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/copy/#copy","text":"[jvm] Content open override fun copy (children: List < Node >): UpdateNode More info Returns a shallow copy of this node where the child nodes are replaced by children . This method can be used to generate objects with unique object identities, for example, when constructing a Tree since Tree assumes there is no sharing. The returned node is guaranteed to have a new object identity even if children exactly matches the children of this node, however, the nodes in children themselves are not copied. This method assumes that children contains the correct number and types of nodes.","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/to-surface-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / toSurfaceNode toSurfaceNode \u00b6 [jvm] Content open override fun toSurfaceNode (): UpdateNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"To surface node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/to-surface-node/#tosurfacenode","text":"[jvm] Content open override fun toSurfaceNode (): UpdateNode More info Returns a representation of this node in the surface syntax. This is useful, for example, for pretty printing.","title":"toSurfaceNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/update/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / update update \u00b6 [jvm] Content val update : UpdateNameNode","title":"Update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/update/#update","text":"[jvm] Content val update : UpdateNameNode","title":"update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.intermediate / UpdateNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.intermediate/-update-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators Package edu.cornell.cs.apl.viaduct.syntax.operators \u00b6 Types \u00b6 Name Summary Addition [jvm] Content object Addition : ArithmeticOperator AdditiveOperatorPrecedence [jvm] Content object AdditiveOperatorPrecedence : Precedence More info The precedence of Addition and Subtraction . And [jvm] Content object And : LogicalOperator ArithmeticOperator [jvm] Content abstract class ArithmeticOperator : BinaryInfixOperator More info An infix operator that takes two numbers and returns a number. BinaryInfixOperator [jvm] Content abstract class BinaryInfixOperator : BinaryOperator , InfixOperator More info A binary infix operator. BinaryPrefixOperator [jvm] Content abstract class BinaryPrefixOperator : BinaryOperator , PrefixOperator More info A binary prefix operator. ComparisonOperator [jvm] Content abstract class ComparisonOperator : BinaryInfixOperator More info An infix operator that takes two numbers and returns a boolean. ComparisonOperatorPrecedence [jvm] Content object ComparisonOperatorPrecedence : Precedence More info The precedence of ComparisonOperator s. Division [jvm] Content object Division : ArithmeticOperator EqualTo [jvm] Content object EqualTo : ComparisonOperator ExclusiveOr [jvm] Content object ExclusiveOr : ComparisonOperator GreaterThan [jvm] Content object GreaterThan : ComparisonOperator GreaterThanOrEqualTo [jvm] Content object GreaterThanOrEqualTo : ComparisonOperator LessThan [jvm] Content object LessThan : ComparisonOperator LessThanOrEqualTo [jvm] Content object LessThanOrEqualTo : ComparisonOperator LogicalOperator [jvm] Content abstract class LogicalOperator : BinaryInfixOperator More info An infix operator that takes two booleans and returns a boolean. LogicalOperatorPrecedence [jvm] Content object LogicalOperatorPrecedence : Precedence More info The precedence of LogicalOperator s. Maximum [jvm] Content object Maximum : BinaryPrefixOperator Minimum [jvm] Content object Minimum : BinaryPrefixOperator Multiplication [jvm] Content object Multiplication : ArithmeticOperator MultiplicativeOperatorPrecedence [jvm] Content object MultiplicativeOperatorPrecedence : Precedence More info The precedence of Multiplication and Division . Mux [jvm] Content object Mux : InfixOperator More info Cases on the first argument; evaluates to the second argument if the first argument is true, and to the third argument if the first argument is false. Negation [jvm] Content object Negation : UnaryPrefixOperator Not [jvm] Content object Not : UnaryPrefixOperator Or [jvm] Content object Or : LogicalOperator Subtraction [jvm] Content object Subtraction : ArithmeticOperator UnaryPrefixOperator [jvm] Content abstract class UnaryPrefixOperator : UnaryOperator , PrefixOperator More info A unary prefix operator.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/#package-educornellcsaplviaductsyntaxoperators","text":"","title":"Package edu.cornell.cs.apl.viaduct.syntax.operators"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/#types","text":"Name Summary Addition [jvm] Content object Addition : ArithmeticOperator AdditiveOperatorPrecedence [jvm] Content object AdditiveOperatorPrecedence : Precedence More info The precedence of Addition and Subtraction . And [jvm] Content object And : LogicalOperator ArithmeticOperator [jvm] Content abstract class ArithmeticOperator : BinaryInfixOperator More info An infix operator that takes two numbers and returns a number. BinaryInfixOperator [jvm] Content abstract class BinaryInfixOperator : BinaryOperator , InfixOperator More info A binary infix operator. BinaryPrefixOperator [jvm] Content abstract class BinaryPrefixOperator : BinaryOperator , PrefixOperator More info A binary prefix operator. ComparisonOperator [jvm] Content abstract class ComparisonOperator : BinaryInfixOperator More info An infix operator that takes two numbers and returns a boolean. ComparisonOperatorPrecedence [jvm] Content object ComparisonOperatorPrecedence : Precedence More info The precedence of ComparisonOperator s. Division [jvm] Content object Division : ArithmeticOperator EqualTo [jvm] Content object EqualTo : ComparisonOperator ExclusiveOr [jvm] Content object ExclusiveOr : ComparisonOperator GreaterThan [jvm] Content object GreaterThan : ComparisonOperator GreaterThanOrEqualTo [jvm] Content object GreaterThanOrEqualTo : ComparisonOperator LessThan [jvm] Content object LessThan : ComparisonOperator LessThanOrEqualTo [jvm] Content object LessThanOrEqualTo : ComparisonOperator LogicalOperator [jvm] Content abstract class LogicalOperator : BinaryInfixOperator More info An infix operator that takes two booleans and returns a boolean. LogicalOperatorPrecedence [jvm] Content object LogicalOperatorPrecedence : Precedence More info The precedence of LogicalOperator s. Maximum [jvm] Content object Maximum : BinaryPrefixOperator Minimum [jvm] Content object Minimum : BinaryPrefixOperator Multiplication [jvm] Content object Multiplication : ArithmeticOperator MultiplicativeOperatorPrecedence [jvm] Content object MultiplicativeOperatorPrecedence : Precedence More info The precedence of Multiplication and Division . Mux [jvm] Content object Mux : InfixOperator More info Cases on the first argument; evaluates to the second argument if the first argument is true, and to the third argument if the first argument is false. Negation [jvm] Content object Negation : UnaryPrefixOperator Not [jvm] Content object Not : UnaryPrefixOperator Or [jvm] Content object Or : LogicalOperator Subtraction [jvm] Content object Subtraction : ArithmeticOperator UnaryPrefixOperator [jvm] Content abstract class UnaryPrefixOperator : UnaryOperator , PrefixOperator More info A unary prefix operator.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Addition Addition \u00b6 [jvm] object Addition : ArithmeticOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (left: Int , right: Int ): Int [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/#addition","text":"[jvm] object Addition : ArithmeticOperator","title":"Addition"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (left: Int , right: Int ): Int [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Addition / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Addition / precedence precedence \u00b6 [jvm] Content open override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/precedence/#precedence","text":"[jvm] Content open override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Addition / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-addition/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-additive-operator-precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / AdditiveOperatorPrecedence AdditiveOperatorPrecedence \u00b6 [jvm] object AdditiveOperatorPrecedence : Precedence The precedence of Addition and Subtraction . Functions \u00b6 Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-additive-operator-precedence/#additiveoperatorprecedence","text":"[jvm] object AdditiveOperatorPrecedence : Precedence The precedence of Addition and Subtraction .","title":"AdditiveOperatorPrecedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-additive-operator-precedence/#functions","text":"Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-additive-operator-precedence/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / AdditiveOperatorPrecedence / compareTo compareTo \u00b6 [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-additive-operator-precedence/compare-to/#compareto","text":"[jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / And And \u00b6 [jvm] object And : LogicalOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/#and","text":"[jvm] object And : LogicalOperator","title":"And"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / And / apply apply \u00b6 [jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/apply/#apply","text":"[jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / And / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-and/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ArithmeticOperator ArithmeticOperator \u00b6 [jvm] abstract class ArithmeticOperator : BinaryInfixOperator An infix operator that takes two numbers and returns a number. Constructors \u00b6 Name Summary ArithmeticOperator [jvm] fun ArithmeticOperator () Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] override val type : FunctionType Inheritors \u00b6 Name Addition Subtraction Multiplication Division","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/#arithmeticoperator","text":"[jvm] abstract class ArithmeticOperator : BinaryInfixOperator An infix operator that takes two numbers and returns a number.","title":"ArithmeticOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/#constructors","text":"Name Summary ArithmeticOperator [jvm] fun ArithmeticOperator ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/#inheritors","text":"Name Addition Subtraction Multiplication Division","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/-arithmetic-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ArithmeticOperator / ArithmeticOperator ArithmeticOperator \u00b6 [jvm] Content fun ArithmeticOperator ()","title":" arithmetic operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/-arithmetic-operator/#arithmeticoperator","text":"[jvm] Content fun ArithmeticOperator ()","title":"ArithmeticOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ArithmeticOperator / apply apply \u00b6 [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Int","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/apply/#apply","text":"[jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Int","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ArithmeticOperator / associativity associativity \u00b6 [jvm] Content override val associativity : Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/associativity/#associativity","text":"[jvm] Content override val associativity : Associativity","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ArithmeticOperator / type type \u00b6 [jvm] Content override val type : FunctionType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-arithmetic-operator/type/#type","text":"[jvm] Content override val type : FunctionType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / BinaryInfixOperator BinaryInfixOperator \u00b6 [jvm] abstract class BinaryInfixOperator : BinaryOperator , InfixOperator A binary infix operator. Constructors \u00b6 Name Summary BinaryInfixOperator [jvm] fun BinaryInfixOperator () Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name ArithmeticOperator LogicalOperator ComparisonOperator","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/#binaryinfixoperator","text":"[jvm] abstract class BinaryInfixOperator : BinaryOperator , InfixOperator A binary infix operator.","title":"BinaryInfixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/#constructors","text":"Name Summary BinaryInfixOperator [jvm] fun BinaryInfixOperator ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/#inheritors","text":"Name ArithmeticOperator LogicalOperator ComparisonOperator","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/-binary-infix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / BinaryInfixOperator / BinaryInfixOperator BinaryInfixOperator \u00b6 [jvm] Content fun BinaryInfixOperator ()","title":" binary infix operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/-binary-infix-operator/#binaryinfixoperator","text":"[jvm] Content fun BinaryInfixOperator ()","title":"BinaryInfixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / BinaryInfixOperator / asDocument asDocument \u00b6 [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2.","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-infix-operator/as-document/#asdocument","text":"[jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2.","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / BinaryPrefixOperator BinaryPrefixOperator \u00b6 [jvm] abstract class BinaryPrefixOperator : BinaryOperator , PrefixOperator A binary prefix operator. Constructors \u00b6 Name Summary BinaryPrefixOperator [jvm] fun BinaryPrefixOperator () Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name Minimum Maximum","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/#binaryprefixoperator","text":"[jvm] abstract class BinaryPrefixOperator : BinaryOperator , PrefixOperator A binary prefix operator.","title":"BinaryPrefixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/#constructors","text":"Name Summary BinaryPrefixOperator [jvm] fun BinaryPrefixOperator ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content abstract fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] abstract val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/#inheritors","text":"Name Minimum Maximum","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/-binary-prefix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / BinaryPrefixOperator / BinaryPrefixOperator BinaryPrefixOperator \u00b6 [jvm] Content fun BinaryPrefixOperator ()","title":" binary prefix operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/-binary-prefix-operator/#binaryprefixoperator","text":"[jvm] Content fun BinaryPrefixOperator ()","title":"BinaryPrefixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / BinaryPrefixOperator / asDocument asDocument \u00b6 [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2.","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-binary-prefix-operator/as-document/#asdocument","text":"[jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2.","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperator ComparisonOperator \u00b6 [jvm] abstract class ComparisonOperator : BinaryInfixOperator An infix operator that takes two numbers and returns a boolean. Constructors \u00b6 Name Summary ComparisonOperator [jvm] fun ComparisonOperator () Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType Inheritors \u00b6 Name EqualTo ExclusiveOr LessThan LessThanOrEqualTo GreaterThan GreaterThanOrEqualTo","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/#comparisonoperator","text":"[jvm] abstract class ComparisonOperator : BinaryInfixOperator An infix operator that takes two numbers and returns a boolean.","title":"ComparisonOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/#constructors","text":"Name Summary ComparisonOperator [jvm] fun ComparisonOperator ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/#inheritors","text":"Name EqualTo ExclusiveOr LessThan LessThanOrEqualTo GreaterThan GreaterThanOrEqualTo","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/-comparison-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperator / ComparisonOperator ComparisonOperator \u00b6 [jvm] Content fun ComparisonOperator ()","title":" comparison operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/-comparison-operator/#comparisonoperator","text":"[jvm] Content fun ComparisonOperator ()","title":"ComparisonOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperator / apply apply \u00b6 [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/apply/#apply","text":"[jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Int , right: Int ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperator / associativity associativity \u00b6 [jvm] Content override val associativity : Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/associativity/#associativity","text":"[jvm] Content override val associativity : Associativity","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperator / precedence precedence \u00b6 [jvm] Content override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/precedence/#precedence","text":"[jvm] Content override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperator / type type \u00b6 [jvm] Content override val type : FunctionType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator/type/#type","text":"[jvm] Content override val type : FunctionType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator-precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperatorPrecedence ComparisonOperatorPrecedence \u00b6 [jvm] object ComparisonOperatorPrecedence : Precedence The precedence of ComparisonOperator s. Functions \u00b6 Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator-precedence/#comparisonoperatorprecedence","text":"[jvm] object ComparisonOperatorPrecedence : Precedence The precedence of ComparisonOperator s.","title":"ComparisonOperatorPrecedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator-precedence/#functions","text":"Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator-precedence/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ComparisonOperatorPrecedence / compareTo compareTo \u00b6 [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-comparison-operator-precedence/compare-to/#compareto","text":"[jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Division Division \u00b6 [jvm] object Division : ArithmeticOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/#division","text":"[jvm] object Division : ArithmeticOperator","title":"Division"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Division / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Division / precedence precedence \u00b6 [jvm] Content open override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/precedence/#precedence","text":"[jvm] Content open override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Division / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-division/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / EqualTo EqualTo \u00b6 [jvm] object EqualTo : ComparisonOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/#equalto","text":"[jvm] object EqualTo : ComparisonOperator","title":"EqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / EqualTo / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / EqualTo / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-equal-to/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ExclusiveOr ExclusiveOr \u00b6 [jvm] object ExclusiveOr : ComparisonOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/#exclusiveor","text":"[jvm] object ExclusiveOr : ComparisonOperator","title":"ExclusiveOr"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ExclusiveOr / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / ExclusiveOr / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-exclusive-or/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / GreaterThan GreaterThan \u00b6 [jvm] object GreaterThan : ComparisonOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/#greaterthan","text":"[jvm] object GreaterThan : ComparisonOperator","title":"GreaterThan"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / GreaterThan / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / GreaterThan / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / GreaterThanOrEqualTo GreaterThanOrEqualTo \u00b6 [jvm] object GreaterThanOrEqualTo : ComparisonOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/#greaterthanorequalto","text":"[jvm] object GreaterThanOrEqualTo : ComparisonOperator","title":"GreaterThanOrEqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / GreaterThanOrEqualTo / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / GreaterThanOrEqualTo / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-greater-than-or-equal-to/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LessThan LessThan \u00b6 [jvm] object LessThan : ComparisonOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/#lessthan","text":"[jvm] object LessThan : ComparisonOperator","title":"LessThan"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LessThan / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LessThan / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LessThanOrEqualTo LessThanOrEqualTo \u00b6 [jvm] object LessThanOrEqualTo : ComparisonOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/#lessthanorequalto","text":"[jvm] object LessThanOrEqualTo : ComparisonOperator","title":"LessThanOrEqualTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LessThanOrEqualTo / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LessThanOrEqualTo / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-less-than-or-equal-to/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LogicalOperator LogicalOperator \u00b6 [jvm] abstract class LogicalOperator : BinaryInfixOperator An infix operator that takes two booleans and returns a boolean. Constructors \u00b6 Name Summary LogicalOperator [jvm] fun LogicalOperator () Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Boolean , right: Boolean ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType Inheritors \u00b6 Name And Or","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/#logicaloperator","text":"[jvm] abstract class LogicalOperator : BinaryInfixOperator An infix operator that takes two booleans and returns a boolean.","title":"LogicalOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/#constructors","text":"Name Summary LogicalOperator [jvm] fun LogicalOperator ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Boolean , right: Boolean ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/#inheritors","text":"Name And Or","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/-logical-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LogicalOperator / LogicalOperator LogicalOperator \u00b6 [jvm] Content fun LogicalOperator ()","title":" logical operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/-logical-operator/#logicaloperator","text":"[jvm] Content fun LogicalOperator ()","title":"LogicalOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LogicalOperator / apply apply \u00b6 [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Boolean , right: Boolean ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/apply/#apply","text":"[jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content abstract fun apply (left: Boolean , right: Boolean ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LogicalOperator / associativity associativity \u00b6 [jvm] Content override val associativity : Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/associativity/#associativity","text":"[jvm] Content override val associativity : Associativity","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LogicalOperator / precedence precedence \u00b6 [jvm] Content override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/precedence/#precedence","text":"[jvm] Content override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LogicalOperator / type type \u00b6 [jvm] Content override val type : FunctionType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator/type/#type","text":"[jvm] Content override val type : FunctionType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator-precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / LogicalOperatorPrecedence LogicalOperatorPrecedence \u00b6 [jvm] object LogicalOperatorPrecedence : Precedence The precedence of LogicalOperator s. Functions \u00b6 Name Summary compareTo [jvm] Content open fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator-precedence/#logicaloperatorprecedence","text":"[jvm] object LogicalOperatorPrecedence : Precedence The precedence of LogicalOperator s.","title":"LogicalOperatorPrecedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-logical-operator-precedence/#functions","text":"Name Summary compareTo [jvm] Content open fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Maximum Maximum \u00b6 [jvm] object Maximum : BinaryPrefixOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] open override val precedence : Precedence type [jvm] open override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/#maximum","text":"[jvm] object Maximum : BinaryPrefixOperator","title":"Maximum"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] open override val precedence : Precedence type [jvm] open override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Maximum / apply apply \u00b6 [jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/apply/#apply","text":"[jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Maximum / precedence precedence \u00b6 [jvm] Content open override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/precedence/#precedence","text":"[jvm] Content open override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Maximum / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Maximum / type type \u00b6 [jvm] Content open override val type : FunctionType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-maximum/type/#type","text":"[jvm] Content open override val type : FunctionType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Minimum Minimum \u00b6 [jvm] object Minimum : BinaryPrefixOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] open override val precedence : Precedence type [jvm] open override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/#minimum","text":"[jvm] object Minimum : BinaryPrefixOperator","title":"Minimum"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] open override val precedence : Precedence type [jvm] open override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Minimum / apply apply \u00b6 [jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/apply/#apply","text":"[jvm] Content open override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Minimum / precedence precedence \u00b6 [jvm] Content open override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/precedence/#precedence","text":"[jvm] Content open override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Minimum / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Minimum / type type \u00b6 [jvm] Content open override val type : FunctionType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-minimum/type/#type","text":"[jvm] Content open override val type : FunctionType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Multiplication Multiplication \u00b6 [jvm] object Multiplication : ArithmeticOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/#multiplication","text":"[jvm] object Multiplication : ArithmeticOperator","title":"Multiplication"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Multiplication / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Multiplication / precedence precedence \u00b6 [jvm] Content open override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/precedence/#precedence","text":"[jvm] Content open override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Multiplication / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplication/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplicative-operator-precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / MultiplicativeOperatorPrecedence MultiplicativeOperatorPrecedence \u00b6 [jvm] object MultiplicativeOperatorPrecedence : Precedence The precedence of Multiplication and Division . Functions \u00b6 Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplicative-operator-precedence/#multiplicativeoperatorprecedence","text":"[jvm] object MultiplicativeOperatorPrecedence : Precedence The precedence of Multiplication and Division .","title":"MultiplicativeOperatorPrecedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplicative-operator-precedence/#functions","text":"Name Summary compareTo [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplicative-operator-precedence/compare-to/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / MultiplicativeOperatorPrecedence / compareTo compareTo \u00b6 [jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"Compare to"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-multiplicative-operator-precedence/compare-to/#compareto","text":"[jvm] Content open override fun compareTo (other: Precedence ): Order More info Determines the Order of this precedence with respect to other. The result of x.compareTo(y) may be Order.UNDETERMINED , in which case the order is determined by y.compareTo(x). If both of these are Order.UNDETERMINED , then the precedences are not ordered, which is valid. This design supports extensibility. Old operators do not need to know about new operators; their precedence can (and should) compare as Order.UNDETERMINED to the precedence of operators they do not know about. This way, newly added operators can declare their precedence with respect to existing operators without having to change the code for existing operators. This function should satisfy the following properties: If x.compareTo(y) returns [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md), then y.compareTo(x) must return [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). If x.compareTo(y) returns [Order.HIGHER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-h-i-g-h-e-r/index.md), then y.compareTo(x) must return [Order.LOWER](../../edu.cornell.cs.apl.viaduct.syntax/-order/-l-o-w-e-r/index.md) or [Order.UNDETERMINED](../../edu.cornell.cs.apl.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.md). However, this function is not required to be transitive or total. That is, not all operators are required to be ordered with respect to each other. This design facilitates modularity (see Parsing Mixfix Operators ). Note that two different objects implementing this interface can never denote the same precedence since Order does not have an EQUAL option. If two operators have the same precedence, than Operator.precedence must return the same object for both.","title":"compareTo"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Mux Mux \u00b6 [jvm] object Mux : InfixOperator Cases on the first argument; evaluates to the second argument if the first argument is true, and to the third argument if the first argument is false. Functions \u00b6 Name Summary alternativeTypes [jvm] Content open override fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] open override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] open override val type : FunctionType The type of this operator.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/#mux","text":"[jvm] object Mux : InfixOperator Cases on the first argument; evaluates to the second argument if the first argument is true, and to the third argument if the first argument is false.","title":"Mux"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/#functions","text":"Name Summary alternativeTypes [jvm] Content open override fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/#properties","text":"Name Summary associativity [jvm] open override val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] open override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] open override val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/alternative-types/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Mux / alternativeTypes alternativeTypes \u00b6 [jvm] Content open override fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against.","title":"Alternative types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/alternative-types/#alternativetypes","text":"[jvm] Content open override fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against.","title":"alternativeTypes"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Mux / apply apply \u00b6 [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/apply/#apply","text":"[jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Mux / asDocument asDocument \u00b6 [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments.","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/as-document/#asdocument","text":"[jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments.","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/associativity/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Mux / associativity associativity \u00b6 [jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence. See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"Associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/associativity/#associativity","text":"[jvm] Content open override val associativity : Associativity More info Determines the grouping of consecutive operators that have the same precedence.","title":"associativity"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/associativity/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Associativity","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Mux / precedence precedence \u00b6 [jvm] Content open override val precedence : Precedence More info Determines the order of this operator with respect to (a subset of) other operators. Operators with higher precedence bind tighter than operators with lower precedence (for example, multiplication has higher precedence than addition). See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/precedence/#precedence","text":"[jvm] Content open override val precedence : Precedence More info Determines the order of this operator with respect to (a subset of) other operators. Operators with higher precedence bind tighter than operators with lower precedence (for example, multiplication has higher precedence than addition).","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/precedence/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Precedence","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Mux / type type \u00b6 [jvm] Content open override val type : FunctionType More info The type of this operator.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-mux/type/#type","text":"[jvm] Content open override val type : FunctionType More info The type of this operator.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Negation Negation \u00b6 [jvm] object Negation : UnaryPrefixOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] open override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/#negation","text":"[jvm] object Negation : UnaryPrefixOperator","title":"Negation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] open override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Negation / apply apply \u00b6 [jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/apply/#apply","text":"[jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Negation / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Negation / type type \u00b6 [jvm] Content open override val type : FunctionType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-negation/type/#type","text":"[jvm] Content open override val type : FunctionType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Not Not \u00b6 [jvm] object Not : UnaryPrefixOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] open override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/#not","text":"[jvm] object Not : UnaryPrefixOperator","title":"Not"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] open override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Not / apply apply \u00b6 [jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument.","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/apply/#apply","text":"[jvm] Content open override fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument.","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Not / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Not / type type \u00b6 [jvm] Content open override val type : FunctionType","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-not/type/#type","text":"[jvm] Content open override val type : FunctionType","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Or Or \u00b6 [jvm] object Or : LogicalOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/#or","text":"[jvm] object Or : LogicalOperator","title":"Or"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Or / apply apply \u00b6 [jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/apply/#apply","text":"[jvm] Content open override fun apply (left: Boolean , right: Boolean ): Boolean","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Or / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-or/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Subtraction Subtraction \u00b6 [jvm] object Subtraction : ArithmeticOperator Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/#subtraction","text":"[jvm] object Subtraction : ArithmeticOperator","title":"Subtraction"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. [jvm] Content override fun apply (argument1: Value , argument2: Value ): Value More info Computes the result of applying this operator to argument1 and argument2. [jvm] Content open override fun apply (left: Int , right: Int ): Int asDocument [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. [jvm] Content override fun asDocument (argument1: PrettyPrintable, argument2: PrettyPrintable): Document More info Shows this operator applied to argument1 and argument2. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/#properties","text":"Name Summary associativity [jvm] override val associativity : Associativity precedence [jvm] open override val precedence : Precedence type [jvm] override val type : FunctionType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/apply/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Subtraction / apply apply \u00b6 [jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"Apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/apply/#apply","text":"[jvm] Content open override fun apply (left: Int , right: Int ): Int","title":"apply"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Subtraction / precedence precedence \u00b6 [jvm] Content open override val precedence : Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/precedence/#precedence","text":"[jvm] Content open override val precedence : Precedence","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / Subtraction / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-subtraction/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / UnaryPrefixOperator UnaryPrefixOperator \u00b6 [jvm] abstract class UnaryPrefixOperator : UnaryOperator , PrefixOperator A unary prefix operator. Constructors \u00b6 Name Summary UnaryPrefixOperator [jvm] fun UnaryPrefixOperator () Functions \u00b6 Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator. Inheritors \u00b6 Name Negation Not","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/#unaryprefixoperator","text":"[jvm] abstract class UnaryPrefixOperator : UnaryOperator , PrefixOperator A unary prefix operator.","title":"UnaryPrefixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/#constructors","text":"Name Summary UnaryPrefixOperator [jvm] fun UnaryPrefixOperator ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/#functions","text":"Name Summary alternativeTypes [jvm] Content open fun alternativeTypes (): List < FunctionType > More info In lieu of polymorphic types, have an optional list of alternative types to check against. apply [jvm] Content abstract fun apply (argument: Value ): Value More info Computes the result of applying this operator to argument. [jvm] Content open override fun apply (arguments: List < Value >): Value More info Computes the result of applying this operator to arguments. asDocument [jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument. [jvm] Content open override fun asDocument (arguments: List ): Document More info Shows this operator applied to arguments. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/#properties","text":"Name Summary associativity [jvm] abstract val associativity : Associativity Determines the grouping of consecutive operators that have the same precedence. precedence [jvm] override val precedence : Precedence Determines the order of this operator with respect to (a subset of) other operators. type [jvm] abstract val type : FunctionType The type of this operator.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/#inheritors","text":"Name Negation Not","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/-unary-prefix-operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / UnaryPrefixOperator / UnaryPrefixOperator UnaryPrefixOperator \u00b6 [jvm] Content fun UnaryPrefixOperator ()","title":" unary prefix operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/-unary-prefix-operator/#unaryprefixoperator","text":"[jvm] Content fun UnaryPrefixOperator ()","title":"UnaryPrefixOperator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / UnaryPrefixOperator / asDocument asDocument \u00b6 [jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument.","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/as-document/#asdocument","text":"[jvm] Content open override fun asDocument (argument: PrettyPrintable): Document More info Shows this operator applied to argument.","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/precedence/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.operators / UnaryPrefixOperator / precedence precedence \u00b6 [jvm] Content override val precedence : Precedence More info Determines the order of this operator with respect to (a subset of) other operators. Operators with higher precedence bind tighter than operators with lower precedence (for example, multiplication has higher precedence than addition). See also \u00b6 jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Precedence","title":"Precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/precedence/#precedence","text":"[jvm] Content override val precedence : Precedence More info Determines the order of this operator with respect to (a subset of) other operators. Operators with higher precedence bind tighter than operators with lower precedence (for example, multiplication has higher precedence than addition).","title":"precedence"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.operators/-unary-prefix-operator/precedence/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.viaduct.syntax.Precedence","title":"See also"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface Package edu.cornell.cs.apl.viaduct.syntax.surface \u00b6 [jvm] The abstract syntax of the surface language. Types \u00b6 Name Summary AssertionNode [jvm] Content class AssertionNode ( condition : ExpressionNode , sourceLocation : SourceLocation ) : StatementNode More info Asserting that a condition is true, and failing otherwise. AtomicExpressionNode [jvm] Content sealed class AtomicExpressionNode : ExpressionNode More info An expression that requires no computation to reduce to a value. BlockNode [jvm] Content class BlockNode : StatementNode , List < StatementNode > More info A sequence of statements. BreakNode [jvm] Content class BreakNode ( jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : StatementNode More info Breaking out of a loop. ConstructorCallNode [jvm] Content class ConstructorCallNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < Located < LabelExpression >>?, protocol : ProtocolNode ?, arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode More info Call to an object constructor. DeclarationNode [jvm] Content class DeclarationNode ( variable : ObjectVariableNode , initializer : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info Constructing a new object and binding it to a variable. DeclassificationNode [jvm] Content class DeclassificationNode ( expression : ExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode More info Revealing the the result of an expression (reducing confidentiality). DowngradeNode [jvm] Content sealed class DowngradeNode : ExpressionNode More info Reducing the confidentiality or increasing the integrity of the result of an expression. EndorsementNode [jvm] Content class EndorsementNode ( expression : ExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode More info Trusting the result of an expression (increasing integrity). ExpressionArgumentNode [jvm] Content class ExpressionArgumentNode ( expression : ExpressionNode , sourceLocation : SourceLocation ) : FunctionArgumentNode More info Function argument that is an expression. ExpressionNode [jvm] Content sealed class ExpressionNode : Node More info A computation that produces a result. ForLoopNode [jvm] Content class ForLoopNode ( initialize : SimpleStatementNode , guard : ExpressionNode , update : SimpleStatementNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode More info A for loop. FunctionArgumentNode [jvm] Content sealed class FunctionArgumentNode : Node More info Arguments to functions. FunctionCallNode [jvm] Content class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : SimpleStatementNode More info Function call. FunctionDeclarationNode [jvm] Content class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A declaration of a function that can be called by a process. FunctionReturnArgumentNode [jvm] Content sealed class FunctionReturnArgumentNode : FunctionArgumentNode More info Out arguments to functions. HostDeclarationNode [jvm] Content class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info Declaration of a participant and their authority. IfNode [jvm] Content class IfNode ( guard : ExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : StatementNode More info Executing statements conditionally. InfiniteLoopNode [jvm] Content class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode More info Executing a statement until a break statement is encountered. InputNode [jvm] Content class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode More info An external input. KeywordStyle [jvm] Content object KeywordStyle : Style More info The display style used for the keyword in the language. LetNode [jvm] Content class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode More info Binding the result of an expression to a new temporary variable. LiteralNode [jvm] Content class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode More info A literal constant. LoopNode [jvm] Content sealed class LoopNode : StatementNode More info A loop statement. Node [jvm] Content abstract class Node : HasSourceLocation , PrettyPrintable More info A node in the abstract syntax tree of a surface level program. ObjectDeclarationArgumentNode [jvm] Content class ObjectDeclarationArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode More info Declaration of a new object as a return argument of a function. ObjectReferenceArgumentNode [jvm] Content class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionArgumentNode More info Function argument that is an object reference (e.g. OperatorApplicationNode [jvm] Content class OperatorApplicationNode ( operator : Operator , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode More info An n-ary operator applied to n arguments. OutParameterArgumentNode [jvm] Content class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode More info Out parameter initialized as an out parameter to a function call. OutParameterInitializationNode [jvm] Content class OutParameterInitializationNode ( name : ObjectVariableNode , rhs : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info Initialization for an out parameter. OutputNode [jvm] Content class OutputNode ( message : ExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info An external output. ParameterNode [jvm] Content class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node More info A parameter to a function declaration. ProcessDeclarationNode [jvm] Content class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A process declaration associating a protocol with the code that process should run. ProgramNode [jvm] Content class ProgramNode : Node , List < TopLevelDeclarationNode > More info Represents a surface level program which is a sequence of top level declarations. QueryNode [jvm] Content class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode More info A query method applied to an object. ReadNode [jvm] Content class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode More info Reading the value stored in a temporary. ReceiveNode [jvm] Content class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode More info Receiving a value from another protocol. SendNode [jvm] Content class SendNode ( message : ExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info Sending a value to another protocol. SimpleStatementNode [jvm] Content sealed class SimpleStatementNode : StatementNode More info A statement that is not a combination of other statements, and that does not affect control flow. SkipNode [jvm] Content class SkipNode ( sourceLocation : SourceLocation ) : SimpleStatementNode More info A statement that does nothing. StatementNode [jvm] Content sealed class StatementNode : Node More info A computation with side effects. TopLevelDeclarationNode [jvm] Content sealed class TopLevelDeclarationNode : Node More info A declaration at the top level of a file. UpdateNode [jvm] Content class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode More info An update method applied to an object. WhileLoopNode [jvm] Content class WhileLoopNode ( guard : ExpressionNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode More info Executing a statement repeatedly as long as a condition is true.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/#package-educornellcsaplviaductsyntaxsurface","text":"[jvm] The abstract syntax of the surface language.","title":"Package edu.cornell.cs.apl.viaduct.syntax.surface"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/#types","text":"Name Summary AssertionNode [jvm] Content class AssertionNode ( condition : ExpressionNode , sourceLocation : SourceLocation ) : StatementNode More info Asserting that a condition is true, and failing otherwise. AtomicExpressionNode [jvm] Content sealed class AtomicExpressionNode : ExpressionNode More info An expression that requires no computation to reduce to a value. BlockNode [jvm] Content class BlockNode : StatementNode , List < StatementNode > More info A sequence of statements. BreakNode [jvm] Content class BreakNode ( jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : StatementNode More info Breaking out of a loop. ConstructorCallNode [jvm] Content class ConstructorCallNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < Located < LabelExpression >>?, protocol : ProtocolNode ?, arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode More info Call to an object constructor. DeclarationNode [jvm] Content class DeclarationNode ( variable : ObjectVariableNode , initializer : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info Constructing a new object and binding it to a variable. DeclassificationNode [jvm] Content class DeclassificationNode ( expression : ExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode More info Revealing the the result of an expression (reducing confidentiality). DowngradeNode [jvm] Content sealed class DowngradeNode : ExpressionNode More info Reducing the confidentiality or increasing the integrity of the result of an expression. EndorsementNode [jvm] Content class EndorsementNode ( expression : ExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode More info Trusting the result of an expression (increasing integrity). ExpressionArgumentNode [jvm] Content class ExpressionArgumentNode ( expression : ExpressionNode , sourceLocation : SourceLocation ) : FunctionArgumentNode More info Function argument that is an expression. ExpressionNode [jvm] Content sealed class ExpressionNode : Node More info A computation that produces a result. ForLoopNode [jvm] Content class ForLoopNode ( initialize : SimpleStatementNode , guard : ExpressionNode , update : SimpleStatementNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode More info A for loop. FunctionArgumentNode [jvm] Content sealed class FunctionArgumentNode : Node More info Arguments to functions. FunctionCallNode [jvm] Content class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : SimpleStatementNode More info Function call. FunctionDeclarationNode [jvm] Content class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A declaration of a function that can be called by a process. FunctionReturnArgumentNode [jvm] Content sealed class FunctionReturnArgumentNode : FunctionArgumentNode More info Out arguments to functions. HostDeclarationNode [jvm] Content class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info Declaration of a participant and their authority. IfNode [jvm] Content class IfNode ( guard : ExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : StatementNode More info Executing statements conditionally. InfiniteLoopNode [jvm] Content class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode More info Executing a statement until a break statement is encountered. InputNode [jvm] Content class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode More info An external input. KeywordStyle [jvm] Content object KeywordStyle : Style More info The display style used for the keyword in the language. LetNode [jvm] Content class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode More info Binding the result of an expression to a new temporary variable. LiteralNode [jvm] Content class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode More info A literal constant. LoopNode [jvm] Content sealed class LoopNode : StatementNode More info A loop statement. Node [jvm] Content abstract class Node : HasSourceLocation , PrettyPrintable More info A node in the abstract syntax tree of a surface level program. ObjectDeclarationArgumentNode [jvm] Content class ObjectDeclarationArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode More info Declaration of a new object as a return argument of a function. ObjectReferenceArgumentNode [jvm] Content class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionArgumentNode More info Function argument that is an object reference (e.g. OperatorApplicationNode [jvm] Content class OperatorApplicationNode ( operator : Operator , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode More info An n-ary operator applied to n arguments. OutParameterArgumentNode [jvm] Content class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode More info Out parameter initialized as an out parameter to a function call. OutParameterInitializationNode [jvm] Content class OutParameterInitializationNode ( name : ObjectVariableNode , rhs : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info Initialization for an out parameter. OutputNode [jvm] Content class OutputNode ( message : ExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info An external output. ParameterNode [jvm] Content class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node More info A parameter to a function declaration. ProcessDeclarationNode [jvm] Content class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode More info A process declaration associating a protocol with the code that process should run. ProgramNode [jvm] Content class ProgramNode : Node , List < TopLevelDeclarationNode > More info Represents a surface level program which is a sequence of top level declarations. QueryNode [jvm] Content class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode More info A query method applied to an object. ReadNode [jvm] Content class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode More info Reading the value stored in a temporary. ReceiveNode [jvm] Content class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode More info Receiving a value from another protocol. SendNode [jvm] Content class SendNode ( message : ExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode More info Sending a value to another protocol. SimpleStatementNode [jvm] Content sealed class SimpleStatementNode : StatementNode More info A statement that is not a combination of other statements, and that does not affect control flow. SkipNode [jvm] Content class SkipNode ( sourceLocation : SourceLocation ) : SimpleStatementNode More info A statement that does nothing. StatementNode [jvm] Content sealed class StatementNode : Node More info A computation with side effects. TopLevelDeclarationNode [jvm] Content sealed class TopLevelDeclarationNode : Node More info A declaration at the top level of a file. UpdateNode [jvm] Content class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode More info An update method applied to an object. WhileLoopNode [jvm] Content class WhileLoopNode ( guard : ExpressionNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode More info Executing a statement repeatedly as long as a condition is true.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / AssertionNode AssertionNode \u00b6 [jvm] class AssertionNode ( condition : ExpressionNode , sourceLocation : SourceLocation ) : StatementNode Asserting that a condition is true, and failing otherwise. Constructors \u00b6 Name Summary AssertionNode [jvm] fun AssertionNode (condition: ExpressionNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document condition [jvm] val condition : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/#assertionnode","text":"[jvm] class AssertionNode ( condition : ExpressionNode , sourceLocation : SourceLocation ) : StatementNode Asserting that a condition is true, and failing otherwise.","title":"AssertionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/#constructors","text":"Name Summary AssertionNode [jvm] fun AssertionNode (condition: ExpressionNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document condition [jvm] val condition : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/-assertion-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / AssertionNode / AssertionNode AssertionNode \u00b6 [jvm] Content fun AssertionNode (condition: ExpressionNode , sourceLocation: SourceLocation )","title":" assertion node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/-assertion-node/#assertionnode","text":"[jvm] Content fun AssertionNode (condition: ExpressionNode , sourceLocation: SourceLocation )","title":"AssertionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / AssertionNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/condition/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / AssertionNode / condition condition \u00b6 [jvm] Content val condition : ExpressionNode","title":"Condition"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/condition/#condition","text":"[jvm] Content val condition : ExpressionNode","title":"condition"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / AssertionNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-assertion-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-atomic-expression-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / AtomicExpressionNode AtomicExpressionNode \u00b6 [jvm] sealed class AtomicExpressionNode : ExpressionNode An expression that requires no computation to reduce to a value. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name LiteralNode ReadNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-atomic-expression-node/#atomicexpressionnode","text":"[jvm] sealed class AtomicExpressionNode : ExpressionNode An expression that requires no computation to reduce to a value.","title":"AtomicExpressionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-atomic-expression-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-atomic-expression-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-atomic-expression-node/#inheritors","text":"Name LiteralNode ReadNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BlockNode BlockNode \u00b6 [jvm] class BlockNode : StatementNode , List < StatementNode > A sequence of statements. Constructors \u00b6 Name Summary BlockNode [jvm] fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) BlockNode [jvm] fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary contains [jvm] Content open operator override fun contains (element: StatementNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < StatementNode >): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer StatementNode >) get [jvm] Content open operator override fun get (index: Int ): StatementNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: StatementNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < StatementNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: StatementNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < StatementNode > open override fun listIterator (index: Int ): ListIterator < StatementNode > parallelStream [jvm] Content open fun parallelStream (): Stream < StatementNode > spliterator [jvm] Content open override fun spliterator (): Spliterator < StatementNode > stream [jvm] Content open fun stream (): Stream < StatementNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < StatementNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation statements [jvm] val statements : PersistentList< StatementNode >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/#blocknode","text":"[jvm] class BlockNode : StatementNode , List < StatementNode > A sequence of statements.","title":"BlockNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/#constructors","text":"Name Summary BlockNode [jvm] fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) BlockNode [jvm] fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/#functions","text":"Name Summary contains [jvm] Content open operator override fun contains (element: StatementNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < StatementNode >): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer StatementNode >) get [jvm] Content open operator override fun get (index: Int ): StatementNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: StatementNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < StatementNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: StatementNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < StatementNode > open override fun listIterator (index: Int ): ListIterator < StatementNode > parallelStream [jvm] Content open fun parallelStream (): Stream < StatementNode > spliterator [jvm] Content open override fun spliterator (): Spliterator < StatementNode > stream [jvm] Content open fun stream (): Stream < StatementNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < StatementNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation statements [jvm] val statements : PersistentList< StatementNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/-block-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BlockNode / BlockNode BlockNode \u00b6 [jvm] Content fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation )","title":" block node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/-block-node/#blocknode","text":"[jvm] Content fun BlockNode (statements: List < StatementNode >, sourceLocation: SourceLocation ) fun BlockNode (vararg statements: StatementNode , sourceLocation: SourceLocation )","title":"BlockNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BlockNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BlockNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/statements/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BlockNode / statements statements \u00b6 [jvm] Content val statements : PersistentList< StatementNode >","title":"Statements"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-block-node/statements/#statements","text":"[jvm] Content val statements : PersistentList< StatementNode >","title":"statements"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BreakNode BreakNode \u00b6 [jvm] class BreakNode ( jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : StatementNode Breaking out of a loop. Parameters \u00b6 jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop. Constructors \u00b6 Name Summary BreakNode [jvm] fun BreakNode (jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )Label of the loop to break out of. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document jumpLabel [jvm] val jumpLabel : JumpLabelNode ?Label of the loop to break out of. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/#breaknode","text":"[jvm] class BreakNode ( jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : StatementNode Breaking out of a loop.","title":"BreakNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/#parameters","text":"jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/#constructors","text":"Name Summary BreakNode [jvm] fun BreakNode (jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )Label of the loop to break out of.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document jumpLabel [jvm] val jumpLabel : JumpLabelNode ?Label of the loop to break out of. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/-break-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BreakNode / BreakNode BreakNode \u00b6 [jvm] Content fun BreakNode (jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":" break node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/-break-node/#breaknode","text":"[jvm] Content fun BreakNode (jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation ) More info","title":"BreakNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/-break-node/#parameters","text":"jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BreakNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BreakNode / jumpLabel jumpLabel \u00b6 [jvm] Content val jumpLabel : JumpLabelNode ? More info Parameters \u00b6 jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/jump-label/#jumplabel","text":"[jvm] Content val jumpLabel : JumpLabelNode ? More info","title":"jumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/jump-label/#parameters","text":"jvm Name Summary jumpLabel Label of the loop to break out of. A null value refers to the innermost loop.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / BreakNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-break-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode ConstructorCallNode \u00b6 [jvm] class ConstructorCallNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < Located < LabelExpression >>?, protocol : ProtocolNode ?, arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode Call to an object constructor. Used for out parameter initialization. Constructors \u00b6 Name Summary ConstructorCallNode [jvm] fun ConstructorCallNode (className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < Located < LabelExpression >>?, protocol: ProtocolNode ?, arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document className [jvm] val className : ClassNameNode labelArguments [jvm] val labelArguments : Arguments < Located < LabelExpression >>? protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] val typeArguments : Arguments < ValueTypeNode >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/#constructorcallnode","text":"[jvm] class ConstructorCallNode ( className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < Located < LabelExpression >>?, protocol : ProtocolNode ?, arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode Call to an object constructor. Used for out parameter initialization.","title":"ConstructorCallNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/#constructors","text":"Name Summary ConstructorCallNode [jvm] fun ConstructorCallNode (className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < Located < LabelExpression >>?, protocol: ProtocolNode ?, arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document className [jvm] val className : ClassNameNode labelArguments [jvm] val labelArguments : Arguments < Located < LabelExpression >>? protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] val typeArguments : Arguments < ValueTypeNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/-constructor-call-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / ConstructorCallNode ConstructorCallNode \u00b6 [jvm] Content fun ConstructorCallNode (className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < Located < LabelExpression >>?, protocol: ProtocolNode ?, arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":" constructor call node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/-constructor-call-node/#constructorcallnode","text":"[jvm] Content fun ConstructorCallNode (className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < Located < LabelExpression >>?, protocol: ProtocolNode ?, arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"ConstructorCallNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < ExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < ExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / className className \u00b6 [jvm] Content val className : ClassNameNode","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/class-name/#classname","text":"[jvm] Content val className : ClassNameNode","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/label-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / labelArguments labelArguments \u00b6 [jvm] Content val labelArguments : Arguments < Located < LabelExpression >>?","title":"Label arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/label-arguments/#labelarguments","text":"[jvm] Content val labelArguments : Arguments < Located < LabelExpression >>?","title":"labelArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode ?","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode ?","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ConstructorCallNode / typeArguments typeArguments \u00b6 [jvm] Content val typeArguments : Arguments < ValueTypeNode >","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-constructor-call-node/type-arguments/#typearguments","text":"[jvm] Content val typeArguments : Arguments < ValueTypeNode >","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclarationNode DeclarationNode \u00b6 [jvm] class DeclarationNode ( variable : ObjectVariableNode , initializer : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode Constructing a new object and binding it to a variable. Constructors \u00b6 Name Summary DeclarationNode [jvm] fun DeclarationNode (variable: ObjectVariableNode , initializer: ExpressionNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document initializer [jvm] val initializer : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/#declarationnode","text":"[jvm] class DeclarationNode ( variable : ObjectVariableNode , initializer : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode Constructing a new object and binding it to a variable.","title":"DeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/#constructors","text":"Name Summary DeclarationNode [jvm] fun DeclarationNode (variable: ObjectVariableNode , initializer: ExpressionNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document initializer [jvm] val initializer : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclarationNode / DeclarationNode DeclarationNode \u00b6 [jvm] Content fun DeclarationNode (variable: ObjectVariableNode , initializer: ExpressionNode , sourceLocation: SourceLocation )","title":" declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/-declaration-node/#declarationnode","text":"[jvm] Content fun DeclarationNode (variable: ObjectVariableNode , initializer: ExpressionNode , sourceLocation: SourceLocation )","title":"DeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclarationNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/initializer/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclarationNode / initializer initializer \u00b6 [jvm] Content val initializer : ExpressionNode","title":"Initializer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/initializer/#initializer","text":"[jvm] Content val initializer : ExpressionNode","title":"initializer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclarationNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declaration-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclassificationNode DeclassificationNode \u00b6 [jvm] class DeclassificationNode ( expression : ExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode Revealing the the result of an expression (reducing confidentiality). Constructors \u00b6 Name Summary DeclassificationNode [jvm] fun DeclassificationNode (expression: ExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary asDocument [jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document expression [jvm] open override val expression : ExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode The label after the downgrade.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/#declassificationnode","text":"[jvm] class DeclassificationNode ( expression : ExpressionNode , fromLabel : LabelNode ?, toLabel : LabelNode , sourceLocation : SourceLocation ) : DowngradeNode Revealing the the result of an expression (reducing confidentiality).","title":"DeclassificationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/#constructors","text":"Name Summary DeclassificationNode [jvm] fun DeclassificationNode (expression: ExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/#functions","text":"Name Summary asDocument [jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document expression [jvm] open override val expression : ExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode The label after the downgrade.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/-declassification-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclassificationNode / DeclassificationNode DeclassificationNode \u00b6 [jvm] Content fun DeclassificationNode (expression: ExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation )","title":" declassification node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/-declassification-node/#declassificationnode","text":"[jvm] Content fun DeclassificationNode (expression: ExpressionNode , fromLabel: LabelNode ?, toLabel: LabelNode , sourceLocation: SourceLocation )","title":"DeclassificationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclassificationNode / asDocument asDocument \u00b6 [jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/as-document/#asdocument","text":"[jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. [jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclassificationNode / expression expression \u00b6 [jvm] Content open override val expression : ExpressionNode More info Expression whose label is being downgraded.","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/expression/#expression","text":"[jvm] Content open override val expression : ExpressionNode More info Expression whose label is being downgraded.","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/from-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclassificationNode / fromLabel fromLabel \u00b6 [jvm] Content open override val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"From label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/from-label/#fromlabel","text":"[jvm] Content open override val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"fromLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclassificationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/to-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DeclassificationNode / toLabel toLabel \u00b6 [jvm] Content open override val toLabel : LabelNode More info The label after the downgrade.","title":"To label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-declassification-node/to-label/#tolabel","text":"[jvm] Content open override val toLabel : LabelNode More info The label after the downgrade.","title":"toLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DowngradeNode DowngradeNode \u00b6 [jvm] sealed class DowngradeNode : ExpressionNode Reducing the confidentiality or increasing the integrity of the result of an expression. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document expression [jvm] abstract val expression : ExpressionNode Expression whose label is being downgraded. fromLabel [jvm] abstract val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] abstract val sourceLocation : SourceLocation toLabel [jvm] abstract val toLabel : LabelNode ?The label after the downgrade. Inheritors \u00b6 Name DeclassificationNode EndorsementNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/#downgradenode","text":"[jvm] sealed class DowngradeNode : ExpressionNode Reducing the confidentiality or increasing the integrity of the result of an expression.","title":"DowngradeNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document expression [jvm] abstract val expression : ExpressionNode Expression whose label is being downgraded. fromLabel [jvm] abstract val fromLabel : LabelNode ?The label expression must have before the downgrade. sourceLocation [jvm] abstract val sourceLocation : SourceLocation toLabel [jvm] abstract val toLabel : LabelNode ?The label after the downgrade.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/#inheritors","text":"Name DeclassificationNode EndorsementNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DowngradeNode / expression expression \u00b6 [jvm] Content abstract val expression : ExpressionNode More info Expression whose label is being downgraded.","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/expression/#expression","text":"[jvm] Content abstract val expression : ExpressionNode More info Expression whose label is being downgraded.","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/from-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DowngradeNode / fromLabel fromLabel \u00b6 [jvm] Content abstract val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"From label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/from-label/#fromlabel","text":"[jvm] Content abstract val fromLabel : LabelNode ? More info The label expression must have before the downgrade.","title":"fromLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/to-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / DowngradeNode / toLabel toLabel \u00b6 [jvm] Content abstract val toLabel : LabelNode ? More info The label after the downgrade.","title":"To label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-downgrade-node/to-label/#tolabel","text":"[jvm] Content abstract val toLabel : LabelNode ? More info The label after the downgrade.","title":"toLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / EndorsementNode EndorsementNode \u00b6 [jvm] class EndorsementNode ( expression : ExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode Trusting the result of an expression (increasing integrity). Constructors \u00b6 Name Summary EndorsementNode [jvm] fun EndorsementNode (expression: ExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary asDocument [jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document expression [jvm] open override val expression : ExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode ?The label after the downgrade.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/#endorsementnode","text":"[jvm] class EndorsementNode ( expression : ExpressionNode , fromLabel : LabelNode , toLabel : LabelNode ?, sourceLocation : SourceLocation ) : DowngradeNode Trusting the result of an expression (increasing integrity).","title":"EndorsementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/#constructors","text":"Name Summary EndorsementNode [jvm] fun EndorsementNode (expression: ExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/#functions","text":"Name Summary asDocument [jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document expression [jvm] open override val expression : ExpressionNode Expression whose label is being downgraded. fromLabel [jvm] open override val fromLabel : LabelNode The label expression must have before the downgrade. sourceLocation [jvm] open override val sourceLocation : SourceLocation toLabel [jvm] open override val toLabel : LabelNode ?The label after the downgrade.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/-endorsement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / EndorsementNode / EndorsementNode EndorsementNode \u00b6 [jvm] Content fun EndorsementNode (expression: ExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation )","title":" endorsement node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/-endorsement-node/#endorsementnode","text":"[jvm] Content fun EndorsementNode (expression: ExpressionNode , fromLabel: LabelNode , toLabel: LabelNode ?, sourceLocation: SourceLocation )","title":"EndorsementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / EndorsementNode / asDocument asDocument \u00b6 [jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/as-document/#asdocument","text":"[jvm] Content fun asDocument (downgradeOperation: String ): Document More info Used to implement PrettyPrintable.asDocument. [jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / EndorsementNode / expression expression \u00b6 [jvm] Content open override val expression : ExpressionNode More info Expression whose label is being downgraded.","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/expression/#expression","text":"[jvm] Content open override val expression : ExpressionNode More info Expression whose label is being downgraded.","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/from-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / EndorsementNode / fromLabel fromLabel \u00b6 [jvm] Content open override val fromLabel : LabelNode More info The label expression must have before the downgrade.","title":"From label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/from-label/#fromlabel","text":"[jvm] Content open override val fromLabel : LabelNode More info The label expression must have before the downgrade.","title":"fromLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / EndorsementNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/to-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / EndorsementNode / toLabel toLabel \u00b6 [jvm] Content open override val toLabel : LabelNode ? More info The label after the downgrade.","title":"To label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-endorsement-node/to-label/#tolabel","text":"[jvm] Content open override val toLabel : LabelNode ? More info The label after the downgrade.","title":"toLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ExpressionArgumentNode ExpressionArgumentNode \u00b6 [jvm] class ExpressionArgumentNode ( expression : ExpressionNode , sourceLocation : SourceLocation ) : FunctionArgumentNode Function argument that is an expression. Constructors \u00b6 Name Summary ExpressionArgumentNode [jvm] fun ExpressionArgumentNode (expression: ExpressionNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document expression [jvm] val expression : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/#expressionargumentnode","text":"[jvm] class ExpressionArgumentNode ( expression : ExpressionNode , sourceLocation : SourceLocation ) : FunctionArgumentNode Function argument that is an expression.","title":"ExpressionArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/#constructors","text":"Name Summary ExpressionArgumentNode [jvm] fun ExpressionArgumentNode (expression: ExpressionNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document expression [jvm] val expression : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/-expression-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ExpressionArgumentNode / ExpressionArgumentNode ExpressionArgumentNode \u00b6 [jvm] Content fun ExpressionArgumentNode (expression: ExpressionNode , sourceLocation: SourceLocation )","title":" expression argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/-expression-argument-node/#expressionargumentnode","text":"[jvm] Content fun ExpressionArgumentNode (expression: ExpressionNode , sourceLocation: SourceLocation )","title":"ExpressionArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ExpressionArgumentNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/expression/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ExpressionArgumentNode / expression expression \u00b6 [jvm] Content val expression : ExpressionNode","title":"Expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/expression/#expression","text":"[jvm] Content val expression : ExpressionNode","title":"expression"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ExpressionArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ExpressionNode ExpressionNode \u00b6 [jvm] sealed class ExpressionNode : Node A computation that produces a result. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name AtomicExpressionNode OperatorApplicationNode QueryNode DowngradeNode InputNode ReceiveNode ConstructorCallNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-node/#expressionnode","text":"[jvm] sealed class ExpressionNode : Node A computation that produces a result.","title":"ExpressionNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-expression-node/#inheritors","text":"Name AtomicExpressionNode OperatorApplicationNode QueryNode DowngradeNode InputNode ReceiveNode ConstructorCallNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode ForLoopNode \u00b6 [jvm] class ForLoopNode ( initialize : SimpleStatementNode , guard : ExpressionNode , update : SimpleStatementNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode A for loop. Parameters \u00b6 jvm Name Summary initialize Initializer for loop variables. guard Loop until this becomes false. update Update loop variables after each iteration. Constructors \u00b6 Name Summary ForLoopNode [jvm] fun ForLoopNode (initialize: SimpleStatementNode , guard: ExpressionNode , update: SimpleStatementNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )Initializer for loop variables. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] open override val body : BlockNode Statements to execute repeatedly. guard [jvm] val guard : ExpressionNode Loop until this becomes false. initialize [jvm] val initialize : SimpleStatementNode Initializer for loop variables. jumpLabel [jvm] open override val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation update [jvm] val update : SimpleStatementNode Update loop variables after each iteration.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/#forloopnode","text":"[jvm] class ForLoopNode ( initialize : SimpleStatementNode , guard : ExpressionNode , update : SimpleStatementNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode A for loop.","title":"ForLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/#parameters","text":"jvm Name Summary initialize Initializer for loop variables. guard Loop until this becomes false. update Update loop variables after each iteration.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/#constructors","text":"Name Summary ForLoopNode [jvm] fun ForLoopNode (initialize: SimpleStatementNode , guard: ExpressionNode , update: SimpleStatementNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )Initializer for loop variables.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] open override val body : BlockNode Statements to execute repeatedly. guard [jvm] val guard : ExpressionNode Loop until this becomes false. initialize [jvm] val initialize : SimpleStatementNode Initializer for loop variables. jumpLabel [jvm] open override val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation update [jvm] val update : SimpleStatementNode Update loop variables after each iteration.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/-for-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / ForLoopNode ForLoopNode \u00b6 [jvm] Content fun ForLoopNode (initialize: SimpleStatementNode , guard: ExpressionNode , update: SimpleStatementNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary initialize Initializer for loop variables. guard Loop until this becomes false. update Update loop variables after each iteration.","title":" for loop node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/-for-loop-node/#forloopnode","text":"[jvm] Content fun ForLoopNode (initialize: SimpleStatementNode , guard: ExpressionNode , update: SimpleStatementNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation ) More info","title":"ForLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/-for-loop-node/#parameters","text":"jvm Name Summary initialize Initializer for loop variables. guard Loop until this becomes false. update Update loop variables after each iteration.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / body body \u00b6 [jvm] Content open override val body : BlockNode More info Statements to execute repeatedly.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/body/#body","text":"[jvm] Content open override val body : BlockNode More info Statements to execute repeatedly.","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/guard/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / guard guard \u00b6 [jvm] Content val guard : ExpressionNode More info Parameters \u00b6 jvm Name Summary guard Loop until this becomes false.","title":"Guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/guard/#guard","text":"[jvm] Content val guard : ExpressionNode More info","title":"guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/guard/#parameters","text":"jvm Name Summary guard Loop until this becomes false.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/initialize/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / initialize initialize \u00b6 [jvm] Content val initialize : SimpleStatementNode More info Parameters \u00b6 jvm Name Summary initialize Initializer for loop variables.","title":"Initialize"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/initialize/#initialize","text":"[jvm] Content val initialize : SimpleStatementNode More info","title":"initialize"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/initialize/#parameters","text":"jvm Name Summary initialize Initializer for loop variables.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / jumpLabel jumpLabel \u00b6 [jvm] Content open override val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"Jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/jump-label/#jumplabel","text":"[jvm] Content open override val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"jumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/update/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ForLoopNode / update update \u00b6 [jvm] Content val update : SimpleStatementNode More info Parameters \u00b6 jvm Name Summary update Update loop variables after each iteration.","title":"Update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/update/#update","text":"[jvm] Content val update : SimpleStatementNode More info","title":"update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-for-loop-node/update/#parameters","text":"jvm Name Summary update Update loop variables after each iteration.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionArgumentNode FunctionArgumentNode \u00b6 [jvm] sealed class FunctionArgumentNode : Node Arguments to functions. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name FunctionReturnArgumentNode ExpressionArgumentNode ObjectReferenceArgumentNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-argument-node/#functionargumentnode","text":"[jvm] sealed class FunctionArgumentNode : Node Arguments to functions.","title":"FunctionArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-argument-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-argument-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-argument-node/#inheritors","text":"Name FunctionReturnArgumentNode ExpressionArgumentNode ObjectReferenceArgumentNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionCallNode FunctionCallNode \u00b6 [jvm] class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : SimpleStatementNode Function call. Constructors \u00b6 Name Summary FunctionCallNode [jvm] fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < FunctionArgumentNode > asDocument [jvm] open override val asDocument : Document name [jvm] val name : FunctionNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/#functioncallnode","text":"[jvm] class FunctionCallNode ( name : FunctionNameNode , arguments : Arguments < FunctionArgumentNode >, sourceLocation : SourceLocation ) : SimpleStatementNode Function call.","title":"FunctionCallNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/#constructors","text":"Name Summary FunctionCallNode [jvm] fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < FunctionArgumentNode > asDocument [jvm] open override val asDocument : Document name [jvm] val name : FunctionNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/-function-call-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionCallNode / FunctionCallNode FunctionCallNode \u00b6 [jvm] Content fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation )","title":" function call node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/-function-call-node/#functioncallnode","text":"[jvm] Content fun FunctionCallNode (name: FunctionNameNode , arguments: Arguments < FunctionArgumentNode >, sourceLocation: SourceLocation )","title":"FunctionCallNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionCallNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < FunctionArgumentNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < FunctionArgumentNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionCallNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionCallNode / name name \u00b6 [jvm] Content val name : FunctionNameNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/name/#name","text":"[jvm] Content val name : FunctionNameNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionCallNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-call-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode FunctionDeclarationNode \u00b6 [jvm] class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A declaration of a function that can be called by a process. Parameters \u00b6 jvm Name Summary parameters A list of formal parameters. body The function body. Constructors \u00b6 Name Summary FunctionDeclarationNode [jvm] fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation )A list of formal parameters. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] val body : BlockNode The function body. name [jvm] val name : FunctionNameNode parameters [jvm] val parameters : Arguments < ParameterNode >A list of formal parameters. pcLabel [jvm] val pcLabel : LabelNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/#functiondeclarationnode","text":"[jvm] class FunctionDeclarationNode ( name : FunctionNameNode , pcLabel : LabelNode ?, parameters : Arguments < ParameterNode >, body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A declaration of a function that can be called by a process.","title":"FunctionDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/#parameters","text":"jvm Name Summary parameters A list of formal parameters. body The function body.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/#constructors","text":"Name Summary FunctionDeclarationNode [jvm] fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation )A list of formal parameters.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] val body : BlockNode The function body. name [jvm] val name : FunctionNameNode parameters [jvm] val parameters : Arguments < ParameterNode >A list of formal parameters. pcLabel [jvm] val pcLabel : LabelNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/-function-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode / FunctionDeclarationNode FunctionDeclarationNode \u00b6 [jvm] Content fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary parameters A list of formal parameters. body The function body.","title":" function declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/-function-declaration-node/#functiondeclarationnode","text":"[jvm] Content fun FunctionDeclarationNode (name: FunctionNameNode , pcLabel: LabelNode ?, parameters: Arguments < ParameterNode >, body: BlockNode , sourceLocation: SourceLocation ) More info","title":"FunctionDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/-function-declaration-node/#parameters","text":"jvm Name Summary parameters A list of formal parameters. body The function body.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode / body body \u00b6 [jvm] Content val body : BlockNode More info Parameters \u00b6 jvm Name Summary body The function body.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/body/#body","text":"[jvm] Content val body : BlockNode More info","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/body/#parameters","text":"jvm Name Summary body The function body.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode / name name \u00b6 [jvm] Content val name : FunctionNameNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/name/#name","text":"[jvm] Content val name : FunctionNameNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/parameters/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode / parameters parameters \u00b6 [jvm] Content val parameters : Arguments < ParameterNode > More info Parameters \u00b6 jvm Name Summary parameters A list of formal parameters.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/parameters/#parameters","text":"[jvm] Content val parameters : Arguments < ParameterNode > More info","title":"parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/parameters/#parameters_1","text":"jvm Name Summary parameters A list of formal parameters.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/pc-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode / pcLabel pcLabel \u00b6 [jvm] Content val pcLabel : LabelNode ?","title":"Pc label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/pc-label/#pclabel","text":"[jvm] Content val pcLabel : LabelNode ?","title":"pcLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionDeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-return-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / FunctionReturnArgumentNode FunctionReturnArgumentNode \u00b6 [jvm] sealed class FunctionReturnArgumentNode : FunctionArgumentNode Out arguments to functions. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name ObjectDeclarationArgumentNode OutParameterArgumentNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-return-argument-node/#functionreturnargumentnode","text":"[jvm] sealed class FunctionReturnArgumentNode : FunctionArgumentNode Out arguments to functions.","title":"FunctionReturnArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-return-argument-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-return-argument-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-function-return-argument-node/#inheritors","text":"Name ObjectDeclarationArgumentNode OutParameterArgumentNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / HostDeclarationNode HostDeclarationNode \u00b6 [jvm] class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode Declaration of a participant and their authority. Parameters \u00b6 jvm Name Summary name Host name. authority Label specifying the trust placed in this host. Constructors \u00b6 Name Summary HostDeclarationNode [jvm] fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation )Host name. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document authority [jvm] val authority : LabelNode Label specifying the trust placed in this host. name [jvm] val name : HostNode Host name. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/#hostdeclarationnode","text":"[jvm] class HostDeclarationNode ( name : HostNode , authority : LabelNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode Declaration of a participant and their authority.","title":"HostDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/#parameters","text":"jvm Name Summary name Host name. authority Label specifying the trust placed in this host.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/#constructors","text":"Name Summary HostDeclarationNode [jvm] fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation )Host name.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document authority [jvm] val authority : LabelNode Label specifying the trust placed in this host. name [jvm] val name : HostNode Host name. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/-host-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / HostDeclarationNode / HostDeclarationNode HostDeclarationNode \u00b6 [jvm] Content fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary name Host name. authority Label specifying the trust placed in this host.","title":" host declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/-host-declaration-node/#hostdeclarationnode","text":"[jvm] Content fun HostDeclarationNode (name: HostNode , authority: LabelNode , sourceLocation: SourceLocation ) More info","title":"HostDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/-host-declaration-node/#parameters","text":"jvm Name Summary name Host name. authority Label specifying the trust placed in this host.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / HostDeclarationNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/authority/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / HostDeclarationNode / authority authority \u00b6 [jvm] Content val authority : LabelNode More info Parameters \u00b6 jvm Name Summary authority Label specifying the trust placed in this host.","title":"Authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/authority/#authority","text":"[jvm] Content val authority : LabelNode More info","title":"authority"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/authority/#parameters","text":"jvm Name Summary authority Label specifying the trust placed in this host.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / HostDeclarationNode / name name \u00b6 [jvm] Content val name : HostNode More info Parameters \u00b6 jvm Name Summary name Host name.","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/name/#name","text":"[jvm] Content val name : HostNode More info","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/name/#parameters","text":"jvm Name Summary name Host name.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / HostDeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-host-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / IfNode IfNode \u00b6 [jvm] class IfNode ( guard : ExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : StatementNode Executing statements conditionally. Parameters \u00b6 jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false. Constructors \u00b6 Name Summary IfNode [jvm] fun IfNode (guard: ExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation )Statement to execute if the guard is true. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document elseBranch [jvm] val elseBranch : BlockNode Statement to execute if the guard is false. guard [jvm] val guard : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation thenBranch [jvm] val thenBranch : BlockNode Statement to execute if the guard is true.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/#ifnode","text":"[jvm] class IfNode ( guard : ExpressionNode , thenBranch : BlockNode , elseBranch : BlockNode , sourceLocation : SourceLocation ) : StatementNode Executing statements conditionally.","title":"IfNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/#parameters","text":"jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/#constructors","text":"Name Summary IfNode [jvm] fun IfNode (guard: ExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation )Statement to execute if the guard is true.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document elseBranch [jvm] val elseBranch : BlockNode Statement to execute if the guard is false. guard [jvm] val guard : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation thenBranch [jvm] val thenBranch : BlockNode Statement to execute if the guard is true.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/-if-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / IfNode / IfNode IfNode \u00b6 [jvm] Content fun IfNode (guard: ExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false.","title":" if node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/-if-node/#ifnode","text":"[jvm] Content fun IfNode (guard: ExpressionNode , thenBranch: BlockNode , elseBranch: BlockNode , sourceLocation: SourceLocation ) More info","title":"IfNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/-if-node/#parameters","text":"jvm Name Summary thenBranch Statement to execute if the guard is true. elseBranch Statement to execute if the guard is false.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / IfNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/else-branch/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / IfNode / elseBranch elseBranch \u00b6 [jvm] Content val elseBranch : BlockNode More info Parameters \u00b6 jvm Name Summary elseBranch Statement to execute if the guard is false.","title":"Else branch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/else-branch/#elsebranch","text":"[jvm] Content val elseBranch : BlockNode More info","title":"elseBranch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/else-branch/#parameters","text":"jvm Name Summary elseBranch Statement to execute if the guard is false.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/guard/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / IfNode / guard guard \u00b6 [jvm] Content val guard : ExpressionNode","title":"Guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/guard/#guard","text":"[jvm] Content val guard : ExpressionNode","title":"guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / IfNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/then-branch/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / IfNode / thenBranch thenBranch \u00b6 [jvm] Content val thenBranch : BlockNode More info Parameters \u00b6 jvm Name Summary thenBranch Statement to execute if the guard is true.","title":"Then branch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/then-branch/#thenbranch","text":"[jvm] Content val thenBranch : BlockNode More info","title":"thenBranch"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-if-node/then-branch/#parameters","text":"jvm Name Summary thenBranch Statement to execute if the guard is true.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InfiniteLoopNode InfiniteLoopNode \u00b6 [jvm] class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode Executing a statement until a break statement is encountered. Constructors \u00b6 Name Summary InfiniteLoopNode [jvm] fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] open override val body : BlockNode Statements to execute repeatedly. jumpLabel [jvm] open override val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/#infiniteloopnode","text":"[jvm] class InfiniteLoopNode ( body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode Executing a statement until a break statement is encountered.","title":"InfiniteLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/#constructors","text":"Name Summary InfiniteLoopNode [jvm] fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] open override val body : BlockNode Statements to execute repeatedly. jumpLabel [jvm] open override val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/-infinite-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InfiniteLoopNode / InfiniteLoopNode InfiniteLoopNode \u00b6 [jvm] Content fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )","title":" infinite loop node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/-infinite-loop-node/#infiniteloopnode","text":"[jvm] Content fun InfiniteLoopNode (body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )","title":"InfiniteLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InfiniteLoopNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InfiniteLoopNode / body body \u00b6 [jvm] Content open override val body : BlockNode More info Statements to execute repeatedly.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/body/#body","text":"[jvm] Content open override val body : BlockNode More info Statements to execute repeatedly.","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InfiniteLoopNode / jumpLabel jumpLabel \u00b6 [jvm] Content open override val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"Jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/jump-label/#jumplabel","text":"[jvm] Content open override val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"jumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InfiniteLoopNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-infinite-loop-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InputNode InputNode \u00b6 [jvm] class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode An external input. Parameters \u00b6 jvm Name Summary type Type of the value to receive. Constructors \u00b6 Name Summary InputNode [jvm] fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation )Type of the value to receive. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document host [jvm] val host : HostNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/#inputnode","text":"[jvm] class InputNode ( type : ValueTypeNode , host : HostNode , sourceLocation : SourceLocation ) : ExpressionNode An external input.","title":"InputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/#constructors","text":"Name Summary InputNode [jvm] fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation )Type of the value to receive.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document host [jvm] val host : HostNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/-input-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InputNode / InputNode InputNode \u00b6 [jvm] Content fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":" input node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/-input-node/#inputnode","text":"[jvm] Content fun InputNode (type: ValueTypeNode , host: HostNode , sourceLocation: SourceLocation ) More info","title":"InputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/-input-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InputNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InputNode / host host \u00b6 [jvm] Content val host : HostNode","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/host/#host","text":"[jvm] Content val host : HostNode","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InputNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / InputNode / type type \u00b6 [jvm] Content val type : ValueTypeNode More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/type/#type","text":"[jvm] Content val type : ValueTypeNode More info","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-input-node/type/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-keyword-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / KeywordStyle KeywordStyle \u00b6 [jvm] object KeywordStyle : Style The display style used for the keyword in the language. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-keyword-style/#keywordstyle","text":"[jvm] object KeywordStyle : Style The display style used for the keyword in the language.","title":"KeywordStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-keyword-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-keyword-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-keyword-style/foreground-color/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / KeywordStyle / foregroundColor foregroundColor \u00b6 [jvm] Content open override val foregroundColor : AnsiColor","title":"Foreground color"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-keyword-style/foreground-color/#foregroundcolor","text":"[jvm] Content open override val foregroundColor : AnsiColor","title":"foregroundColor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LetNode LetNode \u00b6 [jvm] class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode Binding the result of an expression to a new temporary variable. Constructors \u00b6 Name Summary LetNode [jvm] fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode value [jvm] val value : ExpressionNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/#letnode","text":"[jvm] class LetNode ( temporary : TemporaryNode , value : ExpressionNode , protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : SimpleStatementNode Binding the result of an expression to a new temporary variable.","title":"LetNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/#constructors","text":"Name Summary LetNode [jvm] fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode value [jvm] val value : ExpressionNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/-let-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LetNode / LetNode LetNode \u00b6 [jvm] Content fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":" let node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/-let-node/#letnode","text":"[jvm] Content fun LetNode (temporary: TemporaryNode , value: ExpressionNode , protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"LetNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LetNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LetNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode ?","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode ?","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LetNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/temporary/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LetNode / temporary temporary \u00b6 [jvm] Content val temporary : TemporaryNode","title":"Temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/temporary/#temporary","text":"[jvm] Content val temporary : TemporaryNode","title":"temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LetNode / value value \u00b6 [jvm] Content val value : ExpressionNode","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-let-node/value/#value","text":"[jvm] Content val value : ExpressionNode","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LiteralNode LiteralNode \u00b6 [jvm] class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode A literal constant. Constructors \u00b6 Name Summary LiteralNode [jvm] fun LiteralNode (value: Value , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation value [jvm] val value : Value","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/#literalnode","text":"[jvm] class LiteralNode ( value : Value , sourceLocation : SourceLocation ) : AtomicExpressionNode A literal constant.","title":"LiteralNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/#constructors","text":"Name Summary LiteralNode [jvm] fun LiteralNode (value: Value , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation value [jvm] val value : Value","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/-literal-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LiteralNode / LiteralNode LiteralNode \u00b6 [jvm] Content fun LiteralNode (value: Value , sourceLocation: SourceLocation )","title":" literal node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/-literal-node/#literalnode","text":"[jvm] Content fun LiteralNode (value: Value , sourceLocation: SourceLocation )","title":"LiteralNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LiteralNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LiteralNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LiteralNode / value value \u00b6 [jvm] Content val value : Value","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-literal-node/value/#value","text":"[jvm] Content val value : Value","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LoopNode LoopNode \u00b6 [jvm] sealed class LoopNode : StatementNode A loop statement. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document body [jvm] abstract val body : BlockNode Statements to execute repeatedly. jumpLabel [jvm] abstract val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name InfiniteLoopNode WhileLoopNode ForLoopNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/#loopnode","text":"[jvm] sealed class LoopNode : StatementNode A loop statement.","title":"LoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document body [jvm] abstract val body : BlockNode Statements to execute repeatedly. jumpLabel [jvm] abstract val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/#inheritors","text":"Name InfiniteLoopNode WhileLoopNode ForLoopNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LoopNode / body body \u00b6 [jvm] Content abstract val body : BlockNode More info Statements to execute repeatedly.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/body/#body","text":"[jvm] Content abstract val body : BlockNode More info Statements to execute repeatedly.","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / LoopNode / jumpLabel jumpLabel \u00b6 [jvm] Content abstract val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"Jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-loop-node/jump-label/#jumplabel","text":"[jvm] Content abstract val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"jumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / Node Node \u00b6 [jvm] abstract class Node : HasSourceLocation , PrettyPrintable A node in the abstract syntax tree of a surface level program. The topmost level node is ProgramNode . Constructors \u00b6 Name Summary Node [jvm] fun Node () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name ExpressionNode ProgramNode StatementNode FunctionArgumentNode TopLevelDeclarationNode ParameterNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/#node","text":"[jvm] abstract class Node : HasSourceLocation , PrettyPrintable A node in the abstract syntax tree of a surface level program. The topmost level node is ProgramNode .","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/#constructors","text":"Name Summary Node [jvm] fun Node ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/#inheritors","text":"Name ExpressionNode ProgramNode StatementNode FunctionArgumentNode TopLevelDeclarationNode ParameterNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / Node / Node Node \u00b6 [jvm] Content fun Node ()","title":" node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-node/-node/#node","text":"[jvm] Content fun Node ()","title":"Node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectDeclarationArgumentNode ObjectDeclarationArgumentNode \u00b6 [jvm] class ObjectDeclarationArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode Declaration of a new object as a return argument of a function. Constructors \u00b6 Name Summary ObjectDeclarationArgumentNode [jvm] fun ObjectDeclarationArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/#objectdeclarationargumentnode","text":"[jvm] class ObjectDeclarationArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode Declaration of a new object as a return argument of a function.","title":"ObjectDeclarationArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/#constructors","text":"Name Summary ObjectDeclarationArgumentNode [jvm] fun ObjectDeclarationArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/-object-declaration-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectDeclarationArgumentNode / ObjectDeclarationArgumentNode ObjectDeclarationArgumentNode \u00b6 [jvm] Content fun ObjectDeclarationArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":" object declaration argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/-object-declaration-argument-node/#objectdeclarationargumentnode","text":"[jvm] Content fun ObjectDeclarationArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":"ObjectDeclarationArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectDeclarationArgumentNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectDeclarationArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectDeclarationArgumentNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-declaration-argument-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectReferenceArgumentNode ObjectReferenceArgumentNode \u00b6 [jvm] class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionArgumentNode Function argument that is an object reference (e.g. &a in the surface syntax). Constructors \u00b6 Name Summary ObjectReferenceArgumentNode [jvm] fun ObjectReferenceArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/#objectreferenceargumentnode","text":"[jvm] class ObjectReferenceArgumentNode ( variable : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionArgumentNode Function argument that is an object reference (e.g. &a in the surface syntax).","title":"ObjectReferenceArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/#constructors","text":"Name Summary ObjectReferenceArgumentNode [jvm] fun ObjectReferenceArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/-object-reference-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectReferenceArgumentNode / ObjectReferenceArgumentNode ObjectReferenceArgumentNode \u00b6 [jvm] Content fun ObjectReferenceArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":" object reference argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/-object-reference-argument-node/#objectreferenceargumentnode","text":"[jvm] Content fun ObjectReferenceArgumentNode (variable: ObjectVariableNode , sourceLocation: SourceLocation )","title":"ObjectReferenceArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectReferenceArgumentNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectReferenceArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ObjectReferenceArgumentNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-object-reference-argument-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OperatorApplicationNode OperatorApplicationNode \u00b6 [jvm] class OperatorApplicationNode ( operator : Operator , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode An n-ary operator applied to n arguments. Constructors \u00b6 Name Summary OperatorApplicationNode [jvm] fun OperatorApplicationNode (operator: Operator , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document operator [jvm] val operator : Operator sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/#operatorapplicationnode","text":"[jvm] class OperatorApplicationNode ( operator : Operator , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode An n-ary operator applied to n arguments.","title":"OperatorApplicationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/#constructors","text":"Name Summary OperatorApplicationNode [jvm] fun OperatorApplicationNode (operator: Operator , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document operator [jvm] val operator : Operator sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/-operator-application-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OperatorApplicationNode / OperatorApplicationNode OperatorApplicationNode \u00b6 [jvm] Content fun OperatorApplicationNode (operator: Operator , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":" operator application node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/-operator-application-node/#operatorapplicationnode","text":"[jvm] Content fun OperatorApplicationNode (operator: Operator , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"OperatorApplicationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OperatorApplicationNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < ExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < ExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OperatorApplicationNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/operator/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OperatorApplicationNode / operator operator \u00b6 [jvm] Content val operator : Operator","title":"Operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/operator/#operator","text":"[jvm] Content val operator : Operator","title":"operator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OperatorApplicationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-operator-application-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterArgumentNode OutParameterArgumentNode \u00b6 [jvm] class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode Out parameter initialized as an out parameter to a function call. Constructors \u00b6 Name Summary OutParameterArgumentNode [jvm] fun OutParameterArgumentNode (parameter: ObjectVariableNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document parameter [jvm] val parameter : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/#outparameterargumentnode","text":"[jvm] class OutParameterArgumentNode ( parameter : ObjectVariableNode , sourceLocation : SourceLocation ) : FunctionReturnArgumentNode Out parameter initialized as an out parameter to a function call.","title":"OutParameterArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/#constructors","text":"Name Summary OutParameterArgumentNode [jvm] fun OutParameterArgumentNode (parameter: ObjectVariableNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document parameter [jvm] val parameter : ObjectVariableNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/-out-parameter-argument-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterArgumentNode / OutParameterArgumentNode OutParameterArgumentNode \u00b6 [jvm] Content fun OutParameterArgumentNode (parameter: ObjectVariableNode , sourceLocation: SourceLocation )","title":" out parameter argument node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/-out-parameter-argument-node/#outparameterargumentnode","text":"[jvm] Content fun OutParameterArgumentNode (parameter: ObjectVariableNode , sourceLocation: SourceLocation )","title":"OutParameterArgumentNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterArgumentNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/parameter/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterArgumentNode / parameter parameter \u00b6 [jvm] Content val parameter : ObjectVariableNode","title":"Parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/parameter/#parameter","text":"[jvm] Content val parameter : ObjectVariableNode","title":"parameter"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterArgumentNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-argument-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterInitializationNode OutParameterInitializationNode \u00b6 [jvm] class OutParameterInitializationNode ( name : ObjectVariableNode , rhs : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode Initialization for an out parameter. Constructors \u00b6 Name Summary OutParameterInitializationNode [jvm] fun OutParameterInitializationNode (name: ObjectVariableNode , rhs: ExpressionNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : ObjectVariableNode rhs [jvm] val rhs : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/#outparameterinitializationnode","text":"[jvm] class OutParameterInitializationNode ( name : ObjectVariableNode , rhs : ExpressionNode , sourceLocation : SourceLocation ) : SimpleStatementNode Initialization for an out parameter.","title":"OutParameterInitializationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/#constructors","text":"Name Summary OutParameterInitializationNode [jvm] fun OutParameterInitializationNode (name: ObjectVariableNode , rhs: ExpressionNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document name [jvm] val name : ObjectVariableNode rhs [jvm] val rhs : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/-out-parameter-initialization-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterInitializationNode / OutParameterInitializationNode OutParameterInitializationNode \u00b6 [jvm] Content fun OutParameterInitializationNode (name: ObjectVariableNode , rhs: ExpressionNode , sourceLocation: SourceLocation )","title":" out parameter initialization node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/-out-parameter-initialization-node/#outparameterinitializationnode","text":"[jvm] Content fun OutParameterInitializationNode (name: ObjectVariableNode , rhs: ExpressionNode , sourceLocation: SourceLocation )","title":"OutParameterInitializationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterInitializationNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterInitializationNode / name name \u00b6 [jvm] Content val name : ObjectVariableNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/name/#name","text":"[jvm] Content val name : ObjectVariableNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/rhs/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterInitializationNode / rhs rhs \u00b6 [jvm] Content val rhs : ExpressionNode","title":"Rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/rhs/#rhs","text":"[jvm] Content val rhs : ExpressionNode","title":"rhs"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutParameterInitializationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-out-parameter-initialization-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutputNode OutputNode \u00b6 [jvm] class OutputNode ( message : ExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode An external output. Constructors \u00b6 Name Summary OutputNode [jvm] fun OutputNode (message: ExpressionNode , host: HostNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document host [jvm] val host : HostNode message [jvm] val message : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/#outputnode","text":"[jvm] class OutputNode ( message : ExpressionNode , host : HostNode , sourceLocation : SourceLocation ) : SimpleStatementNode An external output.","title":"OutputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/#constructors","text":"Name Summary OutputNode [jvm] fun OutputNode (message: ExpressionNode , host: HostNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document host [jvm] val host : HostNode message [jvm] val message : ExpressionNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/-output-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutputNode / OutputNode OutputNode \u00b6 [jvm] Content fun OutputNode (message: ExpressionNode , host: HostNode , sourceLocation: SourceLocation )","title":" output node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/-output-node/#outputnode","text":"[jvm] Content fun OutputNode (message: ExpressionNode , host: HostNode , sourceLocation: SourceLocation )","title":"OutputNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutputNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/host/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutputNode / host host \u00b6 [jvm] Content val host : HostNode","title":"Host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/host/#host","text":"[jvm] Content val host : HostNode","title":"host"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/message/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutputNode / message message \u00b6 [jvm] Content val message : ExpressionNode","title":"Message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/message/#message","text":"[jvm] Content val message : ExpressionNode","title":"message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / OutputNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-output-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode ParameterNode \u00b6 [jvm] class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node A parameter to a function declaration. Constructors \u00b6 Name Summary ParameterNode [jvm] fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document className [jvm] val className : ClassNameNode labelArguments [jvm] val labelArguments : Arguments < LabelNode >? name [jvm] val name : ObjectVariableNode parameterDirection [jvm] val parameterDirection : ParameterDirection protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] val typeArguments : Arguments < ValueTypeNode >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/#parameternode","text":"[jvm] class ParameterNode ( name : ObjectVariableNode , parameterDirection : ParameterDirection , className : ClassNameNode , typeArguments : Arguments < ValueTypeNode >, labelArguments : Arguments < LabelNode >?, protocol : ProtocolNode ?, sourceLocation : SourceLocation ) : Node A parameter to a function declaration.","title":"ParameterNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/#constructors","text":"Name Summary ParameterNode [jvm] fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document className [jvm] val className : ClassNameNode labelArguments [jvm] val labelArguments : Arguments < LabelNode >? name [jvm] val name : ObjectVariableNode parameterDirection [jvm] val parameterDirection : ParameterDirection protocol [jvm] val protocol : ProtocolNode ? sourceLocation [jvm] open override val sourceLocation : SourceLocation typeArguments [jvm] val typeArguments : Arguments < ValueTypeNode >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/-parameter-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / ParameterNode ParameterNode \u00b6 [jvm] Content fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":" parameter node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/-parameter-node/#parameternode","text":"[jvm] Content fun ParameterNode (name: ObjectVariableNode , parameterDirection: ParameterDirection , className: ClassNameNode , typeArguments: Arguments < ValueTypeNode >, labelArguments: Arguments < LabelNode >?, protocol: ProtocolNode ?, sourceLocation: SourceLocation )","title":"ParameterNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / className className \u00b6 [jvm] Content val className : ClassNameNode","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/class-name/#classname","text":"[jvm] Content val className : ClassNameNode","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/label-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / labelArguments labelArguments \u00b6 [jvm] Content val labelArguments : Arguments < LabelNode >?","title":"Label arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/label-arguments/#labelarguments","text":"[jvm] Content val labelArguments : Arguments < LabelNode >?","title":"labelArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / name name \u00b6 [jvm] Content val name : ObjectVariableNode","title":"Name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/name/#name","text":"[jvm] Content val name : ObjectVariableNode","title":"name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/parameter-direction/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / parameterDirection parameterDirection \u00b6 [jvm] Content val parameterDirection : ParameterDirection","title":"Parameter direction"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/parameter-direction/#parameterdirection","text":"[jvm] Content val parameterDirection : ParameterDirection","title":"parameterDirection"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode ?","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode ?","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ParameterNode / typeArguments typeArguments \u00b6 [jvm] Content val typeArguments : Arguments < ValueTypeNode >","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-parameter-node/type-arguments/#typearguments","text":"[jvm] Content val typeArguments : Arguments < ValueTypeNode >","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProcessDeclarationNode ProcessDeclarationNode \u00b6 [jvm] class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A process declaration associating a protocol with the code that process should run. Parameters \u00b6 jvm Name Summary protocol Name of the process. body Code that will be executed by this process. Constructors \u00b6 Name Summary ProcessDeclarationNode [jvm] fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation )Name of the process. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] val body : BlockNode Code that will be executed by this process. protocol [jvm] val protocol : ProtocolNode Name of the process. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/#processdeclarationnode","text":"[jvm] class ProcessDeclarationNode ( protocol : ProtocolNode , body : BlockNode , sourceLocation : SourceLocation ) : TopLevelDeclarationNode A process declaration associating a protocol with the code that process should run.","title":"ProcessDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/#parameters","text":"jvm Name Summary protocol Name of the process. body Code that will be executed by this process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/#constructors","text":"Name Summary ProcessDeclarationNode [jvm] fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation )Name of the process.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] val body : BlockNode Code that will be executed by this process. protocol [jvm] val protocol : ProtocolNode Name of the process. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/-process-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProcessDeclarationNode / ProcessDeclarationNode ProcessDeclarationNode \u00b6 [jvm] Content fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary protocol Name of the process. body Code that will be executed by this process.","title":" process declaration node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/-process-declaration-node/#processdeclarationnode","text":"[jvm] Content fun ProcessDeclarationNode (protocol: ProtocolNode , body: BlockNode , sourceLocation: SourceLocation ) More info","title":"ProcessDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/-process-declaration-node/#parameters","text":"jvm Name Summary protocol Name of the process. body Code that will be executed by this process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProcessDeclarationNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProcessDeclarationNode / body body \u00b6 [jvm] Content val body : BlockNode More info Parameters \u00b6 jvm Name Summary body Code that will be executed by this process.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/body/#body","text":"[jvm] Content val body : BlockNode More info","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/body/#parameters","text":"jvm Name Summary body Code that will be executed by this process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProcessDeclarationNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode More info Parameters \u00b6 jvm Name Summary protocol Name of the process.","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode More info","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/protocol/#parameters","text":"jvm Name Summary protocol Name of the process.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProcessDeclarationNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-process-declaration-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProgramNode ProgramNode \u00b6 [jvm] class ProgramNode : Node , List < TopLevelDeclarationNode > Represents a surface level program which is a sequence of top level declarations. Instances are usually created by parse . Constructors \u00b6 Name Summary ProgramNode [jvm] fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary contains [jvm] Content open operator override fun contains (element: TopLevelDeclarationNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < TopLevelDeclarationNode >): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer TopLevelDeclarationNode >) get [jvm] Content open operator override fun get (index: Int ): TopLevelDeclarationNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: TopLevelDeclarationNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < TopLevelDeclarationNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: TopLevelDeclarationNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < TopLevelDeclarationNode > open override fun listIterator (index: Int ): ListIterator < TopLevelDeclarationNode > parallelStream [jvm] Content open fun parallelStream (): Stream < TopLevelDeclarationNode > spliterator [jvm] Content open override fun spliterator (): Spliterator < TopLevelDeclarationNode > stream [jvm] Content open fun stream (): Stream < TopLevelDeclarationNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < TopLevelDeclarationNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document declarations [jvm] val declarations : PersistentList< TopLevelDeclarationNode > size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation Extensions \u00b6 Name Summary elaborated [jvm] Content fun ProgramNode . elaborated (): ProgramNode More info Elaborates this surface program into a program in the intermediate representation.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/#programnode","text":"[jvm] class ProgramNode : Node , List < TopLevelDeclarationNode > Represents a surface level program which is a sequence of top level declarations. Instances are usually created by parse .","title":"ProgramNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/#constructors","text":"Name Summary ProgramNode [jvm] fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/#functions","text":"Name Summary contains [jvm] Content open operator override fun contains (element: TopLevelDeclarationNode ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < TopLevelDeclarationNode >): Boolean equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer TopLevelDeclarationNode >) get [jvm] Content open operator override fun get (index: Int ): TopLevelDeclarationNode hashCode [jvm] Content open fun hashCode (): Int indexOf [jvm] Content open override fun indexOf (element: TopLevelDeclarationNode ): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < TopLevelDeclarationNode > lastIndexOf [jvm] Content open override fun lastIndexOf (element: TopLevelDeclarationNode ): Int listIterator [jvm] Content open override fun listIterator (): ListIterator < TopLevelDeclarationNode > open override fun listIterator (index: Int ): ListIterator < TopLevelDeclarationNode > parallelStream [jvm] Content open fun parallelStream (): Stream < TopLevelDeclarationNode > spliterator [jvm] Content open override fun spliterator (): Spliterator < TopLevelDeclarationNode > stream [jvm] Content open fun stream (): Stream < TopLevelDeclarationNode > subList [jvm] Content open override fun subList (fromIndex: Int , toIndex: Int ): List < TopLevelDeclarationNode > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document declarations [jvm] val declarations : PersistentList< TopLevelDeclarationNode > size [jvm] open override val size : Int sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/#extensions","text":"Name Summary elaborated [jvm] Content fun ProgramNode . elaborated (): ProgramNode More info Elaborates this surface program into a program in the intermediate representation.","title":"Extensions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/-program-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProgramNode / ProgramNode ProgramNode \u00b6 [jvm] Content fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation )","title":" program node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/-program-node/#programnode","text":"[jvm] Content fun ProgramNode (declarations: List < TopLevelDeclarationNode >, sourceLocation: SourceLocation )","title":"ProgramNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProgramNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/declarations/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProgramNode / declarations declarations \u00b6 [jvm] Content val declarations : PersistentList< TopLevelDeclarationNode >","title":"Declarations"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/declarations/#declarations","text":"[jvm] Content val declarations : PersistentList< TopLevelDeclarationNode >","title":"declarations"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProgramNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ProgramNode / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-program-node/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / QueryNode QueryNode \u00b6 [jvm] class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode A query method applied to an object. Constructors \u00b6 Name Summary QueryNode [jvm] fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document query [jvm] val query : QueryNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/#querynode","text":"[jvm] class QueryNode ( variable : ObjectVariableNode , query : QueryNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : ExpressionNode A query method applied to an object.","title":"QueryNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/#constructors","text":"Name Summary QueryNode [jvm] fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document query [jvm] val query : QueryNameNode sourceLocation [jvm] open override val sourceLocation : SourceLocation variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/-query-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / QueryNode / QueryNode QueryNode \u00b6 [jvm] Content fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":" query node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/-query-node/#querynode","text":"[jvm] Content fun QueryNode (variable: ObjectVariableNode , query: QueryNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"QueryNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / QueryNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < ExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < ExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / QueryNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/query/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / QueryNode / query query \u00b6 [jvm] Content val query : QueryNameNode","title":"Query"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/query/#query","text":"[jvm] Content val query : QueryNameNode","title":"query"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / QueryNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / QueryNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-query-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReadNode ReadNode \u00b6 [jvm] class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode Reading the value stored in a temporary. Constructors \u00b6 Name Summary ReadNode [jvm] fun ReadNode (temporary: TemporaryNode ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/#readnode","text":"[jvm] class ReadNode ( temporary : TemporaryNode ) : AtomicExpressionNode Reading the value stored in a temporary.","title":"ReadNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/#constructors","text":"Name Summary ReadNode [jvm] fun ReadNode (temporary: TemporaryNode )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation temporary [jvm] val temporary : TemporaryNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/-read-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReadNode / ReadNode ReadNode \u00b6 [jvm] Content fun ReadNode (temporary: TemporaryNode )","title":" read node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/-read-node/#readnode","text":"[jvm] Content fun ReadNode (temporary: TemporaryNode )","title":"ReadNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReadNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReadNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/temporary/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReadNode / temporary temporary \u00b6 [jvm] Content val temporary : TemporaryNode","title":"Temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-read-node/temporary/#temporary","text":"[jvm] Content val temporary : TemporaryNode","title":"temporary"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReceiveNode ReceiveNode \u00b6 [jvm] class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode Receiving a value from another protocol. As opposed to InputNode , this is an internal action. Receive nodes are generated by the compiler, not written by the programmer. Parameters \u00b6 jvm Name Summary type Type of the value to receive. Constructors \u00b6 Name Summary ReceiveNode [jvm] fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation )Type of the value to receive. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document protocol [jvm] val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/#receivenode","text":"[jvm] class ReceiveNode ( type : ValueTypeNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : ExpressionNode Receiving a value from another protocol. As opposed to InputNode , this is an internal action. Receive nodes are generated by the compiler, not written by the programmer.","title":"ReceiveNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/#constructors","text":"Name Summary ReceiveNode [jvm] fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation )Type of the value to receive.","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document protocol [jvm] val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation type [jvm] val type : ValueTypeNode Type of the value to receive.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/-receive-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReceiveNode / ReceiveNode ReceiveNode \u00b6 [jvm] Content fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation ) More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":" receive node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/-receive-node/#receivenode","text":"[jvm] Content fun ReceiveNode (type: ValueTypeNode , protocol: ProtocolNode , sourceLocation: SourceLocation ) More info","title":"ReceiveNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/-receive-node/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReceiveNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReceiveNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReceiveNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / ReceiveNode / type type \u00b6 [jvm] Content val type : ValueTypeNode More info Parameters \u00b6 jvm Name Summary type Type of the value to receive.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/type/#type","text":"[jvm] Content val type : ValueTypeNode More info","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-receive-node/type/#parameters","text":"jvm Name Summary type Type of the value to receive.","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SendNode SendNode \u00b6 [jvm] class SendNode ( message : ExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode Sending a value to another protocol. Constructors \u00b6 Name Summary SendNode [jvm] fun SendNode (message: ExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document message [jvm] val message : ExpressionNode protocol [jvm] val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/#sendnode","text":"[jvm] class SendNode ( message : ExpressionNode , protocol : ProtocolNode , sourceLocation : SourceLocation ) : SimpleStatementNode Sending a value to another protocol.","title":"SendNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/#constructors","text":"Name Summary SendNode [jvm] fun SendNode (message: ExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document message [jvm] val message : ExpressionNode protocol [jvm] val protocol : ProtocolNode sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/-send-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SendNode / SendNode SendNode \u00b6 [jvm] Content fun SendNode (message: ExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation )","title":" send node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/-send-node/#sendnode","text":"[jvm] Content fun SendNode (message: ExpressionNode , protocol: ProtocolNode , sourceLocation: SourceLocation )","title":"SendNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SendNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/message/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SendNode / message message \u00b6 [jvm] Content val message : ExpressionNode","title":"Message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/message/#message","text":"[jvm] Content val message : ExpressionNode","title":"message"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/protocol/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SendNode / protocol protocol \u00b6 [jvm] Content val protocol : ProtocolNode","title":"Protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/protocol/#protocol","text":"[jvm] Content val protocol : ProtocolNode","title":"protocol"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SendNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-send-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-simple-statement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SimpleStatementNode SimpleStatementNode \u00b6 [jvm] sealed class SimpleStatementNode : StatementNode A statement that is not a combination of other statements, and that does not affect control flow. Simple statements can show up in for loop headers. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name LetNode DeclarationNode UpdateNode OutParameterInitializationNode FunctionCallNode SkipNode OutputNode SendNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-simple-statement-node/#simplestatementnode","text":"[jvm] sealed class SimpleStatementNode : StatementNode A statement that is not a combination of other statements, and that does not affect control flow. Simple statements can show up in for loop headers.","title":"SimpleStatementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-simple-statement-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-simple-statement-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-simple-statement-node/#inheritors","text":"Name LetNode DeclarationNode UpdateNode OutParameterInitializationNode FunctionCallNode SkipNode OutputNode SendNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SkipNode SkipNode \u00b6 [jvm] class SkipNode ( sourceLocation : SourceLocation ) : SimpleStatementNode A statement that does nothing. Constructors \u00b6 Name Summary SkipNode [jvm] fun SkipNode (sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/#skipnode","text":"[jvm] class SkipNode ( sourceLocation : SourceLocation ) : SimpleStatementNode A statement that does nothing.","title":"SkipNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/#constructors","text":"Name Summary SkipNode [jvm] fun SkipNode (sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/-skip-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SkipNode / SkipNode SkipNode \u00b6 [jvm] Content fun SkipNode (sourceLocation: SourceLocation )","title":" skip node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/-skip-node/#skipnode","text":"[jvm] Content fun SkipNode (sourceLocation: SourceLocation )","title":"SkipNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SkipNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / SkipNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-skip-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-statement-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / StatementNode StatementNode \u00b6 [jvm] sealed class StatementNode : Node A computation with side effects. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name SimpleStatementNode IfNode LoopNode BreakNode AssertionNode BlockNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-statement-node/#statementnode","text":"[jvm] sealed class StatementNode : Node A computation with side effects.","title":"StatementNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-statement-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-statement-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-statement-node/#inheritors","text":"Name SimpleStatementNode IfNode LoopNode BreakNode AssertionNode BlockNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-top-level-declaration-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / TopLevelDeclarationNode TopLevelDeclarationNode \u00b6 [jvm] sealed class TopLevelDeclarationNode : Node A declaration at the top level of a file. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation Inheritors \u00b6 Name HostDeclarationNode ProcessDeclarationNode FunctionDeclarationNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-top-level-declaration-node/#topleveldeclarationnode","text":"[jvm] sealed class TopLevelDeclarationNode : Node A declaration at the top level of a file.","title":"TopLevelDeclarationNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-top-level-declaration-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-top-level-declaration-node/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document sourceLocation [jvm] abstract val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-top-level-declaration-node/#inheritors","text":"Name HostDeclarationNode ProcessDeclarationNode FunctionDeclarationNode","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / UpdateNode UpdateNode \u00b6 [jvm] class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode An update method applied to an object. Constructors \u00b6 Name Summary UpdateNode [jvm] fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation update [jvm] val update : UpdateNameNode variable [jvm] val variable : ObjectVariableNode","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/#updatenode","text":"[jvm] class UpdateNode ( variable : ObjectVariableNode , update : UpdateNameNode , arguments : Arguments < ExpressionNode >, sourceLocation : SourceLocation ) : SimpleStatementNode An update method applied to an object.","title":"UpdateNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/#constructors","text":"Name Summary UpdateNode [jvm] fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/#properties","text":"Name Summary arguments [jvm] val arguments : Arguments < ExpressionNode > asDocument [jvm] open override val asDocument : Document sourceLocation [jvm] open override val sourceLocation : SourceLocation update [jvm] val update : UpdateNameNode variable [jvm] val variable : ObjectVariableNode","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/-update-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / UpdateNode / UpdateNode UpdateNode \u00b6 [jvm] Content fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":" update node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/-update-node/#updatenode","text":"[jvm] Content fun UpdateNode (variable: ObjectVariableNode , update: UpdateNameNode , arguments: Arguments < ExpressionNode >, sourceLocation: SourceLocation )","title":"UpdateNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / UpdateNode / arguments arguments \u00b6 [jvm] Content val arguments : Arguments < ExpressionNode >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/arguments/#arguments","text":"[jvm] Content val arguments : Arguments < ExpressionNode >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / UpdateNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / UpdateNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/update/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / UpdateNode / update update \u00b6 [jvm] Content val update : UpdateNameNode","title":"Update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/update/#update","text":"[jvm] Content val update : UpdateNameNode","title":"update"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/variable/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / UpdateNode / variable variable \u00b6 [jvm] Content val variable : ObjectVariableNode","title":"Variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-update-node/variable/#variable","text":"[jvm] Content val variable : ObjectVariableNode","title":"variable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / WhileLoopNode WhileLoopNode \u00b6 [jvm] class WhileLoopNode ( guard : ExpressionNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode Executing a statement repeatedly as long as a condition is true. Constructors \u00b6 Name Summary WhileLoopNode [jvm] fun WhileLoopNode (guard: ExpressionNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] open override val body : BlockNode Statements to execute repeatedly. guard [jvm] val guard : ExpressionNode jumpLabel [jvm] open override val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/#whileloopnode","text":"[jvm] class WhileLoopNode ( guard : ExpressionNode , body : BlockNode , jumpLabel : JumpLabelNode ?, sourceLocation : SourceLocation ) : LoopNode Executing a statement repeatedly as long as a condition is true.","title":"WhileLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/#constructors","text":"Name Summary WhileLoopNode [jvm] fun WhileLoopNode (guard: ExpressionNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document body [jvm] open override val body : BlockNode Statements to execute repeatedly. guard [jvm] val guard : ExpressionNode jumpLabel [jvm] open override val jumpLabel : JumpLabelNode ?A label for the loop that break nodes can refer to. sourceLocation [jvm] open override val sourceLocation : SourceLocation","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/-while-loop-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / WhileLoopNode / WhileLoopNode WhileLoopNode \u00b6 [jvm] Content fun WhileLoopNode (guard: ExpressionNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )","title":" while loop node"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/-while-loop-node/#whileloopnode","text":"[jvm] Content fun WhileLoopNode (guard: ExpressionNode , body: BlockNode , jumpLabel: JumpLabelNode ?, sourceLocation: SourceLocation )","title":"WhileLoopNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / WhileLoopNode / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/body/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / WhileLoopNode / body body \u00b6 [jvm] Content open override val body : BlockNode More info Statements to execute repeatedly.","title":"Body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/body/#body","text":"[jvm] Content open override val body : BlockNode More info Statements to execute repeatedly.","title":"body"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/guard/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / WhileLoopNode / guard guard \u00b6 [jvm] Content val guard : ExpressionNode","title":"Guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/guard/#guard","text":"[jvm] Content val guard : ExpressionNode","title":"guard"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/jump-label/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / WhileLoopNode / jumpLabel jumpLabel \u00b6 [jvm] Content open override val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"Jump label"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/jump-label/#jumplabel","text":"[jvm] Content open override val jumpLabel : JumpLabelNode ? More info A label for the loop that break nodes can refer to.","title":"jumpLabel"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/source-location/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.surface / WhileLoopNode / sourceLocation sourceLocation \u00b6 [jvm] Content open override val sourceLocation : SourceLocation","title":"Source location"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.surface/-while-loop-node/source-location/#sourcelocation","text":"[jvm] Content open override val sourceLocation : SourceLocation","title":"sourceLocation"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types Package edu.cornell.cs.apl.viaduct.syntax.types \u00b6 Types \u00b6 Name Summary BooleanType [jvm] Content object BooleanType : ValueType More info The type of booleans. ByteVecType [jvm] Content object ByteVecType : ValueType More info The type of booleans. FunctionType [jvm] Content class FunctionType : Type More info The type of a function or a function like object. HostSetType [jvm] Content object HostSetType : ValueType More info The type assigned to HostSetValue s. HostType [jvm] Content object HostType : ValueType More info The type assigned to HostValue s. ImmutableCellType [jvm] Content data class ImmutableCellType ( elementType : ValueType ) : ObjectType More info The type of an ImmutableCell object. IntegerType [jvm] Content object IntegerType : ValueType More info The type of integers. MutableCellType [jvm] Content data class MutableCellType ( elementType : ValueType ) : ObjectType More info The type of a MutableCell object. ObjectType [jvm] Content abstract class ObjectType : Type More info The type of an object. StringType [jvm] Content object StringType : ValueType More info The type of strings. Type [jvm] Content interface Type : PrettyPrintable More info A type assignable to data or computations. UnitType [jvm] Content object UnitType : ValueType More info A type with a single element. ValueType [jvm] Content abstract class ValueType : Type More info The type of a Value . ValueTypeStyle [jvm] Content object ValueTypeStyle : Style More info The display style of ValueType s. VectorType [jvm] Content data class VectorType ( elementType : ValueType ) : ObjectType More info The type of a Vector object.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/#package-educornellcsaplviaductsyntaxtypes","text":"","title":"Package edu.cornell.cs.apl.viaduct.syntax.types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/#types","text":"Name Summary BooleanType [jvm] Content object BooleanType : ValueType More info The type of booleans. ByteVecType [jvm] Content object ByteVecType : ValueType More info The type of booleans. FunctionType [jvm] Content class FunctionType : Type More info The type of a function or a function like object. HostSetType [jvm] Content object HostSetType : ValueType More info The type assigned to HostSetValue s. HostType [jvm] Content object HostType : ValueType More info The type assigned to HostValue s. ImmutableCellType [jvm] Content data class ImmutableCellType ( elementType : ValueType ) : ObjectType More info The type of an ImmutableCell object. IntegerType [jvm] Content object IntegerType : ValueType More info The type of integers. MutableCellType [jvm] Content data class MutableCellType ( elementType : ValueType ) : ObjectType More info The type of a MutableCell object. ObjectType [jvm] Content abstract class ObjectType : Type More info The type of an object. StringType [jvm] Content object StringType : ValueType More info The type of strings. Type [jvm] Content interface Type : PrettyPrintable More info A type assignable to data or computations. UnitType [jvm] Content object UnitType : ValueType More info A type with a single element. ValueType [jvm] Content abstract class ValueType : Type More info The type of a Value . ValueTypeStyle [jvm] Content object ValueTypeStyle : Style More info The display style of ValueType s. VectorType [jvm] Content data class VectorType ( elementType : ValueType ) : ObjectType More info The type of a Vector object.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / BooleanType BooleanType \u00b6 [jvm] object BooleanType : ValueType The type of booleans. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/#booleantype","text":"[jvm] object BooleanType : ValueType The type of booleans.","title":"BooleanType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / BooleanType / defaultValue defaultValue \u00b6 [jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/default-value/#defaultvalue","text":"[jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / BooleanType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-boolean-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ByteVecType ByteVecType \u00b6 [jvm] object ByteVecType : ValueType The type of booleans. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/#bytevectype","text":"[jvm] object ByteVecType : ValueType The type of booleans.","title":"ByteVecType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ByteVecType / defaultValue defaultValue \u00b6 [jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/default-value/#defaultvalue","text":"[jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ByteVecType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-byte-vec-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / FunctionType FunctionType \u00b6 [jvm] class FunctionType : Type The type of a function or a function like object. Constructors \u00b6 Name Summary FunctionType [jvm] fun FunctionType (arguments: List < ValueType >, result: ValueType ) FunctionType [jvm] fun FunctionType (vararg arguments: ValueType , result: ValueType ) Functions \u00b6 Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arguments [jvm] val arguments : PersistentList< ValueType > asDocument [jvm] open override val asDocument : Document result [jvm] val result : ValueType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/#functiontype","text":"[jvm] class FunctionType : Type The type of a function or a function like object.","title":"FunctionType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/#constructors","text":"Name Summary FunctionType [jvm] fun FunctionType (arguments: List < ValueType >, result: ValueType ) FunctionType [jvm] fun FunctionType (vararg arguments: ValueType , result: ValueType )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/#functions","text":"Name Summary equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/#properties","text":"Name Summary arguments [jvm] val arguments : PersistentList< ValueType > asDocument [jvm] open override val asDocument : Document result [jvm] val result : ValueType","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/-function-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / FunctionType / FunctionType FunctionType \u00b6 [jvm] Content fun FunctionType (arguments: List < ValueType >, result: ValueType ) fun FunctionType (vararg arguments: ValueType , result: ValueType )","title":" function type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/-function-type/#functiontype","text":"[jvm] Content fun FunctionType (arguments: List < ValueType >, result: ValueType ) fun FunctionType (vararg arguments: ValueType , result: ValueType )","title":"FunctionType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / FunctionType / arguments arguments \u00b6 [jvm] Content val arguments : PersistentList< ValueType >","title":"Arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/arguments/#arguments","text":"[jvm] Content val arguments : PersistentList< ValueType >","title":"arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / FunctionType / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / FunctionType / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/hash-code/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / FunctionType / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/result/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / FunctionType / result result \u00b6 [jvm] Content val result : ValueType","title":"Result"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-function-type/result/#result","text":"[jvm] Content val result : ValueType","title":"result"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / HostSetType HostSetType \u00b6 [jvm] object HostSetType : ValueType The type assigned to HostSetValue s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/#hostsettype","text":"[jvm] object HostSetType : ValueType The type assigned to HostSetValue s.","title":"HostSetType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / HostSetType / defaultValue defaultValue \u00b6 [jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/default-value/#defaultvalue","text":"[jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / HostSetType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-set-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / HostType HostType \u00b6 [jvm] object HostType : ValueType The type assigned to HostValue s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/#hosttype","text":"[jvm] object HostType : ValueType The type assigned to HostValue s.","title":"HostType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / HostType / defaultValue defaultValue \u00b6 [jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/default-value/#defaultvalue","text":"[jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / HostType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-host-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType ImmutableCellType \u00b6 [jvm] data class ImmutableCellType ( elementType : ValueType ) : ObjectType The type of an ImmutableCell object. Constructors \u00b6 Name Summary ImmutableCellType [jvm] fun ImmutableCellType (elementType: ValueType ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): ValueType copy [jvm] Content fun copy (elementType: ValueType ): ImmutableCellType equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getType [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document className [jvm] open override val className : ClassName The class this object belongs to. constructorArguments [jvm] open override val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. elementType [jvm] val elementType : ValueType typeArguments [jvm] open override val typeArguments : List < ValueType >The type arguments className was instantiated with.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/#immutablecelltype","text":"[jvm] data class ImmutableCellType ( elementType : ValueType ) : ObjectType The type of an ImmutableCell object.","title":"ImmutableCellType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/#constructors","text":"Name Summary ImmutableCellType [jvm] fun ImmutableCellType (elementType: ValueType )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): ValueType copy [jvm] Content fun copy (elementType: ValueType ): ImmutableCellType equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getType [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document className [jvm] open override val className : ClassName The class this object belongs to. constructorArguments [jvm] open override val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. elementType [jvm] val elementType : ValueType typeArguments [jvm] open override val typeArguments : List < ValueType >The type arguments className was instantiated with.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/-immutable-cell-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / ImmutableCellType ImmutableCellType \u00b6 [jvm] Content fun ImmutableCellType (elementType: ValueType )","title":" immutable cell type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/-immutable-cell-type/#immutablecelltype","text":"[jvm] Content fun ImmutableCellType (elementType: ValueType )","title":"ImmutableCellType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / className className \u00b6 [jvm] Content open override val className : ClassName More info The class this object belongs to.","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/class-name/#classname","text":"[jvm] Content open override val className : ClassName More info The class this object belongs to.","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / component1 component1 \u00b6 [jvm] Content operator fun component1 (): ValueType","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/component1/#component1","text":"[jvm] Content operator fun component1 (): ValueType","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/constructor-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / constructorArguments constructorArguments \u00b6 [jvm] Content open override val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"Constructor arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/constructor-arguments/#constructorarguments","text":"[jvm] Content open override val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"constructorArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / copy copy \u00b6 [jvm] Content fun copy (elementType: ValueType ): ImmutableCellType","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/copy/#copy","text":"[jvm] Content fun copy (elementType: ValueType ): ImmutableCellType","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/element-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / elementType elementType \u00b6 [jvm] Content val elementType : ValueType","title":"Element type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/element-type/#elementtype","text":"[jvm] Content val elementType : ValueType","title":"elementType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/get-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / getType getType \u00b6 [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"Get type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/get-type/#gettype","text":"[jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"getType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ImmutableCellType / typeArguments typeArguments \u00b6 [jvm] Content open override val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-immutable-cell-type/type-arguments/#typearguments","text":"[jvm] Content open override val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / IntegerType IntegerType \u00b6 [jvm] object IntegerType : ValueType The type of integers. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/#integertype","text":"[jvm] object IntegerType : ValueType The type of integers.","title":"IntegerType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / IntegerType / defaultValue defaultValue \u00b6 [jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/default-value/#defaultvalue","text":"[jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / IntegerType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-integer-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType MutableCellType \u00b6 [jvm] data class MutableCellType ( elementType : ValueType ) : ObjectType The type of a MutableCell object. Constructors \u00b6 Name Summary MutableCellType [jvm] fun MutableCellType (elementType: ValueType ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): ValueType copy [jvm] Content fun copy (elementType: ValueType ): MutableCellType equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getType [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document className [jvm] open override val className : ClassName The class this object belongs to. constructorArguments [jvm] open override val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. elementType [jvm] val elementType : ValueType typeArguments [jvm] open override val typeArguments : List < ValueType >The type arguments className was instantiated with.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/#mutablecelltype","text":"[jvm] data class MutableCellType ( elementType : ValueType ) : ObjectType The type of a MutableCell object.","title":"MutableCellType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/#constructors","text":"Name Summary MutableCellType [jvm] fun MutableCellType (elementType: ValueType )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): ValueType copy [jvm] Content fun copy (elementType: ValueType ): MutableCellType equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getType [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document className [jvm] open override val className : ClassName The class this object belongs to. constructorArguments [jvm] open override val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. elementType [jvm] val elementType : ValueType typeArguments [jvm] open override val typeArguments : List < ValueType >The type arguments className was instantiated with.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/-mutable-cell-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / MutableCellType MutableCellType \u00b6 [jvm] Content fun MutableCellType (elementType: ValueType )","title":" mutable cell type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/-mutable-cell-type/#mutablecelltype","text":"[jvm] Content fun MutableCellType (elementType: ValueType )","title":"MutableCellType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / className className \u00b6 [jvm] Content open override val className : ClassName More info The class this object belongs to.","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/class-name/#classname","text":"[jvm] Content open override val className : ClassName More info The class this object belongs to.","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / component1 component1 \u00b6 [jvm] Content operator fun component1 (): ValueType","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/component1/#component1","text":"[jvm] Content operator fun component1 (): ValueType","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/constructor-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / constructorArguments constructorArguments \u00b6 [jvm] Content open override val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"Constructor arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/constructor-arguments/#constructorarguments","text":"[jvm] Content open override val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"constructorArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / copy copy \u00b6 [jvm] Content fun copy (elementType: ValueType ): MutableCellType","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/copy/#copy","text":"[jvm] Content fun copy (elementType: ValueType ): MutableCellType","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/element-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / elementType elementType \u00b6 [jvm] Content val elementType : ValueType","title":"Element type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/element-type/#elementtype","text":"[jvm] Content val elementType : ValueType","title":"elementType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/get-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / getType getType \u00b6 [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"Get type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/get-type/#gettype","text":"[jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"getType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / MutableCellType / typeArguments typeArguments \u00b6 [jvm] Content open override val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-mutable-cell-type/type-arguments/#typearguments","text":"[jvm] Content open override val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ObjectType ObjectType \u00b6 [jvm] abstract class ObjectType : Type The type of an object. Constructors \u00b6 Name Summary ObjectType [jvm] fun ObjectType () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getType [jvm] Content abstract fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content abstract fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document className [jvm] abstract val className : ClassName The class this object belongs to. constructorArguments [jvm] abstract val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. typeArguments [jvm] abstract val typeArguments : List < ValueType >The type arguments className was instantiated with. Inheritors \u00b6 Name ImmutableCellType MutableCellType VectorType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/#objecttype","text":"[jvm] abstract class ObjectType : Type The type of an object.","title":"ObjectType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/#constructors","text":"Name Summary ObjectType [jvm] fun ObjectType ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getType [jvm] Content abstract fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content abstract fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document className [jvm] abstract val className : ClassName The class this object belongs to. constructorArguments [jvm] abstract val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. typeArguments [jvm] abstract val typeArguments : List < ValueType >The type arguments className was instantiated with.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/#inheritors","text":"Name ImmutableCellType MutableCellType VectorType","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/-object-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ObjectType / ObjectType ObjectType \u00b6 [jvm] Content fun ObjectType ()","title":" object type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/-object-type/#objecttype","text":"[jvm] Content fun ObjectType ()","title":"ObjectType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ObjectType / asDocument asDocument \u00b6 [jvm] Content override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/as-document/#asdocument","text":"[jvm] Content override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ObjectType / className className \u00b6 [jvm] Content abstract val className : ClassName More info The class this object belongs to.","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/class-name/#classname","text":"[jvm] Content abstract val className : ClassName More info The class this object belongs to.","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/constructor-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ObjectType / constructorArguments constructorArguments \u00b6 [jvm] Content abstract val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"Constructor arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/constructor-arguments/#constructorarguments","text":"[jvm] Content abstract val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"constructorArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/get-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ObjectType / getType getType \u00b6 [jvm] Content abstract fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content abstract fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"Get type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/get-type/#gettype","text":"[jvm] Content abstract fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content abstract fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"getType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ObjectType / typeArguments typeArguments \u00b6 [jvm] Content abstract val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-object-type/type-arguments/#typearguments","text":"[jvm] Content abstract val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / StringType StringType \u00b6 [jvm] object StringType : ValueType The type of strings. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/#stringtype","text":"[jvm] object StringType : ValueType The type of strings.","title":"StringType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / StringType / defaultValue defaultValue \u00b6 [jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/default-value/#defaultvalue","text":"[jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / StringType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-string-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / Type Type \u00b6 [jvm] interface Type : PrettyPrintable A type assignable to data or computations. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document Inheritors \u00b6 Name FunctionType ObjectType ValueType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-type/#type","text":"[jvm] interface Type : PrettyPrintable A type assignable to data or computations.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-type/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-type/#inheritors","text":"Name FunctionType ObjectType ValueType","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / UnitType UnitType \u00b6 [jvm] object UnitType : ValueType A type with a single element. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/#unittype","text":"[jvm] object UnitType : ValueType A type with a single element.","title":"UnitType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] open override val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / UnitType / defaultValue defaultValue \u00b6 [jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/default-value/#defaultvalue","text":"[jvm] Content open override val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / UnitType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-unit-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ValueType ValueType \u00b6 [jvm] abstract class ValueType : Type The type of a Value . Data types such as arrays are not value types. Constructors \u00b6 Name Summary ValueType [jvm] fun ValueType () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] abstract val defaultValue : Value The default value of this type. Inheritors \u00b6 Name BooleanType ByteVecType HostSetType HostType IntegerType StringType UnitType","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/#valuetype","text":"[jvm] abstract class ValueType : Type The type of a Value . Data types such as arrays are not value types.","title":"ValueType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/#constructors","text":"Name Summary ValueType [jvm] fun ValueType ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document defaultValue [jvm] abstract val defaultValue : Value The default value of this type.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/#inheritors","text":"Name BooleanType ByteVecType HostSetType HostType IntegerType StringType UnitType","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/-value-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ValueType / ValueType ValueType \u00b6 [jvm] Content fun ValueType ()","title":" value type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/-value-type/#valuetype","text":"[jvm] Content fun ValueType ()","title":"ValueType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ValueType / asDocument asDocument \u00b6 [jvm] Content override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/as-document/#asdocument","text":"[jvm] Content override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/default-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ValueType / defaultValue defaultValue \u00b6 [jvm] Content abstract val defaultValue : Value More info The default value of this type.","title":"Default value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type/default-value/#defaultvalue","text":"[jvm] Content abstract val defaultValue : Value More info The default value of this type.","title":"defaultValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ValueTypeStyle ValueTypeStyle \u00b6 [jvm] object ValueTypeStyle : Style The display style of ValueType s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type-style/#valuetypestyle","text":"[jvm] object ValueTypeStyle : Style The display style of ValueType s.","title":"ValueTypeStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type-style/foreground-color/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / ValueTypeStyle / foregroundColor foregroundColor \u00b6 [jvm] Content open override val foregroundColor : AnsiColor","title":"Foreground color"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-value-type-style/foreground-color/#foregroundcolor","text":"[jvm] Content open override val foregroundColor : AnsiColor","title":"foregroundColor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType VectorType \u00b6 [jvm] data class VectorType ( elementType : ValueType ) : ObjectType The type of a Vector object. Constructors \u00b6 Name Summary VectorType [jvm] fun VectorType (elementType: ValueType ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): ValueType copy [jvm] Content fun copy (elementType: ValueType ): VectorType equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getType [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document className [jvm] open override val className : ClassName The class this object belongs to. constructorArguments [jvm] open override val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. elementType [jvm] val elementType : ValueType typeArguments [jvm] open override val typeArguments : List < ValueType >The type arguments className was instantiated with.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/#vectortype","text":"[jvm] data class VectorType ( elementType : ValueType ) : ObjectType The type of a Vector object.","title":"VectorType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/#constructors","text":"Name Summary VectorType [jvm] fun VectorType (elementType: ValueType )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): ValueType copy [jvm] Content fun copy (elementType: ValueType ): VectorType equals [jvm] Content open operator override fun equals (other: Any ?): Boolean getType [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise. hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document className [jvm] open override val className : ClassName The class this object belongs to. constructorArguments [jvm] open override val constructorArguments : List < ValueType >The types of the arguments className 's constructor expects. elementType [jvm] val elementType : ValueType typeArguments [jvm] open override val typeArguments : List < ValueType >The type arguments className was instantiated with.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/-vector-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / VectorType VectorType \u00b6 [jvm] Content fun VectorType (elementType: ValueType )","title":" vector type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/-vector-type/#vectortype","text":"[jvm] Content fun VectorType (elementType: ValueType )","title":"VectorType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/class-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / className className \u00b6 [jvm] Content open override val className : ClassName More info The class this object belongs to.","title":"Class name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/class-name/#classname","text":"[jvm] Content open override val className : ClassName More info The class this object belongs to.","title":"className"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / component1 component1 \u00b6 [jvm] Content operator fun component1 (): ValueType","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/component1/#component1","text":"[jvm] Content operator fun component1 (): ValueType","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/constructor-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / constructorArguments constructorArguments \u00b6 [jvm] Content open override val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"Constructor arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/constructor-arguments/#constructorarguments","text":"[jvm] Content open override val constructorArguments : List < ValueType > More info The types of the arguments className 's constructor expects.","title":"constructorArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / copy copy \u00b6 [jvm] Content fun copy (elementType: ValueType ): VectorType","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/copy/#copy","text":"[jvm] Content fun copy (elementType: ValueType ): VectorType","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/element-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / elementType elementType \u00b6 [jvm] Content val elementType : ValueType","title":"Element type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/element-type/#elementtype","text":"[jvm] Content val elementType : ValueType","title":"elementType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/get-type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / getType getType \u00b6 [jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"Get type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/get-type/#gettype","text":"[jvm] Content open override fun getType (query: QueryName ): FunctionType ? More info Returns the type of query if this object has a query with that name, and null otherwise. [jvm] Content open override fun getType (update: UpdateName ): FunctionType ? More info Returns the type of update if this object has an update with that name, and null otherwise.","title":"getType"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/type-arguments/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.types / VectorType / typeArguments typeArguments \u00b6 [jvm] Content open override val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"Type arguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.types/-vector-type/type-arguments/#typearguments","text":"[jvm] Content open override val typeArguments : List < ValueType > More info The type arguments className was instantiated with.","title":"typeArguments"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.util Package edu.cornell.cs.apl.viaduct.syntax.util \u00b6 Types \u00b6 Name Summary VariableExtractor [jvm] Content class VariableExtractor More info extracts variables from statements while preserving program order.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/#package-educornellcsaplviaductsyntaxutil","text":"","title":"Package edu.cornell.cs.apl.viaduct.syntax.util"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/#types","text":"Name Summary VariableExtractor [jvm] Content class VariableExtractor More info extracts variables from statements while preserving program order.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.util / VariableExtractor VariableExtractor \u00b6 [jvm] class VariableExtractor extracts variables from statements while preserving program order. Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/#variableextractor","text":"[jvm] class VariableExtractor extracts variables from statements while preserving program order.","title":"VariableExtractor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.util / VariableExtractor / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int run [jvm] Content fun run (stmt: StatementNode ): PersistentList< Variable > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int run [jvm] Content fun run (stmt: StatementNode ): PersistentList< Variable > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/-companion/run/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.util / VariableExtractor / Companion / run run \u00b6 [jvm] Content fun run (stmt: StatementNode ): PersistentList< Variable >","title":"Run"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.util/-variable-extractor/-companion/run/#run","text":"[jvm] Content fun run (stmt: StatementNode ): PersistentList< Variable >","title":"run"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values Package edu.cornell.cs.apl.viaduct.syntax.values \u00b6 Types \u00b6 Name Summary BooleanValue [jvm] Content data class BooleanValue ( value : Boolean ) : Value More info A boolean. ByteVecValue [jvm] Content data class ByteVecValue ( value : List < Byte >) : Value More info A bytevec. HostSetValue [jvm] Content class HostSetValue : Value , PersistentSet< Host > More info A set of hosts. HostValue [jvm] Content data class HostValue ( value : Host ) : Value More info A host. IntegerValue [jvm] Content data class IntegerValue ( value : Int ) : Value More info An integer. StringValue [jvm] Content data class StringValue ( value : String ) : Value More info A string. UnitValue [jvm] Content object UnitValue : Value More info The unique value of type UnitType . Value [jvm] Content abstract class Value : PrettyPrintable More info The result of evaluating an ExpressionNode . ValueStyle [jvm] Content object ValueStyle : Style More info The display style of Value s.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/#package-educornellcsaplviaductsyntaxvalues","text":"","title":"Package edu.cornell.cs.apl.viaduct.syntax.values"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/#types","text":"Name Summary BooleanValue [jvm] Content data class BooleanValue ( value : Boolean ) : Value More info A boolean. ByteVecValue [jvm] Content data class ByteVecValue ( value : List < Byte >) : Value More info A bytevec. HostSetValue [jvm] Content class HostSetValue : Value , PersistentSet< Host > More info A set of hosts. HostValue [jvm] Content data class HostValue ( value : Host ) : Value More info A host. IntegerValue [jvm] Content data class IntegerValue ( value : Int ) : Value More info An integer. StringValue [jvm] Content data class StringValue ( value : String ) : Value More info A string. UnitValue [jvm] Content object UnitValue : Value More info The unique value of type UnitType . Value [jvm] Content abstract class Value : PrettyPrintable More info The result of evaluating an ExpressionNode . ValueStyle [jvm] Content object ValueStyle : Style More info The display style of Value s.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / BooleanValue BooleanValue \u00b6 [jvm] data class BooleanValue ( value : Boolean ) : Value A boolean. Constructors \u00b6 Name Summary BooleanValue [jvm] fun BooleanValue (value: Boolean ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Boolean copy [jvm] Content fun copy (value: Boolean ): BooleanValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/#booleanvalue","text":"[jvm] data class BooleanValue ( value : Boolean ) : Value A boolean.","title":"BooleanValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/#constructors","text":"Name Summary BooleanValue [jvm] fun BooleanValue (value: Boolean )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Boolean copy [jvm] Content fun copy (value: Boolean ): BooleanValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/-boolean-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / BooleanValue / BooleanValue BooleanValue \u00b6 [jvm] Content fun BooleanValue (value: Boolean )","title":" boolean value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/-boolean-value/#booleanvalue","text":"[jvm] Content fun BooleanValue (value: Boolean )","title":"BooleanValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / BooleanValue / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Boolean","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/component1/#component1","text":"[jvm] Content operator fun component1 (): Boolean","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / BooleanValue / copy copy \u00b6 [jvm] Content fun copy (value: Boolean ): BooleanValue","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/copy/#copy","text":"[jvm] Content fun copy (value: Boolean ): BooleanValue","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / BooleanValue / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / BooleanValue / type type \u00b6 [jvm] Content open override val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/type/#type","text":"[jvm] Content open override val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / BooleanValue / value value \u00b6 [jvm] Content val value : Boolean","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-boolean-value/value/#value","text":"[jvm] Content val value : Boolean","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ByteVecValue ByteVecValue \u00b6 [jvm] data class ByteVecValue ( value : List < Byte >) : Value A bytevec. Constructors \u00b6 Name Summary ByteVecValue [jvm] fun ByteVecValue (value: List < Byte >) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): List < Byte > copy [jvm] Content fun copy (value: List < Byte >): ByteVecValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : List < Byte >","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/#bytevecvalue","text":"[jvm] data class ByteVecValue ( value : List < Byte >) : Value A bytevec.","title":"ByteVecValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/#constructors","text":"Name Summary ByteVecValue [jvm] fun ByteVecValue (value: List < Byte >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): List < Byte > copy [jvm] Content fun copy (value: List < Byte >): ByteVecValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : List < Byte >","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/-byte-vec-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ByteVecValue / ByteVecValue ByteVecValue \u00b6 [jvm] Content fun ByteVecValue (value: List < Byte >)","title":" byte vec value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/-byte-vec-value/#bytevecvalue","text":"[jvm] Content fun ByteVecValue (value: List < Byte >)","title":"ByteVecValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ByteVecValue / component1 component1 \u00b6 [jvm] Content operator fun component1 (): List < Byte >","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/component1/#component1","text":"[jvm] Content operator fun component1 (): List < Byte >","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ByteVecValue / copy copy \u00b6 [jvm] Content fun copy (value: List < Byte >): ByteVecValue","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/copy/#copy","text":"[jvm] Content fun copy (value: List < Byte >): ByteVecValue","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ByteVecValue / type type \u00b6 [jvm] Content open override val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/type/#type","text":"[jvm] Content open override val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ByteVecValue / value value \u00b6 [jvm] Content val value : List < Byte >","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-byte-vec-value/value/#value","text":"[jvm] Content val value : List < Byte >","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue HostSetValue \u00b6 [jvm] class HostSetValue : Value , PersistentSet< Host > A set of hosts. Constructors \u00b6 Name Summary HostSetValue [jvm] fun HostSetValue (hosts: Set < Host >) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary add [jvm] Content open override fun add (element: Host ): PersistentSet< Host > addAll [jvm] Content open override fun addAll (elements: Collection < Host >): PersistentSet< Host > builder [jvm] Content open override fun builder (): PersistentSet.Builder< Host > clear [jvm] Content open override fun clear (): PersistentSet< Host > contains [jvm] Content open operator override fun contains (element: Host ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < Host >): Boolean equals [jvm] Content open operator override fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer Host >) hashCode [jvm] Content open override fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < Host > parallelStream [jvm] Content open fun parallelStream (): Stream < Host > remove [jvm] Content open override fun remove (element: Host ): PersistentSet< Host > removeAll [jvm] Content open override fun removeAll (predicate: ( Host ) -> Boolean ): PersistentSet< Host > open override fun removeAll (elements: Collection < Host >): PersistentSet< Host > retainAll [jvm] Content open override fun retainAll (elements: Collection < Host >): PersistentSet< Host > spliterator [jvm] Content open override fun spliterator (): Spliterator < Host > stream [jvm] Content open fun stream (): Stream < Host > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document hosts [jvm] val hosts : PersistentSet< Host > size [jvm] open override val size : Int type [jvm] open override val type : ValueType The type of the value.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/#hostsetvalue","text":"[jvm] class HostSetValue : Value , PersistentSet< Host > A set of hosts.","title":"HostSetValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/#constructors","text":"Name Summary HostSetValue [jvm] fun HostSetValue (hosts: Set < Host >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/#functions","text":"Name Summary add [jvm] Content open override fun add (element: Host ): PersistentSet< Host > addAll [jvm] Content open override fun addAll (elements: Collection < Host >): PersistentSet< Host > builder [jvm] Content open override fun builder (): PersistentSet.Builder< Host > clear [jvm] Content open override fun clear (): PersistentSet< Host > contains [jvm] Content open operator override fun contains (element: Host ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < Host >): Boolean equals [jvm] Content open operator override fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer Host >) hashCode [jvm] Content open override fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): Iterator < Host > parallelStream [jvm] Content open fun parallelStream (): Stream < Host > remove [jvm] Content open override fun remove (element: Host ): PersistentSet< Host > removeAll [jvm] Content open override fun removeAll (predicate: ( Host ) -> Boolean ): PersistentSet< Host > open override fun removeAll (elements: Collection < Host >): PersistentSet< Host > retainAll [jvm] Content open override fun retainAll (elements: Collection < Host >): PersistentSet< Host > spliterator [jvm] Content open override fun spliterator (): Spliterator < Host > stream [jvm] Content open fun stream (): Stream < Host > toArray [jvm] Content open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document hosts [jvm] val hosts : PersistentSet< Host > size [jvm] open override val size : Int type [jvm] open override val type : ValueType The type of the value.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/-host-set-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / HostSetValue HostSetValue \u00b6 [jvm] Content fun HostSetValue (hosts: Set < Host >)","title":" host set value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/-host-set-value/#hostsetvalue","text":"[jvm] Content fun HostSetValue (hosts: Set < Host >)","title":"HostSetValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/equals/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / equals equals \u00b6 [jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"Equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/equals/#equals","text":"[jvm] Content open operator override fun equals (other: Any ?): Boolean","title":"equals"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/hash-code/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / hashCode hashCode \u00b6 [jvm] Content open override fun hashCode (): Int","title":"Hash code"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/hash-code/#hashcode","text":"[jvm] Content open override fun hashCode (): Int","title":"hashCode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/hosts/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / hosts hosts \u00b6 [jvm] Content val hosts : PersistentSet< Host >","title":"Hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/hosts/#hosts","text":"[jvm] Content val hosts : PersistentSet< Host >","title":"hosts"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / type type \u00b6 [jvm] Content open override val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/type/#type","text":"[jvm] Content open override val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/-companion/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content @ JvmStatic () operator fun invoke (hosts: List < HostNode >): HostSetValue toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content @ JvmStatic () operator fun invoke (hosts: List < HostNode >): HostSetValue toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/-companion/invoke/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostSetValue / Companion / invoke invoke \u00b6 [jvm] Content @ JvmStatic () operator fun invoke (hosts: List < HostNode >): HostSetValue","title":"Invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-set-value/-companion/invoke/#invoke","text":"[jvm] Content @ JvmStatic () operator fun invoke (hosts: List < HostNode >): HostSetValue","title":"invoke"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostValue HostValue \u00b6 [jvm] data class HostValue ( value : Host ) : Value A host. Constructors \u00b6 Name Summary HostValue [jvm] fun HostValue (value: Host ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Host copy [jvm] Content fun copy (value: Host ): HostValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : Host","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/#hostvalue","text":"[jvm] data class HostValue ( value : Host ) : Value A host.","title":"HostValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/#constructors","text":"Name Summary HostValue [jvm] fun HostValue (value: Host )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Host copy [jvm] Content fun copy (value: Host ): HostValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : Host","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/-host-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostValue / HostValue HostValue \u00b6 [jvm] Content fun HostValue (value: Host )","title":" host value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/-host-value/#hostvalue","text":"[jvm] Content fun HostValue (value: Host )","title":"HostValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostValue / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Host","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/component1/#component1","text":"[jvm] Content operator fun component1 (): Host","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostValue / copy copy \u00b6 [jvm] Content fun copy (value: Host ): HostValue","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/copy/#copy","text":"[jvm] Content fun copy (value: Host ): HostValue","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostValue / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostValue / type type \u00b6 [jvm] Content open override val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/type/#type","text":"[jvm] Content open override val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / HostValue / value value \u00b6 [jvm] Content val value : Host","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-host-value/value/#value","text":"[jvm] Content val value : Host","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / IntegerValue IntegerValue \u00b6 [jvm] data class IntegerValue ( value : Int ) : Value An integer. Constructors \u00b6 Name Summary IntegerValue [jvm] fun IntegerValue (value: Int ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Int copy [jvm] Content fun copy (value: Int ): IntegerValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/#integervalue","text":"[jvm] data class IntegerValue ( value : Int ) : Value An integer.","title":"IntegerValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/#constructors","text":"Name Summary IntegerValue [jvm] fun IntegerValue (value: Int )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Int copy [jvm] Content fun copy (value: Int ): IntegerValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/-integer-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / IntegerValue / IntegerValue IntegerValue \u00b6 [jvm] Content fun IntegerValue (value: Int )","title":" integer value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/-integer-value/#integervalue","text":"[jvm] Content fun IntegerValue (value: Int )","title":"IntegerValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / IntegerValue / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Int","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/component1/#component1","text":"[jvm] Content operator fun component1 (): Int","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / IntegerValue / copy copy \u00b6 [jvm] Content fun copy (value: Int ): IntegerValue","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/copy/#copy","text":"[jvm] Content fun copy (value: Int ): IntegerValue","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / IntegerValue / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / IntegerValue / type type \u00b6 [jvm] Content open override val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/type/#type","text":"[jvm] Content open override val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / IntegerValue / value value \u00b6 [jvm] Content val value : Int","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-integer-value/value/#value","text":"[jvm] Content val value : Int","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / StringValue StringValue \u00b6 [jvm] data class StringValue ( value : String ) : Value A string. Constructors \u00b6 Name Summary StringValue [jvm] fun StringValue (value: String ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (value: String ): StringValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/#stringvalue","text":"[jvm] data class StringValue ( value : String ) : Value A string.","title":"StringValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/#constructors","text":"Name Summary StringValue [jvm] fun StringValue (value: String )","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): String copy [jvm] Content fun copy (value: String ): StringValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value. value [jvm] val value : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/-string-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / StringValue / StringValue StringValue \u00b6 [jvm] Content fun StringValue (value: String )","title":" string value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/-string-value/#stringvalue","text":"[jvm] Content fun StringValue (value: String )","title":"StringValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/component1/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / StringValue / component1 component1 \u00b6 [jvm] Content operator fun component1 (): String","title":"Component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/component1/#component1","text":"[jvm] Content operator fun component1 (): String","title":"component1"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/copy/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / StringValue / copy copy \u00b6 [jvm] Content fun copy (value: String ): StringValue","title":"Copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/copy/#copy","text":"[jvm] Content fun copy (value: String ): StringValue","title":"copy"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / StringValue / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / StringValue / type type \u00b6 [jvm] Content open override val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/type/#type","text":"[jvm] Content open override val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / StringValue / value value \u00b6 [jvm] Content val value : String","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-string-value/value/#value","text":"[jvm] Content val value : String","title":"value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / UnitValue UnitValue \u00b6 [jvm] object UnitValue : Value The unique value of type UnitType . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/#unitvalue","text":"[jvm] object UnitValue : Value The unique value of type UnitType .","title":"UnitValue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document type [jvm] open override val type : ValueType The type of the value.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / UnitValue / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / UnitValue / type type \u00b6 [jvm] Content open override val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-unit-value/type/#type","text":"[jvm] Content open override val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / Value Value \u00b6 [jvm] abstract class Value : PrettyPrintable The result of evaluating an ExpressionNode . Constructors \u00b6 Name Summary Value [jvm] fun Value () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] override val asDocument : Document type [jvm] abstract val type : ValueType The type of the value. Inheritors \u00b6 Name BooleanValue ByteVecValue HostSetValue HostValue IntegerValue StringValue UnitValue","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/#value","text":"[jvm] abstract class Value : PrettyPrintable The result of evaluating an ExpressionNode .","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/#constructors","text":"Name Summary Value [jvm] fun Value ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/#properties","text":"Name Summary asDocument [jvm] override val asDocument : Document type [jvm] abstract val type : ValueType The type of the value.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/#inheritors","text":"Name BooleanValue ByteVecValue HostSetValue HostValue IntegerValue StringValue UnitValue","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/-value/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / Value / Value Value \u00b6 [jvm] Content fun Value ()","title":" value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/-value/#value","text":"[jvm] Content fun Value ()","title":"Value"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/as-document/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / Value / asDocument asDocument \u00b6 [jvm] Content override val asDocument : Document","title":"As document"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/as-document/#asdocument","text":"[jvm] Content override val asDocument : Document","title":"asDocument"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/type/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / Value / type type \u00b6 [jvm] Content abstract val type : ValueType More info The type of the value.","title":"Type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value/type/#type","text":"[jvm] Content abstract val type : ValueType More info The type of the value.","title":"type"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value-style/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ValueStyle ValueStyle \u00b6 [jvm] object ValueStyle : Style The display style of Value s. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value-style/#valuestyle","text":"[jvm] object ValueStyle : Style The display style of Value s.","title":"ValueStyle"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open override val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value-style/foreground-color/","text":"// compiler / edu.cornell.cs.apl.viaduct.syntax.values / ValueStyle / foregroundColor foregroundColor \u00b6 [jvm] Content open override val foregroundColor : AnsiColor","title":"Foreground color"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.syntax.values/-value-style/foreground-color/#foregroundcolor","text":"[jvm] Content open override val foregroundColor : AnsiColor","title":"foregroundColor"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/","text":"// compiler / edu.cornell.cs.apl.viaduct.util Package edu.cornell.cs.apl.viaduct.util \u00b6 Types \u00b6 Name Summary Colors [jvm] Content object Colors More info A nice, web-compatible color palette. FreshNameGenerator [jvm] Content class FreshNameGenerator ( initialNames : Set < String >) More info Generates distinct names. UniqueQueue [jvm] Content class UniqueQueue < E > : AbstractQueue < E > More info A queue implementation that keeps only one copy of each element. Functions \u00b6 Name Summary asComparable [jvm] Content fun < T : Comparable < T >> Set < T >. asComparable (): Comparable < Set < T >> graphemeClusterCount [jvm] Content fun CharSequence . graphemeClusterCount (): Int More info Number of grapheme clusters (i.e. unions [jvm] Content fun < T > Iterable < Set < T >>. unions (): Set < T > More info Returns the union of all given sets. Properties \u00b6 Name Summary unicodeLineBreak [jvm] val unicodeLineBreak : Regex A regular expression that recognizes Unicode line breaks.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/#package-educornellcsaplviaductutil","text":"","title":"Package edu.cornell.cs.apl.viaduct.util"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/#types","text":"Name Summary Colors [jvm] Content object Colors More info A nice, web-compatible color palette. FreshNameGenerator [jvm] Content class FreshNameGenerator ( initialNames : Set < String >) More info Generates distinct names. UniqueQueue [jvm] Content class UniqueQueue < E > : AbstractQueue < E > More info A queue implementation that keeps only one copy of each element.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/#functions","text":"Name Summary asComparable [jvm] Content fun < T : Comparable < T >> Set < T >. asComparable (): Comparable < Set < T >> graphemeClusterCount [jvm] Content fun CharSequence . graphemeClusterCount (): Int More info Number of grapheme clusters (i.e. unions [jvm] Content fun < T > Iterable < Set < T >>. unions (): Set < T > More info Returns the union of all given sets.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/#properties","text":"Name Summary unicodeLineBreak [jvm] val unicodeLineBreak : Regex A regular expression that recognizes Unicode line breaks.","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/as-comparable/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / asComparable asComparable \u00b6 [jvm] Content fun < T : Comparable < T >> Set < T >. asComparable (): Comparable < Set < T >>","title":"As comparable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/as-comparable/#ascomparable","text":"[jvm] Content fun < T : Comparable < T >> Set < T >. asComparable (): Comparable < Set < T >>","title":"asComparable"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/grapheme-cluster-count/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / graphemeClusterCount graphemeClusterCount \u00b6 [jvm] Content fun CharSequence . graphemeClusterCount (): Int More info Number of grapheme clusters (i.e. user-perceived characters) in the string. This is a better way to measure a string's length than using CharSequence.length","title":"Grapheme cluster count"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/grapheme-cluster-count/#graphemeclustercount","text":"[jvm] Content fun CharSequence . graphemeClusterCount (): Int More info Number of grapheme clusters (i.e. user-perceived characters) in the string. This is a better way to measure a string's length than using CharSequence.length","title":"graphemeClusterCount"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/unicode-line-break/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / unicodeLineBreak unicodeLineBreak \u00b6 [jvm] Content val unicodeLineBreak : Regex More info A regular expression that recognizes Unicode line breaks.","title":"Unicode line break"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/unicode-line-break/#unicodelinebreak","text":"[jvm] Content val unicodeLineBreak : Regex More info A regular expression that recognizes Unicode line breaks.","title":"unicodeLineBreak"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/unions/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / unions unions \u00b6 [jvm] Content fun < T > Iterable < Set < T >>. unions (): Set < T > More info Returns the union of all given sets.","title":"Unions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/unions/#unions","text":"[jvm] Content fun < T > Iterable < Set < T >>. unions (): Set < T > More info Returns the union of all given sets.","title":"unions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors Colors \u00b6 [jvm] object Colors A nice, web-compatible color palette. Based on Colors . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary AQUA [jvm] const val AQUA : String BLACK [jvm] const val BLACK : String BLUE [jvm] const val BLUE : String FUCHSIA [jvm] const val FUCHSIA : String GRAY [jvm] const val GRAY : String GREEN [jvm] const val GREEN : String LIME [jvm] const val LIME : String MAROON [jvm] const val MAROON : String NAVY [jvm] const val NAVY : String OLIVE [jvm] const val OLIVE : String ORANGE [jvm] const val ORANGE : String PURPLE [jvm] const val PURPLE : String RED [jvm] const val RED : String SILVER [jvm] const val SILVER : String TEAL [jvm] const val TEAL : String WHITE [jvm] const val WHITE : String YELLOW [jvm] const val YELLOW : String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/#colors","text":"[jvm] object Colors A nice, web-compatible color palette. Based on Colors .","title":"Colors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/#properties","text":"Name Summary AQUA [jvm] const val AQUA : String BLACK [jvm] const val BLACK : String BLUE [jvm] const val BLUE : String FUCHSIA [jvm] const val FUCHSIA : String GRAY [jvm] const val GRAY : String GREEN [jvm] const val GREEN : String LIME [jvm] const val LIME : String MAROON [jvm] const val MAROON : String NAVY [jvm] const val NAVY : String OLIVE [jvm] const val OLIVE : String ORANGE [jvm] const val ORANGE : String PURPLE [jvm] const val PURPLE : String RED [jvm] const val RED : String SILVER [jvm] const val SILVER : String TEAL [jvm] const val TEAL : String WHITE [jvm] const val WHITE : String YELLOW [jvm] const val YELLOW : String","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-a-q-u-a/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / AQUA AQUA \u00b6 [jvm] Content const val AQUA : String","title":" a q u a"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-a-q-u-a/#aqua","text":"[jvm] Content const val AQUA : String","title":"AQUA"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-b-l-a-c-k/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / BLACK BLACK \u00b6 [jvm] Content const val BLACK : String","title":" b l a c k"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-b-l-a-c-k/#black","text":"[jvm] Content const val BLACK : String","title":"BLACK"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-b-l-u-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / BLUE BLUE \u00b6 [jvm] Content const val BLUE : String","title":" b l u e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-b-l-u-e/#blue","text":"[jvm] Content const val BLUE : String","title":"BLUE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-f-u-c-h-s-i-a/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / FUCHSIA FUCHSIA \u00b6 [jvm] Content const val FUCHSIA : String","title":" f u c h s i a"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-f-u-c-h-s-i-a/#fuchsia","text":"[jvm] Content const val FUCHSIA : String","title":"FUCHSIA"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-g-r-a-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / GRAY GRAY \u00b6 [jvm] Content const val GRAY : String","title":" g r a y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-g-r-a-y/#gray","text":"[jvm] Content const val GRAY : String","title":"GRAY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-g-r-e-e-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / GREEN GREEN \u00b6 [jvm] Content const val GREEN : String","title":" g r e e n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-g-r-e-e-n/#green","text":"[jvm] Content const val GREEN : String","title":"GREEN"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-l-i-m-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / LIME LIME \u00b6 [jvm] Content const val LIME : String","title":" l i m e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-l-i-m-e/#lime","text":"[jvm] Content const val LIME : String","title":"LIME"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-m-a-r-o-o-n/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / MAROON MAROON \u00b6 [jvm] Content const val MAROON : String","title":" m a r o o n"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-m-a-r-o-o-n/#maroon","text":"[jvm] Content const val MAROON : String","title":"MAROON"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-n-a-v-y/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / NAVY NAVY \u00b6 [jvm] Content const val NAVY : String","title":" n a v y"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-n-a-v-y/#navy","text":"[jvm] Content const val NAVY : String","title":"NAVY"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-o-l-i-v-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / OLIVE OLIVE \u00b6 [jvm] Content const val OLIVE : String","title":" o l i v e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-o-l-i-v-e/#olive","text":"[jvm] Content const val OLIVE : String","title":"OLIVE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-o-r-a-n-g-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / ORANGE ORANGE \u00b6 [jvm] Content const val ORANGE : String","title":" o r a n g e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-o-r-a-n-g-e/#orange","text":"[jvm] Content const val ORANGE : String","title":"ORANGE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-p-u-r-p-l-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / PURPLE PURPLE \u00b6 [jvm] Content const val PURPLE : String","title":" p u r p l e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-p-u-r-p-l-e/#purple","text":"[jvm] Content const val PURPLE : String","title":"PURPLE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-r-e-d/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / RED RED \u00b6 [jvm] Content const val RED : String","title":" r e d"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-r-e-d/#red","text":"[jvm] Content const val RED : String","title":"RED"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-s-i-l-v-e-r/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / SILVER SILVER \u00b6 [jvm] Content const val SILVER : String","title":" s i l v e r"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-s-i-l-v-e-r/#silver","text":"[jvm] Content const val SILVER : String","title":"SILVER"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-t-e-a-l/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / TEAL TEAL \u00b6 [jvm] Content const val TEAL : String","title":" t e a l"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-t-e-a-l/#teal","text":"[jvm] Content const val TEAL : String","title":"TEAL"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-w-h-i-t-e/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / WHITE WHITE \u00b6 [jvm] Content const val WHITE : String","title":" w h i t e"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-w-h-i-t-e/#white","text":"[jvm] Content const val WHITE : String","title":"WHITE"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-y-e-l-l-o-w/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / Colors / YELLOW YELLOW \u00b6 [jvm] Content const val YELLOW : String","title":" y e l l o w"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-colors/-y-e-l-l-o-w/#yellow","text":"[jvm] Content const val YELLOW : String","title":"YELLOW"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / FreshNameGenerator FreshNameGenerator \u00b6 [jvm] class FreshNameGenerator ( initialNames : Set < String >) Generates distinct names. Never generates the same name twice. Constructors \u00b6 Name Summary FreshNameGenerator [jvm] fun FreshNameGenerator () FreshNameGenerator [jvm] fun FreshNameGenerator (initialNames: Set < String >) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFreshName [jvm] Content fun getFreshName (base: String ): String More info Returns a new name derived from base. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/#freshnamegenerator","text":"[jvm] class FreshNameGenerator ( initialNames : Set < String >) Generates distinct names. Never generates the same name twice.","title":"FreshNameGenerator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/#constructors","text":"Name Summary FreshNameGenerator [jvm] fun FreshNameGenerator () FreshNameGenerator [jvm] fun FreshNameGenerator (initialNames: Set < String >)","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getFreshName [jvm] Content fun getFreshName (base: String ): String More info Returns a new name derived from base. hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/-fresh-name-generator/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / FreshNameGenerator / FreshNameGenerator FreshNameGenerator \u00b6 [jvm] Content fun FreshNameGenerator () fun FreshNameGenerator (initialNames: Set < String >)","title":" fresh name generator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/-fresh-name-generator/#freshnamegenerator","text":"[jvm] Content fun FreshNameGenerator () fun FreshNameGenerator (initialNames: Set < String >)","title":"FreshNameGenerator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/get-fresh-name/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / FreshNameGenerator / getFreshName getFreshName \u00b6 [jvm] Content fun getFreshName (base: String ): String More info Returns a new name derived from base. The return name will be different from all previously returned names. If this is the first time base is passed to this function, then returns base.","title":"Get fresh name"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-fresh-name-generator/get-fresh-name/#getfreshname","text":"[jvm] Content fun getFreshName (base: String ): String More info Returns a new name derived from base. The return name will be different from all previously returned names. If this is the first time base is passed to this function, then returns base.","title":"getFreshName"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue UniqueQueue \u00b6 [jvm] class UniqueQueue < E > : AbstractQueue < E > A queue implementation that keeps only one copy of each element. Trying to insert an element that is already in the queue will ignore the new copy, keeping the old. Additionally, the element will keep its original position in the queue, and is not moved to the end of the queue. Constructors \u00b6 Name Summary UniqueQueue [jvm] fun < E > UniqueQueue (collection: Collection < E >) UniqueQueue [jvm] fun UniqueQueue () Functions \u00b6 Name Summary add [jvm] Content open override fun add (element: E ): Boolean addAll [jvm] Content open override fun addAll (elements: Collection < E >): Boolean clear [jvm] Content open override fun clear () contains [jvm] Content open operator override fun contains (element: E ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < E >): Boolean element [jvm] Content open override fun element (): E equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer E >) hashCode [jvm] Content open fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): MutableIterator < E > offer [jvm] Content open override fun offer (e: E ): Boolean parallelStream [jvm] Content open fun parallelStream (): Stream < E > peek [jvm] Content open override fun peek (): E ? poll [jvm] Content open override fun poll (): E ? remove [jvm] Content open override fun remove (): E open override fun remove (element: E ): Boolean removeAll [jvm] Content open override fun removeAll (elements: Collection < E >): Boolean removeIf [jvm] Content open fun removeIf (p0: Predicate E >): Boolean retainAll [jvm] Content open override fun retainAll (elements: Collection < E >): Boolean spliterator [jvm] Content open override fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > toArray [jvm] Content open fun toArray (): Array < Any > open fun < T : Any > toArray (p0: Array < T >): Array < T > open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary size [jvm] open override val size : Int","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/#uniquequeue","text":"[jvm] class UniqueQueue < E > : AbstractQueue < E > A queue implementation that keeps only one copy of each element. Trying to insert an element that is already in the queue will ignore the new copy, keeping the old. Additionally, the element will keep its original position in the queue, and is not moved to the end of the queue.","title":"UniqueQueue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/#constructors","text":"Name Summary UniqueQueue [jvm] fun < E > UniqueQueue (collection: Collection < E >) UniqueQueue [jvm] fun UniqueQueue ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/#functions","text":"Name Summary add [jvm] Content open override fun add (element: E ): Boolean addAll [jvm] Content open override fun addAll (elements: Collection < E >): Boolean clear [jvm] Content open override fun clear () contains [jvm] Content open operator override fun contains (element: E ): Boolean containsAll [jvm] Content open override fun containsAll (elements: Collection < E >): Boolean element [jvm] Content open override fun element (): E equals [jvm] Content open operator fun equals (other: Any ?): Boolean forEach [jvm] Content open fun forEach (p0: Consumer E >) hashCode [jvm] Content open fun hashCode (): Int isEmpty [jvm] Content open override fun isEmpty (): Boolean iterator [jvm] Content open operator override fun iterator (): MutableIterator < E > offer [jvm] Content open override fun offer (e: E ): Boolean parallelStream [jvm] Content open fun parallelStream (): Stream < E > peek [jvm] Content open override fun peek (): E ? poll [jvm] Content open override fun poll (): E ? remove [jvm] Content open override fun remove (): E open override fun remove (element: E ): Boolean removeAll [jvm] Content open override fun removeAll (elements: Collection < E >): Boolean removeIf [jvm] Content open fun removeIf (p0: Predicate E >): Boolean retainAll [jvm] Content open override fun retainAll (elements: Collection < E >): Boolean spliterator [jvm] Content open override fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > toArray [jvm] Content open fun toArray (): Array < Any > open fun < T : Any > toArray (p0: Array < T >): Array < T > open fun < T : Any > toArray ( ~ p0 ~ :~~ IntFunction < Array < T >> )~~ :~~ Array < T > toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/#properties","text":"Name Summary size [jvm] open override val size : Int","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/-unique-queue/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue / UniqueQueue UniqueQueue \u00b6 [jvm] Content fun < E > UniqueQueue (collection: Collection < E >) fun UniqueQueue ()","title":" unique queue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/-unique-queue/#uniquequeue","text":"[jvm] Content fun < E > UniqueQueue (collection: Collection < E >) fun UniqueQueue ()","title":"UniqueQueue"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/clear/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue / clear clear \u00b6 [jvm] Content open override fun clear ()","title":"Clear"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/clear/#clear","text":"[jvm] Content open override fun clear ()","title":"clear"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/iterator/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue / iterator iterator \u00b6 [jvm] Content open operator override fun iterator (): MutableIterator < E >","title":"Iterator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/iterator/#iterator","text":"[jvm] Content open operator override fun iterator (): MutableIterator < E >","title":"iterator"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/offer/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue / offer offer \u00b6 [jvm] Content open override fun offer (e: E ): Boolean","title":"Offer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/offer/#offer","text":"[jvm] Content open override fun offer (e: E ): Boolean","title":"offer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/peek/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue / peek peek \u00b6 [jvm] Content open override fun peek (): E ?","title":"Peek"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/peek/#peek","text":"[jvm] Content open override fun peek (): E ?","title":"peek"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/poll/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue / poll poll \u00b6 [jvm] Content open override fun poll (): E ?","title":"Poll"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/poll/#poll","text":"[jvm] Content open override fun poll (): E ?","title":"poll"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/size/","text":"// compiler / edu.cornell.cs.apl.viaduct.util / UniqueQueue / size size \u00b6 [jvm] Content open override val size : Int","title":"Size"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util/-unique-queue/size/#size","text":"[jvm] Content open override val size : Int","title":"size"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow Package edu.cornell.cs.apl.viaduct.util.dataflow \u00b6 Types \u00b6 Name Summary DataFlowEdge [jvm] Content interface DataFlowEdge < A > More info Edges in a data flow graph. DataFlowNode [jvm] Content interface DataFlowNode < A > More info Nodes in a data flow graph. IdentityEdge [jvm] Content class IdentityEdge < A > : DefaultEdge, DataFlowEdge < A > More info An edge that passes values through unmodified. Functions \u00b6 Name Summary solveDataFlow [jvm] Content fun < A : MeetSemiLattice < A >, NodeT : DataFlowNode < A >, EdgeT : DataFlowEdge < A >> solveDataFlow (top: A , graph: Graph< NodeT , EdgeT >): Map < NodeT , A > More info Run data flow analysis on the given graph and return the computed solution for each node.","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/#package-educornellcsaplviaductutildataflow","text":"","title":"Package edu.cornell.cs.apl.viaduct.util.dataflow"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/#types","text":"Name Summary DataFlowEdge [jvm] Content interface DataFlowEdge < A > More info Edges in a data flow graph. DataFlowNode [jvm] Content interface DataFlowNode < A > More info Nodes in a data flow graph. IdentityEdge [jvm] Content class IdentityEdge < A > : DefaultEdge, DataFlowEdge < A > More info An edge that passes values through unmodified.","title":"Types"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/#functions","text":"Name Summary solveDataFlow [jvm] Content fun < A : MeetSemiLattice < A >, NodeT : DataFlowNode < A >, EdgeT : DataFlowEdge < A >> solveDataFlow (top: A , graph: Graph< NodeT , EdgeT >): Map < NodeT , A > More info Run data flow analysis on the given graph and return the computed solution for each node.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/solve-data-flow/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / solveDataFlow solveDataFlow \u00b6 [jvm] Content fun < A : MeetSemiLattice < A >, NodeT : DataFlowNode < A >, EdgeT : DataFlowEdge < A >> solveDataFlow (top: A , graph: Graph< NodeT , EdgeT >): Map < NodeT , A > More info Run data flow analysis on the given graph and return the computed solution for each node. The solution for a node is the return value of the last call to DataFlowNode.transfer . Parameters \u00b6 jvm Name Summary top greatest element of A graph data flow graph to run the analysis on","title":"Solve data flow"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/solve-data-flow/#solvedataflow","text":"[jvm] Content fun < A : MeetSemiLattice < A >, NodeT : DataFlowNode < A >, EdgeT : DataFlowEdge < A >> solveDataFlow (top: A , graph: Graph< NodeT , EdgeT >): Map < NodeT , A > More info Run data flow analysis on the given graph and return the computed solution for each node. The solution for a node is the return value of the last call to DataFlowNode.transfer .","title":"solveDataFlow"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/solve-data-flow/#parameters","text":"jvm Name Summary top greatest element of A graph data flow graph to run the analysis on","title":"Parameters"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-edge/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / DataFlowEdge DataFlowEdge \u00b6 [jvm] interface DataFlowEdge < A > Edges in a data flow graph. These are allowed to modify values as they pass through them. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int propagate [jvm] Content abstract fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node. toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name IdentityEdge","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-edge/#dataflowedge","text":"[jvm] interface DataFlowEdge < A > Edges in a data flow graph. These are allowed to modify values as they pass through them.","title":"DataFlowEdge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-edge/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int propagate [jvm] Content abstract fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-edge/#inheritors","text":"Name IdentityEdge","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-edge/propagate/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / DataFlowEdge / propagate propagate \u00b6 [jvm] Content abstract fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node.","title":"Propagate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-edge/propagate/#propagate","text":"[jvm] Content abstract fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node.","title":"propagate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-node/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / DataFlowNode DataFlowNode \u00b6 [jvm] interface DataFlowNode < A > Nodes in a data flow graph. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String transfer [jvm] Content abstract fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. Inheritors \u00b6 Name AtomicTerm","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-node/#dataflownode","text":"[jvm] interface DataFlowNode < A > Nodes in a data flow graph.","title":"DataFlowNode"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String transfer [jvm] Content abstract fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges.","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-node/#inheritors","text":"Name AtomicTerm","title":"Inheritors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-node/transfer/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / DataFlowNode / transfer transfer \u00b6 [jvm] Content abstract fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. The incoming values might only be upper bounds rather than being exact, in which case this function should return an upper bound. When the incoming values are exact, this function should also return an exact answer.","title":"Transfer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-data-flow-node/transfer/#transfer","text":"[jvm] Content abstract fun transfer (input: A ): A More info Compute the output value for this node given the meet of all values from incoming edges. The incoming values might only be upper bounds rather than being exact, in which case this function should return an upper bound. When the incoming values are exact, this function should also return an exact answer.","title":"transfer"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / IdentityEdge IdentityEdge \u00b6 [jvm] class IdentityEdge < A > : DefaultEdge, DataFlowEdge < A > An edge that passes values through unmodified. Constructors \u00b6 Name Summary IdentityEdge [jvm] fun IdentityEdge () Functions \u00b6 Name Summary clone [jvm] Content open override fun clone (): Any equals [jvm] Content open operator fun equals (other: Any ?): Boolean getSource [jvm] Content open fun getSource (): Any getTarget [jvm] Content open fun getTarget (): Any hashCode [jvm] Content open fun hashCode (): Int propagate [jvm] Content open override fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary source [jvm] val source : Any target [jvm] val target : Any","title":"Index"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/#identityedge","text":"[jvm] class IdentityEdge < A > : DefaultEdge, DataFlowEdge < A > An edge that passes values through unmodified.","title":"IdentityEdge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/#constructors","text":"Name Summary IdentityEdge [jvm] fun IdentityEdge ()","title":"Constructors"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/#functions","text":"Name Summary clone [jvm] Content open override fun clone (): Any equals [jvm] Content open operator fun equals (other: Any ?): Boolean getSource [jvm] Content open fun getSource (): Any getTarget [jvm] Content open fun getTarget (): Any hashCode [jvm] Content open fun hashCode (): Int propagate [jvm] Content open override fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/#properties","text":"Name Summary source [jvm] val source : Any target [jvm] val target : Any","title":"Properties"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/-identity-edge/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / IdentityEdge / IdentityEdge IdentityEdge \u00b6 [jvm] Content fun IdentityEdge ()","title":" identity edge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/-identity-edge/#identityedge","text":"[jvm] Content fun IdentityEdge ()","title":"IdentityEdge"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/propagate/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / IdentityEdge / propagate propagate \u00b6 [jvm] Content open override fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node.","title":"Propagate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/propagate/#propagate","text":"[jvm] Content open override fun propagate (input: A ): A More info Apply this function to the value incoming from the source node before passing it onto the destination node.","title":"propagate"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/to-string/","text":"// compiler / edu.cornell.cs.apl.viaduct.util.dataflow / IdentityEdge / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"api/compiler/compiler/edu.cornell.cs.apl.viaduct.util.dataflow/-identity-edge/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"api/runtime/runtime/","text":"// runtime runtime \u00b6 Packages \u00b6 Name Summary edu.cornell.cs.apl.viaduct.backend edu.cornell.cs.apl.viaduct.backend.aby edu.cornell.cs.apl.viaduct.backend.commitment edu.cornell.cs.apl.viaduct.backend.IO edu.cornell.cs.apl.viaduct.backend.zkp edu.cornell.cs.apl.viaduct.libsnarkwrapper","title":"Runtime System"},{"location":"api/runtime/runtime/#runtime","text":"","title":"runtime"},{"location":"api/runtime/runtime/#packages","text":"Name Summary edu.cornell.cs.apl.viaduct.backend edu.cornell.cs.apl.viaduct.backend.aby edu.cornell.cs.apl.viaduct.backend.commitment edu.cornell.cs.apl.viaduct.backend.IO edu.cornell.cs.apl.viaduct.backend.zkp edu.cornell.cs.apl.viaduct.libsnarkwrapper","title":"Packages"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend Package edu.cornell.cs.apl.viaduct.backend \u00b6 Types \u00b6 Name Summary AbstractProtocolInterpreter [jvm] Content abstract class AbstractProtocolInterpreter < Obj >( program : ProgramNode) : ProtocolInterpreter BackendInterpreter [jvm] Content class BackendInterpreter ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, protocolInterpreters : List < ProtocolInterpreter >, runtime : ViaductProcessRuntime ) CommunicationMessage [jvm] Content sealed class CommunicationMessage : ViaductMessage HostAddress [jvm] Content data class HostAddress ( ipAddress : IpAddress , port : Port ) HostId [jvm] Content typealias HostId = Int HostInfo [jvm] Content data class HostInfo ( host : Host, id : HostId , address : HostAddress , recvChannel : Channel< ViaductMessage >, sendChannel : Channel< ViaductMessage >) ImmutableCellObject [jvm] Content class ImmutableCellObject ( value : Value) : PlaintextClassObject IpAddress [jvm] Content typealias IpAddress = String MutableCellObject [jvm] Content class MutableCellObject ( value : Value) : PlaintextClassObject NormalizeCounter [jvm] Content data class NormalizeCounter ( inIndex : Int , inMap : MutableMap < Int , Int >, publicIndex : Int , publicMap : MutableMap < Int , Int >) NullObject [jvm] Content object NullObject : PlaintextClassObject ObjectLocation [jvm] Content typealias ObjectLocation = Int PlaintextClassObject [jvm] Content sealed class PlaintextClassObject PlaintextProtocolInterpreter [jvm] Content class PlaintextProtocolInterpreter ( program : ProgramNode, protocols : Set , host : Host, runtime : ViaductRuntime ) : AbstractProtocolInterpreter < PlaintextClassObject > Port [jvm] Content typealias Port = Int Process [jvm] Content typealias Process = ProtocolProjection ProcessId [jvm] Content typealias ProcessId = Int ProcessInfo [jvm] Content data class ProcessInfo ( process : ProtocolProjection, id : ProcessId ) ProtocolBackend [jvm] Content interface ProtocolBackend ProtocolInterpreter [jvm] Content interface ProtocolInterpreter ReceiveMessage [jvm] Content data class ReceiveMessage ( sender : ProcessId , receiver : ProcessId ) : CommunicationMessage SendMessage [jvm] Content data class SendMessage ( sender : ProcessId , receiver : ProcessId , message : Value) : CommunicationMessage ShutdownMessage [jvm] Content object ShutdownMessage : ViaductMessage SingleProtocolInterpreter [jvm] Content abstract class SingleProtocolInterpreter < Obj >( program : ProgramNode, protocol : Protocol) : AbstractProtocolInterpreter < Obj > More info Interpreter for a single protocol. VectorObject [jvm] Content class VectorObject ( size : Int , defaultValue : Value) : PlaintextClassObject ViaductBackend [jvm] Content class ViaductBackend ( backends : List < ProtocolBackend >, customConnectionInfo : Map HostAddress >) ViaductMessage [jvm] Content sealed class ViaductMessage ViaductProcessRuntime [jvm] Content class ViaductProcessRuntime ( runtime : ViaductRuntime , projection : ProtocolProjection) ViaductRuntime [jvm] Content class ViaductRuntime ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, hostConnectionInfo : Map HostAddress >, backends : List < ProtocolBackend >, strategy : Strategy ) WireConst [jvm] Content data class WireConst ( index : Int , v : Int ) : WireTerm WireDummyIn [jvm] Content data class WireDummyIn ( index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm WireGenerator [jvm] Content class WireGenerator WireIn [jvm] Content data class WireIn ( v : Int , index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm WireOp [jvm] Content data class WireOp ( op : Operator, inputs : List < WireTerm >) : WireTerm WireTerm [jvm] Content sealed class WireTerm Functions \u00b6 Name Summary asPrettyPrintable [jvm] Content fun String . asPrettyPrintable (): PrettyPrintable asString [jvm] Content fun WireTerm . asString (): String eval [jvm] Content fun WireTerm . eval (): Int hash [jvm] Content fun WireTerm . hash (): String normalize [jvm] Content fun WireTerm . normalize (counter: NormalizeCounter ): WireTerm wireName [jvm] Content fun WireTerm . wireName (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/#package-educornellcsaplviaductbackend","text":"","title":"Package edu.cornell.cs.apl.viaduct.backend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/#types","text":"Name Summary AbstractProtocolInterpreter [jvm] Content abstract class AbstractProtocolInterpreter < Obj >( program : ProgramNode) : ProtocolInterpreter BackendInterpreter [jvm] Content class BackendInterpreter ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, protocolInterpreters : List < ProtocolInterpreter >, runtime : ViaductProcessRuntime ) CommunicationMessage [jvm] Content sealed class CommunicationMessage : ViaductMessage HostAddress [jvm] Content data class HostAddress ( ipAddress : IpAddress , port : Port ) HostId [jvm] Content typealias HostId = Int HostInfo [jvm] Content data class HostInfo ( host : Host, id : HostId , address : HostAddress , recvChannel : Channel< ViaductMessage >, sendChannel : Channel< ViaductMessage >) ImmutableCellObject [jvm] Content class ImmutableCellObject ( value : Value) : PlaintextClassObject IpAddress [jvm] Content typealias IpAddress = String MutableCellObject [jvm] Content class MutableCellObject ( value : Value) : PlaintextClassObject NormalizeCounter [jvm] Content data class NormalizeCounter ( inIndex : Int , inMap : MutableMap < Int , Int >, publicIndex : Int , publicMap : MutableMap < Int , Int >) NullObject [jvm] Content object NullObject : PlaintextClassObject ObjectLocation [jvm] Content typealias ObjectLocation = Int PlaintextClassObject [jvm] Content sealed class PlaintextClassObject PlaintextProtocolInterpreter [jvm] Content class PlaintextProtocolInterpreter ( program : ProgramNode, protocols : Set , host : Host, runtime : ViaductRuntime ) : AbstractProtocolInterpreter < PlaintextClassObject > Port [jvm] Content typealias Port = Int Process [jvm] Content typealias Process = ProtocolProjection ProcessId [jvm] Content typealias ProcessId = Int ProcessInfo [jvm] Content data class ProcessInfo ( process : ProtocolProjection, id : ProcessId ) ProtocolBackend [jvm] Content interface ProtocolBackend ProtocolInterpreter [jvm] Content interface ProtocolInterpreter ReceiveMessage [jvm] Content data class ReceiveMessage ( sender : ProcessId , receiver : ProcessId ) : CommunicationMessage SendMessage [jvm] Content data class SendMessage ( sender : ProcessId , receiver : ProcessId , message : Value) : CommunicationMessage ShutdownMessage [jvm] Content object ShutdownMessage : ViaductMessage SingleProtocolInterpreter [jvm] Content abstract class SingleProtocolInterpreter < Obj >( program : ProgramNode, protocol : Protocol) : AbstractProtocolInterpreter < Obj > More info Interpreter for a single protocol. VectorObject [jvm] Content class VectorObject ( size : Int , defaultValue : Value) : PlaintextClassObject ViaductBackend [jvm] Content class ViaductBackend ( backends : List < ProtocolBackend >, customConnectionInfo : Map HostAddress >) ViaductMessage [jvm] Content sealed class ViaductMessage ViaductProcessRuntime [jvm] Content class ViaductProcessRuntime ( runtime : ViaductRuntime , projection : ProtocolProjection) ViaductRuntime [jvm] Content class ViaductRuntime ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, hostConnectionInfo : Map HostAddress >, backends : List < ProtocolBackend >, strategy : Strategy ) WireConst [jvm] Content data class WireConst ( index : Int , v : Int ) : WireTerm WireDummyIn [jvm] Content data class WireDummyIn ( index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm WireGenerator [jvm] Content class WireGenerator WireIn [jvm] Content data class WireIn ( v : Int , index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm WireOp [jvm] Content data class WireOp ( op : Operator, inputs : List < WireTerm >) : WireTerm WireTerm [jvm] Content sealed class WireTerm","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/#functions","text":"Name Summary asPrettyPrintable [jvm] Content fun String . asPrettyPrintable (): PrettyPrintable asString [jvm] Content fun WireTerm . asString (): String eval [jvm] Content fun WireTerm . eval (): Int hash [jvm] Content fun WireTerm . hash (): String normalize [jvm] Content fun WireTerm . normalize (counter: NormalizeCounter ): WireTerm wireName [jvm] Content fun WireTerm . wireName (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/as-pretty-printable/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / asPrettyPrintable asPrettyPrintable \u00b6 [jvm] Content fun String . asPrettyPrintable (): PrettyPrintable","title":"As pretty printable"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/as-pretty-printable/#asprettyprintable","text":"[jvm] Content fun String . asPrettyPrintable (): PrettyPrintable","title":"asPrettyPrintable"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/as-string/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / asString asString \u00b6 [jvm] Content fun WireTerm . asString (): String","title":"As string"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/as-string/#asstring","text":"[jvm] Content fun WireTerm . asString (): String","title":"asString"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/eval/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / eval eval \u00b6 [jvm] Content fun WireTerm . eval (): Int","title":"Eval"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/eval/#eval","text":"[jvm] Content fun WireTerm . eval (): Int","title":"eval"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/hash/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / hash hash \u00b6 [jvm] Content fun WireTerm . hash (): String","title":"Hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/hash/#hash","text":"[jvm] Content fun WireTerm . hash (): String","title":"hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/normalize/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / normalize normalize \u00b6 [jvm] Content fun WireTerm . normalize (counter: NormalizeCounter ): WireTerm","title":"Normalize"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/normalize/#normalize","text":"[jvm] Content fun WireTerm . normalize (counter: NormalizeCounter ): WireTerm","title":"normalize"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/wire-name/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / wireName wireName \u00b6 [jvm] Content fun WireTerm . wireName (): String","title":"Wire name"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/wire-name/#wirename","text":"[jvm] Content fun WireTerm . wireName (): String","title":"wireName"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter AbstractProtocolInterpreter \u00b6 [jvm] abstract class AbstractProtocolInterpreter < Obj >( program : ProgramNode) : ProtocolInterpreter Functions \u00b6 Name Summary buildExpressionObject [jvm] Content abstract suspend fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj buildObject [jvm] Content abstract suspend fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content abstract fun getNullObject (protocol: Protocol): Obj hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content abstract suspend fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content abstract suspend fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content abstract suspend fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content abstract suspend fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content abstract suspend fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content abstract suspend fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] abstract val availableProtocols : Set program [jvm] val program : ProgramNode Inheritors \u00b6 Name SingleProtocolInterpreter PlaintextProtocolInterpreter ABYProtocolInterpreter","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/#abstractprotocolinterpreter","text":"[jvm] abstract class AbstractProtocolInterpreter < Obj >( program : ProgramNode) : ProtocolInterpreter","title":"AbstractProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content abstract suspend fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj buildObject [jvm] Content abstract suspend fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content abstract fun getNullObject (protocol: Protocol): Obj hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content abstract suspend fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content abstract suspend fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content abstract suspend fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content abstract suspend fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content abstract suspend fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content abstract suspend fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/#properties","text":"Name Summary availableProtocols [jvm] abstract val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/#inheritors","text":"Name SingleProtocolInterpreter PlaintextProtocolInterpreter ABYProtocolInterpreter","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/-abstract-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / AbstractProtocolInterpreter AbstractProtocolInterpreter \u00b6 [jvm] Content fun AbstractProtocolInterpreter (program: ProgramNode)","title":" abstract protocol interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/-abstract-protocol-interpreter/#abstractprotocolinterpreter","text":"[jvm] Content fun AbstractProtocolInterpreter (program: ProgramNode)","title":"AbstractProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content abstract suspend fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content abstract suspend fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / buildObject buildObject \u00b6 [jvm] Content abstract suspend fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/build-object/#buildobject","text":"[jvm] Content abstract suspend fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/get-context-marker/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / getContextMarker getContextMarker \u00b6 [jvm] Content open override fun getContextMarker (): Int","title":"Get context marker"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/get-context-marker/#getcontextmarker","text":"[jvm] Content open override fun getContextMarker (): Int","title":"getContextMarker"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / getNullObject getNullObject \u00b6 [jvm] Content abstract fun getNullObject (protocol: Protocol): Obj","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/get-null-object/#getnullobject","text":"[jvm] Content abstract fun getNullObject (protocol: Protocol): Obj","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/pop-function-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / popFunctionContext popFunctionContext \u00b6 [jvm] Content open suspend override fun popFunctionContext ()","title":"Pop function context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/pop-function-context/#popfunctioncontext","text":"[jvm] Content open suspend override fun popFunctionContext ()","title":"popFunctionContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/program/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / program program \u00b6 [jvm] Content val program : ProgramNode","title":"Program"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/program/#program","text":"[jvm] Content val program : ProgramNode","title":"program"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/push-function-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / pushFunctionContext pushFunctionContext \u00b6 [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >)","title":"Push function context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/push-function-context/#pushfunctioncontext","text":"[jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >)","title":"pushFunctionContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/restore-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / restoreContext restoreContext \u00b6 [jvm] Content open suspend override fun restoreContext (marker: Int )","title":"Restore context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/restore-context/#restorecontext","text":"[jvm] Content open suspend override fun restoreContext (marker: Int )","title":"restoreContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / runLet runLet \u00b6 [jvm] Content abstract suspend fun runLet (protocol: Protocol, stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-let/#runlet","text":"[jvm] Content abstract suspend fun runLet (protocol: Protocol, stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / runOutput runOutput \u00b6 [jvm] Content abstract suspend fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-output/#runoutput","text":"[jvm] Content abstract suspend fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-simple-statement/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / runSimpleStatement runSimpleStatement \u00b6 [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode)","title":"Run simple statement"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-simple-statement/#runsimplestatement","text":"[jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode)","title":"runSimpleStatement"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / AbstractProtocolInterpreter / runUpdate runUpdate \u00b6 [jvm] Content abstract suspend fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-abstract-protocol-interpreter/run-update/#runupdate","text":"[jvm] Content abstract suspend fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / BackendInterpreter BackendInterpreter \u00b6 [jvm] class BackendInterpreter ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, protocolInterpreters : List < ProtocolInterpreter >, runtime : ViaductProcessRuntime ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int run [jvm] Content suspend fun run () suspend fun run (function: FunctionName, stmt: StatementNode) synchronize [jvm] Content suspend fun synchronize (senders: Set , receivers: Set ) More info Synchronize hosts. toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/#backendinterpreter","text":"[jvm] class BackendInterpreter ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, protocolInterpreters : List < ProtocolInterpreter >, runtime : ViaductProcessRuntime )","title":"BackendInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int run [jvm] Content suspend fun run () suspend fun run (function: FunctionName, stmt: StatementNode) synchronize [jvm] Content suspend fun synchronize (senders: Set , receivers: Set ) More info Synchronize hosts. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/-backend-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / BackendInterpreter / BackendInterpreter BackendInterpreter \u00b6 [jvm] Content fun BackendInterpreter (host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, protocolInterpreters: List < ProtocolInterpreter >, runtime: ViaductProcessRuntime )","title":" backend interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/-backend-interpreter/#backendinterpreter","text":"[jvm] Content fun BackendInterpreter (host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, protocolInterpreters: List < ProtocolInterpreter >, runtime: ViaductProcessRuntime )","title":"BackendInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/run/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / BackendInterpreter / run run \u00b6 [jvm] Content suspend fun run () suspend fun run (function: FunctionName, stmt: StatementNode)","title":"Run"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/run/#run","text":"[jvm] Content suspend fun run () suspend fun run (function: FunctionName, stmt: StatementNode)","title":"run"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/synchronize/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / BackendInterpreter / synchronize synchronize \u00b6 [jvm] Content suspend fun synchronize (senders: Set , receivers: Set ) More info Synchronize hosts.","title":"Synchronize"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-backend-interpreter/synchronize/#synchronize","text":"[jvm] Content suspend fun synchronize (senders: Set , receivers: Set ) More info Synchronize hosts.","title":"synchronize"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-communication-message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / CommunicationMessage CommunicationMessage \u00b6 [jvm] sealed class CommunicationMessage : ViaductMessage Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name SendMessage ReceiveMessage","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-communication-message/#communicationmessage","text":"[jvm] sealed class CommunicationMessage : ViaductMessage","title":"CommunicationMessage"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-communication-message/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-communication-message/#inheritors","text":"Name SendMessage ReceiveMessage","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostAddress HostAddress \u00b6 [jvm] data class HostAddress ( ipAddress : IpAddress , port : Port ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): IpAddress component2 [jvm] Content operator fun component2 (): Port copy [jvm] Content fun copy (ipAddress: IpAddress , port: Port ): HostAddress equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary ipAddress [jvm] val ipAddress : IpAddress port [jvm] val port : Port","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/#hostaddress","text":"[jvm] data class HostAddress ( ipAddress : IpAddress , port : Port )","title":"HostAddress"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): IpAddress component2 [jvm] Content operator fun component2 (): Port copy [jvm] Content fun copy (ipAddress: IpAddress , port: Port ): HostAddress equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/#properties","text":"Name Summary ipAddress [jvm] val ipAddress : IpAddress port [jvm] val port : Port","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/-host-address/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostAddress / HostAddress HostAddress \u00b6 [jvm] Content fun HostAddress (ipAddress: IpAddress , port: Port )","title":" host address"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/-host-address/#hostaddress","text":"[jvm] Content fun HostAddress (ipAddress: IpAddress , port: Port )","title":"HostAddress"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostAddress / component1 component1 \u00b6 [jvm] Content operator fun component1 (): IpAddress","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/component1/#component1","text":"[jvm] Content operator fun component1 (): IpAddress","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostAddress / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Port","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/component2/#component2","text":"[jvm] Content operator fun component2 (): Port","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostAddress / copy copy \u00b6 [jvm] Content fun copy (ipAddress: IpAddress , port: Port ): HostAddress","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/copy/#copy","text":"[jvm] Content fun copy (ipAddress: IpAddress , port: Port ): HostAddress","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/ip-address/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostAddress / ipAddress ipAddress \u00b6 [jvm] Content val ipAddress : IpAddress","title":"Ip address"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/ip-address/#ipaddress","text":"[jvm] Content val ipAddress : IpAddress","title":"ipAddress"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/port/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostAddress / port port \u00b6 [jvm] Content val port : Port","title":"Port"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-address/port/#port","text":"[jvm] Content val port : Port","title":"port"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo HostInfo \u00b6 [jvm] data class HostInfo ( host : Host, id : HostId , address : HostAddress , recvChannel : Channel< ViaductMessage >, sendChannel : Channel< ViaductMessage >) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Host component2 [jvm] Content operator fun component2 (): HostId component3 [jvm] Content operator fun component3 (): HostAddress component4 [jvm] Content operator fun component4 (): Channel< ViaductMessage > component5 [jvm] Content operator fun component5 (): Channel< ViaductMessage > copy [jvm] Content fun copy (host: Host, id: HostId , address: HostAddress , recvChannel: Channel< ViaductMessage >, sendChannel: Channel< ViaductMessage >): HostInfo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary address [jvm] val address : HostAddress host [jvm] val host : Host id [jvm] val id : HostId recvChannel [jvm] val recvChannel : Channel< ViaductMessage > sendChannel [jvm] val sendChannel : Channel< ViaductMessage >","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/#hostinfo","text":"[jvm] data class HostInfo ( host : Host, id : HostId , address : HostAddress , recvChannel : Channel< ViaductMessage >, sendChannel : Channel< ViaductMessage >)","title":"HostInfo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Host component2 [jvm] Content operator fun component2 (): HostId component3 [jvm] Content operator fun component3 (): HostAddress component4 [jvm] Content operator fun component4 (): Channel< ViaductMessage > component5 [jvm] Content operator fun component5 (): Channel< ViaductMessage > copy [jvm] Content fun copy (host: Host, id: HostId , address: HostAddress , recvChannel: Channel< ViaductMessage >, sendChannel: Channel< ViaductMessage >): HostInfo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/#properties","text":"Name Summary address [jvm] val address : HostAddress host [jvm] val host : Host id [jvm] val id : HostId recvChannel [jvm] val recvChannel : Channel< ViaductMessage > sendChannel [jvm] val sendChannel : Channel< ViaductMessage >","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/-host-info/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / HostInfo HostInfo \u00b6 [jvm] Content fun HostInfo (host: Host, id: HostId , address: HostAddress , recvChannel: Channel< ViaductMessage >, sendChannel: Channel< ViaductMessage >)","title":" host info"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/-host-info/#hostinfo","text":"[jvm] Content fun HostInfo (host: Host, id: HostId , address: HostAddress , recvChannel: Channel< ViaductMessage >, sendChannel: Channel< ViaductMessage >)","title":"HostInfo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/address/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / address address \u00b6 [jvm] Content val address : HostAddress","title":"Address"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/address/#address","text":"[jvm] Content val address : HostAddress","title":"address"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Host","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component1/#component1","text":"[jvm] Content operator fun component1 (): Host","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / component2 component2 \u00b6 [jvm] Content operator fun component2 (): HostId","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component2/#component2","text":"[jvm] Content operator fun component2 (): HostId","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component3/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / component3 component3 \u00b6 [jvm] Content operator fun component3 (): HostAddress","title":"Component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component3/#component3","text":"[jvm] Content operator fun component3 (): HostAddress","title":"component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component4/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / component4 component4 \u00b6 [jvm] Content operator fun component4 (): Channel< ViaductMessage >","title":"Component4"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component4/#component4","text":"[jvm] Content operator fun component4 (): Channel< ViaductMessage >","title":"component4"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component5/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / component5 component5 \u00b6 [jvm] Content operator fun component5 (): Channel< ViaductMessage >","title":"Component5"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/component5/#component5","text":"[jvm] Content operator fun component5 (): Channel< ViaductMessage >","title":"component5"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / copy copy \u00b6 [jvm] Content fun copy (host: Host, id: HostId , address: HostAddress , recvChannel: Channel< ViaductMessage >, sendChannel: Channel< ViaductMessage >): HostInfo","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/copy/#copy","text":"[jvm] Content fun copy (host: Host, id: HostId , address: HostAddress , recvChannel: Channel< ViaductMessage >, sendChannel: Channel< ViaductMessage >): HostInfo","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/host/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / host host \u00b6 [jvm] Content val host : Host","title":"Host"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/host/#host","text":"[jvm] Content val host : Host","title":"host"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/id/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / id id \u00b6 [jvm] Content val id : HostId","title":"Id"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/id/#id","text":"[jvm] Content val id : HostId","title":"id"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/recv-channel/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / recvChannel recvChannel \u00b6 [jvm] Content val recvChannel : Channel< ViaductMessage >","title":"Recv channel"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/recv-channel/#recvchannel","text":"[jvm] Content val recvChannel : Channel< ViaductMessage >","title":"recvChannel"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/send-channel/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / HostInfo / sendChannel sendChannel \u00b6 [jvm] Content val sendChannel : Channel< ViaductMessage >","title":"Send channel"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-host-info/send-channel/#sendchannel","text":"[jvm] Content val sendChannel : Channel< ViaductMessage >","title":"sendChannel"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ImmutableCellObject ImmutableCellObject \u00b6 [jvm] class ImmutableCellObject ( value : Value) : PlaintextClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary value [jvm] val value : Value","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/#immutablecellobject","text":"[jvm] class ImmutableCellObject ( value : Value) : PlaintextClassObject","title":"ImmutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/#properties","text":"Name Summary value [jvm] val value : Value","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/-immutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ImmutableCellObject / ImmutableCellObject ImmutableCellObject \u00b6 [jvm] Content fun ImmutableCellObject (value: Value)","title":" immutable cell object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/-immutable-cell-object/#immutablecellobject","text":"[jvm] Content fun ImmutableCellObject (value: Value)","title":"ImmutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ImmutableCellObject / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ImmutableCellObject / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ImmutableCellObject / value value \u00b6 [jvm] Content val value : Value","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-immutable-cell-object/value/#value","text":"[jvm] Content val value : Value","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / MutableCellObject MutableCellObject \u00b6 [jvm] class MutableCellObject ( value : Value) : PlaintextClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary value [jvm] var value : Value","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/#mutablecellobject","text":"[jvm] class MutableCellObject ( value : Value) : PlaintextClassObject","title":"MutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/#properties","text":"Name Summary value [jvm] var value : Value","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/-mutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / MutableCellObject / MutableCellObject MutableCellObject \u00b6 [jvm] Content fun MutableCellObject (value: Value)","title":" mutable cell object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/-mutable-cell-object/#mutablecellobject","text":"[jvm] Content fun MutableCellObject (value: Value)","title":"MutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / MutableCellObject / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / MutableCellObject / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / MutableCellObject / value value \u00b6 [jvm] Content var value : Value","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-mutable-cell-object/value/#value","text":"[jvm] Content var value : Value","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter NormalizeCounter \u00b6 [jvm] data class NormalizeCounter ( inIndex : Int , inMap : MutableMap < Int , Int >, publicIndex : Int , publicMap : MutableMap < Int , Int >) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): MutableMap < Int , Int > component3 [jvm] Content operator fun component3 (): Int component4 [jvm] Content operator fun component4 (): MutableMap < Int , Int > copy [jvm] Content fun copy (inIndex: Int = 0, inMap: MutableMap < Int , Int >, publicIndex: Int = 0, publicMap: MutableMap < Int , Int >): NormalizeCounter equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary inIndex [jvm] var inIndex : Int = 0 inMap [jvm] val inMap : MutableMap < Int , Int > publicIndex [jvm] var publicIndex : Int = 0 publicMap [jvm] val publicMap : MutableMap < Int , Int >","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/#normalizecounter","text":"[jvm] data class NormalizeCounter ( inIndex : Int , inMap : MutableMap < Int , Int >, publicIndex : Int , publicMap : MutableMap < Int , Int >)","title":"NormalizeCounter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): MutableMap < Int , Int > component3 [jvm] Content operator fun component3 (): Int component4 [jvm] Content operator fun component4 (): MutableMap < Int , Int > copy [jvm] Content fun copy (inIndex: Int = 0, inMap: MutableMap < Int , Int >, publicIndex: Int = 0, publicMap: MutableMap < Int , Int >): NormalizeCounter equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/#properties","text":"Name Summary inIndex [jvm] var inIndex : Int = 0 inMap [jvm] val inMap : MutableMap < Int , Int > publicIndex [jvm] var publicIndex : Int = 0 publicMap [jvm] val publicMap : MutableMap < Int , Int >","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/-normalize-counter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / NormalizeCounter NormalizeCounter \u00b6 [jvm] Content fun NormalizeCounter (inIndex: Int = 0, inMap: MutableMap < Int , Int >, publicIndex: Int = 0, publicMap: MutableMap < Int , Int >)","title":" normalize counter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/-normalize-counter/#normalizecounter","text":"[jvm] Content fun NormalizeCounter (inIndex: Int = 0, inMap: MutableMap < Int , Int >, publicIndex: Int = 0, publicMap: MutableMap < Int , Int >)","title":"NormalizeCounter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Int","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component1/#component1","text":"[jvm] Content operator fun component1 (): Int","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / component2 component2 \u00b6 [jvm] Content operator fun component2 (): MutableMap < Int , Int >","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component2/#component2","text":"[jvm] Content operator fun component2 (): MutableMap < Int , Int >","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component3/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / component3 component3 \u00b6 [jvm] Content operator fun component3 (): Int","title":"Component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component3/#component3","text":"[jvm] Content operator fun component3 (): Int","title":"component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component4/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / component4 component4 \u00b6 [jvm] Content operator fun component4 (): MutableMap < Int , Int >","title":"Component4"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/component4/#component4","text":"[jvm] Content operator fun component4 (): MutableMap < Int , Int >","title":"component4"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / copy copy \u00b6 [jvm] Content fun copy (inIndex: Int = 0, inMap: MutableMap < Int , Int >, publicIndex: Int = 0, publicMap: MutableMap < Int , Int >): NormalizeCounter","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/copy/#copy","text":"[jvm] Content fun copy (inIndex: Int = 0, inMap: MutableMap < Int , Int >, publicIndex: Int = 0, publicMap: MutableMap < Int , Int >): NormalizeCounter","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/in-index/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / inIndex inIndex \u00b6 [jvm] Content var inIndex : Int = 0","title":"In index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/in-index/#inindex","text":"[jvm] Content var inIndex : Int = 0","title":"inIndex"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/in-map/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / inMap inMap \u00b6 [jvm] Content val inMap : MutableMap < Int , Int >","title":"In map"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/in-map/#inmap","text":"[jvm] Content val inMap : MutableMap < Int , Int >","title":"inMap"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/public-index/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / publicIndex publicIndex \u00b6 [jvm] Content var publicIndex : Int = 0","title":"Public index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/public-index/#publicindex","text":"[jvm] Content var publicIndex : Int = 0","title":"publicIndex"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/public-map/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NormalizeCounter / publicMap publicMap \u00b6 [jvm] Content val publicMap : MutableMap < Int , Int >","title":"Public map"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-normalize-counter/public-map/#publicmap","text":"[jvm] Content val publicMap : MutableMap < Int , Int >","title":"publicMap"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NullObject NullObject \u00b6 [jvm] object NullObject : PlaintextClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-null-object/#nullobject","text":"[jvm] object NullObject : PlaintextClassObject","title":"NullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-null-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-null-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NullObject / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-null-object/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-null-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / NullObject / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-null-object/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextClassObject PlaintextClassObject \u00b6 [jvm] sealed class PlaintextClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List ) Inheritors \u00b6 Name NullObject ImmutableCellObject MutableCellObject VectorObject Extensions \u00b6 Name Summary encode [jvm] Content fun PlaintextClassObject . encode (): List < Byte >","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/#plaintextclassobject","text":"[jvm] sealed class PlaintextClassObject","title":"PlaintextClassObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/#inheritors","text":"Name NullObject ImmutableCellObject MutableCellObject VectorObject","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/#extensions","text":"Name Summary encode [jvm] Content fun PlaintextClassObject . encode (): List < Byte >","title":"Extensions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextClassObject / query query \u00b6 [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Value","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/query/#query","text":"[jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Value","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextClassObject / update update \u00b6 [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-class-object/update/#update","text":"[jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter PlaintextProtocolInterpreter \u00b6 [jvm] class PlaintextProtocolInterpreter ( program : ProgramNode, protocols : Set , host : Host, runtime : ViaductRuntime ) : AbstractProtocolInterpreter < PlaintextClassObject > Types \u00b6 Name Summary Companion [jvm] Content object Companion : ProtocolBackend Functions \u00b6 Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): PlaintextClassObject buildObject [jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): PlaintextClassObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (protocol: Protocol): PlaintextClassObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/#plaintextprotocolinterpreter","text":"[jvm] class PlaintextProtocolInterpreter ( program : ProgramNode, protocols : Set , host : Host, runtime : ViaductRuntime ) : AbstractProtocolInterpreter < PlaintextClassObject >","title":"PlaintextProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/#types","text":"Name Summary Companion [jvm] Content object Companion : ProtocolBackend","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): PlaintextClassObject buildObject [jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): PlaintextClassObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (protocol: Protocol): PlaintextClassObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/#properties","text":"Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/-plaintext-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / PlaintextProtocolInterpreter PlaintextProtocolInterpreter \u00b6 [jvm] Content fun PlaintextProtocolInterpreter (program: ProgramNode, protocols: Set , host: Host, runtime: ViaductRuntime )","title":" plaintext protocol interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/-plaintext-protocol-interpreter/#plaintextprotocolinterpreter","text":"[jvm] Content fun PlaintextProtocolInterpreter (program: ProgramNode, protocols: Set , host: Host, runtime: ViaductRuntime )","title":"PlaintextProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/available-protocols/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / availableProtocols availableProtocols \u00b6 [jvm] Content open override val availableProtocols : Set","title":"Available protocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/available-protocols/#availableprotocols","text":"[jvm] Content open override val availableProtocols : Set","title":"availableProtocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): PlaintextClassObject","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): PlaintextClassObject","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / buildObject buildObject \u00b6 [jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): PlaintextClassObject","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/build-object/#buildobject","text":"[jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): PlaintextClassObject","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / getNullObject getNullObject \u00b6 [jvm] Content open override fun getNullObject (protocol: Protocol): PlaintextClassObject","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/get-null-object/#getnullobject","text":"[jvm] Content open override fun getNullObject (protocol: Protocol): PlaintextClassObject","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/pop-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / popContext popContext \u00b6 [jvm] Content open suspend override fun popContext ()","title":"Pop context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/pop-context/#popcontext","text":"[jvm] Content open suspend override fun popContext ()","title":"popContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/push-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / pushContext pushContext \u00b6 [jvm] Content open suspend override fun pushContext ()","title":"Push context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/push-context/#pushcontext","text":"[jvm] Content open suspend override fun pushContext ()","title":"pushContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / runGuard runGuard \u00b6 [jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-guard/#runguard","text":"[jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / runLet runLet \u00b6 [jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-let/#runlet","text":"[jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / runOutput runOutput \u00b6 [jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-output/#runoutput","text":"[jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / runReceive runReceive \u00b6 [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-receive/#runreceive","text":"[jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runReceive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / runSend runSend \u00b6 [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-send/#runsend","text":"[jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runSend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / runUpdate runUpdate \u00b6 [jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/run-update/#runupdate","text":"[jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/-companion/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / Companion Companion \u00b6 [jvm] object Companion : ProtocolBackend Functions \u00b6 Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/-companion/#companion","text":"[jvm] object Companion : ProtocolBackend","title":"Companion"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/-companion/#functions","text":"Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/-companion/build-protocol-interpreters/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / PlaintextProtocolInterpreter / Companion / buildProtocolInterpreters buildProtocolInterpreters \u00b6 [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"Build protocol interpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-plaintext-protocol-interpreter/-companion/build-protocol-interpreters/#buildprotocolinterpreters","text":"[jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"buildProtocolInterpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo ProcessInfo \u00b6 [jvm] data class ProcessInfo ( process : ProtocolProjection, id : ProcessId ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): ProtocolProjection component2 [jvm] Content operator fun component2 (): ProcessId copy [jvm] Content fun copy (process: ProtocolProjection, id: ProcessId ): ProcessInfo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary host [jvm] val host : Host id [jvm] val id : ProcessId process [jvm] val process : ProtocolProjection protocol [jvm] val protocol : Protocol","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/#processinfo","text":"[jvm] data class ProcessInfo ( process : ProtocolProjection, id : ProcessId )","title":"ProcessInfo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): ProtocolProjection component2 [jvm] Content operator fun component2 (): ProcessId copy [jvm] Content fun copy (process: ProtocolProjection, id: ProcessId ): ProcessInfo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/#properties","text":"Name Summary host [jvm] val host : Host id [jvm] val id : ProcessId process [jvm] val process : ProtocolProjection protocol [jvm] val protocol : Protocol","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/-process-info/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / ProcessInfo ProcessInfo \u00b6 [jvm] Content fun ProcessInfo (process: ProtocolProjection, id: ProcessId )","title":" process info"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/-process-info/#processinfo","text":"[jvm] Content fun ProcessInfo (process: ProtocolProjection, id: ProcessId )","title":"ProcessInfo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / component1 component1 \u00b6 [jvm] Content operator fun component1 (): ProtocolProjection","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/component1/#component1","text":"[jvm] Content operator fun component1 (): ProtocolProjection","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / component2 component2 \u00b6 [jvm] Content operator fun component2 (): ProcessId","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/component2/#component2","text":"[jvm] Content operator fun component2 (): ProcessId","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / copy copy \u00b6 [jvm] Content fun copy (process: ProtocolProjection, id: ProcessId ): ProcessInfo","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/copy/#copy","text":"[jvm] Content fun copy (process: ProtocolProjection, id: ProcessId ): ProcessInfo","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/host/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / host host \u00b6 [jvm] Content val host : Host","title":"Host"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/host/#host","text":"[jvm] Content val host : Host","title":"host"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/id/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / id id \u00b6 [jvm] Content val id : ProcessId","title":"Id"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/id/#id","text":"[jvm] Content val id : ProcessId","title":"id"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/process/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / process process \u00b6 [jvm] Content val process : ProtocolProjection","title":"Process"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/process/#process","text":"[jvm] Content val process : ProtocolProjection","title":"process"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/protocol/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProcessInfo / protocol protocol \u00b6 [jvm] Content val protocol : Protocol","title":"Protocol"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-process-info/protocol/#protocol","text":"[jvm] Content val protocol : Protocol","title":"protocol"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-backend/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolBackend ProtocolBackend \u00b6 [jvm] interface ProtocolBackend Functions \u00b6 Name Summary buildProtocolInterpreters [jvm] Content abstract fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name PlaintextProtocolInterpreter ABYProtocolInterpreter CommitmentProtocolInterpreterFactory ZKPProtocolInterpreterFactory","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-backend/#protocolbackend","text":"[jvm] interface ProtocolBackend","title":"ProtocolBackend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-backend/#functions","text":"Name Summary buildProtocolInterpreters [jvm] Content abstract fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-backend/#inheritors","text":"Name PlaintextProtocolInterpreter ABYProtocolInterpreter CommitmentProtocolInterpreterFactory ZKPProtocolInterpreterFactory","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-backend/build-protocol-interpreters/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolBackend / buildProtocolInterpreters buildProtocolInterpreters \u00b6 [jvm] Content abstract fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"Build protocol interpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-backend/build-protocol-interpreters/#buildprotocolinterpreters","text":"[jvm] Content abstract fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"buildProtocolInterpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter ProtocolInterpreter \u00b6 [jvm] interface ProtocolInterpreter Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content abstract fun getContextMarker (): Int hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content abstract suspend fun popContext () popFunctionContext [jvm] Content abstract suspend fun popFunctionContext () pushContext [jvm] Content abstract suspend fun pushContext () pushFunctionContext [jvm] Content abstract suspend fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content abstract suspend fun restoreContext (marker: Int ) runGuard [jvm] Content abstract suspend fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runReceive [jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content abstract suspend fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] abstract val availableProtocols : Set Inheritors \u00b6 Name AbstractProtocolInterpreter","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/#protocolinterpreter","text":"[jvm] interface ProtocolInterpreter","title":"ProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content abstract fun getContextMarker (): Int hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content abstract suspend fun popContext () popFunctionContext [jvm] Content abstract suspend fun popFunctionContext () pushContext [jvm] Content abstract suspend fun pushContext () pushFunctionContext [jvm] Content abstract suspend fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content abstract suspend fun restoreContext (marker: Int ) runGuard [jvm] Content abstract suspend fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runReceive [jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content abstract suspend fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/#properties","text":"Name Summary availableProtocols [jvm] abstract val availableProtocols : Set","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/#inheritors","text":"Name AbstractProtocolInterpreter","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/available-protocols/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / availableProtocols availableProtocols \u00b6 [jvm] Content abstract val availableProtocols : Set","title":"Available protocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/available-protocols/#availableprotocols","text":"[jvm] Content abstract val availableProtocols : Set","title":"availableProtocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/get-context-marker/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / getContextMarker getContextMarker \u00b6 [jvm] Content abstract fun getContextMarker (): Int","title":"Get context marker"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/get-context-marker/#getcontextmarker","text":"[jvm] Content abstract fun getContextMarker (): Int","title":"getContextMarker"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/pop-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / popContext popContext \u00b6 [jvm] Content abstract suspend fun popContext ()","title":"Pop context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/pop-context/#popcontext","text":"[jvm] Content abstract suspend fun popContext ()","title":"popContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/pop-function-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / popFunctionContext popFunctionContext \u00b6 [jvm] Content abstract suspend fun popFunctionContext ()","title":"Pop function context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/pop-function-context/#popfunctioncontext","text":"[jvm] Content abstract suspend fun popFunctionContext ()","title":"popFunctionContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/push-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / pushContext pushContext \u00b6 [jvm] Content abstract suspend fun pushContext ()","title":"Push context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/push-context/#pushcontext","text":"[jvm] Content abstract suspend fun pushContext ()","title":"pushContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/push-function-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / pushFunctionContext pushFunctionContext \u00b6 [jvm] Content abstract suspend fun pushFunctionContext (arguments: PersistentMap Pair \\ >)","title":"Push function context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/push-function-context/#pushfunctioncontext","text":"[jvm] Content abstract suspend fun pushFunctionContext (arguments: PersistentMap Pair \\ >)","title":"pushFunctionContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/restore-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / restoreContext restoreContext \u00b6 [jvm] Content abstract suspend fun restoreContext (marker: Int )","title":"Restore context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/restore-context/#restorecontext","text":"[jvm] Content abstract suspend fun restoreContext (marker: Int )","title":"restoreContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / runGuard runGuard \u00b6 [jvm] Content abstract suspend fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-guard/#runguard","text":"[jvm] Content abstract suspend fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / runReceive runReceive \u00b6 [jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-receive/#runreceive","text":"[jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runReceive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / runSend runSend \u00b6 [jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-send/#runsend","text":"[jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runSend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-simple-statement/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ProtocolInterpreter / runSimpleStatement runSimpleStatement \u00b6 [jvm] Content abstract suspend fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode)","title":"Run simple statement"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-protocol-interpreter/run-simple-statement/#runsimplestatement","text":"[jvm] Content abstract suspend fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode)","title":"runSimpleStatement"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ReceiveMessage ReceiveMessage \u00b6 [jvm] data class ReceiveMessage ( sender : ProcessId , receiver : ProcessId ) : CommunicationMessage Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): ProcessId component2 [jvm] Content operator fun component2 (): ProcessId copy [jvm] Content fun copy (sender: ProcessId , receiver: ProcessId ): ReceiveMessage equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary receiver [jvm] val receiver : ProcessId sender [jvm] val sender : ProcessId","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/#receivemessage","text":"[jvm] data class ReceiveMessage ( sender : ProcessId , receiver : ProcessId ) : CommunicationMessage","title":"ReceiveMessage"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): ProcessId component2 [jvm] Content operator fun component2 (): ProcessId copy [jvm] Content fun copy (sender: ProcessId , receiver: ProcessId ): ReceiveMessage equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/#properties","text":"Name Summary receiver [jvm] val receiver : ProcessId sender [jvm] val sender : ProcessId","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/-receive-message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ReceiveMessage / ReceiveMessage ReceiveMessage \u00b6 [jvm] Content fun ReceiveMessage (sender: ProcessId , receiver: ProcessId )","title":" receive message"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/-receive-message/#receivemessage","text":"[jvm] Content fun ReceiveMessage (sender: ProcessId , receiver: ProcessId )","title":"ReceiveMessage"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ReceiveMessage / component1 component1 \u00b6 [jvm] Content operator fun component1 (): ProcessId","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/component1/#component1","text":"[jvm] Content operator fun component1 (): ProcessId","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ReceiveMessage / component2 component2 \u00b6 [jvm] Content operator fun component2 (): ProcessId","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/component2/#component2","text":"[jvm] Content operator fun component2 (): ProcessId","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ReceiveMessage / copy copy \u00b6 [jvm] Content fun copy (sender: ProcessId , receiver: ProcessId ): ReceiveMessage","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/copy/#copy","text":"[jvm] Content fun copy (sender: ProcessId , receiver: ProcessId ): ReceiveMessage","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/receiver/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ReceiveMessage / receiver receiver \u00b6 [jvm] Content val receiver : ProcessId","title":"Receiver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/receiver/#receiver","text":"[jvm] Content val receiver : ProcessId","title":"receiver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/sender/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ReceiveMessage / sender sender \u00b6 [jvm] Content val sender : ProcessId","title":"Sender"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-receive-message/sender/#sender","text":"[jvm] Content val sender : ProcessId","title":"sender"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage SendMessage \u00b6 [jvm] data class SendMessage ( sender : ProcessId , receiver : ProcessId , message : Value) : CommunicationMessage Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): ProcessId component2 [jvm] Content operator fun component2 (): ProcessId component3 [jvm] Content operator fun component3 (): Value copy [jvm] Content fun copy (sender: ProcessId , receiver: ProcessId , message: Value): SendMessage equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary message [jvm] val message : Value receiver [jvm] val receiver : ProcessId sender [jvm] val sender : ProcessId","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/#sendmessage","text":"[jvm] data class SendMessage ( sender : ProcessId , receiver : ProcessId , message : Value) : CommunicationMessage","title":"SendMessage"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): ProcessId component2 [jvm] Content operator fun component2 (): ProcessId component3 [jvm] Content operator fun component3 (): Value copy [jvm] Content fun copy (sender: ProcessId , receiver: ProcessId , message: Value): SendMessage equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/#properties","text":"Name Summary message [jvm] val message : Value receiver [jvm] val receiver : ProcessId sender [jvm] val sender : ProcessId","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/-send-message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / SendMessage SendMessage \u00b6 [jvm] Content fun SendMessage (sender: ProcessId , receiver: ProcessId , message: Value)","title":" send message"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/-send-message/#sendmessage","text":"[jvm] Content fun SendMessage (sender: ProcessId , receiver: ProcessId , message: Value)","title":"SendMessage"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / component1 component1 \u00b6 [jvm] Content operator fun component1 (): ProcessId","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/component1/#component1","text":"[jvm] Content operator fun component1 (): ProcessId","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / component2 component2 \u00b6 [jvm] Content operator fun component2 (): ProcessId","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/component2/#component2","text":"[jvm] Content operator fun component2 (): ProcessId","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/component3/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / component3 component3 \u00b6 [jvm] Content operator fun component3 (): Value","title":"Component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/component3/#component3","text":"[jvm] Content operator fun component3 (): Value","title":"component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / copy copy \u00b6 [jvm] Content fun copy (sender: ProcessId , receiver: ProcessId , message: Value): SendMessage","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/copy/#copy","text":"[jvm] Content fun copy (sender: ProcessId , receiver: ProcessId , message: Value): SendMessage","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / message message \u00b6 [jvm] Content val message : Value","title":"Message"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/message/#message","text":"[jvm] Content val message : Value","title":"message"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/receiver/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / receiver receiver \u00b6 [jvm] Content val receiver : ProcessId","title":"Receiver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/receiver/#receiver","text":"[jvm] Content val receiver : ProcessId","title":"receiver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/sender/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SendMessage / sender sender \u00b6 [jvm] Content val sender : ProcessId","title":"Sender"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-send-message/sender/#sender","text":"[jvm] Content val sender : ProcessId","title":"sender"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-shutdown-message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ShutdownMessage ShutdownMessage \u00b6 [jvm] object ShutdownMessage : ViaductMessage Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-shutdown-message/#shutdownmessage","text":"[jvm] object ShutdownMessage : ViaductMessage","title":"ShutdownMessage"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-shutdown-message/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter SingleProtocolInterpreter \u00b6 [jvm] abstract class SingleProtocolInterpreter < Obj >( program : ProgramNode, protocol : Protocol) : AbstractProtocolInterpreter < Obj > Interpreter for a single protocol. This class is defined for convenience, so that the protocol argument on implemented methods isn't necessary. Constructors \u00b6 Name Summary SingleProtocolInterpreter [jvm] fun SingleProtocolInterpreter (program: ProgramNode, protocol: Protocol) Functions \u00b6 Name Summary buildExpressionObject [jvm] Content abstract suspend fun buildExpressionObject (expr: AtomicExpressionNode): Obj open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj buildObject [jvm] Content abstract suspend fun buildObject (className: ClassName, typeArguments: List , arguments: List ): Obj open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content abstract fun getNullObject (): Obj open override fun getNullObject (protocol: Protocol): Obj hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content abstract suspend fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content abstract suspend fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content abstract suspend fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content abstract suspend fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content abstract suspend fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content abstract suspend fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode Inheritors \u00b6 Name CommitmentProtocolCleartextInterpreter CommitmentProtocolHashReplicaInterpreter ZKPProverInterpreter ZKPVerifierInterpreter","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/#singleprotocolinterpreter","text":"[jvm] abstract class SingleProtocolInterpreter < Obj >( program : ProgramNode, protocol : Protocol) : AbstractProtocolInterpreter < Obj > Interpreter for a single protocol. This class is defined for convenience, so that the protocol argument on implemented methods isn't necessary.","title":"SingleProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/#constructors","text":"Name Summary SingleProtocolInterpreter [jvm] fun SingleProtocolInterpreter (program: ProgramNode, protocol: Protocol)","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content abstract suspend fun buildExpressionObject (expr: AtomicExpressionNode): Obj open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj buildObject [jvm] Content abstract suspend fun buildObject (className: ClassName, typeArguments: List , arguments: List ): Obj open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content abstract fun getNullObject (): Obj open override fun getNullObject (protocol: Protocol): Obj hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content abstract suspend fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content abstract suspend fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content abstract suspend fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content abstract suspend fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content abstract suspend fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content abstract suspend fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content abstract suspend fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content abstract suspend fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/#properties","text":"Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/#inheritors","text":"Name CommitmentProtocolCleartextInterpreter CommitmentProtocolHashReplicaInterpreter ZKPProverInterpreter ZKPVerifierInterpreter","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/-single-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / SingleProtocolInterpreter SingleProtocolInterpreter \u00b6 [jvm] Content fun SingleProtocolInterpreter (program: ProgramNode, protocol: Protocol)","title":" single protocol interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/-single-protocol-interpreter/#singleprotocolinterpreter","text":"[jvm] Content fun SingleProtocolInterpreter (program: ProgramNode, protocol: Protocol)","title":"SingleProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/available-protocols/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / availableProtocols availableProtocols \u00b6 [jvm] Content open override val availableProtocols : Set","title":"Available protocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/available-protocols/#availableprotocols","text":"[jvm] Content open override val availableProtocols : Set","title":"availableProtocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content abstract suspend fun buildExpressionObject (expr: AtomicExpressionNode): Obj open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content abstract suspend fun buildExpressionObject (expr: AtomicExpressionNode): Obj open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): Obj","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / buildObject buildObject \u00b6 [jvm] Content abstract suspend fun buildObject (className: ClassName, typeArguments: List , arguments: List ): Obj open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/build-object/#buildobject","text":"[jvm] Content abstract suspend fun buildObject (className: ClassName, typeArguments: List , arguments: List ): Obj open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): Obj","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / getNullObject getNullObject \u00b6 [jvm] Content abstract fun getNullObject (): Obj open override fun getNullObject (protocol: Protocol): Obj","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/get-null-object/#getnullobject","text":"[jvm] Content abstract fun getNullObject (): Obj open override fun getNullObject (protocol: Protocol): Obj","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / runGuard runGuard \u00b6 [jvm] Content abstract suspend fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-guard/#runguard","text":"[jvm] Content abstract suspend fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / runLet runLet \u00b6 [jvm] Content abstract suspend fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-let/#runlet","text":"[jvm] Content abstract suspend fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / runOutput runOutput \u00b6 [jvm] Content abstract suspend fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-output/#runoutput","text":"[jvm] Content abstract suspend fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / SingleProtocolInterpreter / runUpdate runUpdate \u00b6 [jvm] Content abstract suspend fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-single-protocol-interpreter/run-update/#runupdate","text":"[jvm] Content abstract suspend fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / VectorObject VectorObject \u00b6 [jvm] class VectorObject ( size : Int , defaultValue : Value) : PlaintextClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary size [jvm] val size : Int values [jvm] val values : ArrayList","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/#vectorobject","text":"[jvm] class VectorObject ( size : Int , defaultValue : Value) : PlaintextClassObject","title":"VectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/#properties","text":"Name Summary size [jvm] val size : Int values [jvm] val values : ArrayList","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / VectorObject / VectorObject VectorObject \u00b6 [jvm] Content fun VectorObject (size: Int , defaultValue: Value)","title":" vector object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/-vector-object/#vectorobject","text":"[jvm] Content fun VectorObject (size: Int , defaultValue: Value)","title":"VectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / VectorObject / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Value","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / VectorObject / size size \u00b6 [jvm] Content val size : Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/size/#size","text":"[jvm] Content val size : Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / VectorObject / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/values/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / VectorObject / values values \u00b6 [jvm] Content val values : ArrayList","title":"Values"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-vector-object/values/#values","text":"[jvm] Content val values : ArrayList","title":"values"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductBackend ViaductBackend \u00b6 [jvm] class ViaductBackend ( backends : List < ProtocolBackend >, customConnectionInfo : Map HostAddress >) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int run [jvm] Content fun run (program: ProgramNode, host: Host, strategy: Strategy ) toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/#viaductbackend","text":"[jvm] class ViaductBackend ( backends : List < ProtocolBackend >, customConnectionInfo : Map HostAddress >)","title":"ViaductBackend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int run [jvm] Content fun run (program: ProgramNode, host: Host, strategy: Strategy ) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-viaduct-backend/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductBackend / ViaductBackend ViaductBackend \u00b6 [jvm] Content fun ViaductBackend (backends: List < ProtocolBackend >, customConnectionInfo: Map HostAddress > = mapOf())","title":" viaduct backend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-viaduct-backend/#viaductbackend","text":"[jvm] Content fun ViaductBackend (backends: List < ProtocolBackend >, customConnectionInfo: Map HostAddress > = mapOf())","title":"ViaductBackend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/run/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductBackend / run run \u00b6 [jvm] Content fun run (program: ProgramNode, host: Host, strategy: Strategy )","title":"Run"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/run/#run","text":"[jvm] Content fun run (program: ProgramNode, host: Host, strategy: Strategy )","title":"run"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductBackend / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary DEFAULT_ADDRESS [jvm] const val DEFAULT_ADDRESS : String DEFAULT_PORT [jvm] const val DEFAULT_PORT : Int = 5000","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/#properties","text":"Name Summary DEFAULT_ADDRESS [jvm] const val DEFAULT_ADDRESS : String DEFAULT_PORT [jvm] const val DEFAULT_PORT : Int = 5000","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/-d-e-f-a-u-l-t_-a-d-d-r-e-s-s/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductBackend / Companion / DEFAULT_ADDRESS DEFAULT_ADDRESS \u00b6 [jvm] Content const val DEFAULT_ADDRESS : String","title":" d e f a u l t  a d d r e s s"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/-d-e-f-a-u-l-t_-a-d-d-r-e-s-s/#default_address","text":"[jvm] Content const val DEFAULT_ADDRESS : String","title":"DEFAULT_ADDRESS"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/-d-e-f-a-u-l-t_-p-o-r-t/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductBackend / Companion / DEFAULT_PORT DEFAULT_PORT \u00b6 [jvm] Content const val DEFAULT_PORT : Int = 5000","title":" d e f a u l t  p o r t"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-backend/-companion/-d-e-f-a-u-l-t_-p-o-r-t/#default_port","text":"[jvm] Content const val DEFAULT_PORT : Int = 5000","title":"DEFAULT_PORT"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-message/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductMessage ViaductMessage \u00b6 [jvm] sealed class ViaductMessage Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name CommunicationMessage ShutdownMessage","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-message/#viaductmessage","text":"[jvm] sealed class ViaductMessage","title":"ViaductMessage"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-message/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-message/#inheritors","text":"Name CommunicationMessage ShutdownMessage","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductProcessRuntime ViaductProcessRuntime \u00b6 [jvm] class ViaductProcessRuntime ( runtime : ViaductRuntime , projection : ProtocolProjection) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int input [jvm] Content suspend fun input (): Value output [jvm] Content suspend fun output (value: Value) receive [jvm] Content suspend fun receive (event: CommunicationEvent): Value suspend fun receive (sender: ProtocolProjection): Value send [jvm] Content suspend fun send (value: Value, event: CommunicationEvent) suspend fun send (value: Value, receiver: ProtocolProjection) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary projection [jvm] val projection : ProtocolProjection","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/#viaductprocessruntime","text":"[jvm] class ViaductProcessRuntime ( runtime : ViaductRuntime , projection : ProtocolProjection)","title":"ViaductProcessRuntime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int input [jvm] Content suspend fun input (): Value output [jvm] Content suspend fun output (value: Value) receive [jvm] Content suspend fun receive (event: CommunicationEvent): Value suspend fun receive (sender: ProtocolProjection): Value send [jvm] Content suspend fun send (value: Value, event: CommunicationEvent) suspend fun send (value: Value, receiver: ProtocolProjection) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/#properties","text":"Name Summary projection [jvm] val projection : ProtocolProjection","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/-viaduct-process-runtime/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductProcessRuntime / ViaductProcessRuntime ViaductProcessRuntime \u00b6 [jvm] Content fun ViaductProcessRuntime (runtime: ViaductRuntime , projection: ProtocolProjection)","title":" viaduct process runtime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/-viaduct-process-runtime/#viaductprocessruntime","text":"[jvm] Content fun ViaductProcessRuntime (runtime: ViaductRuntime , projection: ProtocolProjection)","title":"ViaductProcessRuntime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/input/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductProcessRuntime / input input \u00b6 [jvm] Content suspend fun input (): Value","title":"Input"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/input/#input","text":"[jvm] Content suspend fun input (): Value","title":"input"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductProcessRuntime / output output \u00b6 [jvm] Content suspend fun output (value: Value)","title":"Output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/output/#output","text":"[jvm] Content suspend fun output (value: Value)","title":"output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/projection/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductProcessRuntime / projection projection \u00b6 [jvm] Content val projection : ProtocolProjection","title":"Projection"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/projection/#projection","text":"[jvm] Content val projection : ProtocolProjection","title":"projection"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductProcessRuntime / receive receive \u00b6 [jvm] Content suspend fun receive (sender: ProtocolProjection): Value suspend fun receive (event: CommunicationEvent): Value","title":"Receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/receive/#receive","text":"[jvm] Content suspend fun receive (sender: ProtocolProjection): Value suspend fun receive (event: CommunicationEvent): Value","title":"receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductProcessRuntime / send send \u00b6 [jvm] Content suspend fun send (value: Value, receiver: ProtocolProjection) suspend fun send (value: Value, event: CommunicationEvent)","title":"Send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-process-runtime/send/#send","text":"[jvm] Content suspend fun send (value: Value, receiver: ProtocolProjection) suspend fun send (value: Value, event: CommunicationEvent)","title":"send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime ViaductRuntime \u00b6 [jvm] class ViaductRuntime ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, hostConnectionInfo : Map HostAddress >, backends : List < ProtocolBackend >, strategy : Strategy ) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getHostById [jvm] Content fun getHostById (id: HostId ): HostInfo getProcessById [jvm] Content fun getProcessById (id: ProcessId ): ProcessInfo hashCode [jvm] Content open fun hashCode (): Int input [jvm] Content suspend fun input (): Value output [jvm] Content suspend fun output (value: Value) receive [jvm] Content suspend fun receive (event: CommunicationEvent): Value suspend fun receive (sender: Process , receiver: Process ): Value send [jvm] Content suspend fun send (value: Value, event: CommunicationEvent) suspend fun send (value: Value, sender: Process , receiver: Process ) start [jvm] Content fun start () toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary host [jvm] val host : Host","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/#viaductruntime","text":"[jvm] class ViaductRuntime ( host : Host, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, hostConnectionInfo : Map HostAddress >, backends : List < ProtocolBackend >, strategy : Strategy )","title":"ViaductRuntime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getHostById [jvm] Content fun getHostById (id: HostId ): HostInfo getProcessById [jvm] Content fun getProcessById (id: ProcessId ): ProcessInfo hashCode [jvm] Content open fun hashCode (): Int input [jvm] Content suspend fun input (): Value output [jvm] Content suspend fun output (value: Value) receive [jvm] Content suspend fun receive (event: CommunicationEvent): Value suspend fun receive (sender: Process , receiver: Process ): Value send [jvm] Content suspend fun send (value: Value, event: CommunicationEvent) suspend fun send (value: Value, sender: Process , receiver: Process ) start [jvm] Content fun start () toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/#properties","text":"Name Summary host [jvm] val host : Host","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-viaduct-runtime/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / ViaductRuntime ViaductRuntime \u00b6 [jvm] Content fun ViaductRuntime (host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, hostConnectionInfo: Map HostAddress >, backends: List < ProtocolBackend >, strategy: Strategy )","title":" viaduct runtime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-viaduct-runtime/#viaductruntime","text":"[jvm] Content fun ViaductRuntime (host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, hostConnectionInfo: Map HostAddress >, backends: List < ProtocolBackend >, strategy: Strategy )","title":"ViaductRuntime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/get-host-by-id/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / getHostById getHostById \u00b6 [jvm] Content fun getHostById (id: HostId ): HostInfo","title":"Get host by id"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/get-host-by-id/#gethostbyid","text":"[jvm] Content fun getHostById (id: HostId ): HostInfo","title":"getHostById"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/get-process-by-id/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / getProcessById getProcessById \u00b6 [jvm] Content fun getProcessById (id: ProcessId ): ProcessInfo","title":"Get process by id"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/get-process-by-id/#getprocessbyid","text":"[jvm] Content fun getProcessById (id: ProcessId ): ProcessInfo","title":"getProcessById"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/host/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / host host \u00b6 [jvm] Content val host : Host","title":"Host"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/host/#host","text":"[jvm] Content val host : Host","title":"host"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/input/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / input input \u00b6 [jvm] Content suspend fun input (): Value","title":"Input"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/input/#input","text":"[jvm] Content suspend fun input (): Value","title":"input"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / output output \u00b6 [jvm] Content suspend fun output (value: Value)","title":"Output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/output/#output","text":"[jvm] Content suspend fun output (value: Value)","title":"output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / receive receive \u00b6 [jvm] Content suspend fun receive (sender: Process , receiver: Process ): Value suspend fun receive (event: CommunicationEvent): Value","title":"Receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/receive/#receive","text":"[jvm] Content suspend fun receive (sender: Process , receiver: Process ): Value suspend fun receive (event: CommunicationEvent): Value","title":"receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / send send \u00b6 [jvm] Content suspend fun send (value: Value, sender: Process , receiver: Process ) suspend fun send (value: Value, event: CommunicationEvent)","title":"Send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/send/#send","text":"[jvm] Content suspend fun send (value: Value, sender: Process , receiver: Process ) suspend fun send (value: Value, event: CommunicationEvent)","title":"send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/start/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / start start \u00b6 [jvm] Content fun start ()","title":"Start"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/start/#start","text":"[jvm] Content fun start ()","title":"start"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary CONNECTION_NUM_RETRY [jvm] const val CONNECTION_NUM_RETRY : Int = 20 CONNECTION_RETRY_DELAY [jvm] const val CONNECTION_RETRY_DELAY : Long = 500","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/#properties","text":"Name Summary CONNECTION_NUM_RETRY [jvm] const val CONNECTION_NUM_RETRY : Int = 20 CONNECTION_RETRY_DELAY [jvm] const val CONNECTION_RETRY_DELAY : Long = 500","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/-c-o-n-n-e-c-t-i-o-n_-n-u-m_-r-e-t-r-y/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / Companion / CONNECTION_NUM_RETRY CONNECTION_NUM_RETRY \u00b6 [jvm] Content const val CONNECTION_NUM_RETRY : Int = 20","title":" c o n n e c t i o n  n u m  r e t r y"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/-c-o-n-n-e-c-t-i-o-n_-n-u-m_-r-e-t-r-y/#connection_num_retry","text":"[jvm] Content const val CONNECTION_NUM_RETRY : Int = 20","title":"CONNECTION_NUM_RETRY"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/-c-o-n-n-e-c-t-i-o-n_-r-e-t-r-y_-d-e-l-a-y/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / ViaductRuntime / Companion / CONNECTION_RETRY_DELAY CONNECTION_RETRY_DELAY \u00b6 [jvm] Content const val CONNECTION_RETRY_DELAY : Long = 500","title":" c o n n e c t i o n  r e t r y  d e l a y"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-viaduct-runtime/-companion/-c-o-n-n-e-c-t-i-o-n_-r-e-t-r-y_-d-e-l-a-y/#connection_retry_delay","text":"[jvm] Content const val CONNECTION_RETRY_DELAY : Long = 500","title":"CONNECTION_RETRY_DELAY"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireConst WireConst \u00b6 [jvm] data class WireConst ( index : Int , v : Int ) : WireTerm Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): Int copy [jvm] Content fun copy (index: Int , v: Int ): WireConst equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary index [jvm] val index : Int v [jvm] val v : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/#wireconst","text":"[jvm] data class WireConst ( index : Int , v : Int ) : WireTerm","title":"WireConst"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): Int copy [jvm] Content fun copy (index: Int , v: Int ): WireConst equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/#properties","text":"Name Summary index [jvm] val index : Int v [jvm] val v : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/--index--/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireConst / index index \u00b6 [jvm] Content val index : Int","title":"  index  "},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/--index--/#index","text":"[jvm] Content val index : Int","title":"index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/-wire-const/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireConst / WireConst WireConst \u00b6 [jvm] Content fun WireConst (index: Int , v: Int )","title":" wire const"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/-wire-const/#wireconst","text":"[jvm] Content fun WireConst (index: Int , v: Int )","title":"WireConst"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireConst / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Int","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/component1/#component1","text":"[jvm] Content operator fun component1 (): Int","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireConst / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Int","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/component2/#component2","text":"[jvm] Content operator fun component2 (): Int","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireConst / copy copy \u00b6 [jvm] Content fun copy (index: Int , v: Int ): WireConst","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/copy/#copy","text":"[jvm] Content fun copy (index: Int , v: Int ): WireConst","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/v/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireConst / v v \u00b6 [jvm] Content val v : Int","title":"V"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-const/v/#v","text":"[jvm] Content val v : Int","title":"v"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn WireDummyIn \u00b6 [jvm] data class WireDummyIn ( index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): List < Byte > component3 [jvm] Content operator fun component3 (): List < Byte > copy [jvm] Content fun copy (index: Int , hash: List < Byte >, nonce: List < Byte >): WireDummyIn equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary hash [jvm] val hash : List < Byte > index [jvm] val index : Int nonce [jvm] val nonce : List < Byte >","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/#wiredummyin","text":"[jvm] data class WireDummyIn ( index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm","title":"WireDummyIn"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): List < Byte > component3 [jvm] Content operator fun component3 (): List < Byte > copy [jvm] Content fun copy (index: Int , hash: List < Byte >, nonce: List < Byte >): WireDummyIn equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/#properties","text":"Name Summary hash [jvm] val hash : List < Byte > index [jvm] val index : Int nonce [jvm] val nonce : List < Byte >","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/--index--/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / index index \u00b6 [jvm] Content val index : Int","title":"  index  "},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/--index--/#index","text":"[jvm] Content val index : Int","title":"index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/-wire-dummy-in/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / WireDummyIn WireDummyIn \u00b6 [jvm] Content fun WireDummyIn (index: Int , hash: List < Byte >, nonce: List < Byte >)","title":" wire dummy in"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/-wire-dummy-in/#wiredummyin","text":"[jvm] Content fun WireDummyIn (index: Int , hash: List < Byte >, nonce: List < Byte >)","title":"WireDummyIn"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Int","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/component1/#component1","text":"[jvm] Content operator fun component1 (): Int","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / component2 component2 \u00b6 [jvm] Content operator fun component2 (): List < Byte >","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/component2/#component2","text":"[jvm] Content operator fun component2 (): List < Byte >","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/component3/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / component3 component3 \u00b6 [jvm] Content operator fun component3 (): List < Byte >","title":"Component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/component3/#component3","text":"[jvm] Content operator fun component3 (): List < Byte >","title":"component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / copy copy \u00b6 [jvm] Content fun copy (index: Int , hash: List < Byte >, nonce: List < Byte >): WireDummyIn","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/copy/#copy","text":"[jvm] Content fun copy (index: Int , hash: List < Byte >, nonce: List < Byte >): WireDummyIn","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/hash/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / hash hash \u00b6 [jvm] Content val hash : List < Byte >","title":"Hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/hash/#hash","text":"[jvm] Content val hash : List < Byte >","title":"hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/nonce/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireDummyIn / nonce nonce \u00b6 [jvm] Content val nonce : List < Byte >","title":"Nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-dummy-in/nonce/#nonce","text":"[jvm] Content val nonce : List < Byte >","title":"nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireGenerator WireGenerator \u00b6 [jvm] class WireGenerator Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mkConst [jvm] Content fun mkConst (v: Int ): WireTerm mkDummyIn [jvm] Content fun mkDummyIn (hash: List < Byte >, nonce: List < Byte >): WireTerm mkIn [jvm] Content fun mkIn (v: Int , hash: List < Byte >, nonce: List < Byte >): WireTerm mkOp [jvm] Content fun mkOp (op: Operator, inputs: List < WireTerm >): WireOp toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/#wiregenerator","text":"[jvm] class WireGenerator","title":"WireGenerator"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int mkConst [jvm] Content fun mkConst (v: Int ): WireTerm mkDummyIn [jvm] Content fun mkDummyIn (hash: List < Byte >, nonce: List < Byte >): WireTerm mkIn [jvm] Content fun mkIn (v: Int , hash: List < Byte >, nonce: List < Byte >): WireTerm mkOp [jvm] Content fun mkOp (op: Operator, inputs: List < WireTerm >): WireOp toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/-wire-generator/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireGenerator / WireGenerator WireGenerator \u00b6 [jvm] Content fun WireGenerator ()","title":" wire generator"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/-wire-generator/#wiregenerator","text":"[jvm] Content fun WireGenerator ()","title":"WireGenerator"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-const/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireGenerator / mkConst mkConst \u00b6 [jvm] Content fun mkConst (v: Int ): WireTerm","title":"Mk const"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-const/#mkconst","text":"[jvm] Content fun mkConst (v: Int ): WireTerm","title":"mkConst"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-dummy-in/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireGenerator / mkDummyIn mkDummyIn \u00b6 [jvm] Content fun mkDummyIn (hash: List < Byte >, nonce: List < Byte >): WireTerm","title":"Mk dummy in"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-dummy-in/#mkdummyin","text":"[jvm] Content fun mkDummyIn (hash: List < Byte >, nonce: List < Byte >): WireTerm","title":"mkDummyIn"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-in/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireGenerator / mkIn mkIn \u00b6 [jvm] Content fun mkIn (v: Int , hash: List < Byte >, nonce: List < Byte >): WireTerm","title":"Mk in"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-in/#mkin","text":"[jvm] Content fun mkIn (v: Int , hash: List < Byte >, nonce: List < Byte >): WireTerm","title":"mkIn"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-op/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireGenerator / mkOp mkOp \u00b6 [jvm] Content fun mkOp (op: Operator, inputs: List < WireTerm >): WireOp","title":"Mk op"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-generator/mk-op/#mkop","text":"[jvm] Content fun mkOp (op: Operator, inputs: List < WireTerm >): WireOp","title":"mkOp"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn WireIn \u00b6 [jvm] data class WireIn ( v : Int , index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): Int component3 [jvm] Content operator fun component3 (): List < Byte > component4 [jvm] Content operator fun component4 (): List < Byte > copy [jvm] Content fun copy (v: Int , index: Int , hash: List < Byte >, nonce: List < Byte >): WireIn equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary hash [jvm] val hash : List < Byte > index [jvm] val index : Int nonce [jvm] val nonce : List < Byte > v [jvm] val v : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/#wirein","text":"[jvm] data class WireIn ( v : Int , index : Int , hash : List < Byte >, nonce : List < Byte >) : WireTerm","title":"WireIn"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Int component2 [jvm] Content operator fun component2 (): Int component3 [jvm] Content operator fun component3 (): List < Byte > component4 [jvm] Content operator fun component4 (): List < Byte > copy [jvm] Content fun copy (v: Int , index: Int , hash: List < Byte >, nonce: List < Byte >): WireIn equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/#properties","text":"Name Summary hash [jvm] val hash : List < Byte > index [jvm] val index : Int nonce [jvm] val nonce : List < Byte > v [jvm] val v : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/--index--/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / index index \u00b6 [jvm] Content val index : Int","title":"  index  "},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/--index--/#index","text":"[jvm] Content val index : Int","title":"index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/-wire-in/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / WireIn WireIn \u00b6 [jvm] Content fun WireIn (v: Int , index: Int , hash: List < Byte >, nonce: List < Byte >)","title":" wire in"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/-wire-in/#wirein","text":"[jvm] Content fun WireIn (v: Int , index: Int , hash: List < Byte >, nonce: List < Byte >)","title":"WireIn"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Int","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component1/#component1","text":"[jvm] Content operator fun component1 (): Int","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / component2 component2 \u00b6 [jvm] Content operator fun component2 (): Int","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component2/#component2","text":"[jvm] Content operator fun component2 (): Int","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component3/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / component3 component3 \u00b6 [jvm] Content operator fun component3 (): List < Byte >","title":"Component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component3/#component3","text":"[jvm] Content operator fun component3 (): List < Byte >","title":"component3"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component4/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / component4 component4 \u00b6 [jvm] Content operator fun component4 (): List < Byte >","title":"Component4"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/component4/#component4","text":"[jvm] Content operator fun component4 (): List < Byte >","title":"component4"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / copy copy \u00b6 [jvm] Content fun copy (v: Int , index: Int , hash: List < Byte >, nonce: List < Byte >): WireIn","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/copy/#copy","text":"[jvm] Content fun copy (v: Int , index: Int , hash: List < Byte >, nonce: List < Byte >): WireIn","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/hash/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / hash hash \u00b6 [jvm] Content val hash : List < Byte >","title":"Hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/hash/#hash","text":"[jvm] Content val hash : List < Byte >","title":"hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/nonce/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / nonce nonce \u00b6 [jvm] Content val nonce : List < Byte >","title":"Nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/nonce/#nonce","text":"[jvm] Content val nonce : List < Byte >","title":"nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/v/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireIn / v v \u00b6 [jvm] Content val v : Int","title":"V"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-in/v/#v","text":"[jvm] Content val v : Int","title":"v"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireOp WireOp \u00b6 [jvm] data class WireOp ( op : Operator, inputs : List < WireTerm >) : WireTerm Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Operator component2 [jvm] Content operator fun component2 (): List < WireTerm > copy [jvm] Content fun copy (op: Operator, inputs: List < WireTerm >): WireOp equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary inputs [jvm] val inputs : List < WireTerm > op [jvm] val op : Operator","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/#wireop","text":"[jvm] data class WireOp ( op : Operator, inputs : List < WireTerm >) : WireTerm","title":"WireOp"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Operator component2 [jvm] Content operator fun component2 (): List < WireTerm > copy [jvm] Content fun copy (op: Operator, inputs: List < WireTerm >): WireOp equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/#properties","text":"Name Summary inputs [jvm] val inputs : List < WireTerm > op [jvm] val op : Operator","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/-wire-op/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireOp / WireOp WireOp \u00b6 [jvm] Content fun WireOp (op: Operator, inputs: List < WireTerm >)","title":" wire op"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/-wire-op/#wireop","text":"[jvm] Content fun WireOp (op: Operator, inputs: List < WireTerm >)","title":"WireOp"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireOp / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Operator","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/component1/#component1","text":"[jvm] Content operator fun component1 (): Operator","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireOp / component2 component2 \u00b6 [jvm] Content operator fun component2 (): List < WireTerm >","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/component2/#component2","text":"[jvm] Content operator fun component2 (): List < WireTerm >","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireOp / copy copy \u00b6 [jvm] Content fun copy (op: Operator, inputs: List < WireTerm >): WireOp","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/copy/#copy","text":"[jvm] Content fun copy (op: Operator, inputs: List < WireTerm >): WireOp","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/inputs/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireOp / inputs inputs \u00b6 [jvm] Content val inputs : List < WireTerm >","title":"Inputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/inputs/#inputs","text":"[jvm] Content val inputs : List < WireTerm >","title":"inputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/op/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireOp / op op \u00b6 [jvm] Content val op : Operator","title":"Op"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-op/op/#op","text":"[jvm] Content val op : Operator","title":"op"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-term/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend / WireTerm WireTerm \u00b6 [jvm] sealed class WireTerm Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name WireOp WireIn WireDummyIn WireConst Extensions \u00b6 Name Summary asString [jvm] Content fun WireTerm . asString (): String eval [jvm] Content fun WireTerm . eval (): Int hash [jvm] Content fun WireTerm . hash (): String normalize [jvm] Content fun WireTerm . normalize (counter: NormalizeCounter ): WireTerm toR1CS [jvm] Content fun WireTerm . toR1CS (isProver: Boolean , is_eq_to: Int ): R1CS wireName [jvm] Content fun WireTerm . wireName (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-term/#wireterm","text":"[jvm] sealed class WireTerm","title":"WireTerm"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-term/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-term/#inheritors","text":"Name WireOp WireIn WireDummyIn WireConst","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend/-wire-term/#extensions","text":"Name Summary asString [jvm] Content fun WireTerm . asString (): String eval [jvm] Content fun WireTerm . eval (): Int hash [jvm] Content fun WireTerm . hash (): String normalize [jvm] Content fun WireTerm . normalize (counter: NormalizeCounter ): WireTerm toR1CS [jvm] Content fun WireTerm . toR1CS (isProver: Boolean , is_eq_to: Int ): R1CS wireName [jvm] Content fun WireTerm . wireName (): String","title":"Extensions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO Package edu.cornell.cs.apl.viaduct.backend.IO \u00b6 Types \u00b6 Name Summary FileStrategy [jvm] Content class FileStrategy ( inFile : File ) : Strategy Strategy [jvm] Content interface Strategy TerminalIO [jvm] Content class TerminalIO : Strategy","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/#package-educornellcsaplviaductbackendio","text":"","title":"Package edu.cornell.cs.apl.viaduct.backend.IO"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/#types","text":"Name Summary FileStrategy [jvm] Content class FileStrategy ( inFile : File ) : Strategy Strategy [jvm] Content interface Strategy TerminalIO [jvm] Content class TerminalIO : Strategy","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / FileStrategy FileStrategy \u00b6 [jvm] class FileStrategy ( inFile : File ) : Strategy Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getInput [jvm] Content open suspend override fun getInput (): Value hashCode [jvm] Content open fun hashCode (): Int recvOutput [jvm] Content open suspend override fun recvOutput (value: Value) toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/#filestrategy","text":"[jvm] class FileStrategy ( inFile : File ) : Strategy","title":"FileStrategy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getInput [jvm] Content open suspend override fun getInput (): Value hashCode [jvm] Content open fun hashCode (): Int recvOutput [jvm] Content open suspend override fun recvOutput (value: Value) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/-file-strategy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / FileStrategy / FileStrategy FileStrategy \u00b6 [jvm] Content fun FileStrategy (inFile: File )","title":" file strategy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/-file-strategy/#filestrategy","text":"[jvm] Content fun FileStrategy (inFile: File )","title":"FileStrategy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/get-input/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / FileStrategy / getInput getInput \u00b6 [jvm] Content open suspend override fun getInput (): Value","title":"Get input"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/get-input/#getinput","text":"[jvm] Content open suspend override fun getInput (): Value","title":"getInput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/recv-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / FileStrategy / recvOutput recvOutput \u00b6 [jvm] Content open suspend override fun recvOutput (value: Value)","title":"Recv output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-file-strategy/recv-output/#recvoutput","text":"[jvm] Content open suspend override fun recvOutput (value: Value)","title":"recvOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / Strategy Strategy \u00b6 [jvm] interface Strategy Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getInput [jvm] Content abstract suspend fun getInput (): Value hashCode [jvm] Content open fun hashCode (): Int recvOutput [jvm] Content abstract suspend fun recvOutput (value: Value) toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name FileStrategy TerminalIO","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/#strategy","text":"[jvm] interface Strategy","title":"Strategy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getInput [jvm] Content abstract suspend fun getInput (): Value hashCode [jvm] Content open fun hashCode (): Int recvOutput [jvm] Content abstract suspend fun recvOutput (value: Value) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/#inheritors","text":"Name FileStrategy TerminalIO","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/get-input/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / Strategy / getInput getInput \u00b6 [jvm] Content abstract suspend fun getInput (): Value","title":"Get input"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/get-input/#getinput","text":"[jvm] Content abstract suspend fun getInput (): Value","title":"getInput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/recv-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / Strategy / recvOutput recvOutput \u00b6 [jvm] Content abstract suspend fun recvOutput (value: Value)","title":"Recv output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-strategy/recv-output/#recvoutput","text":"[jvm] Content abstract suspend fun recvOutput (value: Value)","title":"recvOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / TerminalIO TerminalIO \u00b6 [jvm] class TerminalIO : Strategy Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getInput [jvm] Content open suspend override fun getInput (): Value hashCode [jvm] Content open fun hashCode (): Int recvOutput [jvm] Content open suspend override fun recvOutput (value: Value) toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/#terminalio","text":"[jvm] class TerminalIO : Strategy","title":"TerminalIO"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getInput [jvm] Content open suspend override fun getInput (): Value hashCode [jvm] Content open fun hashCode (): Int recvOutput [jvm] Content open suspend override fun recvOutput (value: Value) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/-terminal-i-o/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / TerminalIO / TerminalIO TerminalIO \u00b6 [jvm] Content fun TerminalIO ()","title":" terminal i o"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/-terminal-i-o/#terminalio","text":"[jvm] Content fun TerminalIO ()","title":"TerminalIO"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/get-input/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / TerminalIO / getInput getInput \u00b6 [jvm] Content open suspend override fun getInput (): Value","title":"Get input"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/get-input/#getinput","text":"[jvm] Content open suspend override fun getInput (): Value","title":"getInput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/recv-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.IO / TerminalIO / recvOutput recvOutput \u00b6 [jvm] Content open suspend override fun recvOutput (value: Value)","title":"Recv output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.IO/-terminal-i-o/recv-output/#recvoutput","text":"[jvm] Content open suspend override fun recvOutput (value: Value)","title":"recvOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby Package edu.cornell.cs.apl.viaduct.backend.aby \u00b6 Types \u00b6 Name Summary ABYCircuitBuilder [jvm] Content class ABYCircuitBuilder ( arithCircuit : Circuit, boolCircuit : Circuit, yaoCircuit : Circuit, bitlen : Long , role : Role) ABYCircuitGate [jvm] Content sealed class ABYCircuitGate ABYCircuitType [jvm] Content enum ABYCircuitType : Enum < ABYCircuitType > ABYCleartextValue [jvm] Content data class ABYCleartextValue ( value : Value) : ABYValue ABYConstantGate [jvm] Content class ABYConstantGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate ABYConversionGate [jvm] Content class ABYConversionGate ( inputGate : ABYCircuitGate , circuitType : ABYCircuitType ) : ABYCircuitGate ABYDummyInGate [jvm] Content class ABYDummyInGate ( circuitType : ABYCircuitType ) : ABYCircuitGate ABYInGate [jvm] Content class ABYInGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate ABYOperationGate [jvm] Content class ABYOperationGate ( operation : PutOperationGate , operands : List < ABYCircuitGate >, circuitType : ABYCircuitType ) : ABYCircuitGate ABYProtocolInterpreter [jvm] Content class ABYProtocolInterpreter ( host : Host, otherHost : Host, role : Role, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductRuntime , connectionMap : Map HostAddress >, port : Int ) : AbstractProtocolInterpreter < ABYProtocolInterpreter.ABYClassObject > ABYSecretValue [jvm] Content data class ABYSecretValue ( value : ABYCircuitGate ) : ABYValue ABYValue [jvm] Content sealed class ABYValue PutOperationGate [jvm] Content typealias PutOperationGate = Circuit.(arguments: List ) -> Share More info A method that adds the gate for an operation with the given arguments to the circuit and returns the resulting share. This is simply a generalization of the putOPGate methods (which can be unary, binary, or ternary) to a list of arguments. Functions \u00b6 Name Summary ABYMuxPostprocessor [jvm] Content fun ABYMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor addConversionGates [jvm] Content fun ABYCircuitGate . addConversionGates (target: ABYCircuitType ): ABYCircuitGate More info Add a conversion gate---if necessary---to match the target circuit type. operatorToCircuit [jvm] Content fun operatorToCircuit (operator: Operator, arguments: List < ABYCircuitGate >, circuitType: ABYCircuitType ): ABYCircuitGate More info Returns an ABY circuit implementing the given operator. putNOTGate [jvm] Content fun Circuit. putNOTGate (input: Share): Share More info Implements bitwise not.","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/#package-educornellcsaplviaductbackendaby","text":"","title":"Package edu.cornell.cs.apl.viaduct.backend.aby"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/#types","text":"Name Summary ABYCircuitBuilder [jvm] Content class ABYCircuitBuilder ( arithCircuit : Circuit, boolCircuit : Circuit, yaoCircuit : Circuit, bitlen : Long , role : Role) ABYCircuitGate [jvm] Content sealed class ABYCircuitGate ABYCircuitType [jvm] Content enum ABYCircuitType : Enum < ABYCircuitType > ABYCleartextValue [jvm] Content data class ABYCleartextValue ( value : Value) : ABYValue ABYConstantGate [jvm] Content class ABYConstantGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate ABYConversionGate [jvm] Content class ABYConversionGate ( inputGate : ABYCircuitGate , circuitType : ABYCircuitType ) : ABYCircuitGate ABYDummyInGate [jvm] Content class ABYDummyInGate ( circuitType : ABYCircuitType ) : ABYCircuitGate ABYInGate [jvm] Content class ABYInGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate ABYOperationGate [jvm] Content class ABYOperationGate ( operation : PutOperationGate , operands : List < ABYCircuitGate >, circuitType : ABYCircuitType ) : ABYCircuitGate ABYProtocolInterpreter [jvm] Content class ABYProtocolInterpreter ( host : Host, otherHost : Host, role : Role, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductRuntime , connectionMap : Map HostAddress >, port : Int ) : AbstractProtocolInterpreter < ABYProtocolInterpreter.ABYClassObject > ABYSecretValue [jvm] Content data class ABYSecretValue ( value : ABYCircuitGate ) : ABYValue ABYValue [jvm] Content sealed class ABYValue PutOperationGate [jvm] Content typealias PutOperationGate = Circuit.(arguments: List ) -> Share More info A method that adds the gate for an operation with the given arguments to the circuit and returns the resulting share. This is simply a generalization of the putOPGate methods (which can be unary, binary, or ternary) to a list of arguments.","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/#functions","text":"Name Summary ABYMuxPostprocessor [jvm] Content fun ABYMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor addConversionGates [jvm] Content fun ABYCircuitGate . addConversionGates (target: ABYCircuitType ): ABYCircuitGate More info Add a conversion gate---if necessary---to match the target circuit type. operatorToCircuit [jvm] Content fun operatorToCircuit (operator: Operator, arguments: List < ABYCircuitGate >, circuitType: ABYCircuitType ): ABYCircuitGate More info Returns an ABY circuit implementing the given operator. putNOTGate [jvm] Content fun Circuit. putNOTGate (input: Share): Share More info Implements bitwise not.","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-mux-postprocessor/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYMuxPostprocessor ABYMuxPostprocessor \u00b6 [jvm] Content fun ABYMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor","title":" a b y mux postprocessor"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-mux-postprocessor/#abymuxpostprocessor","text":"[jvm] Content fun ABYMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor","title":"ABYMuxPostprocessor"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/add-conversion-gates/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / addConversionGates addConversionGates \u00b6 [jvm] Content fun ABYCircuitGate . addConversionGates (target: ABYCircuitType ): ABYCircuitGate More info Add a conversion gate---if necessary---to match the target circuit type.","title":"Add conversion gates"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/add-conversion-gates/#addconversiongates","text":"[jvm] Content fun ABYCircuitGate . addConversionGates (target: ABYCircuitType ): ABYCircuitGate More info Add a conversion gate---if necessary---to match the target circuit type.","title":"addConversionGates"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/operator-to-circuit/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / operatorToCircuit operatorToCircuit \u00b6 [jvm] Content fun operatorToCircuit (operator: Operator, arguments: List < ABYCircuitGate >, circuitType: ABYCircuitType ): ABYCircuitGate More info Returns an ABY circuit implementing the given operator.","title":"Operator to circuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/operator-to-circuit/#operatortocircuit","text":"[jvm] Content fun operatorToCircuit (operator: Operator, arguments: List < ABYCircuitGate >, circuitType: ABYCircuitType ): ABYCircuitGate More info Returns an ABY circuit implementing the given operator.","title":"operatorToCircuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/put-n-o-t-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / putNOTGate putNOTGate \u00b6 [jvm] Content fun Circuit. putNOTGate (input: Share): Share More info Implements bitwise not.","title":"Put n o t gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/put-n-o-t-gate/#putnotgate","text":"[jvm] Content fun Circuit. putNOTGate (input: Share): Share More info Implements bitwise not.","title":"putNOTGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder ABYCircuitBuilder \u00b6 [jvm] class ABYCircuitBuilder ( arithCircuit : Circuit, boolCircuit : Circuit, yaoCircuit : Circuit, bitlen : Long , role : Role) Functions \u00b6 Name Summary circuit [jvm] Content fun circuit (type: ABYCircuitType ): Circuit equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary arithCircuit [jvm] val arithCircuit : Circuit bitlen [jvm] val bitlen : Long boolCircuit [jvm] val boolCircuit : Circuit circuit [jvm] val circuit : Circuit role [jvm] val role : Role yaoCircuit [jvm] val yaoCircuit : Circuit","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/#abycircuitbuilder","text":"[jvm] class ABYCircuitBuilder ( arithCircuit : Circuit, boolCircuit : Circuit, yaoCircuit : Circuit, bitlen : Long , role : Role)","title":"ABYCircuitBuilder"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/#functions","text":"Name Summary circuit [jvm] Content fun circuit (type: ABYCircuitType ): Circuit equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/#properties","text":"Name Summary arithCircuit [jvm] val arithCircuit : Circuit bitlen [jvm] val bitlen : Long boolCircuit [jvm] val boolCircuit : Circuit circuit [jvm] val circuit : Circuit role [jvm] val role : Role yaoCircuit [jvm] val yaoCircuit : Circuit","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/-a-b-y-circuit-builder/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder / ABYCircuitBuilder ABYCircuitBuilder \u00b6 [jvm] Content fun ABYCircuitBuilder (arithCircuit: Circuit, boolCircuit: Circuit, yaoCircuit: Circuit, bitlen: Long , role: Role)","title":" a b y circuit builder"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/-a-b-y-circuit-builder/#abycircuitbuilder","text":"[jvm] Content fun ABYCircuitBuilder (arithCircuit: Circuit, boolCircuit: Circuit, yaoCircuit: Circuit, bitlen: Long , role: Role)","title":"ABYCircuitBuilder"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/arith-circuit/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder / arithCircuit arithCircuit \u00b6 [jvm] Content val arithCircuit : Circuit","title":"Arith circuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/arith-circuit/#arithcircuit","text":"[jvm] Content val arithCircuit : Circuit","title":"arithCircuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/bitlen/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder / bitlen bitlen \u00b6 [jvm] Content val bitlen : Long","title":"Bitlen"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/bitlen/#bitlen","text":"[jvm] Content val bitlen : Long","title":"bitlen"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/bool-circuit/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder / boolCircuit boolCircuit \u00b6 [jvm] Content val boolCircuit : Circuit","title":"Bool circuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/bool-circuit/#boolcircuit","text":"[jvm] Content val boolCircuit : Circuit","title":"boolCircuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/circuit/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder / circuit circuit \u00b6 [jvm] Content fun circuit (type: ABYCircuitType ): Circuit val circuit : Circuit","title":"Circuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/circuit/#circuit","text":"[jvm] Content fun circuit (type: ABYCircuitType ): Circuit val circuit : Circuit","title":"circuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/role/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder / role role \u00b6 [jvm] Content val role : Role","title":"Role"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/role/#role","text":"[jvm] Content val role : Role","title":"role"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/yao-circuit/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitBuilder / yaoCircuit yaoCircuit \u00b6 [jvm] Content val yaoCircuit : Circuit","title":"Yao circuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-builder/yao-circuit/#yaocircuit","text":"[jvm] Content val yaoCircuit : Circuit","title":"yaoCircuit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitGate ABYCircuitGate \u00b6 [jvm] sealed class ABYCircuitGate Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content abstract fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType variableGate [jvm] var variableGate : Boolean = false Inheritors \u00b6 Name ABYInGate ABYDummyInGate ABYConstantGate ABYConversionGate ABYOperationGate Extensions \u00b6 Name Summary addConversionGates [jvm] Content fun ABYCircuitGate . addConversionGates (target: ABYCircuitType ): ABYCircuitGate More info Add a conversion gate---if necessary---to match the target circuit type.","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/#abycircuitgate","text":"[jvm] sealed class ABYCircuitGate","title":"ABYCircuitGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content abstract fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/#properties","text":"Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType variableGate [jvm] var variableGate : Boolean = false","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/#inheritors","text":"Name ABYInGate ABYDummyInGate ABYConstantGate ABYConversionGate ABYOperationGate","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/#extensions","text":"Name Summary addConversionGates [jvm] Content fun ABYCircuitGate . addConversionGates (target: ABYCircuitType ): ABYCircuitGate More info Add a conversion gate---if necessary---to match the target circuit type.","title":"Extensions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/children/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitGate / children children \u00b6 [jvm] Content val children : List < ABYCircuitGate >","title":"Children"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/children/#children","text":"[jvm] Content val children : List < ABYCircuitGate >","title":"children"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/circuit-type/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitGate / circuitType circuitType \u00b6 [jvm] Content val circuitType : ABYCircuitType","title":"Circuit type"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/circuit-type/#circuittype","text":"[jvm] Content val circuitType : ABYCircuitType","title":"circuitType"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/put-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitGate / putGate putGate \u00b6 [jvm] Content abstract fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"Put gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/put-gate/#putgate","text":"[jvm] Content abstract fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"putGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/variable-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitGate / variableGate variableGate \u00b6 [jvm] Content var variableGate : Boolean = false","title":"Variable gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-gate/variable-gate/#variablegate","text":"[jvm] Content var variableGate : Boolean = false","title":"variableGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType ABYCircuitType \u00b6 [jvm] enum ABYCircuitType : Enum < ABYCircuitType > Entries \u00b6 Name Summary ARITH [jvm] ARITH () BOOL [jvm] BOOL () YAO [jvm] YAO () Functions \u00b6 Name Summary compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/#abycircuittype","text":"[jvm] enum ABYCircuitType : Enum < ABYCircuitType >","title":"ABYCircuitType"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/#entries","text":"Name Summary ARITH [jvm] ARITH () BOOL [jvm] BOOL () YAO [jvm] YAO ()","title":"Entries"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/#functions","text":"Name Summary compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / ARITH ARITH \u00b6 [jvm] ARITH () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/#arith","text":"[jvm] ARITH ()","title":"ARITH"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/name/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / ARITH / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/ordinal/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / ARITH / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / BOOL BOOL \u00b6 [jvm] BOOL () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/#bool","text":"[jvm] BOOL ()","title":"BOOL"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/name/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / BOOL / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/ordinal/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / BOOL / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / YAO YAO \u00b6 [jvm] YAO () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/#yao","text":"[jvm] YAO ()","title":"YAO"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: ABYCircuitType ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < ABYCircuitType > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/name/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / YAO / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/ordinal/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCircuitType / YAO / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCleartextValue ABYCleartextValue \u00b6 [jvm] data class ABYCleartextValue ( value : Value) : ABYValue Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): Value copy [jvm] Content fun copy (value: Value): ABYCleartextValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary value [jvm] val value : Value","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/#abycleartextvalue","text":"[jvm] data class ABYCleartextValue ( value : Value) : ABYValue","title":"ABYCleartextValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): Value copy [jvm] Content fun copy (value: Value): ABYCleartextValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/#properties","text":"Name Summary value [jvm] val value : Value","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/-a-b-y-cleartext-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCleartextValue / ABYCleartextValue ABYCleartextValue \u00b6 [jvm] Content fun ABYCleartextValue (value: Value)","title":" a b y cleartext value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/-a-b-y-cleartext-value/#abycleartextvalue","text":"[jvm] Content fun ABYCleartextValue (value: Value)","title":"ABYCleartextValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCleartextValue / component1 component1 \u00b6 [jvm] Content operator fun component1 (): Value","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/component1/#component1","text":"[jvm] Content operator fun component1 (): Value","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCleartextValue / copy copy \u00b6 [jvm] Content fun copy (value: Value): ABYCleartextValue","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/copy/#copy","text":"[jvm] Content fun copy (value: Value): ABYCleartextValue","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYCleartextValue / value value \u00b6 [jvm] Content val value : Value","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-cleartext-value/value/#value","text":"[jvm] Content val value : Value","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYConstantGate ABYConstantGate \u00b6 [jvm] class ABYConstantGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType value [jvm] val value : Int variableGate [jvm] var variableGate : Boolean = false","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/#abyconstantgate","text":"[jvm] class ABYConstantGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate","title":"ABYConstantGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/#properties","text":"Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType value [jvm] val value : Int variableGate [jvm] var variableGate : Boolean = false","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/-a-b-y-constant-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYConstantGate / ABYConstantGate ABYConstantGate \u00b6 [jvm] Content fun ABYConstantGate (value: Int , circuitType: ABYCircuitType )","title":" a b y constant gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/-a-b-y-constant-gate/#abyconstantgate","text":"[jvm] Content fun ABYConstantGate (value: Int , circuitType: ABYCircuitType )","title":"ABYConstantGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/put-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYConstantGate / putGate putGate \u00b6 [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"Put gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/put-gate/#putgate","text":"[jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"putGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYConstantGate / value value \u00b6 [jvm] Content val value : Int","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-constant-gate/value/#value","text":"[jvm] Content val value : Int","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYConversionGate ABYConversionGate \u00b6 [jvm] class ABYConversionGate ( inputGate : ABYCircuitGate , circuitType : ABYCircuitType ) : ABYCircuitGate Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType variableGate [jvm] var variableGate : Boolean = false","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/#abyconversiongate","text":"[jvm] class ABYConversionGate ( inputGate : ABYCircuitGate , circuitType : ABYCircuitType ) : ABYCircuitGate","title":"ABYConversionGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/#properties","text":"Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType variableGate [jvm] var variableGate : Boolean = false","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/-a-b-y-conversion-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYConversionGate / ABYConversionGate ABYConversionGate \u00b6 [jvm] Content fun ABYConversionGate (inputGate: ABYCircuitGate , circuitType: ABYCircuitType )","title":" a b y conversion gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/-a-b-y-conversion-gate/#abyconversiongate","text":"[jvm] Content fun ABYConversionGate (inputGate: ABYCircuitGate , circuitType: ABYCircuitType )","title":"ABYConversionGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/put-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYConversionGate / putGate putGate \u00b6 [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"Put gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-conversion-gate/put-gate/#putgate","text":"[jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"putGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYDummyInGate ABYDummyInGate \u00b6 [jvm] class ABYDummyInGate ( circuitType : ABYCircuitType ) : ABYCircuitGate Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType variableGate [jvm] var variableGate : Boolean = false","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/#abydummyingate","text":"[jvm] class ABYDummyInGate ( circuitType : ABYCircuitType ) : ABYCircuitGate","title":"ABYDummyInGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/#properties","text":"Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType variableGate [jvm] var variableGate : Boolean = false","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/-a-b-y-dummy-in-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYDummyInGate / ABYDummyInGate ABYDummyInGate \u00b6 [jvm] Content fun ABYDummyInGate (circuitType: ABYCircuitType )","title":" a b y dummy in gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/-a-b-y-dummy-in-gate/#abydummyingate","text":"[jvm] Content fun ABYDummyInGate (circuitType: ABYCircuitType )","title":"ABYDummyInGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/put-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYDummyInGate / putGate putGate \u00b6 [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"Put gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-dummy-in-gate/put-gate/#putgate","text":"[jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"putGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYInGate ABYInGate \u00b6 [jvm] class ABYInGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType value [jvm] val value : Int variableGate [jvm] var variableGate : Boolean = false","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/#abyingate","text":"[jvm] class ABYInGate ( value : Int , circuitType : ABYCircuitType ) : ABYCircuitGate","title":"ABYInGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/#properties","text":"Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType value [jvm] val value : Int variableGate [jvm] var variableGate : Boolean = false","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/-a-b-y-in-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYInGate / ABYInGate ABYInGate \u00b6 [jvm] Content fun ABYInGate (value: Int , circuitType: ABYCircuitType )","title":" a b y in gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/-a-b-y-in-gate/#abyingate","text":"[jvm] Content fun ABYInGate (value: Int , circuitType: ABYCircuitType )","title":"ABYInGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/put-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYInGate / putGate putGate \u00b6 [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"Put gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/put-gate/#putgate","text":"[jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"putGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYInGate / value value \u00b6 [jvm] Content val value : Int","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-in-gate/value/#value","text":"[jvm] Content val value : Int","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYOperationGate ABYOperationGate \u00b6 [jvm] class ABYOperationGate ( operation : PutOperationGate , operands : List < ABYCircuitGate >, circuitType : ABYCircuitType ) : ABYCircuitGate Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType operation [jvm] val operation : PutOperationGate variableGate [jvm] var variableGate : Boolean = false","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/#abyoperationgate","text":"[jvm] class ABYOperationGate ( operation : PutOperationGate , operands : List < ABYCircuitGate >, circuitType : ABYCircuitType ) : ABYCircuitGate","title":"ABYOperationGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int putGate [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/#properties","text":"Name Summary children [jvm] val children : List < ABYCircuitGate > circuitType [jvm] val circuitType : ABYCircuitType operation [jvm] val operation : PutOperationGate variableGate [jvm] var variableGate : Boolean = false","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/-a-b-y-operation-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYOperationGate / ABYOperationGate ABYOperationGate \u00b6 [jvm] Content fun ABYOperationGate (operation: PutOperationGate , operands: List < ABYCircuitGate >, circuitType: ABYCircuitType )","title":" a b y operation gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/-a-b-y-operation-gate/#abyoperationgate","text":"[jvm] Content fun ABYOperationGate (operation: PutOperationGate , operands: List < ABYCircuitGate >, circuitType: ABYCircuitType )","title":"ABYOperationGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/operation/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYOperationGate / operation operation \u00b6 [jvm] Content val operation : PutOperationGate","title":"Operation"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/operation/#operation","text":"[jvm] Content val operation : PutOperationGate","title":"operation"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/put-gate/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYOperationGate / putGate putGate \u00b6 [jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"Put gate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-operation-gate/put-gate/#putgate","text":"[jvm] Content open override fun putGate (builder: ABYCircuitBuilder , childShares: List ): Share More info Adds the gate represented by this object to the given circuit.","title":"putGate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter ABYProtocolInterpreter \u00b6 [jvm] class ABYProtocolInterpreter ( host : Host, otherHost : Host, role : Role, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductRuntime , connectionMap : Map HostAddress >, port : Int ) : AbstractProtocolInterpreter < ABYProtocolInterpreter.ABYClassObject > Types \u00b6 Name Summary ABYClassObject [jvm] Content abstract class ABYClassObject ABYImmutableCellObject [jvm] Content class ABYImmutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject ABYMutableCellObject [jvm] Content inner class ABYMutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject ABYNullObject [jvm] Content object ABYNullObject : ABYProtocolInterpreter.ABYClassObject ABYVectorObject [jvm] Content inner class ABYVectorObject ( circuitType : ABYCircuitType , size : Int , defaultValue : Value) : ABYProtocolInterpreter.ABYClassObject Companion [jvm] Content object Companion : ProtocolBackend Functions \u00b6 Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ABYProtocolInterpreter.ABYClassObject buildObject [jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ABYProtocolInterpreter.ABYClassObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (protocol: Protocol): ABYProtocolInterpreter.ABYClassObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/#abyprotocolinterpreter","text":"[jvm] class ABYProtocolInterpreter ( host : Host, otherHost : Host, role : Role, program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductRuntime , connectionMap : Map HostAddress >, port : Int ) : AbstractProtocolInterpreter < ABYProtocolInterpreter.ABYClassObject >","title":"ABYProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/#types","text":"Name Summary ABYClassObject [jvm] Content abstract class ABYClassObject ABYImmutableCellObject [jvm] Content class ABYImmutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject ABYMutableCellObject [jvm] Content inner class ABYMutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject ABYNullObject [jvm] Content object ABYNullObject : ABYProtocolInterpreter.ABYClassObject ABYVectorObject [jvm] Content inner class ABYVectorObject ( circuitType : ABYCircuitType , size : Int , defaultValue : Value) : ABYProtocolInterpreter.ABYClassObject Companion [jvm] Content object Companion : ProtocolBackend","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ABYProtocolInterpreter.ABYClassObject buildObject [jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ABYProtocolInterpreter.ABYClassObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (protocol: Protocol): ABYProtocolInterpreter.ABYClassObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/#properties","text":"Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-protocol-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYProtocolInterpreter ABYProtocolInterpreter \u00b6 [jvm] Content fun ABYProtocolInterpreter (host: Host, otherHost: Host, role: Role, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >, port: Int = DEFAULT_PORT)","title":" a b y protocol interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-protocol-interpreter/#abyprotocolinterpreter","text":"[jvm] Content fun ABYProtocolInterpreter (host: Host, otherHost: Host, role: Role, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >, port: Int = DEFAULT_PORT)","title":"ABYProtocolInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/available-protocols/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / availableProtocols availableProtocols \u00b6 [jvm] Content open override val availableProtocols : Set","title":"Available protocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/available-protocols/#availableprotocols","text":"[jvm] Content open override val availableProtocols : Set","title":"availableProtocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ABYProtocolInterpreter.ABYClassObject","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ABYProtocolInterpreter.ABYClassObject","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / buildObject buildObject \u00b6 [jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ABYProtocolInterpreter.ABYClassObject","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/build-object/#buildobject","text":"[jvm] Content open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ABYProtocolInterpreter.ABYClassObject","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / getNullObject getNullObject \u00b6 [jvm] Content open override fun getNullObject (protocol: Protocol): ABYProtocolInterpreter.ABYClassObject","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/get-null-object/#getnullobject","text":"[jvm] Content open override fun getNullObject (protocol: Protocol): ABYProtocolInterpreter.ABYClassObject","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/pop-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / popContext popContext \u00b6 [jvm] Content open suspend override fun popContext ()","title":"Pop context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/pop-context/#popcontext","text":"[jvm] Content open suspend override fun popContext ()","title":"popContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/push-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / pushContext pushContext \u00b6 [jvm] Content open suspend override fun pushContext ()","title":"Push context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/push-context/#pushcontext","text":"[jvm] Content open suspend override fun pushContext ()","title":"pushContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / runGuard runGuard \u00b6 [jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-guard/#runguard","text":"[jvm] Content open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / runLet runLet \u00b6 [jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-let/#runlet","text":"[jvm] Content open suspend override fun runLet (protocol: Protocol, stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / runOutput runOutput \u00b6 [jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-output/#runoutput","text":"[jvm] Content open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / runReceive runReceive \u00b6 [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-receive/#runreceive","text":"[jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runReceive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / runSend runSend \u00b6 [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-send/#runsend","text":"[jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runSend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / runUpdate runUpdate \u00b6 [jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-update/#runupdate","text":"[jvm] Content open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYClassObject ABYClassObject \u00b6 [jvm] abstract class ABYClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List ) Inheritors \u00b6 Name ABYProtocolInterpreter ABYProtocolInterpreter ABYProtocolInterpreter ABYProtocolInterpreter","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/#abyclassobject","text":"[jvm] abstract class ABYClassObject","title":"ABYClassObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/#inheritors","text":"Name ABYProtocolInterpreter ABYProtocolInterpreter ABYProtocolInterpreter ABYProtocolInterpreter","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/-a-b-y-class-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYClassObject / ABYClassObject ABYClassObject \u00b6 [jvm] Content fun ABYClassObject ()","title":" a b y class object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/-a-b-y-class-object/#abyclassobject","text":"[jvm] Content fun ABYClassObject ()","title":"ABYClassObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYClassObject / query query \u00b6 [jvm] Content abstract fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/query/#query","text":"[jvm] Content abstract fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYClassObject / update update \u00b6 [jvm] Content abstract fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/update/#update","text":"[jvm] Content abstract fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYImmutableCellObject ABYImmutableCellObject \u00b6 [jvm] class ABYImmutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/#abyimmutablecellobject","text":"[jvm] class ABYImmutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject","title":"ABYImmutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/-a-b-y-immutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYImmutableCellObject / ABYImmutableCellObject ABYImmutableCellObject \u00b6 [jvm] Content fun ABYImmutableCellObject (gate: ABYCircuitGate )","title":" a b y immutable cell object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/-a-b-y-immutable-cell-object/#abyimmutablecellobject","text":"[jvm] Content fun ABYImmutableCellObject (gate: ABYCircuitGate )","title":"ABYImmutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYImmutableCellObject / query query \u00b6 [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/query/#query","text":"[jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYImmutableCellObject / update update \u00b6 [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/update/#update","text":"[jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYMutableCellObject ABYMutableCellObject \u00b6 [jvm] inner class ABYMutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/#abymutablecellobject","text":"[jvm] inner class ABYMutableCellObject ( gate : ABYCircuitGate ) : ABYProtocolInterpreter.ABYClassObject","title":"ABYMutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/-a-b-y-mutable-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYMutableCellObject / ABYMutableCellObject ABYMutableCellObject \u00b6 [jvm] Content fun ABYMutableCellObject (gate: ABYCircuitGate )","title":" a b y mutable cell object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/-a-b-y-mutable-cell-object/#abymutablecellobject","text":"[jvm] Content fun ABYMutableCellObject (gate: ABYCircuitGate )","title":"ABYMutableCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYMutableCellObject / query query \u00b6 [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/query/#query","text":"[jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYMutableCellObject / update update \u00b6 [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/update/#update","text":"[jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYNullObject ABYNullObject \u00b6 [jvm] object ABYNullObject : ABYProtocolInterpreter.ABYClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/#abynullobject","text":"[jvm] object ABYNullObject : ABYProtocolInterpreter.ABYClassObject","title":"ABYNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYNullObject / query query \u00b6 [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/query/#query","text":"[jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYNullObject / update update \u00b6 [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/update/#update","text":"[jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYVectorObject ABYVectorObject \u00b6 [jvm] inner class ABYVectorObject ( circuitType : ABYCircuitType , size : Int , defaultValue : Value) : ABYProtocolInterpreter.ABYClassObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary size [jvm] val size : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/#abyvectorobject","text":"[jvm] inner class ABYVectorObject ( circuitType : ABYCircuitType , size : Int , defaultValue : Value) : ABYProtocolInterpreter.ABYClassObject","title":"ABYVectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/#properties","text":"Name Summary size [jvm] val size : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/-a-b-y-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYVectorObject / ABYVectorObject ABYVectorObject \u00b6 [jvm] Content fun ABYVectorObject (circuitType: ABYCircuitType , size: Int , defaultValue: Value)","title":" a b y vector object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/-a-b-y-vector-object/#abyvectorobject","text":"[jvm] Content fun ABYVectorObject (circuitType: ABYCircuitType , size: Int , defaultValue: Value)","title":"ABYVectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYVectorObject / query query \u00b6 [jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/query/#query","text":"[jvm] Content open override fun query (circuitType: ABYCircuitType , query: QueryNameNode, arguments: List ): ABYCircuitGate","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYVectorObject / size size \u00b6 [jvm] Content val size : Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/size/#size","text":"[jvm] Content val size : Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / ABYVectorObject / update update \u00b6 [jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/update/#update","text":"[jvm] Content open override fun update (circuitType: ABYCircuitType , update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / Companion Companion \u00b6 [jvm] object Companion : ProtocolBackend Functions \u00b6 Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary port [jvm] var port : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/#companion","text":"[jvm] object Companion : ProtocolBackend","title":"Companion"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/#functions","text":"Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/#properties","text":"Name Summary port [jvm] var port : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/build-protocol-interpreters/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / Companion / buildProtocolInterpreters buildProtocolInterpreters \u00b6 [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"Build protocol interpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/build-protocol-interpreters/#buildprotocolinterpreters","text":"[jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"buildProtocolInterpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/port/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYProtocolInterpreter / Companion / port port \u00b6 [jvm] Content var port : Int","title":"Port"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/port/#port","text":"[jvm] Content var port : Int","title":"port"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYSecretValue ABYSecretValue \u00b6 [jvm] data class ABYSecretValue ( value : ABYCircuitGate ) : ABYValue Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): ABYCircuitGate copy [jvm] Content fun copy (value: ABYCircuitGate ): ABYSecretValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary value [jvm] val value : ABYCircuitGate","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/#abysecretvalue","text":"[jvm] data class ABYSecretValue ( value : ABYCircuitGate ) : ABYValue","title":"ABYSecretValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): ABYCircuitGate copy [jvm] Content fun copy (value: ABYCircuitGate ): ABYSecretValue equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/#properties","text":"Name Summary value [jvm] val value : ABYCircuitGate","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/-a-b-y-secret-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYSecretValue / ABYSecretValue ABYSecretValue \u00b6 [jvm] Content fun ABYSecretValue (value: ABYCircuitGate )","title":" a b y secret value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/-a-b-y-secret-value/#abysecretvalue","text":"[jvm] Content fun ABYSecretValue (value: ABYCircuitGate )","title":"ABYSecretValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYSecretValue / component1 component1 \u00b6 [jvm] Content operator fun component1 (): ABYCircuitGate","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/component1/#component1","text":"[jvm] Content operator fun component1 (): ABYCircuitGate","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYSecretValue / copy copy \u00b6 [jvm] Content fun copy (value: ABYCircuitGate ): ABYSecretValue","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/copy/#copy","text":"[jvm] Content fun copy (value: ABYCircuitGate ): ABYSecretValue","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYSecretValue / value value \u00b6 [jvm] Content val value : ABYCircuitGate","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-secret-value/value/#value","text":"[jvm] Content val value : ABYCircuitGate","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.aby / ABYValue ABYValue \u00b6 [jvm] sealed class ABYValue Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name ABYCleartextValue ABYSecretValue","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-value/#abyvalue","text":"[jvm] sealed class ABYValue","title":"ABYValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-value/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.aby/-a-b-y-value/#inheritors","text":"Name ABYCleartextValue ABYSecretValue","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment Package edu.cornell.cs.apl.viaduct.backend.commitment \u00b6 Types \u00b6 Name Summary CommitmentProtocolCleartextInterpreter [jvm] Content class CommitmentProtocolCleartextInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolCleartextInterpreter.HashedObject > More info Commitment protocol interpreter for hosts holding the cleartext value. CommitmentProtocolHashReplicaInterpreter [jvm] Content class CommitmentProtocolHashReplicaInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolHashReplicaInterpreter.CommitmentObject > More info Commitment protocol interpreter for hash replica hosts. CommitmentProtocolInterpreterFactory [jvm] Content object CommitmentProtocolInterpreterFactory : ProtocolBackend Hashed [jvm] Content data class Hashed < T >( value : T , info : HashInfo ) HashInfo [jvm] Content data class HashInfo ( hash : List < Byte >, nonce : List < Byte >) Hashing [jvm] Content object Hashing Functions \u00b6 Name Summary encode [jvm] Content fun PlaintextClassObject . encode (): List < Byte > fun Value. encode (): List < Byte > genNonce [jvm] Content fun genNonce (width: Int ): List < Byte > toByte [jvm] Content fun Boolean . toByte (): Byte","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/#package-educornellcsaplviaductbackendcommitment","text":"","title":"Package edu.cornell.cs.apl.viaduct.backend.commitment"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/#types","text":"Name Summary CommitmentProtocolCleartextInterpreter [jvm] Content class CommitmentProtocolCleartextInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolCleartextInterpreter.HashedObject > More info Commitment protocol interpreter for hosts holding the cleartext value. CommitmentProtocolHashReplicaInterpreter [jvm] Content class CommitmentProtocolHashReplicaInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolHashReplicaInterpreter.CommitmentObject > More info Commitment protocol interpreter for hash replica hosts. CommitmentProtocolInterpreterFactory [jvm] Content object CommitmentProtocolInterpreterFactory : ProtocolBackend Hashed [jvm] Content data class Hashed < T >( value : T , info : HashInfo ) HashInfo [jvm] Content data class HashInfo ( hash : List < Byte >, nonce : List < Byte >) Hashing [jvm] Content object Hashing","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/#functions","text":"Name Summary encode [jvm] Content fun PlaintextClassObject . encode (): List < Byte > fun Value. encode (): List < Byte > genNonce [jvm] Content fun genNonce (width: Int ): List < Byte > toByte [jvm] Content fun Boolean . toByte (): Byte","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/encode/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / encode encode \u00b6 [jvm] Content fun Value. encode (): List < Byte > fun PlaintextClassObject . encode (): List < Byte >","title":"Encode"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/encode/#encode","text":"[jvm] Content fun Value. encode (): List < Byte > fun PlaintextClassObject . encode (): List < Byte >","title":"encode"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/gen-nonce/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / genNonce genNonce \u00b6 [jvm] Content fun genNonce (width: Int ): List < Byte >","title":"Gen nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/gen-nonce/#gennonce","text":"[jvm] Content fun genNonce (width: Int ): List < Byte >","title":"genNonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/to-byte/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / toByte toByte \u00b6 [jvm] Content fun Boolean . toByte (): Byte","title":"To byte"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/to-byte/#tobyte","text":"[jvm] Content fun Boolean . toByte (): Byte","title":"toByte"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter CommitmentProtocolCleartextInterpreter \u00b6 [jvm] class CommitmentProtocolCleartextInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolCleartextInterpreter.HashedObject > Commitment protocol interpreter for hosts holding the cleartext value. Constructors \u00b6 Name Summary CommitmentProtocolCleartextInterpreter [jvm] fun CommitmentProtocolCleartextInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime ) Types \u00b6 Name Summary HashedCellObject [jvm] Content inner class HashedCellObject ( value : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject HashedNullObject [jvm] Content object HashedNullObject : CommitmentProtocolCleartextInterpreter.HashedObject HashedObject [jvm] Content abstract class HashedObject HashedVectorObject [jvm] Content inner class HashedVectorObject ( size : Int , defaultValue : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject Functions \u00b6 Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolCleartextInterpreter.HashedObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolCleartextInterpreter.HashedObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): CommitmentProtocolCleartextInterpreter.HashedObject open override fun getNullObject (protocol: Protocol): CommitmentProtocolCleartextInterpreter.HashedObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/#commitmentprotocolcleartextinterpreter","text":"[jvm] class CommitmentProtocolCleartextInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolCleartextInterpreter.HashedObject > Commitment protocol interpreter for hosts holding the cleartext value.","title":"CommitmentProtocolCleartextInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/#constructors","text":"Name Summary CommitmentProtocolCleartextInterpreter [jvm] fun CommitmentProtocolCleartextInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/#types","text":"Name Summary HashedCellObject [jvm] Content inner class HashedCellObject ( value : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject HashedNullObject [jvm] Content object HashedNullObject : CommitmentProtocolCleartextInterpreter.HashedObject HashedObject [jvm] Content abstract class HashedObject HashedVectorObject [jvm] Content inner class HashedVectorObject ( size : Int , defaultValue : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolCleartextInterpreter.HashedObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolCleartextInterpreter.HashedObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): CommitmentProtocolCleartextInterpreter.HashedObject open override fun getNullObject (protocol: Protocol): CommitmentProtocolCleartextInterpreter.HashedObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/#properties","text":"Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-commitment-protocol-cleartext-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / CommitmentProtocolCleartextInterpreter CommitmentProtocolCleartextInterpreter \u00b6 [jvm] Content fun CommitmentProtocolCleartextInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":" commitment protocol cleartext interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-commitment-protocol-cleartext-interpreter/#commitmentprotocolcleartextinterpreter","text":"[jvm] Content fun CommitmentProtocolCleartextInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":"CommitmentProtocolCleartextInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / buildObject buildObject \u00b6 [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolCleartextInterpreter.HashedObject","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/build-object/#buildobject","text":"[jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolCleartextInterpreter.HashedObject","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / getNullObject getNullObject \u00b6 [jvm] Content open override fun getNullObject (): CommitmentProtocolCleartextInterpreter.HashedObject","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/get-null-object/#getnullobject","text":"[jvm] Content open override fun getNullObject (): CommitmentProtocolCleartextInterpreter.HashedObject","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/pop-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / popContext popContext \u00b6 [jvm] Content open suspend override fun popContext ()","title":"Pop context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/pop-context/#popcontext","text":"[jvm] Content open suspend override fun popContext ()","title":"popContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/push-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / pushContext pushContext \u00b6 [jvm] Content open suspend override fun pushContext ()","title":"Push context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/push-context/#pushcontext","text":"[jvm] Content open suspend override fun pushContext ()","title":"pushContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / runGuard runGuard \u00b6 [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-guard/#runguard","text":"[jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / runLet runLet \u00b6 [jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-let/#runlet","text":"[jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / runOutput runOutput \u00b6 [jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-output/#runoutput","text":"[jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / runReceive runReceive \u00b6 [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-receive/#runreceive","text":"[jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runReceive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / runSend runSend \u00b6 [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-send/#runsend","text":"[jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runSend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / runUpdate runUpdate \u00b6 [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-update/#runupdate","text":"[jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedCellObject HashedCellObject \u00b6 [jvm] inner class HashedCellObject ( value : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary value [jvm] var value : Hashed","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/#hashedcellobject","text":"[jvm] inner class HashedCellObject ( value : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject","title":"HashedCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/#properties","text":"Name Summary value [jvm] var value : Hashed","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/-hashed-cell-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedCellObject / HashedCellObject HashedCellObject \u00b6 [jvm] Content fun HashedCellObject (value: Hashed )","title":" hashed cell object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/-hashed-cell-object/#hashedcellobject","text":"[jvm] Content fun HashedCellObject (value: Hashed )","title":"HashedCellObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedCellObject / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedCellObject / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedCellObject / value value \u00b6 [jvm] Content var value : Hashed","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/value/#value","text":"[jvm] Content var value : Hashed","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedNullObject HashedNullObject \u00b6 [jvm] object HashedNullObject : CommitmentProtocolCleartextInterpreter.HashedObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary hashed [jvm] val hashed : Hashed","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/#hashednullobject","text":"[jvm] object HashedNullObject : CommitmentProtocolCleartextInterpreter.HashedObject","title":"HashedNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/#properties","text":"Name Summary hashed [jvm] val hashed : Hashed","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/hashed/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedNullObject / hashed hashed \u00b6 [jvm] Content val hashed : Hashed","title":"Hashed"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/hashed/#hashed","text":"[jvm] Content val hashed : Hashed","title":"hashed"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedNullObject / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedNullObject / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedObject HashedObject \u00b6 [jvm] abstract class HashedObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List ) Inheritors \u00b6 Name CommitmentProtocolCleartextInterpreter CommitmentProtocolCleartextInterpreter CommitmentProtocolCleartextInterpreter","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/#hashedobject","text":"[jvm] abstract class HashedObject","title":"HashedObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/#inheritors","text":"Name CommitmentProtocolCleartextInterpreter CommitmentProtocolCleartextInterpreter CommitmentProtocolCleartextInterpreter","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/-hashed-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedObject / HashedObject HashedObject \u00b6 [jvm] Content fun HashedObject ()","title":" hashed object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/-hashed-object/#hashedobject","text":"[jvm] Content fun HashedObject ()","title":"HashedObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedObject / query query \u00b6 [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Hashed","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/query/#query","text":"[jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): Hashed","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedObject / update update \u00b6 [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/update/#update","text":"[jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedVectorObject HashedVectorObject \u00b6 [jvm] inner class HashedVectorObject ( size : Int , defaultValue : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary size [jvm] val size : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/#hashedvectorobject","text":"[jvm] inner class HashedVectorObject ( size : Int , defaultValue : Hashed ) : CommitmentProtocolCleartextInterpreter.HashedObject","title":"HashedVectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/#properties","text":"Name Summary size [jvm] val size : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/-hashed-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedVectorObject / HashedVectorObject HashedVectorObject \u00b6 [jvm] Content fun HashedVectorObject (size: Int , defaultValue: Hashed )","title":" hashed vector object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/-hashed-vector-object/#hashedvectorobject","text":"[jvm] Content fun HashedVectorObject (size: Int , defaultValue: Hashed )","title":"HashedVectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedVectorObject / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): Hashed","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedVectorObject / size size \u00b6 [jvm] Content val size : Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/size/#size","text":"[jvm] Content val size : Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolCleartextInterpreter / HashedVectorObject / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter CommitmentProtocolHashReplicaInterpreter \u00b6 [jvm] class CommitmentProtocolHashReplicaInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolHashReplicaInterpreter.CommitmentObject > Commitment protocol interpreter for hash replica hosts. Constructors \u00b6 Name Summary CommitmentProtocolHashReplicaInterpreter [jvm] fun CommitmentProtocolHashReplicaInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime ) Types \u00b6 Name Summary CommitmentCell [jvm] Content inner class CommitmentCell ( bytes : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject CommitmentObject [jvm] Content abstract class CommitmentObject CommitmentVector [jvm] Content inner class CommitmentVector ( size : Int , defaultValue : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject Functions \u00b6 Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolHashReplicaInterpreter.CommitmentObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolHashReplicaInterpreter.CommitmentObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): CommitmentProtocolHashReplicaInterpreter.CommitmentObject open override fun getNullObject (protocol: Protocol): CommitmentProtocolHashReplicaInterpreter.CommitmentObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runRead [jvm] Content fun runRead (read: ReadNode): List < Byte > runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/#commitmentprotocolhashreplicainterpreter","text":"[jvm] class CommitmentProtocolHashReplicaInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < CommitmentProtocolHashReplicaInterpreter.CommitmentObject > Commitment protocol interpreter for hash replica hosts.","title":"CommitmentProtocolHashReplicaInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/#constructors","text":"Name Summary CommitmentProtocolHashReplicaInterpreter [jvm] fun CommitmentProtocolHashReplicaInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/#types","text":"Name Summary CommitmentCell [jvm] Content inner class CommitmentCell ( bytes : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject CommitmentObject [jvm] Content abstract class CommitmentObject CommitmentVector [jvm] Content inner class CommitmentVector ( size : Int , defaultValue : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolHashReplicaInterpreter.CommitmentObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolHashReplicaInterpreter.CommitmentObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): CommitmentProtocolHashReplicaInterpreter.CommitmentObject open override fun getNullObject (protocol: Protocol): CommitmentProtocolHashReplicaInterpreter.CommitmentObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runRead [jvm] Content fun runRead (read: ReadNode): List < Byte > runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/#properties","text":"Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-protocol-hash-replica-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentProtocolHashReplicaInterpreter CommitmentProtocolHashReplicaInterpreter \u00b6 [jvm] Content fun CommitmentProtocolHashReplicaInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":" commitment protocol hash replica interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-protocol-hash-replica-interpreter/#commitmentprotocolhashreplicainterpreter","text":"[jvm] Content fun CommitmentProtocolHashReplicaInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":"CommitmentProtocolHashReplicaInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/available-protocols/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / availableProtocols availableProtocols \u00b6 [jvm] Content open override val availableProtocols : Set","title":"Available protocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/available-protocols/#availableprotocols","text":"[jvm] Content open override val availableProtocols : Set","title":"availableProtocols"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / buildObject buildObject \u00b6 [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/build-object/#buildobject","text":"[jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / getNullObject getNullObject \u00b6 [jvm] Content open override fun getNullObject (): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/get-null-object/#getnullobject","text":"[jvm] Content open override fun getNullObject (): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/pop-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / popContext popContext \u00b6 [jvm] Content open suspend override fun popContext ()","title":"Pop context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/pop-context/#popcontext","text":"[jvm] Content open suspend override fun popContext ()","title":"popContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/push-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / pushContext pushContext \u00b6 [jvm] Content open suspend override fun pushContext ()","title":"Push context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/push-context/#pushcontext","text":"[jvm] Content open suspend override fun pushContext ()","title":"pushContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / runGuard runGuard \u00b6 [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-guard/#runguard","text":"[jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / runLet runLet \u00b6 [jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-let/#runlet","text":"[jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / runOutput runOutput \u00b6 [jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-output/#runoutput","text":"[jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-read/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / runRead runRead \u00b6 [jvm] Content fun runRead (read: ReadNode): List < Byte >","title":"Run read"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-read/#runread","text":"[jvm] Content fun runRead (read: ReadNode): List < Byte >","title":"runRead"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / runReceive runReceive \u00b6 [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-receive/#runreceive","text":"[jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runReceive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / runSend runSend \u00b6 [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-send/#runsend","text":"[jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runSend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / runUpdate runUpdate \u00b6 [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-update/#runupdate","text":"[jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentCell CommitmentCell \u00b6 [jvm] inner class CommitmentCell ( bytes : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte > toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary bytes [jvm] var bytes : List < Byte >","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/#commitmentcell","text":"[jvm] inner class CommitmentCell ( bytes : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"CommitmentCell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte > toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/#properties","text":"Name Summary bytes [jvm] var bytes : List < Byte >","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/-commitment-cell/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentCell / CommitmentCell CommitmentCell \u00b6 [jvm] Content fun CommitmentCell (bytes: List < Byte >)","title":" commitment cell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/-commitment-cell/#commitmentcell","text":"[jvm] Content fun CommitmentCell (bytes: List < Byte >)","title":"CommitmentCell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/bytes/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentCell / bytes bytes \u00b6 [jvm] Content var bytes : List < Byte >","title":"Bytes"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/bytes/#bytes","text":"[jvm] Content var bytes : List < Byte >","title":"bytes"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentCell / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte >","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte >","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentCell / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentObject CommitmentObject \u00b6 [jvm] abstract class CommitmentObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): List < Byte > toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List ) Inheritors \u00b6 Name CommitmentProtocolHashReplicaInterpreter CommitmentProtocolHashReplicaInterpreter","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/#commitmentobject","text":"[jvm] abstract class CommitmentObject","title":"CommitmentObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): List < Byte > toString [jvm] Content open fun toString (): String update [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/#inheritors","text":"Name CommitmentProtocolHashReplicaInterpreter CommitmentProtocolHashReplicaInterpreter","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/-commitment-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentObject / CommitmentObject CommitmentObject \u00b6 [jvm] Content fun CommitmentObject ()","title":" commitment object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/-commitment-object/#commitmentobject","text":"[jvm] Content fun CommitmentObject ()","title":"CommitmentObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentObject / query query \u00b6 [jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): List < Byte >","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/query/#query","text":"[jvm] Content abstract fun query (query: QueryNameNode, arguments: List ): List < Byte >","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentObject / update update \u00b6 [jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/update/#update","text":"[jvm] Content abstract fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentVector CommitmentVector \u00b6 [jvm] inner class CommitmentVector ( size : Int , defaultValue : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte > toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List ) Properties \u00b6 Name Summary size [jvm] val size : Int","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/#commitmentvector","text":"[jvm] inner class CommitmentVector ( size : Int , defaultValue : List < Byte >) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject","title":"CommitmentVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int query [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte > toString [jvm] Content open fun toString (): String update [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/#properties","text":"Name Summary size [jvm] val size : Int","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/-commitment-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentVector / CommitmentVector CommitmentVector \u00b6 [jvm] Content fun CommitmentVector (size: Int , defaultValue: List < Byte >)","title":" commitment vector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/-commitment-vector/#commitmentvector","text":"[jvm] Content fun CommitmentVector (size: Int , defaultValue: List < Byte >)","title":"CommitmentVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/query/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentVector / query query \u00b6 [jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte >","title":"Query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/query/#query","text":"[jvm] Content open override fun query (query: QueryNameNode, arguments: List ): List < Byte >","title":"query"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentVector / size size \u00b6 [jvm] Content val size : Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/size/#size","text":"[jvm] Content val size : Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolHashReplicaInterpreter / CommitmentVector / update update \u00b6 [jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"Update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/update/#update","text":"[jvm] Content open override fun update (update: UpdateNameNode, arguments: List )","title":"update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-interpreter-factory/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolInterpreterFactory CommitmentProtocolInterpreterFactory \u00b6 [jvm] object CommitmentProtocolInterpreterFactory : ProtocolBackend Functions \u00b6 Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-interpreter-factory/#commitmentprotocolinterpreterfactory","text":"[jvm] object CommitmentProtocolInterpreterFactory : ProtocolBackend","title":"CommitmentProtocolInterpreterFactory"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-interpreter-factory/#functions","text":"Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-interpreter-factory/build-protocol-interpreters/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / CommitmentProtocolInterpreterFactory / buildProtocolInterpreters buildProtocolInterpreters \u00b6 [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"Build protocol interpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-commitment-protocol-interpreter-factory/build-protocol-interpreters/#buildprotocolinterpreters","text":"[jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"buildProtocolInterpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo HashInfo \u00b6 [jvm] data class HashInfo ( hash : List < Byte >, nonce : List < Byte >) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): List < Byte > component2 [jvm] Content operator fun component2 (): List < Byte > copy [jvm] Content fun copy (hash: List < Byte >, nonce: List < Byte >): HashInfo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String verify [jvm] Content fun verify (data: List < Byte >): Boolean Properties \u00b6 Name Summary hash [jvm] val hash : List < Byte > nonce [jvm] val nonce : List < Byte >","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/#hashinfo","text":"[jvm] data class HashInfo ( hash : List < Byte >, nonce : List < Byte >)","title":"HashInfo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): List < Byte > component2 [jvm] Content operator fun component2 (): List < Byte > copy [jvm] Content fun copy (hash: List < Byte >, nonce: List < Byte >): HashInfo equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String verify [jvm] Content fun verify (data: List < Byte >): Boolean","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/#properties","text":"Name Summary hash [jvm] val hash : List < Byte > nonce [jvm] val nonce : List < Byte >","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/-hash-info/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo / HashInfo HashInfo \u00b6 [jvm] Content fun HashInfo (hash: List < Byte >, nonce: List < Byte >)","title":" hash info"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/-hash-info/#hashinfo","text":"[jvm] Content fun HashInfo (hash: List < Byte >, nonce: List < Byte >)","title":"HashInfo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo / component1 component1 \u00b6 [jvm] Content operator fun component1 (): List < Byte >","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/component1/#component1","text":"[jvm] Content operator fun component1 (): List < Byte >","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo / component2 component2 \u00b6 [jvm] Content operator fun component2 (): List < Byte >","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/component2/#component2","text":"[jvm] Content operator fun component2 (): List < Byte >","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo / copy copy \u00b6 [jvm] Content fun copy (hash: List < Byte >, nonce: List < Byte >): HashInfo","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/copy/#copy","text":"[jvm] Content fun copy (hash: List < Byte >, nonce: List < Byte >): HashInfo","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/hash/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo / hash hash \u00b6 [jvm] Content val hash : List < Byte >","title":"Hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/hash/#hash","text":"[jvm] Content val hash : List < Byte >","title":"hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/nonce/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo / nonce nonce \u00b6 [jvm] Content val nonce : List < Byte >","title":"Nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/nonce/#nonce","text":"[jvm] Content val nonce : List < Byte >","title":"nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/verify/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / HashInfo / verify verify \u00b6 [jvm] Content fun verify (data: List < Byte >): Boolean","title":"Verify"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hash-info/verify/#verify","text":"[jvm] Content fun verify (data: List < Byte >): Boolean","title":"verify"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashed Hashed \u00b6 [jvm] data class Hashed < T >( value : T , info : HashInfo ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): T component2 [jvm] Content operator fun component2 (): HashInfo copy [jvm] Content fun copy (value: T , info: HashInfo ): Hashed < T > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary info [jvm] val info : HashInfo value [jvm] val value : T","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/#hashed","text":"[jvm] data class Hashed < T >( value : T , info : HashInfo )","title":"Hashed"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): T component2 [jvm] Content operator fun component2 (): HashInfo copy [jvm] Content fun copy (value: T , info: HashInfo ): Hashed < T > equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/#properties","text":"Name Summary info [jvm] val info : HashInfo value [jvm] val value : T","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/-hashed/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashed / Hashed Hashed \u00b6 [jvm] Content fun < T > Hashed (value: T , info: HashInfo )","title":" hashed"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/-hashed/#hashed","text":"[jvm] Content fun < T > Hashed (value: T , info: HashInfo )","title":"Hashed"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashed / component1 component1 \u00b6 [jvm] Content operator fun component1 (): T","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/component1/#component1","text":"[jvm] Content operator fun component1 (): T","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/component2/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashed / component2 component2 \u00b6 [jvm] Content operator fun component2 (): HashInfo","title":"Component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/component2/#component2","text":"[jvm] Content operator fun component2 (): HashInfo","title":"component2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashed / copy copy \u00b6 [jvm] Content fun copy (value: T , info: HashInfo ): Hashed < T >","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/copy/#copy","text":"[jvm] Content fun copy (value: T , info: HashInfo ): Hashed < T >","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/info/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashed / info info \u00b6 [jvm] Content val info : HashInfo","title":"Info"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/info/#info","text":"[jvm] Content val info : HashInfo","title":"info"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashed / value value \u00b6 [jvm] Content val value : T","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashed/value/#value","text":"[jvm] Content val value : T","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashing/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashing Hashing \u00b6 [jvm] object Hashing Functions \u00b6 Name Summary deterministicHash [jvm] Content fun deterministicHash (v: Value): HashInfo [jvm] Content fun deterministicHash (data: List < Byte >): HashInfo More info Deterministic hash for storing literals. equals [jvm] Content open operator fun equals (other: Any ?): Boolean generateHash [jvm] Content fun generateHash (c: PlaintextClassObject ): HashInfo fun generateHash (v: Value): HashInfo hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashing/#hashing","text":"[jvm] object Hashing","title":"Hashing"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashing/#functions","text":"Name Summary deterministicHash [jvm] Content fun deterministicHash (v: Value): HashInfo [jvm] Content fun deterministicHash (data: List < Byte >): HashInfo More info Deterministic hash for storing literals. equals [jvm] Content open operator fun equals (other: Any ?): Boolean generateHash [jvm] Content fun generateHash (c: PlaintextClassObject ): HashInfo fun generateHash (v: Value): HashInfo hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashing/deterministic-hash/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashing / deterministicHash deterministicHash \u00b6 [jvm] Content fun deterministicHash (data: List < Byte >): HashInfo More info Deterministic hash for storing literals. [jvm] Content fun deterministicHash (v: Value): HashInfo","title":"Deterministic hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashing/deterministic-hash/#deterministichash","text":"[jvm] Content fun deterministicHash (data: List < Byte >): HashInfo More info Deterministic hash for storing literals. [jvm] Content fun deterministicHash (v: Value): HashInfo","title":"deterministicHash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashing/generate-hash/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.commitment / Hashing / generateHash generateHash \u00b6 [jvm] Content fun generateHash (v: Value): HashInfo fun generateHash (c: PlaintextClassObject ): HashInfo","title":"Generate hash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.commitment/-hashing/generate-hash/#generatehash","text":"[jvm] Content fun generateHash (v: Value): HashInfo fun generateHash (c: PlaintextClassObject ): HashInfo","title":"generateHash"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp Package edu.cornell.cs.apl.viaduct.backend.zkp \u00b6 Types \u00b6 Name Summary LibsnarkJNI [jvm] Content class LibsnarkJNI R1CS [jvm] Content class R1CS ( isProver : Boolean , wire : WireTerm , is_eq_to : Long ) ZKPInit [jvm] Content class ZKPInit ZKPObject [jvm] Content sealed class ZKPObject ZKPProtocolInterpreterFactory [jvm] Content object ZKPProtocolInterpreterFactory : ProtocolBackend ZKPProverInterpreter [jvm] Content class ZKPProverInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject > ZKPVerifierInterpreter [jvm] Content class ZKPVerifierInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject > Functions \u00b6 Name Summary toR1CS [jvm] Content fun WireTerm . toR1CS (isProver: Boolean , is_eq_to: Int ): R1CS ZKPMuxPostprocessor [jvm] Content fun ZKPMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/#package-educornellcsaplviaductbackendzkp","text":"","title":"Package edu.cornell.cs.apl.viaduct.backend.zkp"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/#types","text":"Name Summary LibsnarkJNI [jvm] Content class LibsnarkJNI R1CS [jvm] Content class R1CS ( isProver : Boolean , wire : WireTerm , is_eq_to : Long ) ZKPInit [jvm] Content class ZKPInit ZKPObject [jvm] Content sealed class ZKPObject ZKPProtocolInterpreterFactory [jvm] Content object ZKPProtocolInterpreterFactory : ProtocolBackend ZKPProverInterpreter [jvm] Content class ZKPProverInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject > ZKPVerifierInterpreter [jvm] Content class ZKPVerifierInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject >","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/#functions","text":"Name Summary toR1CS [jvm] Content fun WireTerm . toR1CS (isProver: Boolean , is_eq_to: Int ): R1CS ZKPMuxPostprocessor [jvm] Content fun ZKPMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-mux-postprocessor/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPMuxPostprocessor ZKPMuxPostprocessor \u00b6 [jvm] Content fun ZKPMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor","title":" z k p mux postprocessor"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-mux-postprocessor/#zkpmuxpostprocessor","text":"[jvm] Content fun ZKPMuxPostprocessor (protocolAssignment: (FunctionName, Variable) -> Protocol): ProgramPostprocessor","title":"ZKPMuxPostprocessor"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/to-r1-c-s/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / toR1CS toR1CS \u00b6 [jvm] Content fun WireTerm . toR1CS (isProver: Boolean , is_eq_to: Int ): R1CS","title":"To r1 c s"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/to-r1-c-s/#tor1cs","text":"[jvm] Content fun WireTerm . toR1CS (isProver: Boolean , is_eq_to: Int ): R1CS","title":"toR1CS"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / LibsnarkJNI LibsnarkJNI \u00b6 [jvm] class LibsnarkJNI Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int sayHello [jvm] Content external fun sayHello () toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/#libsnarkjni","text":"[jvm] class LibsnarkJNI","title":"LibsnarkJNI"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int sayHello [jvm] Content external fun sayHello () toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/-libsnark-j-n-i/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / LibsnarkJNI / LibsnarkJNI LibsnarkJNI \u00b6 [jvm] Content fun LibsnarkJNI ()","title":" libsnark j n i"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/-libsnark-j-n-i/#libsnarkjni","text":"[jvm] Content fun LibsnarkJNI ()","title":"LibsnarkJNI"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/say-hello/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / LibsnarkJNI / sayHello sayHello \u00b6 [jvm] Content external fun sayHello ()","title":"Say hello"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/say-hello/#sayhello","text":"[jvm] Content external fun sayHello ()","title":"sayHello"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/-companion/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / LibsnarkJNI / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-libsnark-j-n-i/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS R1CS \u00b6 [jvm] class R1CS ( isProver : Boolean , wire : WireTerm , is_eq_to : Long ) Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean genKeypair [jvm] Content fun genKeypair (): Keypair hashCode [jvm] Content open fun hashCode (): Int makeProof [jvm] Content fun makeProof (pk: ByteBuf ): ByteBuf populatePrimaryInputs [jvm] Content fun WireTerm . populatePrimaryInputs () setupAuxInputs [jvm] Content fun WireTerm . setupAuxInputs () toString [jvm] Content open fun toString (): String value [jvm] Content fun WireTerm . value (): Var verifyProof [jvm] Content fun verifyProof (vk: ByteBuf , pf: ByteBuf ): Boolean Properties \u00b6 Name Summary auxInputHashes [jvm] val auxInputHashes : MutableMap < Int , VarArray > auxInputNonces [jvm] val auxInputNonces : MutableMap < Int , VarArray > auxInputs [jvm] val auxInputs : MutableMap < Int , Var > is_eq_to [jvm] val is_eq_to : Long isProver [jvm] val isProver : Boolean output [jvm] var output : Var ? = null primaryInputs [jvm] val primaryInputs : MutableMap < Int , Var > r1cs [jvm] val r1cs : R1CSInstance wire [jvm] val wire : WireTerm","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/#r1cs","text":"[jvm] class R1CS ( isProver : Boolean , wire : WireTerm , is_eq_to : Long )","title":"R1CS"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean genKeypair [jvm] Content fun genKeypair (): Keypair hashCode [jvm] Content open fun hashCode (): Int makeProof [jvm] Content fun makeProof (pk: ByteBuf ): ByteBuf populatePrimaryInputs [jvm] Content fun WireTerm . populatePrimaryInputs () setupAuxInputs [jvm] Content fun WireTerm . setupAuxInputs () toString [jvm] Content open fun toString (): String value [jvm] Content fun WireTerm . value (): Var verifyProof [jvm] Content fun verifyProof (vk: ByteBuf , pf: ByteBuf ): Boolean","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/#properties","text":"Name Summary auxInputHashes [jvm] val auxInputHashes : MutableMap < Int , VarArray > auxInputNonces [jvm] val auxInputNonces : MutableMap < Int , VarArray > auxInputs [jvm] val auxInputs : MutableMap < Int , Var > is_eq_to [jvm] val is_eq_to : Long isProver [jvm] val isProver : Boolean output [jvm] var output : Var ? = null primaryInputs [jvm] val primaryInputs : MutableMap < Int , Var > r1cs [jvm] val r1cs : R1CSInstance wire [jvm] val wire : WireTerm","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/-r1-c-s/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / R1CS R1CS \u00b6 [jvm] Content fun R1CS (isProver: Boolean , wire: WireTerm , is_eq_to: Long )","title":" r1 c s"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/-r1-c-s/#r1cs","text":"[jvm] Content fun R1CS (isProver: Boolean , wire: WireTerm , is_eq_to: Long )","title":"R1CS"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/aux-input-hashes/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / auxInputHashes auxInputHashes \u00b6 [jvm] Content val auxInputHashes : MutableMap < Int , VarArray >","title":"Aux input hashes"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/aux-input-hashes/#auxinputhashes","text":"[jvm] Content val auxInputHashes : MutableMap < Int , VarArray >","title":"auxInputHashes"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/aux-input-nonces/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / auxInputNonces auxInputNonces \u00b6 [jvm] Content val auxInputNonces : MutableMap < Int , VarArray >","title":"Aux input nonces"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/aux-input-nonces/#auxinputnonces","text":"[jvm] Content val auxInputNonces : MutableMap < Int , VarArray >","title":"auxInputNonces"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/aux-inputs/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / auxInputs auxInputs \u00b6 [jvm] Content val auxInputs : MutableMap < Int , Var >","title":"Aux inputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/aux-inputs/#auxinputs","text":"[jvm] Content val auxInputs : MutableMap < Int , Var >","title":"auxInputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/gen-keypair/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / genKeypair genKeypair \u00b6 [jvm] Content fun genKeypair (): Keypair","title":"Gen keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/gen-keypair/#genkeypair","text":"[jvm] Content fun genKeypair (): Keypair","title":"genKeypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/is-prover/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / isProver isProver \u00b6 [jvm] Content val isProver : Boolean","title":"Is prover"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/is-prover/#isprover","text":"[jvm] Content val isProver : Boolean","title":"isProver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/is_eq_to/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / is_eq_to is_eq_to \u00b6 [jvm] Content val is_eq_to : Long","title":"Is eq to"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/is_eq_to/#is_eq_to","text":"[jvm] Content val is_eq_to : Long","title":"is_eq_to"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/make-proof/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / makeProof makeProof \u00b6 [jvm] Content fun makeProof (pk: ByteBuf ): ByteBuf","title":"Make proof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/make-proof/#makeproof","text":"[jvm] Content fun makeProof (pk: ByteBuf ): ByteBuf","title":"makeProof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / output output \u00b6 [jvm] Content var output : Var ? = null","title":"Output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/output/#output","text":"[jvm] Content var output : Var ? = null","title":"output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/populate-primary-inputs/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / populatePrimaryInputs populatePrimaryInputs \u00b6 [jvm] Content fun WireTerm . populatePrimaryInputs ()","title":"Populate primary inputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/populate-primary-inputs/#populateprimaryinputs","text":"[jvm] Content fun WireTerm . populatePrimaryInputs ()","title":"populatePrimaryInputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/primary-inputs/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / primaryInputs primaryInputs \u00b6 [jvm] Content val primaryInputs : MutableMap < Int , Var >","title":"Primary inputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/primary-inputs/#primaryinputs","text":"[jvm] Content val primaryInputs : MutableMap < Int , Var >","title":"primaryInputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/r1cs/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / r1cs r1cs \u00b6 [jvm] Content val r1cs : R1CSInstance","title":"R1cs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/r1cs/#r1cs","text":"[jvm] Content val r1cs : R1CSInstance","title":"r1cs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/setup-aux-inputs/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / setupAuxInputs setupAuxInputs \u00b6 [jvm] Content fun WireTerm . setupAuxInputs ()","title":"Setup aux inputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/setup-aux-inputs/#setupauxinputs","text":"[jvm] Content fun WireTerm . setupAuxInputs ()","title":"setupAuxInputs"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / value value \u00b6 [jvm] Content fun WireTerm . value (): Var","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/value/#value","text":"[jvm] Content fun WireTerm . value (): Var","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/verify-proof/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / verifyProof verifyProof \u00b6 [jvm] Content fun verifyProof (vk: ByteBuf , pf: ByteBuf ): Boolean","title":"Verify proof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/verify-proof/#verifyproof","text":"[jvm] Content fun verifyProof (vk: ByteBuf , pf: ByteBuf ): Boolean","title":"verifyProof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/wire/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / R1CS / wire wire \u00b6 [jvm] Content val wire : WireTerm","title":"Wire"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-r1-c-s/wire/#wire","text":"[jvm] Content val wire : WireTerm","title":"wire"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPInit ZKPInit \u00b6 [jvm] class ZKPInit Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/#zkpinit","text":"[jvm] class ZKPInit","title":"ZKPInit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/-z-k-p-init/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPInit / ZKPInit ZKPInit \u00b6 [jvm] Content fun ZKPInit ()","title":" z k p init"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/-z-k-p-init/#zkpinit","text":"[jvm] Content fun ZKPInit ()","title":"ZKPInit"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/-companion/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPInit / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-init/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject ZKPObject \u00b6 [jvm] sealed class ZKPObject Types \u00b6 Name Summary ZKPImmutableCell [jvm] Content data class ZKPImmutableCell ( value : WireTerm ) : ZKPObject ZKPMutableCell [jvm] Content data class ZKPMutableCell ( value : WireTerm ) : ZKPObject ZKPNullObject [jvm] Content object ZKPNullObject : ZKPObject ZKPVectorObject [jvm] Content class ZKPVectorObject ( size : Int , defaultValue : Value, wireGenerator : WireGenerator ) : ZKPObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name ZKPObject ZKPObject ZKPObject ZKPObject","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/#zkpobject","text":"[jvm] sealed class ZKPObject","title":"ZKPObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/#types","text":"Name Summary ZKPImmutableCell [jvm] Content data class ZKPImmutableCell ( value : WireTerm ) : ZKPObject ZKPMutableCell [jvm] Content data class ZKPMutableCell ( value : WireTerm ) : ZKPObject ZKPNullObject [jvm] Content object ZKPNullObject : ZKPObject ZKPVectorObject [jvm] Content class ZKPVectorObject ( size : Int , defaultValue : Value, wireGenerator : WireGenerator ) : ZKPObject","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/#inheritors","text":"Name ZKPObject ZKPObject ZKPObject ZKPObject","title":"Inheritors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPImmutableCell ZKPImmutableCell \u00b6 [jvm] data class ZKPImmutableCell ( value : WireTerm ) : ZKPObject Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): WireTerm copy [jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPImmutableCell equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary value [jvm] val value : WireTerm","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/#zkpimmutablecell","text":"[jvm] data class ZKPImmutableCell ( value : WireTerm ) : ZKPObject","title":"ZKPImmutableCell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): WireTerm copy [jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPImmutableCell equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/#properties","text":"Name Summary value [jvm] val value : WireTerm","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/-z-k-p-immutable-cell/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPImmutableCell / ZKPImmutableCell ZKPImmutableCell \u00b6 [jvm] Content fun ZKPImmutableCell (value: WireTerm )","title":" z k p immutable cell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/-z-k-p-immutable-cell/#zkpimmutablecell","text":"[jvm] Content fun ZKPImmutableCell (value: WireTerm )","title":"ZKPImmutableCell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPImmutableCell / component1 component1 \u00b6 [jvm] Content operator fun component1 (): WireTerm","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/component1/#component1","text":"[jvm] Content operator fun component1 (): WireTerm","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPImmutableCell / copy copy \u00b6 [jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPImmutableCell","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/copy/#copy","text":"[jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPImmutableCell","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPImmutableCell / value value \u00b6 [jvm] Content val value : WireTerm","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/value/#value","text":"[jvm] Content val value : WireTerm","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPMutableCell ZKPMutableCell \u00b6 [jvm] data class ZKPMutableCell ( value : WireTerm ) : ZKPObject Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): WireTerm copy [jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPMutableCell equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary value [jvm] var value : WireTerm","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/#zkpmutablecell","text":"[jvm] data class ZKPMutableCell ( value : WireTerm ) : ZKPObject","title":"ZKPMutableCell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): WireTerm copy [jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPMutableCell equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/#properties","text":"Name Summary value [jvm] var value : WireTerm","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/-z-k-p-mutable-cell/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPMutableCell / ZKPMutableCell ZKPMutableCell \u00b6 [jvm] Content fun ZKPMutableCell (value: WireTerm )","title":" z k p mutable cell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/-z-k-p-mutable-cell/#zkpmutablecell","text":"[jvm] Content fun ZKPMutableCell (value: WireTerm )","title":"ZKPMutableCell"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/component1/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPMutableCell / component1 component1 \u00b6 [jvm] Content operator fun component1 (): WireTerm","title":"Component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/component1/#component1","text":"[jvm] Content operator fun component1 (): WireTerm","title":"component1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/copy/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPMutableCell / copy copy \u00b6 [jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPMutableCell","title":"Copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/copy/#copy","text":"[jvm] Content fun copy (value: WireTerm ): ZKPObject.ZKPMutableCell","title":"copy"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPMutableCell / value value \u00b6 [jvm] Content var value : WireTerm","title":"Value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/value/#value","text":"[jvm] Content var value : WireTerm","title":"value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPNullObject ZKPNullObject \u00b6 [jvm] object ZKPNullObject : ZKPObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-null-object/#zkpnullobject","text":"[jvm] object ZKPNullObject : ZKPObject","title":"ZKPNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-null-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPVectorObject ZKPVectorObject \u00b6 [jvm] class ZKPVectorObject ( size : Int , defaultValue : Value, wireGenerator : WireGenerator ) : ZKPObject Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary defaultValue [jvm] val defaultValue : Value gates [jvm] val gates : ArrayList < WireTerm > size [jvm] val size : Int wireGenerator [jvm] val wireGenerator : WireGenerator","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/#zkpvectorobject","text":"[jvm] class ZKPVectorObject ( size : Int , defaultValue : Value, wireGenerator : WireGenerator ) : ZKPObject","title":"ZKPVectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/#properties","text":"Name Summary defaultValue [jvm] val defaultValue : Value gates [jvm] val gates : ArrayList < WireTerm > size [jvm] val size : Int wireGenerator [jvm] val wireGenerator : WireGenerator","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/-z-k-p-vector-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPVectorObject / ZKPVectorObject ZKPVectorObject \u00b6 [jvm] Content fun ZKPVectorObject (size: Int , defaultValue: Value, wireGenerator: WireGenerator )","title":" z k p vector object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/-z-k-p-vector-object/#zkpvectorobject","text":"[jvm] Content fun ZKPVectorObject (size: Int , defaultValue: Value, wireGenerator: WireGenerator )","title":"ZKPVectorObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/default-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPVectorObject / defaultValue defaultValue \u00b6 [jvm] Content val defaultValue : Value","title":"Default value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/default-value/#defaultvalue","text":"[jvm] Content val defaultValue : Value","title":"defaultValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/gates/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPVectorObject / gates gates \u00b6 [jvm] Content val gates : ArrayList < WireTerm >","title":"Gates"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/gates/#gates","text":"[jvm] Content val gates : ArrayList < WireTerm >","title":"gates"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPVectorObject / size size \u00b6 [jvm] Content val size : Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/size/#size","text":"[jvm] Content val size : Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/wire-generator/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPObject / ZKPVectorObject / wireGenerator wireGenerator \u00b6 [jvm] Content val wireGenerator : WireGenerator","title":"Wire generator"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/wire-generator/#wiregenerator","text":"[jvm] Content val wireGenerator : WireGenerator","title":"wireGenerator"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-protocol-interpreter-factory/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProtocolInterpreterFactory ZKPProtocolInterpreterFactory \u00b6 [jvm] object ZKPProtocolInterpreterFactory : ProtocolBackend Functions \u00b6 Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-protocol-interpreter-factory/#zkpprotocolinterpreterfactory","text":"[jvm] object ZKPProtocolInterpreterFactory : ProtocolBackend","title":"ZKPProtocolInterpreterFactory"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-protocol-interpreter-factory/#functions","text":"Name Summary buildProtocolInterpreters [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter > equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-protocol-interpreter-factory/build-protocol-interpreters/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProtocolInterpreterFactory / buildProtocolInterpreters buildProtocolInterpreters \u00b6 [jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"Build protocol interpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-protocol-interpreter-factory/build-protocol-interpreters/#buildprotocolinterpreters","text":"[jvm] Content open override fun buildProtocolInterpreters (host: Host, program: ProgramNode, protocols: Set , protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime , connectionMap: Map HostAddress >): Iterable < ProtocolInterpreter >","title":"buildProtocolInterpreters"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter ZKPProverInterpreter \u00b6 [jvm] class ZKPProverInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject > Functions \u00b6 Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ZKPObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ZKPObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): ZKPObject open override fun getNullObject (protocol: Protocol): ZKPObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode runtime [jvm] val runtime : ViaductProcessRuntime","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/#zkpproverinterpreter","text":"[jvm] class ZKPProverInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject >","title":"ZKPProverInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ZKPObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ZKPObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): ZKPObject open override fun getNullObject (protocol: Protocol): ZKPObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/#properties","text":"Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode runtime [jvm] val runtime : ViaductProcessRuntime","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/-z-k-p-prover-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / ZKPProverInterpreter ZKPProverInterpreter \u00b6 [jvm] Content fun ZKPProverInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":" z k p prover interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/-z-k-p-prover-interpreter/#zkpproverinterpreter","text":"[jvm] Content fun ZKPProverInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":"ZKPProverInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / buildObject buildObject \u00b6 [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/build-object/#buildobject","text":"[jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / getNullObject getNullObject \u00b6 [jvm] Content open override fun getNullObject (): ZKPObject","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/get-null-object/#getnullobject","text":"[jvm] Content open override fun getNullObject (): ZKPObject","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/pop-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / popContext popContext \u00b6 [jvm] Content open suspend override fun popContext ()","title":"Pop context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/pop-context/#popcontext","text":"[jvm] Content open suspend override fun popContext ()","title":"popContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/push-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / pushContext pushContext \u00b6 [jvm] Content open suspend override fun pushContext ()","title":"Push context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/push-context/#pushcontext","text":"[jvm] Content open suspend override fun pushContext ()","title":"pushContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / runGuard runGuard \u00b6 [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-guard/#runguard","text":"[jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / runLet runLet \u00b6 [jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-let/#runlet","text":"[jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / runOutput runOutput \u00b6 [jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-output/#runoutput","text":"[jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / runReceive runReceive \u00b6 [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-receive/#runreceive","text":"[jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runReceive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / runSend runSend \u00b6 [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-send/#runsend","text":"[jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runSend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / runUpdate runUpdate \u00b6 [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-update/#runupdate","text":"[jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/runtime/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPProverInterpreter / runtime runtime \u00b6 [jvm] Content val runtime : ViaductProcessRuntime","title":"Runtime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-prover-interpreter/runtime/#runtime","text":"[jvm] Content val runtime : ViaductProcessRuntime","title":"runtime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter ZKPVerifierInterpreter \u00b6 [jvm] class ZKPVerifierInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject > Functions \u00b6 Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ZKPObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ZKPObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): ZKPObject open override fun getNullObject (protocol: Protocol): ZKPObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode protocolAnalysis [jvm] val protocolAnalysis : ProtocolAnalysis runtime [jvm] val runtime : ViaductProcessRuntime","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/#zkpverifierinterpreter","text":"[jvm] class ZKPVerifierInterpreter ( program : ProgramNode, protocolAnalysis : ProtocolAnalysis, runtime : ViaductProcessRuntime ) : SingleProtocolInterpreter < ZKPObject >","title":"ZKPVerifierInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/#functions","text":"Name Summary buildExpressionObject [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject open suspend override fun buildExpressionObject (protocol: Protocol, expr: AtomicExpressionNode): ZKPObject buildObject [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject open suspend override fun buildObject (protocol: Protocol, className: ClassName, typeArguments: List , arguments: List ): ZKPObject equals [jvm] Content open operator fun equals (other: Any ?): Boolean getContextMarker [jvm] Content open override fun getContextMarker (): Int getNullObject [jvm] Content open override fun getNullObject (): ZKPObject open override fun getNullObject (protocol: Protocol): ZKPObject hashCode [jvm] Content open fun hashCode (): Int popContext [jvm] Content open suspend override fun popContext () popFunctionContext [jvm] Content open suspend override fun popFunctionContext () pushContext [jvm] Content open suspend override fun pushContext () pushFunctionContext [jvm] Content open suspend override fun pushFunctionContext (arguments: PersistentMap Pair \\ >) restoreContext [jvm] Content open suspend override fun restoreContext (marker: Int ) runGuard [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value open suspend override fun runGuard (protocol: Protocol, expr: AtomicExpressionNode): Value runLet [jvm] Content open suspend override fun runLet (stmt: LetNode) open suspend override fun runLet (protocol: Protocol, stmt: LetNode) runOutput [jvm] Content open suspend override fun runOutput (stmt: OutputNode) open suspend override fun runOutput (protocol: Protocol, stmt: OutputNode) runReceive [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSend [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication) runSimpleStatement [jvm] Content open suspend override fun runSimpleStatement (protocol: Protocol, stmt: SimpleStatementNode) runUpdate [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode) open suspend override fun runUpdate (protocol: Protocol, stmt: UpdateNode) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/#properties","text":"Name Summary availableProtocols [jvm] open override val availableProtocols : Set program [jvm] val program : ProgramNode protocolAnalysis [jvm] val protocolAnalysis : ProtocolAnalysis runtime [jvm] val runtime : ViaductProcessRuntime","title":"Properties"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/-z-k-p-verifier-interpreter/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / ZKPVerifierInterpreter ZKPVerifierInterpreter \u00b6 [jvm] Content fun ZKPVerifierInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":" z k p verifier interpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/-z-k-p-verifier-interpreter/#zkpverifierinterpreter","text":"[jvm] Content fun ZKPVerifierInterpreter (program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime )","title":"ZKPVerifierInterpreter"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/build-expression-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / buildExpressionObject buildExpressionObject \u00b6 [jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject","title":"Build expression object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/build-expression-object/#buildexpressionobject","text":"[jvm] Content open suspend override fun buildExpressionObject (expr: AtomicExpressionNode): ZKPObject","title":"buildExpressionObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/build-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / buildObject buildObject \u00b6 [jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject","title":"Build object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/build-object/#buildobject","text":"[jvm] Content open suspend override fun buildObject (className: ClassName, typeArguments: List , arguments: List ): ZKPObject","title":"buildObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/get-null-object/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / getNullObject getNullObject \u00b6 [jvm] Content open override fun getNullObject (): ZKPObject","title":"Get null object"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/get-null-object/#getnullobject","text":"[jvm] Content open override fun getNullObject (): ZKPObject","title":"getNullObject"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/pop-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / popContext popContext \u00b6 [jvm] Content open suspend override fun popContext ()","title":"Pop context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/pop-context/#popcontext","text":"[jvm] Content open suspend override fun popContext ()","title":"popContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/protocol-analysis/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / protocolAnalysis protocolAnalysis \u00b6 [jvm] Content val protocolAnalysis : ProtocolAnalysis","title":"Protocol analysis"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/protocol-analysis/#protocolanalysis","text":"[jvm] Content val protocolAnalysis : ProtocolAnalysis","title":"protocolAnalysis"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/push-context/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / pushContext pushContext \u00b6 [jvm] Content open suspend override fun pushContext ()","title":"Push context"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/push-context/#pushcontext","text":"[jvm] Content open suspend override fun pushContext ()","title":"pushContext"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-guard/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / runGuard runGuard \u00b6 [jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"Run guard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-guard/#runguard","text":"[jvm] Content open suspend override fun runGuard (expr: AtomicExpressionNode): Value","title":"runGuard"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-let/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / runLet runLet \u00b6 [jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"Run let"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-let/#runlet","text":"[jvm] Content open suspend override fun runLet (stmt: LetNode)","title":"runLet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / runOutput runOutput \u00b6 [jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"Run output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-output/#runoutput","text":"[jvm] Content open suspend override fun runOutput (stmt: OutputNode)","title":"runOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-receive/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / runReceive runReceive \u00b6 [jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run receive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-receive/#runreceive","text":"[jvm] Content open suspend override fun runReceive (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runReceive"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-send/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / runSend runSend \u00b6 [jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"Run send"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-send/#runsend","text":"[jvm] Content open suspend override fun runSend (sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","title":"runSend"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-update/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / runUpdate runUpdate \u00b6 [jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"Run update"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-update/#runupdate","text":"[jvm] Content open suspend override fun runUpdate (stmt: UpdateNode)","title":"runUpdate"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/runtime/","text":"// runtime / edu.cornell.cs.apl.viaduct.backend.zkp / ZKPVerifierInterpreter / runtime runtime \u00b6 [jvm] Content val runtime : ViaductProcessRuntime","title":"Runtime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.backend.zkp/-z-k-p-verifier-interpreter/runtime/#runtime","text":"[jvm] Content val runtime : ViaductProcessRuntime","title":"runtime"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper Package edu.cornell.cs.apl.viaduct.libsnarkwrapper \u00b6 Types \u00b6 Name Summary BoolVector [jvm] Content open class BoolVector : AbstractList < Boolean > , RandomAccess ByteBuf [jvm] Content open class ByteBuf CharVector [jvm] Content open class CharVector : AbstractList < Character > , RandomAccess IntVector [jvm] Content open class IntVector : AbstractList < Integer > , RandomAccess Keypair [jvm] Content open class Keypair libsnarkwrapper [jvm] Content open class libsnarkwrapper libsnarkwrapperJNI [jvm] Content open class libsnarkwrapperJNI R1CSInstance [jvm] Content open class R1CSInstance ShaResult [jvm] Content open class ShaResult SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t [jvm] Content open class SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t SWIGTYPE_p_libsnark__pb_variableT_field128_t [jvm] Content open class SWIGTYPE_p_libsnark__pb_variableT_field128_t SWIGTYPE_p_libsnark__protoboardT_field128_t [jvm] Content open class SWIGTYPE_p_libsnark__protoboardT_field128_t SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t [jvm] Content open class SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t [jvm] Content open class SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t Var [jvm] Content open class Var VarArray [jvm] Content open class VarArray","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/#package-educornellcsaplviaductlibsnarkwrapper","text":"","title":"Package edu.cornell.cs.apl.viaduct.libsnarkwrapper"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/#types","text":"Name Summary BoolVector [jvm] Content open class BoolVector : AbstractList < Boolean > , RandomAccess ByteBuf [jvm] Content open class ByteBuf CharVector [jvm] Content open class CharVector : AbstractList < Character > , RandomAccess IntVector [jvm] Content open class IntVector : AbstractList < Integer > , RandomAccess Keypair [jvm] Content open class Keypair libsnarkwrapper [jvm] Content open class libsnarkwrapper libsnarkwrapperJNI [jvm] Content open class libsnarkwrapperJNI R1CSInstance [jvm] Content open class R1CSInstance ShaResult [jvm] Content open class ShaResult SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t [jvm] Content open class SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t SWIGTYPE_p_libsnark__pb_variableT_field128_t [jvm] Content open class SWIGTYPE_p_libsnark__pb_variableT_field128_t SWIGTYPE_p_libsnark__protoboardT_field128_t [jvm] Content open class SWIGTYPE_p_libsnark__protoboardT_field128_t SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t [jvm] Content open class SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t [jvm] Content open class SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t Var [jvm] Content open class Var VarArray [jvm] Content open class VarArray","title":"Types"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector BoolVector \u00b6 [jvm] open class BoolVector : AbstractList < Boolean > , RandomAccess Constructors \u00b6 Name Summary BoolVector [jvm] open fun BoolVector (initialElements: Array < Boolean >) BoolVector [jvm] open fun BoolVector (initialElements: Iterable < Boolean >) BoolVector [jvm] open fun BoolVector () BoolVector [jvm] open fun BoolVector (other: BoolVector ) BoolVector [jvm] open fun BoolVector (count: Int , value: Boolean ) Functions \u00b6 Name Summary add [jvm] Content open fun add (e: Boolean ): Boolean open fun add (e: E ): Boolean open fun add (index: Int , e: Boolean ) open fun add (index: Int , element: E ) <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> addAll <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun addAll (index: Int , c: Collection E >): Boolean capacity [jvm] Content open fun capacity (): Long clear [jvm] Content open fun clear () open fun clear () contains [jvm] Content open fun contains (o: Any ): Boolean <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> containsAll <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun containsAll (c: Collection Any >): Boolean <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> copyOf <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun < E > copyOf (coll: Collection E >): List < E > delete [jvm] Content open fun delete () equals [jvm] Content open fun equals (o: Any ): Boolean <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> finishToArray <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> [jvm] Content open fun < T > finishToArray (r: Array < T >, it: Iterator Any >): Array < T > <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> forEach <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> [jvm] Content open fun forEach (action: Consumer Any >) get [jvm] Content open fun get (index: Int ): Boolean abstract fun get (p: Int ): E hashCode [jvm] Content open fun hashCode (): Int hugeCapacity [jvm] Content open fun hugeCapacity (minCapacity: Int ): Int indexOf [jvm] Content open fun indexOf (o: Any ): Int isEmpty [jvm] Content open fun isEmpty (): Boolean open fun isEmpty (): Boolean iterator [jvm] Content abstract fun iterator (): Iterator < T > open fun iterator (): Iterator < E > lastIndexOf [jvm] Content open fun lastIndexOf (o: Any ): Int listIterator [jvm] Content open fun listIterator (): ListIterator < E > of [jvm] Content open fun < E > of (): List < E > outOfBoundsMsg [jvm] Content open fun outOfBoundsMsg (index: Int ): String parallelStream [jvm] Content open fun parallelStream (): Stream < E > rangeCheckForAdd [jvm] Content open fun rangeCheckForAdd (index: Int ) remove [jvm] Content open fun remove (index: Int ): Boolean open fun remove (o: Any ): Boolean open fun remove (index: Int ): E <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> removeAll <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun removeAll (c: Collection Any >): Boolean <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> removeIf <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> [jvm] Content open fun removeIf (filter: Predicate Any >): Boolean removeRange [jvm] Content open fun removeRange (fromIndex: Int , toIndex: Int ) replaceAll [jvm] Content open fun replaceAll (operator: UnaryOperator < E >) reserve [jvm] Content open fun reserve (n: Long ) <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> retainAll <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun retainAll (c: Collection Any >): Boolean set [jvm] Content open fun set (index: Int , e: Boolean ): Boolean open fun set (index: Int , element: E ): E size [jvm] Content open fun size (): Int abstract fun size (): Int <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> sort <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> [jvm] Content open fun sort (c: Comparator Any >) spliterator [jvm] Content open fun spliterator (): Spliterator < T > open fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > subList [jvm] Content open fun subList (fromIndex: Int , toIndex: Int ): List < E > subListRangeCheck [jvm] Content open fun subListRangeCheck (fromIndex: Int , toIndex: Int , size: Int ) toArray [jvm] Content open fun toArray (): Array < Any > open fun < T > toArray (a: Array < T >): Array < T > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/#boolvector","text":"[jvm] open class BoolVector : AbstractList < Boolean > , RandomAccess","title":"BoolVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/#constructors","text":"Name Summary BoolVector [jvm] open fun BoolVector (initialElements: Array < Boolean >) BoolVector [jvm] open fun BoolVector (initialElements: Iterable < Boolean >) BoolVector [jvm] open fun BoolVector () BoolVector [jvm] open fun BoolVector (other: BoolVector ) BoolVector [jvm] open fun BoolVector (count: Int , value: Boolean )","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/#functions","text":"Name Summary add [jvm] Content open fun add (e: Boolean ): Boolean open fun add (e: E ): Boolean open fun add (index: Int , e: Boolean ) open fun add (index: Int , element: E ) <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> addAll <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun addAll (index: Int , c: Collection E >): Boolean capacity [jvm] Content open fun capacity (): Long clear [jvm] Content open fun clear () open fun clear () contains [jvm] Content open fun contains (o: Any ): Boolean <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> containsAll <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun containsAll (c: Collection Any >): Boolean <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> copyOf <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun < E > copyOf (coll: Collection E >): List < E > delete [jvm] Content open fun delete () equals [jvm] Content open fun equals (o: Any ): Boolean <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> finishToArray <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> [jvm] Content open fun < T > finishToArray (r: Array < T >, it: Iterator Any >): Array < T > <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> forEach <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> [jvm] Content open fun forEach (action: Consumer Any >) get [jvm] Content open fun get (index: Int ): Boolean abstract fun get (p: Int ): E hashCode [jvm] Content open fun hashCode (): Int hugeCapacity [jvm] Content open fun hugeCapacity (minCapacity: Int ): Int indexOf [jvm] Content open fun indexOf (o: Any ): Int isEmpty [jvm] Content open fun isEmpty (): Boolean open fun isEmpty (): Boolean iterator [jvm] Content abstract fun iterator (): Iterator < T > open fun iterator (): Iterator < E > lastIndexOf [jvm] Content open fun lastIndexOf (o: Any ): Int listIterator [jvm] Content open fun listIterator (): ListIterator < E > of [jvm] Content open fun < E > of (): List < E > outOfBoundsMsg [jvm] Content open fun outOfBoundsMsg (index: Int ): String parallelStream [jvm] Content open fun parallelStream (): Stream < E > rangeCheckForAdd [jvm] Content open fun rangeCheckForAdd (index: Int ) remove [jvm] Content open fun remove (index: Int ): Boolean open fun remove (o: Any ): Boolean open fun remove (index: Int ): E <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> removeAll <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun removeAll (c: Collection Any >): Boolean <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> removeIf <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> [jvm] Content open fun removeIf (filter: Predicate Any >): Boolean removeRange [jvm] Content open fun removeRange (fromIndex: Int , toIndex: Int ) replaceAll [jvm] Content open fun replaceAll (operator: UnaryOperator < E >) reserve [jvm] Content open fun reserve (n: Long ) <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> retainAll <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun retainAll (c: Collection Any >): Boolean set [jvm] Content open fun set (index: Int , e: Boolean ): Boolean open fun set (index: Int , element: E ): E size [jvm] Content open fun size (): Int abstract fun size (): Int <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> sort <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> [jvm] Content open fun sort (c: Comparator Any >) spliterator [jvm] Content open fun spliterator (): Spliterator < T > open fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > subList [jvm] Content open fun subList (fromIndex: Int , toIndex: Int ): List < E > subListRangeCheck [jvm] Content open fun subListRangeCheck (fromIndex: Int , toIndex: Int , size: Int ) toArray [jvm] Content open fun toArray (): Array < Any > open fun < T > toArray (a: Array < T >): Array < T > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/-bool-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / BoolVector BoolVector \u00b6 [jvm] Content open fun BoolVector (initialElements: Array < Boolean >) open fun BoolVector (initialElements: Iterable < Boolean >) open fun BoolVector () open fun BoolVector (other: BoolVector ) open fun BoolVector (count: Int , value: Boolean )","title":" bool vector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/-bool-vector/#boolvector","text":"[jvm] Content open fun BoolVector (initialElements: Array < Boolean >) open fun BoolVector (initialElements: Iterable < Boolean >) open fun BoolVector () open fun BoolVector (other: BoolVector ) open fun BoolVector (count: Int , value: Boolean )","title":"BoolVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/add/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / add add \u00b6 [jvm] Content open fun add (e: Boolean ): Boolean open fun add (index: Int , e: Boolean )","title":"Add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/add/#add","text":"[jvm] Content open fun add (e: Boolean ): Boolean open fun add (index: Int , e: Boolean )","title":"add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/capacity/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / capacity capacity \u00b6 [jvm] Content open fun capacity (): Long","title":"Capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/capacity/#capacity","text":"[jvm] Content open fun capacity (): Long","title":"capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/clear/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / clear clear \u00b6 [jvm] Content open fun clear ()","title":"Clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/clear/#clear","text":"[jvm] Content open fun clear ()","title":"clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / get get \u00b6 [jvm] Content open fun get (index: Int ): Boolean","title":"Get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/get/#get","text":"[jvm] Content open fun get (index: Int ): Boolean","title":"get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/is-empty/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / isEmpty isEmpty \u00b6 [jvm] Content open fun isEmpty (): Boolean","title":"Is empty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/is-empty/#isempty","text":"[jvm] Content open fun isEmpty (): Boolean","title":"isEmpty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/remove/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / remove remove \u00b6 [jvm] Content open fun remove (index: Int ): Boolean","title":"Remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/remove/#remove","text":"[jvm] Content open fun remove (index: Int ): Boolean","title":"remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/reserve/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / reserve reserve \u00b6 [jvm] Content open fun reserve (n: Long )","title":"Reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/reserve/#reserve","text":"[jvm] Content open fun reserve (n: Long )","title":"reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / set set \u00b6 [jvm] Content open fun set (index: Int , e: Boolean ): Boolean","title":"Set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/set/#set","text":"[jvm] Content open fun set (index: Int , e: Boolean ): Boolean","title":"set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / BoolVector / size size \u00b6 [jvm] Content open fun size (): Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-bool-vector/size/#size","text":"[jvm] Content open fun size (): Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ByteBuf ByteBuf \u00b6 [jvm] open class ByteBuf Constructors \u00b6 Name Summary ByteBuf [jvm] open fun ByteBuf () Functions \u00b6 Name Summary delete [jvm] Content open fun delete () get_data [jvm] Content open fun get_data (): Array < Byte > getContents [jvm] Content open fun getContents (): String setContents [jvm] Content open fun setContents (value: String )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/#bytebuf","text":"[jvm] open class ByteBuf","title":"ByteBuf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/#constructors","text":"Name Summary ByteBuf [jvm] open fun ByteBuf ()","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/#functions","text":"Name Summary delete [jvm] Content open fun delete () get_data [jvm] Content open fun get_data (): Array < Byte > getContents [jvm] Content open fun getContents (): String setContents [jvm] Content open fun setContents (value: String )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/-byte-buf/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ByteBuf / ByteBuf ByteBuf \u00b6 [jvm] Content open fun ByteBuf ()","title":" byte buf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/-byte-buf/#bytebuf","text":"[jvm] Content open fun ByteBuf ()","title":"ByteBuf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ByteBuf / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/get-contents/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ByteBuf / getContents getContents \u00b6 [jvm] Content open fun getContents (): String","title":"Get contents"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/get-contents/#getcontents","text":"[jvm] Content open fun getContents (): String","title":"getContents"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/get_data/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ByteBuf / get_data get_data \u00b6 [jvm] Content open fun get_data (): Array < Byte >","title":"Get data"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/get_data/#get_data","text":"[jvm] Content open fun get_data (): Array < Byte >","title":"get_data"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/set-contents/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ByteBuf / setContents setContents \u00b6 [jvm] Content open fun setContents (value: String )","title":"Set contents"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-byte-buf/set-contents/#setcontents","text":"[jvm] Content open fun setContents (value: String )","title":"setContents"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector CharVector \u00b6 [jvm] open class CharVector : AbstractList < Character > , RandomAccess Constructors \u00b6 Name Summary CharVector [jvm] open fun CharVector (initialElements: Array < Char >) CharVector [jvm] open fun CharVector (initialElements: Iterable < Character >) CharVector [jvm] open fun CharVector () CharVector [jvm] open fun CharVector (other: CharVector ) CharVector [jvm] open fun CharVector (count: Int , value: Char ) Functions \u00b6 Name Summary add [jvm] Content open fun add (e: Character ): Boolean open fun add (e: E ): Boolean open fun add (index: Int , e: Character ) open fun add (index: Int , element: E ) <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> addAll <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun addAll (index: Int , c: Collection E >): Boolean capacity [jvm] Content open fun capacity (): Long clear [jvm] Content open fun clear () open fun clear () contains [jvm] Content open fun contains (o: Any ): Boolean <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> containsAll <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun containsAll (c: Collection Any >): Boolean <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> copyOf <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun < E > copyOf (coll: Collection E >): List < E > delete [jvm] Content open fun delete () equals [jvm] Content open fun equals (o: Any ): Boolean <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> finishToArray <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> [jvm] Content open fun < T > finishToArray (r: Array < T >, it: Iterator Any >): Array < T > <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> forEach <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> [jvm] Content open fun forEach (action: Consumer Any >) get [jvm] Content open fun get (index: Int ): Character abstract fun get (p: Int ): E hashCode [jvm] Content open fun hashCode (): Int hugeCapacity [jvm] Content open fun hugeCapacity (minCapacity: Int ): Int indexOf [jvm] Content open fun indexOf (o: Any ): Int isEmpty [jvm] Content open fun isEmpty (): Boolean open fun isEmpty (): Boolean iterator [jvm] Content abstract fun iterator (): Iterator < T > open fun iterator (): Iterator < E > lastIndexOf [jvm] Content open fun lastIndexOf (o: Any ): Int listIterator [jvm] Content open fun listIterator (): ListIterator < E > of [jvm] Content open fun < E > of (): List < E > outOfBoundsMsg [jvm] Content open fun outOfBoundsMsg (index: Int ): String parallelStream [jvm] Content open fun parallelStream (): Stream < E > rangeCheckForAdd [jvm] Content open fun rangeCheckForAdd (index: Int ) remove [jvm] Content open fun remove (index: Int ): Character open fun remove (o: Any ): Boolean open fun remove (index: Int ): E <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> removeAll <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun removeAll (c: Collection Any >): Boolean <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> removeIf <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> [jvm] Content open fun removeIf (filter: Predicate Any >): Boolean removeRange [jvm] Content open fun removeRange (fromIndex: Int , toIndex: Int ) replaceAll [jvm] Content open fun replaceAll (operator: UnaryOperator < E >) reserve [jvm] Content open fun reserve (n: Long ) <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> retainAll <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun retainAll (c: Collection Any >): Boolean set [jvm] Content open fun set (index: Int , e: Character ): Character open fun set (index: Int , element: E ): E size [jvm] Content open fun size (): Int abstract fun size (): Int <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> sort <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> [jvm] Content open fun sort (c: Comparator Any >) spliterator [jvm] Content open fun spliterator (): Spliterator < T > open fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > subList [jvm] Content open fun subList (fromIndex: Int , toIndex: Int ): List < E > subListRangeCheck [jvm] Content open fun subListRangeCheck (fromIndex: Int , toIndex: Int , size: Int ) toArray [jvm] Content open fun toArray (): Array < Any > open fun < T > toArray (a: Array < T >): Array < T > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/#charvector","text":"[jvm] open class CharVector : AbstractList < Character > , RandomAccess","title":"CharVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/#constructors","text":"Name Summary CharVector [jvm] open fun CharVector (initialElements: Array < Char >) CharVector [jvm] open fun CharVector (initialElements: Iterable < Character >) CharVector [jvm] open fun CharVector () CharVector [jvm] open fun CharVector (other: CharVector ) CharVector [jvm] open fun CharVector (count: Int , value: Char )","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/#functions","text":"Name Summary add [jvm] Content open fun add (e: Character ): Boolean open fun add (e: E ): Boolean open fun add (index: Int , e: Character ) open fun add (index: Int , element: E ) <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> addAll <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun addAll (index: Int , c: Collection E >): Boolean capacity [jvm] Content open fun capacity (): Long clear [jvm] Content open fun clear () open fun clear () contains [jvm] Content open fun contains (o: Any ): Boolean <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> containsAll <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun containsAll (c: Collection Any >): Boolean <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> copyOf <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun < E > copyOf (coll: Collection E >): List < E > delete [jvm] Content open fun delete () equals [jvm] Content open fun equals (o: Any ): Boolean <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> finishToArray <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> [jvm] Content open fun < T > finishToArray (r: Array < T >, it: Iterator Any >): Array < T > <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> forEach <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> [jvm] Content open fun forEach (action: Consumer Any >) get [jvm] Content open fun get (index: Int ): Character abstract fun get (p: Int ): E hashCode [jvm] Content open fun hashCode (): Int hugeCapacity [jvm] Content open fun hugeCapacity (minCapacity: Int ): Int indexOf [jvm] Content open fun indexOf (o: Any ): Int isEmpty [jvm] Content open fun isEmpty (): Boolean open fun isEmpty (): Boolean iterator [jvm] Content abstract fun iterator (): Iterator < T > open fun iterator (): Iterator < E > lastIndexOf [jvm] Content open fun lastIndexOf (o: Any ): Int listIterator [jvm] Content open fun listIterator (): ListIterator < E > of [jvm] Content open fun < E > of (): List < E > outOfBoundsMsg [jvm] Content open fun outOfBoundsMsg (index: Int ): String parallelStream [jvm] Content open fun parallelStream (): Stream < E > rangeCheckForAdd [jvm] Content open fun rangeCheckForAdd (index: Int ) remove [jvm] Content open fun remove (index: Int ): Character open fun remove (o: Any ): Boolean open fun remove (index: Int ): E <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> removeAll <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun removeAll (c: Collection Any >): Boolean <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> removeIf <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> [jvm] Content open fun removeIf (filter: Predicate Any >): Boolean removeRange [jvm] Content open fun removeRange (fromIndex: Int , toIndex: Int ) replaceAll [jvm] Content open fun replaceAll (operator: UnaryOperator < E >) reserve [jvm] Content open fun reserve (n: Long ) <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> retainAll <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun retainAll (c: Collection Any >): Boolean set [jvm] Content open fun set (index: Int , e: Character ): Character open fun set (index: Int , element: E ): E size [jvm] Content open fun size (): Int abstract fun size (): Int <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> sort <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> [jvm] Content open fun sort (c: Comparator Any >) spliterator [jvm] Content open fun spliterator (): Spliterator < T > open fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > subList [jvm] Content open fun subList (fromIndex: Int , toIndex: Int ): List < E > subListRangeCheck [jvm] Content open fun subListRangeCheck (fromIndex: Int , toIndex: Int , size: Int ) toArray [jvm] Content open fun toArray (): Array < Any > open fun < T > toArray (a: Array < T >): Array < T > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/-char-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / CharVector CharVector \u00b6 [jvm] Content open fun CharVector (initialElements: Array < Char >) open fun CharVector (initialElements: Iterable < Character >) open fun CharVector () open fun CharVector (other: CharVector ) open fun CharVector (count: Int , value: Char )","title":" char vector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/-char-vector/#charvector","text":"[jvm] Content open fun CharVector (initialElements: Array < Char >) open fun CharVector (initialElements: Iterable < Character >) open fun CharVector () open fun CharVector (other: CharVector ) open fun CharVector (count: Int , value: Char )","title":"CharVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/add/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / add add \u00b6 [jvm] Content open fun add (e: Character ): Boolean open fun add (index: Int , e: Character )","title":"Add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/add/#add","text":"[jvm] Content open fun add (e: Character ): Boolean open fun add (index: Int , e: Character )","title":"add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/capacity/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / capacity capacity \u00b6 [jvm] Content open fun capacity (): Long","title":"Capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/capacity/#capacity","text":"[jvm] Content open fun capacity (): Long","title":"capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/clear/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / clear clear \u00b6 [jvm] Content open fun clear ()","title":"Clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/clear/#clear","text":"[jvm] Content open fun clear ()","title":"clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / get get \u00b6 [jvm] Content open fun get (index: Int ): Character","title":"Get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/get/#get","text":"[jvm] Content open fun get (index: Int ): Character","title":"get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/is-empty/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / isEmpty isEmpty \u00b6 [jvm] Content open fun isEmpty (): Boolean","title":"Is empty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/is-empty/#isempty","text":"[jvm] Content open fun isEmpty (): Boolean","title":"isEmpty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/remove/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / remove remove \u00b6 [jvm] Content open fun remove (index: Int ): Character","title":"Remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/remove/#remove","text":"[jvm] Content open fun remove (index: Int ): Character","title":"remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/reserve/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / reserve reserve \u00b6 [jvm] Content open fun reserve (n: Long )","title":"Reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/reserve/#reserve","text":"[jvm] Content open fun reserve (n: Long )","title":"reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / set set \u00b6 [jvm] Content open fun set (index: Int , e: Character ): Character","title":"Set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/set/#set","text":"[jvm] Content open fun set (index: Int , e: Character ): Character","title":"set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / CharVector / size size \u00b6 [jvm] Content open fun size (): Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-char-vector/size/#size","text":"[jvm] Content open fun size (): Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector IntVector \u00b6 [jvm] open class IntVector : AbstractList < Integer > , RandomAccess Constructors \u00b6 Name Summary IntVector [jvm] open fun IntVector (initialElements: Array < Int >) IntVector [jvm] open fun IntVector (initialElements: Iterable < Integer >) IntVector [jvm] open fun IntVector () IntVector [jvm] open fun IntVector (other: IntVector ) IntVector [jvm] open fun IntVector (count: Int , value: Int ) Functions \u00b6 Name Summary add [jvm] Content open fun add (e: Integer ): Boolean open fun add (e: E ): Boolean open fun add (index: Int , e: Integer ) open fun add (index: Int , element: E ) <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> addAll <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun addAll (index: Int , c: Collection E >): Boolean capacity [jvm] Content open fun capacity (): Long clear [jvm] Content open fun clear () open fun clear () contains [jvm] Content open fun contains (o: Any ): Boolean <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> containsAll <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun containsAll (c: Collection Any >): Boolean <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> copyOf <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun < E > copyOf (coll: Collection E >): List < E > delete [jvm] Content open fun delete () equals [jvm] Content open fun equals (o: Any ): Boolean <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> finishToArray <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> [jvm] Content open fun < T > finishToArray (r: Array < T >, it: Iterator Any >): Array < T > <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> forEach <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> [jvm] Content open fun forEach (action: Consumer Any >) get [jvm] Content open fun get (index: Int ): Integer abstract fun get (p: Int ): E hashCode [jvm] Content open fun hashCode (): Int hugeCapacity [jvm] Content open fun hugeCapacity (minCapacity: Int ): Int indexOf [jvm] Content open fun indexOf (o: Any ): Int isEmpty [jvm] Content open fun isEmpty (): Boolean open fun isEmpty (): Boolean iterator [jvm] Content abstract fun iterator (): Iterator < T > open fun iterator (): Iterator < E > lastIndexOf [jvm] Content open fun lastIndexOf (o: Any ): Int listIterator [jvm] Content open fun listIterator (): ListIterator < E > of [jvm] Content open fun < E > of (): List < E > outOfBoundsMsg [jvm] Content open fun outOfBoundsMsg (index: Int ): String parallelStream [jvm] Content open fun parallelStream (): Stream < E > rangeCheckForAdd [jvm] Content open fun rangeCheckForAdd (index: Int ) remove [jvm] Content open fun remove (index: Int ): Integer open fun remove (o: Any ): Boolean open fun remove (index: Int ): E <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> removeAll <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun removeAll (c: Collection Any >): Boolean <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> removeIf <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> [jvm] Content open fun removeIf (filter: Predicate Any >): Boolean removeRange [jvm] Content open fun removeRange (fromIndex: Int , toIndex: Int ) replaceAll [jvm] Content open fun replaceAll (operator: UnaryOperator < E >) reserve [jvm] Content open fun reserve (n: Long ) <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> retainAll <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun retainAll (c: Collection Any >): Boolean set [jvm] Content open fun set (index: Int , e: Integer ): Integer open fun set (index: Int , element: E ): E size [jvm] Content open fun size (): Int abstract fun size (): Int <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> sort <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> [jvm] Content open fun sort (c: Comparator Any >) spliterator [jvm] Content open fun spliterator (): Spliterator < T > open fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > subList [jvm] Content open fun subList (fromIndex: Int , toIndex: Int ): List < E > subListRangeCheck [jvm] Content open fun subListRangeCheck (fromIndex: Int , toIndex: Int , size: Int ) toArray [jvm] Content open fun toArray (): Array < Any > open fun < T > toArray (a: Array < T >): Array < T > toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/#intvector","text":"[jvm] open class IntVector : AbstractList < Integer > , RandomAccess","title":"IntVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/#constructors","text":"Name Summary IntVector [jvm] open fun IntVector (initialElements: Array < Int >) IntVector [jvm] open fun IntVector (initialElements: Iterable < Integer >) IntVector [jvm] open fun IntVector () IntVector [jvm] open fun IntVector (other: IntVector ) IntVector [jvm] open fun IntVector (count: Int , value: Int )","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/#functions","text":"Name Summary add [jvm] Content open fun add (e: Integer ): Boolean open fun add (e: E ): Boolean open fun add (index: Int , e: Integer ) open fun add (index: Int , element: E ) <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> addAll <a name=\"java.util/AbstractList/addAll/#int#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun addAll (index: Int , c: Collection E >): Boolean capacity [jvm] Content open fun capacity (): Long clear [jvm] Content open fun clear () open fun clear () contains [jvm] Content open fun contains (o: Any ): Boolean <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> containsAll <a name=\"java.util/AbstractCollection/containsAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun containsAll (c: Collection Any >): Boolean <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> copyOf <a name=\"java.util/List/copyOf/#java.util.Collection<? extends E>/PointingToDeclaration/\"> [jvm] Content open fun < E > copyOf (coll: Collection E >): List < E > delete [jvm] Content open fun delete () equals [jvm] Content open fun equals (o: Any ): Boolean <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> finishToArray <a name=\"java.util/AbstractCollection/finishToArray/#T[]#java.util.Iterator<?>/PointingToDeclaration/\"> [jvm] Content open fun < T > finishToArray (r: Array < T >, it: Iterator Any >): Array < T > <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> forEach <a name=\"java.lang/Iterable/forEach/#java.util.function.Consumer<? super T>/PointingToDeclaration/\"> [jvm] Content open fun forEach (action: Consumer Any >) get [jvm] Content open fun get (index: Int ): Integer abstract fun get (p: Int ): E hashCode [jvm] Content open fun hashCode (): Int hugeCapacity [jvm] Content open fun hugeCapacity (minCapacity: Int ): Int indexOf [jvm] Content open fun indexOf (o: Any ): Int isEmpty [jvm] Content open fun isEmpty (): Boolean open fun isEmpty (): Boolean iterator [jvm] Content abstract fun iterator (): Iterator < T > open fun iterator (): Iterator < E > lastIndexOf [jvm] Content open fun lastIndexOf (o: Any ): Int listIterator [jvm] Content open fun listIterator (): ListIterator < E > of [jvm] Content open fun < E > of (): List < E > outOfBoundsMsg [jvm] Content open fun outOfBoundsMsg (index: Int ): String parallelStream [jvm] Content open fun parallelStream (): Stream < E > rangeCheckForAdd [jvm] Content open fun rangeCheckForAdd (index: Int ) remove [jvm] Content open fun remove (index: Int ): Integer open fun remove (o: Any ): Boolean open fun remove (index: Int ): E <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> removeAll <a name=\"java.util/AbstractCollection/removeAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun removeAll (c: Collection Any >): Boolean <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> removeIf <a name=\"java.util/Collection/removeIf/#java.util.function.Predicate<? super E>/PointingToDeclaration/\"> [jvm] Content open fun removeIf (filter: Predicate Any >): Boolean removeRange [jvm] Content open fun removeRange (fromIndex: Int , toIndex: Int ) replaceAll [jvm] Content open fun replaceAll (operator: UnaryOperator < E >) reserve [jvm] Content open fun reserve (n: Long ) <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> retainAll <a name=\"java.util/AbstractCollection/retainAll/#java.util.Collection<?>/PointingToDeclaration/\"> [jvm] Content open fun retainAll (c: Collection Any >): Boolean set [jvm] Content open fun set (index: Int , e: Integer ): Integer open fun set (index: Int , element: E ): E size [jvm] Content open fun size (): Int abstract fun size (): Int <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> sort <a name=\"java.util/List/sort/#java.util.Comparator<? super E>/PointingToDeclaration/\"> [jvm] Content open fun sort (c: Comparator Any >) spliterator [jvm] Content open fun spliterator (): Spliterator < T > open fun spliterator (): Spliterator < E > stream [jvm] Content open fun stream (): Stream < E > subList [jvm] Content open fun subList (fromIndex: Int , toIndex: Int ): List < E > subListRangeCheck [jvm] Content open fun subListRangeCheck (fromIndex: Int , toIndex: Int , size: Int ) toArray [jvm] Content open fun toArray (): Array < Any > open fun < T > toArray (a: Array < T >): Array < T > toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/-int-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / IntVector IntVector \u00b6 [jvm] Content open fun IntVector (initialElements: Array < Int >) open fun IntVector (initialElements: Iterable < Integer >) open fun IntVector () open fun IntVector (other: IntVector ) open fun IntVector (count: Int , value: Int )","title":" int vector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/-int-vector/#intvector","text":"[jvm] Content open fun IntVector (initialElements: Array < Int >) open fun IntVector (initialElements: Iterable < Integer >) open fun IntVector () open fun IntVector (other: IntVector ) open fun IntVector (count: Int , value: Int )","title":"IntVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/add/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / add add \u00b6 [jvm] Content open fun add (e: Integer ): Boolean open fun add (index: Int , e: Integer )","title":"Add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/add/#add","text":"[jvm] Content open fun add (e: Integer ): Boolean open fun add (index: Int , e: Integer )","title":"add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/capacity/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / capacity capacity \u00b6 [jvm] Content open fun capacity (): Long","title":"Capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/capacity/#capacity","text":"[jvm] Content open fun capacity (): Long","title":"capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/clear/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / clear clear \u00b6 [jvm] Content open fun clear ()","title":"Clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/clear/#clear","text":"[jvm] Content open fun clear ()","title":"clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / get get \u00b6 [jvm] Content open fun get (index: Int ): Integer","title":"Get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/get/#get","text":"[jvm] Content open fun get (index: Int ): Integer","title":"get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/is-empty/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / isEmpty isEmpty \u00b6 [jvm] Content open fun isEmpty (): Boolean","title":"Is empty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/is-empty/#isempty","text":"[jvm] Content open fun isEmpty (): Boolean","title":"isEmpty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/remove/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / remove remove \u00b6 [jvm] Content open fun remove (index: Int ): Integer","title":"Remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/remove/#remove","text":"[jvm] Content open fun remove (index: Int ): Integer","title":"remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/reserve/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / reserve reserve \u00b6 [jvm] Content open fun reserve (n: Long )","title":"Reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/reserve/#reserve","text":"[jvm] Content open fun reserve (n: Long )","title":"reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / set set \u00b6 [jvm] Content open fun set (index: Int , e: Integer ): Integer","title":"Set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/set/#set","text":"[jvm] Content open fun set (index: Int , e: Integer ): Integer","title":"set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/size/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / IntVector / size size \u00b6 [jvm] Content open fun size (): Int","title":"Size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-int-vector/size/#size","text":"[jvm] Content open fun size (): Int","title":"size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Keypair Keypair \u00b6 [jvm] open class Keypair Constructors \u00b6 Name Summary Keypair [jvm] open fun Keypair () Functions \u00b6 Name Summary delete [jvm] Content open fun delete () getProving_key [jvm] Content open fun getProving_key (): ByteBuf getVerification_key [jvm] Content open fun getVerification_key (): ByteBuf setProving_key [jvm] Content open fun setProving_key (value: ByteBuf ) setVerification_key [jvm] Content open fun setVerification_key (value: ByteBuf )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/#keypair","text":"[jvm] open class Keypair","title":"Keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/#constructors","text":"Name Summary Keypair [jvm] open fun Keypair ()","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/#functions","text":"Name Summary delete [jvm] Content open fun delete () getProving_key [jvm] Content open fun getProving_key (): ByteBuf getVerification_key [jvm] Content open fun getVerification_key (): ByteBuf setProving_key [jvm] Content open fun setProving_key (value: ByteBuf ) setVerification_key [jvm] Content open fun setVerification_key (value: ByteBuf )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/-keypair/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Keypair / Keypair Keypair \u00b6 [jvm] Content open fun Keypair ()","title":" keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/-keypair/#keypair","text":"[jvm] Content open fun Keypair ()","title":"Keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Keypair / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/get-proving_key/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Keypair / getProving_key getProving_key \u00b6 [jvm] Content open fun getProving_key (): ByteBuf","title":"Get proving key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/get-proving_key/#getproving_key","text":"[jvm] Content open fun getProving_key (): ByteBuf","title":"getProving_key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/get-verification_key/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Keypair / getVerification_key getVerification_key \u00b6 [jvm] Content open fun getVerification_key (): ByteBuf","title":"Get verification key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/get-verification_key/#getverification_key","text":"[jvm] Content open fun getVerification_key (): ByteBuf","title":"getVerification_key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/set-proving_key/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Keypair / setProving_key setProving_key \u00b6 [jvm] Content open fun setProving_key (value: ByteBuf )","title":"Set proving key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/set-proving_key/#setproving_key","text":"[jvm] Content open fun setProving_key (value: ByteBuf )","title":"setProving_key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/set-verification_key/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Keypair / setVerification_key setVerification_key \u00b6 [jvm] Content open fun setVerification_key (value: ByteBuf )","title":"Set verification key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-keypair/set-verification_key/#setverification_key","text":"[jvm] Content open fun setVerification_key (value: ByteBuf )","title":"setVerification_key"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance R1CSInstance \u00b6 [jvm] open class R1CSInstance Constructors \u00b6 Name Summary R1CSInstance [jvm] open fun R1CSInstance () Functions \u00b6 Name Summary AddEquality [jvm] Content open fun AddEquality (a: Var , b: Var ) delete [jvm] Content open fun delete () generateProof [jvm] Content open fun generateProof (provingKey: ByteBuf ): ByteBuf genKeypair [jvm] Content open fun genKeypair (): Keypair getIsProver [jvm] Content open fun getIsProver (): Boolean mkAdd [jvm] Content open fun mkAdd (lhs: Var , rhs: Var ): Var mkAnd [jvm] Content open fun mkAnd (lhs: Var , rhs: Var ): Var mkEqualTo [jvm] Content open fun mkEqualTo (a: Var , b: Var ): Var mkLE [jvm] Content open fun mkLE (a: Var , b: Var ): Var mkLessThan [jvm] Content open fun mkLessThan (a: Var , b: Var ): Var mkMult [jvm] Content open fun mkMult (lhs: Var , rhs: Var ): Var mkMux [jvm] Content open fun mkMux (b: Var , lhs: Var , rhs: Var ): Var mkNot [jvm] Content open fun mkNot (v: Var ): Var mkOr [jvm] Content open fun mkOr (lhs: Var , rhs: Var ): Var mkPrivateValProver [jvm] Content open fun mkPrivateValProver (val: Long , hash: VarArray , nonce: VarArray ): Var mkPrivateValVerifier [jvm] Content open fun mkPrivateValVerifier (hash: VarArray , nonce: VarArray ): Var mkPublicBitvec [jvm] Content open fun mkPublicBitvec (bits: BoolVector ): VarArray open fun mkPublicBitvec (buf: ByteBuf ): VarArray mkPublicVal [jvm] Content open fun mkPublicVal (val: Long ): Var setIsProver [jvm] Content open fun setIsProver (value: Boolean ) verifyProof [jvm] Content open fun verifyProof (verificationKey: ByteBuf , proof: ByteBuf ): Boolean","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/#r1csinstance","text":"[jvm] open class R1CSInstance","title":"R1CSInstance"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/#constructors","text":"Name Summary R1CSInstance [jvm] open fun R1CSInstance ()","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/#functions","text":"Name Summary AddEquality [jvm] Content open fun AddEquality (a: Var , b: Var ) delete [jvm] Content open fun delete () generateProof [jvm] Content open fun generateProof (provingKey: ByteBuf ): ByteBuf genKeypair [jvm] Content open fun genKeypair (): Keypair getIsProver [jvm] Content open fun getIsProver (): Boolean mkAdd [jvm] Content open fun mkAdd (lhs: Var , rhs: Var ): Var mkAnd [jvm] Content open fun mkAnd (lhs: Var , rhs: Var ): Var mkEqualTo [jvm] Content open fun mkEqualTo (a: Var , b: Var ): Var mkLE [jvm] Content open fun mkLE (a: Var , b: Var ): Var mkLessThan [jvm] Content open fun mkLessThan (a: Var , b: Var ): Var mkMult [jvm] Content open fun mkMult (lhs: Var , rhs: Var ): Var mkMux [jvm] Content open fun mkMux (b: Var , lhs: Var , rhs: Var ): Var mkNot [jvm] Content open fun mkNot (v: Var ): Var mkOr [jvm] Content open fun mkOr (lhs: Var , rhs: Var ): Var mkPrivateValProver [jvm] Content open fun mkPrivateValProver (val: Long , hash: VarArray , nonce: VarArray ): Var mkPrivateValVerifier [jvm] Content open fun mkPrivateValVerifier (hash: VarArray , nonce: VarArray ): Var mkPublicBitvec [jvm] Content open fun mkPublicBitvec (bits: BoolVector ): VarArray open fun mkPublicBitvec (buf: ByteBuf ): VarArray mkPublicVal [jvm] Content open fun mkPublicVal (val: Long ): Var setIsProver [jvm] Content open fun setIsProver (value: Boolean ) verifyProof [jvm] Content open fun verifyProof (verificationKey: ByteBuf , proof: ByteBuf ): Boolean","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/-add-equality/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / AddEquality AddEquality \u00b6 [jvm] Content open fun AddEquality (a: Var , b: Var )","title":" add equality"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/-add-equality/#addequality","text":"[jvm] Content open fun AddEquality (a: Var , b: Var )","title":"AddEquality"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/-r1-c-s-instance/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / R1CSInstance R1CSInstance \u00b6 [jvm] Content open fun R1CSInstance ()","title":" r1 c s instance"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/-r1-c-s-instance/#r1csinstance","text":"[jvm] Content open fun R1CSInstance ()","title":"R1CSInstance"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/gen-keypair/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / genKeypair genKeypair \u00b6 [jvm] Content open fun genKeypair (): Keypair","title":"Gen keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/gen-keypair/#genkeypair","text":"[jvm] Content open fun genKeypair (): Keypair","title":"genKeypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/generate-proof/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / generateProof generateProof \u00b6 [jvm] Content open fun generateProof (provingKey: ByteBuf ): ByteBuf","title":"Generate proof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/generate-proof/#generateproof","text":"[jvm] Content open fun generateProof (provingKey: ByteBuf ): ByteBuf","title":"generateProof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/get-is-prover/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / getIsProver getIsProver \u00b6 [jvm] Content open fun getIsProver (): Boolean","title":"Get is prover"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/get-is-prover/#getisprover","text":"[jvm] Content open fun getIsProver (): Boolean","title":"getIsProver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-add/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkAdd mkAdd \u00b6 [jvm] Content open fun mkAdd (lhs: Var , rhs: Var ): Var","title":"Mk add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-add/#mkadd","text":"[jvm] Content open fun mkAdd (lhs: Var , rhs: Var ): Var","title":"mkAdd"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-and/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkAnd mkAnd \u00b6 [jvm] Content open fun mkAnd (lhs: Var , rhs: Var ): Var","title":"Mk and"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-and/#mkand","text":"[jvm] Content open fun mkAnd (lhs: Var , rhs: Var ): Var","title":"mkAnd"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-equal-to/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkEqualTo mkEqualTo \u00b6 [jvm] Content open fun mkEqualTo (a: Var , b: Var ): Var","title":"Mk equal to"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-equal-to/#mkequalto","text":"[jvm] Content open fun mkEqualTo (a: Var , b: Var ): Var","title":"mkEqualTo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-l-e/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkLE mkLE \u00b6 [jvm] Content open fun mkLE (a: Var , b: Var ): Var","title":"Mk l e"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-l-e/#mkle","text":"[jvm] Content open fun mkLE (a: Var , b: Var ): Var","title":"mkLE"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-less-than/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkLessThan mkLessThan \u00b6 [jvm] Content open fun mkLessThan (a: Var , b: Var ): Var","title":"Mk less than"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-less-than/#mklessthan","text":"[jvm] Content open fun mkLessThan (a: Var , b: Var ): Var","title":"mkLessThan"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-mult/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkMult mkMult \u00b6 [jvm] Content open fun mkMult (lhs: Var , rhs: Var ): Var","title":"Mk mult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-mult/#mkmult","text":"[jvm] Content open fun mkMult (lhs: Var , rhs: Var ): Var","title":"mkMult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-mux/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkMux mkMux \u00b6 [jvm] Content open fun mkMux (b: Var , lhs: Var , rhs: Var ): Var","title":"Mk mux"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-mux/#mkmux","text":"[jvm] Content open fun mkMux (b: Var , lhs: Var , rhs: Var ): Var","title":"mkMux"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-not/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkNot mkNot \u00b6 [jvm] Content open fun mkNot (v: Var ): Var","title":"Mk not"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-not/#mknot","text":"[jvm] Content open fun mkNot (v: Var ): Var","title":"mkNot"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-or/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkOr mkOr \u00b6 [jvm] Content open fun mkOr (lhs: Var , rhs: Var ): Var","title":"Mk or"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-or/#mkor","text":"[jvm] Content open fun mkOr (lhs: Var , rhs: Var ): Var","title":"mkOr"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-private-val-prover/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkPrivateValProver mkPrivateValProver \u00b6 [jvm] Content open fun mkPrivateValProver (val: Long , hash: VarArray , nonce: VarArray ): Var","title":"Mk private val prover"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-private-val-prover/#mkprivatevalprover","text":"[jvm] Content open fun mkPrivateValProver (val: Long , hash: VarArray , nonce: VarArray ): Var","title":"mkPrivateValProver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-private-val-verifier/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkPrivateValVerifier mkPrivateValVerifier \u00b6 [jvm] Content open fun mkPrivateValVerifier (hash: VarArray , nonce: VarArray ): Var","title":"Mk private val verifier"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-private-val-verifier/#mkprivatevalverifier","text":"[jvm] Content open fun mkPrivateValVerifier (hash: VarArray , nonce: VarArray ): Var","title":"mkPrivateValVerifier"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-public-bitvec/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkPublicBitvec mkPublicBitvec \u00b6 [jvm] Content open fun mkPublicBitvec (bits: BoolVector ): VarArray open fun mkPublicBitvec (buf: ByteBuf ): VarArray","title":"Mk public bitvec"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-public-bitvec/#mkpublicbitvec","text":"[jvm] Content open fun mkPublicBitvec (bits: BoolVector ): VarArray open fun mkPublicBitvec (buf: ByteBuf ): VarArray","title":"mkPublicBitvec"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-public-val/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / mkPublicVal mkPublicVal \u00b6 [jvm] Content open fun mkPublicVal (val: Long ): Var","title":"Mk public val"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-public-val/#mkpublicval","text":"[jvm] Content open fun mkPublicVal (val: Long ): Var","title":"mkPublicVal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/set-is-prover/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / setIsProver setIsProver \u00b6 [jvm] Content open fun setIsProver (value: Boolean )","title":"Set is prover"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/set-is-prover/#setisprover","text":"[jvm] Content open fun setIsProver (value: Boolean )","title":"setIsProver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/verify-proof/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / R1CSInstance / verifyProof verifyProof \u00b6 [jvm] Content open fun verifyProof (verificationKey: ByteBuf , proof: ByteBuf ): Boolean","title":"Verify proof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-r1-c-s-instance/verify-proof/#verifyproof","text":"[jvm] Content open fun verifyProof (verificationKey: ByteBuf , proof: ByteBuf ): Boolean","title":"verifyProof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__pb_variable-t_field128_t/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / SWIGTYPE_p_libsnark__pb_variableT_field128_t SWIGTYPE_p_libsnark__pb_variableT_field128_t \u00b6 [jvm] open class SWIGTYPE_p_libsnark__pb_variableT_field128_t","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__pb_variable-t_field128_t/#swigtype_p_libsnark__pb_variablet_field128_t","text":"[jvm] open class SWIGTYPE_p_libsnark__pb_variableT_field128_t","title":"SWIGTYPE_p_libsnark__pb_variableT_field128_t"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__pb_variable_array-t_field128_t/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t \u00b6 [jvm] open class SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__pb_variable_array-t_field128_t/#swigtype_p_libsnark__pb_variable_arrayt_field128_t","text":"[jvm] open class SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__protoboard-t_field128_t/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / SWIGTYPE_p_libsnark__protoboardT_field128_t SWIGTYPE_p_libsnark__protoboardT_field128_t \u00b6 [jvm] open class SWIGTYPE_p_libsnark__protoboardT_field128_t","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__protoboard-t_field128_t/#swigtype_p_libsnark__protoboardt_field128_t","text":"[jvm] open class SWIGTYPE_p_libsnark__protoboardT_field128_t","title":"SWIGTYPE_p_libsnark__protoboardT_field128_t"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__r1cs_constraint_system-t_libff__-fr-t_libsnark__default_r1cs_ppzksnark_pp_t_t/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t \u00b6 [jvm] open class SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__r1cs_constraint_system-t_libff__-fr-t_libsnark__default_r1cs_ppzksnark_pp_t_t/#swigtype_p_libsnark__r1cs_constraint_systemt_libff__frt_libsnark__default_r1cs_ppzksnark_pp_t_t","text":"[jvm] open class SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","title":"SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_std__vector-t_libff__-fr-t_libsnark__default_r1cs_ppzksnark_pp_t_t/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t \u00b6 [jvm] open class SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_std__vector-t_libff__-fr-t_libsnark__default_r1cs_ppzksnark_pp_t_t/#swigtype_p_std__vectort_libff__frt_libsnark__default_r1cs_ppzksnark_pp_t_t","text":"[jvm] open class SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","title":"SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult ShaResult \u00b6 [jvm] open class ShaResult Constructors \u00b6 Name Summary ShaResult [jvm] open fun ShaResult () Functions \u00b6 Name Summary delete [jvm] Content open fun delete () getData [jvm] Content open fun getData (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t getNonce [jvm] Content open fun getNonce (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t getOutput [jvm] Content open fun getOutput (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t getVal_var [jvm] Content open fun getVal_var (): SWIGTYPE_p_libsnark__pb_variableT_field128_t setData [jvm] Content open fun setData (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) setNonce [jvm] Content open fun setNonce (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) setOutput [jvm] Content open fun setOutput (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) setVal_var [jvm] Content open fun setVal_var (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/#sharesult","text":"[jvm] open class ShaResult","title":"ShaResult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/#constructors","text":"Name Summary ShaResult [jvm] open fun ShaResult ()","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/#functions","text":"Name Summary delete [jvm] Content open fun delete () getData [jvm] Content open fun getData (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t getNonce [jvm] Content open fun getNonce (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t getOutput [jvm] Content open fun getOutput (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t getVal_var [jvm] Content open fun getVal_var (): SWIGTYPE_p_libsnark__pb_variableT_field128_t setData [jvm] Content open fun setData (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) setNonce [jvm] Content open fun setNonce (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) setOutput [jvm] Content open fun setOutput (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) setVal_var [jvm] Content open fun setVal_var (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/-sha-result/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / ShaResult ShaResult \u00b6 [jvm] Content open fun ShaResult ()","title":" sha result"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/-sha-result/#sharesult","text":"[jvm] Content open fun ShaResult ()","title":"ShaResult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-data/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / getData getData \u00b6 [jvm] Content open fun getData (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"Get data"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-data/#getdata","text":"[jvm] Content open fun getData (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"getData"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-nonce/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / getNonce getNonce \u00b6 [jvm] Content open fun getNonce (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"Get nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-nonce/#getnonce","text":"[jvm] Content open fun getNonce (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"getNonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / getOutput getOutput \u00b6 [jvm] Content open fun getOutput (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"Get output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-output/#getoutput","text":"[jvm] Content open fun getOutput (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"getOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-val_var/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / getVal_var getVal_var \u00b6 [jvm] Content open fun getVal_var (): SWIGTYPE_p_libsnark__pb_variableT_field128_t","title":"Get val var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/get-val_var/#getval_var","text":"[jvm] Content open fun getVal_var (): SWIGTYPE_p_libsnark__pb_variableT_field128_t","title":"getVal_var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-data/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / setData setData \u00b6 [jvm] Content open fun setData (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"Set data"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-data/#setdata","text":"[jvm] Content open fun setData (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"setData"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-nonce/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / setNonce setNonce \u00b6 [jvm] Content open fun setNonce (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"Set nonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-nonce/#setnonce","text":"[jvm] Content open fun setNonce (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"setNonce"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-output/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / setOutput setOutput \u00b6 [jvm] Content open fun setOutput (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"Set output"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-output/#setoutput","text":"[jvm] Content open fun setOutput (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"setOutput"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-val_var/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / ShaResult / setVal_var setVal_var \u00b6 [jvm] Content open fun setVal_var (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"Set val var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-sha-result/set-val_var/#setval_var","text":"[jvm] Content open fun setVal_var (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"setVal_var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Var Var \u00b6 [jvm] open class Var Constructors \u00b6 Name Summary Var [jvm] open fun Var () Functions \u00b6 Name Summary delete [jvm] Content open fun delete () getValue [jvm] Content open fun getValue (): SWIGTYPE_p_libsnark__pb_variableT_field128_t setValue [jvm] Content open fun setValue (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/#var","text":"[jvm] open class Var","title":"Var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/#constructors","text":"Name Summary Var [jvm] open fun Var ()","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/#functions","text":"Name Summary delete [jvm] Content open fun delete () getValue [jvm] Content open fun getValue (): SWIGTYPE_p_libsnark__pb_variableT_field128_t setValue [jvm] Content open fun setValue (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/-var/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Var / Var Var \u00b6 [jvm] Content open fun Var ()","title":" var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/-var/#var","text":"[jvm] Content open fun Var ()","title":"Var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Var / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/get-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Var / getValue getValue \u00b6 [jvm] Content open fun getValue (): SWIGTYPE_p_libsnark__pb_variableT_field128_t","title":"Get value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/get-value/#getvalue","text":"[jvm] Content open fun getValue (): SWIGTYPE_p_libsnark__pb_variableT_field128_t","title":"getValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/set-value/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / Var / setValue setValue \u00b6 [jvm] Content open fun setValue (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"Set value"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var/set-value/#setvalue","text":"[jvm] Content open fun setValue (value: SWIGTYPE_p_libsnark__pb_variableT_field128_t )","title":"setValue"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / VarArray VarArray \u00b6 [jvm] open class VarArray Constructors \u00b6 Name Summary VarArray [jvm] open fun VarArray () Functions \u00b6 Name Summary delete [jvm] Content open fun delete () getValues [jvm] Content open fun getValues (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t setValues [jvm] Content open fun setValues (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/#vararray","text":"[jvm] open class VarArray","title":"VarArray"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/#constructors","text":"Name Summary VarArray [jvm] open fun VarArray ()","title":"Constructors"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/#functions","text":"Name Summary delete [jvm] Content open fun delete () getValues [jvm] Content open fun getValues (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t setValues [jvm] Content open fun setValues (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/-var-array/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / VarArray / VarArray VarArray \u00b6 [jvm] Content open fun VarArray ()","title":" var array"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/-var-array/#vararray","text":"[jvm] Content open fun VarArray ()","title":"VarArray"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/delete/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / VarArray / delete delete \u00b6 [jvm] Content open fun delete ()","title":"Delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/delete/#delete","text":"[jvm] Content open fun delete ()","title":"delete"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/get-values/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / VarArray / getValues getValues \u00b6 [jvm] Content open fun getValues (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"Get values"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/get-values/#getvalues","text":"[jvm] Content open fun getValues (): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","title":"getValues"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/set-values/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / VarArray / setValues setValues \u00b6 [jvm] Content open fun setValues (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"Set values"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/-var-array/set-values/#setvalues","text":"[jvm] Content open fun setValues (value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"setValues"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper libsnarkwrapper \u00b6 [jvm] open class libsnarkwrapper Functions \u00b6 Name Summary addEquality [jvm] Content open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t , b: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: Var , b: Var ) bvec_to_string [jvm] Content open fun bvec_to_string (bitvector: BoolVector ): String divide_rounding_up [jvm] Content open fun divide_rounding_up (dividend: Long , divisor: Long ): Long ensure_satisfied [jvm] Content open fun ensure_satisfied (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t ): Boolean open fun ensure_satisfied (CS: SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , primary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , auxiliary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t ): Boolean get_sha_nonce_val [jvm] Content open fun get_sha_nonce_val (nonce: ByteBuf , val: Long ): ByteBuf initZKP [jvm] Content open fun initZKP () mkByteBuf [jvm] Content open fun mkByteBuf (data: Array < Byte >): ByteBuf mkSHA [jvm] Content open fun mkSHA (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , v: Long , nonce: String , isProver: Boolean ): ShaResult string_to_bvec [jvm] Content open fun string_to_bvec (data: String ): BoolVector","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/#libsnarkwrapper","text":"[jvm] open class libsnarkwrapper","title":"libsnarkwrapper"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/#functions","text":"Name Summary addEquality [jvm] Content open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t , b: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t ) open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: Var , b: Var ) bvec_to_string [jvm] Content open fun bvec_to_string (bitvector: BoolVector ): String divide_rounding_up [jvm] Content open fun divide_rounding_up (dividend: Long , divisor: Long ): Long ensure_satisfied [jvm] Content open fun ensure_satisfied (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t ): Boolean open fun ensure_satisfied (CS: SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , primary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , auxiliary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t ): Boolean get_sha_nonce_val [jvm] Content open fun get_sha_nonce_val (nonce: ByteBuf , val: Long ): ByteBuf initZKP [jvm] Content open fun initZKP () mkByteBuf [jvm] Content open fun mkByteBuf (data: Array < Byte >): ByteBuf mkSHA [jvm] Content open fun mkSHA (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , v: Long , nonce: String , isProver: Boolean ): ShaResult string_to_bvec [jvm] Content open fun string_to_bvec (data: String ): BoolVector","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/add-equality/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / addEquality addEquality \u00b6 [jvm] Content open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: Var , b: Var ) open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t , b: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"Add equality"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/add-equality/#addequality","text":"[jvm] Content open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: Var , b: Var ) open fun addEquality (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , a: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t , b: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t )","title":"addEquality"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/bvec_to_string/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / bvec_to_string bvec_to_string \u00b6 [jvm] Content open fun bvec_to_string (bitvector: BoolVector ): String","title":"Bvec to string"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/bvec_to_string/#bvec_to_string","text":"[jvm] Content open fun bvec_to_string (bitvector: BoolVector ): String","title":"bvec_to_string"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/divide_rounding_up/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / divide_rounding_up divide_rounding_up \u00b6 [jvm] Content open fun divide_rounding_up (dividend: Long , divisor: Long ): Long","title":"Divide rounding up"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/divide_rounding_up/#divide_rounding_up","text":"[jvm] Content open fun divide_rounding_up (dividend: Long , divisor: Long ): Long","title":"divide_rounding_up"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/ensure_satisfied/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / ensure_satisfied ensure_satisfied \u00b6 [jvm] Content open fun ensure_satisfied (CS: SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , primary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , auxiliary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t ): Boolean open fun ensure_satisfied (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t ): Boolean","title":"Ensure satisfied"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/ensure_satisfied/#ensure_satisfied","text":"[jvm] Content open fun ensure_satisfied (CS: SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , primary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t , auxiliary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t ): Boolean open fun ensure_satisfied (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t ): Boolean","title":"ensure_satisfied"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/get_sha_nonce_val/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / get_sha_nonce_val get_sha_nonce_val \u00b6 [jvm] Content open fun get_sha_nonce_val (nonce: ByteBuf , val: Long ): ByteBuf","title":"Get sha nonce val"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/get_sha_nonce_val/#get_sha_nonce_val","text":"[jvm] Content open fun get_sha_nonce_val (nonce: ByteBuf , val: Long ): ByteBuf","title":"get_sha_nonce_val"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/init-z-k-p/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / initZKP initZKP \u00b6 [jvm] Content open fun initZKP ()","title":"Init z k p"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/init-z-k-p/#initzkp","text":"[jvm] Content open fun initZKP ()","title":"initZKP"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/mk-byte-buf/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / mkByteBuf mkByteBuf \u00b6 [jvm] Content open fun mkByteBuf (data: Array < Byte >): ByteBuf","title":"Mk byte buf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/mk-byte-buf/#mkbytebuf","text":"[jvm] Content open fun mkByteBuf (data: Array < Byte >): ByteBuf","title":"mkByteBuf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/mk-s-h-a/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / mkSHA mkSHA \u00b6 [jvm] Content open fun mkSHA (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , v: Long , nonce: String , isProver: Boolean ): ShaResult","title":"Mk s h a"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/mk-s-h-a/#mksha","text":"[jvm] Content open fun mkSHA (pb: SWIGTYPE_p_libsnark__protoboardT_field128_t , v: Long , nonce: String , isProver: Boolean ): ShaResult","title":"mkSHA"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/string_to_bvec/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapper / string_to_bvec string_to_bvec \u00b6 [jvm] Content open fun string_to_bvec (data: String ): BoolVector","title":"String to bvec"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper/string_to_bvec/#string_to_bvec","text":"[jvm] Content open fun string_to_bvec (data: String ): BoolVector","title":"string_to_bvec"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI libsnarkwrapperJNI \u00b6 [jvm] open class libsnarkwrapperJNI Functions \u00b6 Name Summary addEquality__SWIG_0 [jvm] Content fun addEquality__SWIG_0 (jarg1: Long , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ) addEquality__SWIG_1 [jvm] Content fun addEquality__SWIG_1 (jarg1: Long , jarg2: Long , jarg3: Long ) BoolVector_capacity [jvm] Content fun BoolVector_capacity (jarg1: Long , jarg1_: BoolVector ): Long BoolVector_clear [jvm] Content fun BoolVector_clear (jarg1: Long , jarg1_: BoolVector ) BoolVector_doAdd__SWIG_0 [jvm] Content fun BoolVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: BoolVector , jarg2: Boolean ) BoolVector_doAdd__SWIG_1 [jvm] Content fun BoolVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean ) BoolVector_doGet [jvm] Content fun BoolVector_doGet (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean BoolVector_doRemove [jvm] Content fun BoolVector_doRemove (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean BoolVector_doRemoveRange [jvm] Content fun BoolVector_doRemoveRange (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Int ) BoolVector_doSet [jvm] Content fun BoolVector_doSet (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean ): Boolean BoolVector_doSize [jvm] Content fun BoolVector_doSize (jarg1: Long , jarg1_: BoolVector ): Int BoolVector_isEmpty [jvm] Content fun BoolVector_isEmpty (jarg1: Long , jarg1_: BoolVector ): Boolean BoolVector_reserve [jvm] Content fun BoolVector_reserve (jarg1: Long , jarg1_: BoolVector , jarg2: Long ) bvec_to_string [jvm] Content fun bvec_to_string (jarg1: Long , jarg1_: BoolVector ): String ByteBuf_contents_get [jvm] Content fun ByteBuf_contents_get (jarg1: Long , jarg1_: ByteBuf ): String ByteBuf_contents_set [jvm] Content fun ByteBuf_contents_set (jarg1: Long , jarg1_: ByteBuf , jarg2: String ) ByteBuf_get_data [jvm] Content fun ByteBuf_get_data (jarg1: Long , jarg1_: ByteBuf ): Array < Byte > CharVector_capacity [jvm] Content fun CharVector_capacity (jarg1: Long , jarg1_: CharVector ): Long CharVector_clear [jvm] Content fun CharVector_clear (jarg1: Long , jarg1_: CharVector ) CharVector_doAdd__SWIG_0 [jvm] Content fun CharVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: CharVector , jarg2: Char ) CharVector_doAdd__SWIG_1 [jvm] Content fun CharVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char ) CharVector_doGet [jvm] Content fun CharVector_doGet (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char CharVector_doRemove [jvm] Content fun CharVector_doRemove (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char CharVector_doRemoveRange [jvm] Content fun CharVector_doRemoveRange (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Int ) CharVector_doSet [jvm] Content fun CharVector_doSet (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char ): Char CharVector_doSize [jvm] Content fun CharVector_doSize (jarg1: Long , jarg1_: CharVector ): Int CharVector_isEmpty [jvm] Content fun CharVector_isEmpty (jarg1: Long , jarg1_: CharVector ): Boolean CharVector_reserve [jvm] Content fun CharVector_reserve (jarg1: Long , jarg1_: CharVector , jarg2: Long ) delete_BoolVector [jvm] Content fun delete_BoolVector (jarg1: Long ) delete_ByteBuf [jvm] Content fun delete_ByteBuf (jarg1: Long ) delete_CharVector [jvm] Content fun delete_CharVector (jarg1: Long ) delete_IntVector [jvm] Content fun delete_IntVector (jarg1: Long ) delete_Keypair [jvm] Content fun delete_Keypair (jarg1: Long ) delete_R1CSInstance [jvm] Content fun delete_R1CSInstance (jarg1: Long ) delete_ShaResult [jvm] Content fun delete_ShaResult (jarg1: Long ) delete_Var [jvm] Content fun delete_Var (jarg1: Long ) delete_VarArray [jvm] Content fun delete_VarArray (jarg1: Long ) divide_rounding_up [jvm] Content fun divide_rounding_up (jarg1: Long , jarg2: Long ): Long ensure_satisfied__SWIG_0 [jvm] Content fun ensure_satisfied__SWIG_0 (jarg1: Long , jarg2: Long , jarg3: Long ): Boolean ensure_satisfied__SWIG_1 [jvm] Content fun ensure_satisfied__SWIG_1 (jarg1: Long ): Boolean get_sha_nonce_val [jvm] Content fun get_sha_nonce_val (jarg1: Long , jarg1_: ByteBuf , jarg2: Long ): Long initZKP [jvm] Content fun initZKP () IntVector_capacity [jvm] Content fun IntVector_capacity (jarg1: Long , jarg1_: IntVector ): Long IntVector_clear [jvm] Content fun IntVector_clear (jarg1: Long , jarg1_: IntVector ) IntVector_doAdd__SWIG_0 [jvm] Content fun IntVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: IntVector , jarg2: Int ) IntVector_doAdd__SWIG_1 [jvm] Content fun IntVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ) IntVector_doGet [jvm] Content fun IntVector_doGet (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int IntVector_doRemove [jvm] Content fun IntVector_doRemove (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int IntVector_doRemoveRange [jvm] Content fun IntVector_doRemoveRange (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ) IntVector_doSet [jvm] Content fun IntVector_doSet (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ): Int IntVector_doSize [jvm] Content fun IntVector_doSize (jarg1: Long , jarg1_: IntVector ): Int IntVector_isEmpty [jvm] Content fun IntVector_isEmpty (jarg1: Long , jarg1_: IntVector ): Boolean IntVector_reserve [jvm] Content fun IntVector_reserve (jarg1: Long , jarg1_: IntVector , jarg2: Long ) Keypair_proving_key_get [jvm] Content fun Keypair_proving_key_get (jarg1: Long , jarg1_: Keypair ): Long Keypair_proving_key_set [jvm] Content fun Keypair_proving_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf ) Keypair_verification_key_get [jvm] Content fun Keypair_verification_key_get (jarg1: Long , jarg1_: Keypair ): Long Keypair_verification_key_set [jvm] Content fun Keypair_verification_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf ) mkByteBuf [jvm] Content fun mkByteBuf (jarg1: Array < Byte >): Long mkSHA [jvm] Content fun mkSHA (jarg1: Long , jarg2: Long , jarg3: String , jarg4: Boolean ): Long new_BoolVector__SWIG_0 [jvm] Content fun new_BoolVector__SWIG_0 (): Long new_BoolVector__SWIG_1 [jvm] Content fun new_BoolVector__SWIG_1 (jarg1: Long , jarg1_: BoolVector ): Long new_BoolVector__SWIG_2 [jvm] Content fun new_BoolVector__SWIG_2 (jarg1: Int , jarg2: Boolean ): Long new_ByteBuf [jvm] Content fun new_ByteBuf (): Long new_CharVector__SWIG_0 [jvm] Content fun new_CharVector__SWIG_0 (): Long new_CharVector__SWIG_1 [jvm] Content fun new_CharVector__SWIG_1 (jarg1: Long , jarg1_: CharVector ): Long new_CharVector__SWIG_2 [jvm] Content fun new_CharVector__SWIG_2 (jarg1: Int , jarg2: Char ): Long new_IntVector__SWIG_0 [jvm] Content fun new_IntVector__SWIG_0 (): Long new_IntVector__SWIG_1 [jvm] Content fun new_IntVector__SWIG_1 (jarg1: Long , jarg1_: IntVector ): Long new_IntVector__SWIG_2 [jvm] Content fun new_IntVector__SWIG_2 (jarg1: Int , jarg2: Int ): Long new_Keypair [jvm] Content fun new_Keypair (): Long new_R1CSInstance [jvm] Content fun new_R1CSInstance (): Long new_ShaResult [jvm] Content fun new_ShaResult (): Long new_Var [jvm] Content fun new_Var (): Long new_VarArray [jvm] Content fun new_VarArray (): Long R1CSInstance_AddEquality [jvm] Content fun R1CSInstance_AddEquality (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ) R1CSInstance_generateProof [jvm] Content fun R1CSInstance_generateProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long R1CSInstance_genKeypair [jvm] Content fun R1CSInstance_genKeypair (jarg1: Long , jarg1_: R1CSInstance ): Long R1CSInstance_isProver_get [jvm] Content fun R1CSInstance_isProver_get (jarg1: Long , jarg1_: R1CSInstance ): Boolean R1CSInstance_isProver_set [jvm] Content fun R1CSInstance_isProver_set (jarg1: Long , jarg1_: R1CSInstance , jarg2: Boolean ) R1CSInstance_mkAdd [jvm] Content fun R1CSInstance_mkAdd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkAnd [jvm] Content fun R1CSInstance_mkAnd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkEqualTo [jvm] Content fun R1CSInstance_mkEqualTo (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkLE [jvm] Content fun R1CSInstance_mkLE (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkLessThan [jvm] Content fun R1CSInstance_mkLessThan (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkMult [jvm] Content fun R1CSInstance_mkMult (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkMux [jvm] Content fun R1CSInstance_mkMux (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var , jarg4: Long , jarg4_: Var ): Long R1CSInstance_mkNot [jvm] Content fun R1CSInstance_mkNot (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var ): Long R1CSInstance_mkOr [jvm] Content fun R1CSInstance_mkOr (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkPrivateValProver [jvm] Content fun R1CSInstance_mkPrivateValProver (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg3: Long , jarg3_: VarArray , jarg4: Long , jarg4_: VarArray ): Long R1CSInstance_mkPrivateValVerifier [jvm] Content fun R1CSInstance_mkPrivateValVerifier (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: VarArray , jarg3: Long , jarg3_: VarArray ): Long R1CSInstance_mkPublicBitvec__SWIG_0 [jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_0 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: BoolVector ): Long R1CSInstance_mkPublicBitvec__SWIG_1 [jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_1 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long R1CSInstance_mkPublicVal [jvm] Content fun R1CSInstance_mkPublicVal (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long ): Long R1CSInstance_verifyProof [jvm] Content fun R1CSInstance_verifyProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf , jarg3: Long , jarg3_: ByteBuf ): Boolean ShaResult_data_get [jvm] Content fun ShaResult_data_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_data_set [jvm] Content fun ShaResult_data_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) ShaResult_nonce_get [jvm] Content fun ShaResult_nonce_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_nonce_set [jvm] Content fun ShaResult_nonce_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) ShaResult_output_get [jvm] Content fun ShaResult_output_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_output_set [jvm] Content fun ShaResult_output_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) ShaResult_val_var_get [jvm] Content fun ShaResult_val_var_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_val_var_set [jvm] Content fun ShaResult_val_var_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) string_to_bvec [jvm] Content fun string_to_bvec (jarg1: String ): Long Var_value_get [jvm] Content fun Var_value_get (jarg1: Long , jarg1_: Var ): Long Var_value_set [jvm] Content fun Var_value_set (jarg1: Long , jarg1_: Var , jarg2: Long ) VarArray_values_get [jvm] Content fun VarArray_values_get (jarg1: Long , jarg1_: VarArray ): Long VarArray_values_set [jvm] Content fun VarArray_values_set (jarg1: Long , jarg1_: VarArray , jarg2: Long )","title":"Index"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/#libsnarkwrapperjni","text":"[jvm] open class libsnarkwrapperJNI","title":"libsnarkwrapperJNI"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/#functions","text":"Name Summary addEquality__SWIG_0 [jvm] Content fun addEquality__SWIG_0 (jarg1: Long , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ) addEquality__SWIG_1 [jvm] Content fun addEquality__SWIG_1 (jarg1: Long , jarg2: Long , jarg3: Long ) BoolVector_capacity [jvm] Content fun BoolVector_capacity (jarg1: Long , jarg1_: BoolVector ): Long BoolVector_clear [jvm] Content fun BoolVector_clear (jarg1: Long , jarg1_: BoolVector ) BoolVector_doAdd__SWIG_0 [jvm] Content fun BoolVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: BoolVector , jarg2: Boolean ) BoolVector_doAdd__SWIG_1 [jvm] Content fun BoolVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean ) BoolVector_doGet [jvm] Content fun BoolVector_doGet (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean BoolVector_doRemove [jvm] Content fun BoolVector_doRemove (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean BoolVector_doRemoveRange [jvm] Content fun BoolVector_doRemoveRange (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Int ) BoolVector_doSet [jvm] Content fun BoolVector_doSet (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean ): Boolean BoolVector_doSize [jvm] Content fun BoolVector_doSize (jarg1: Long , jarg1_: BoolVector ): Int BoolVector_isEmpty [jvm] Content fun BoolVector_isEmpty (jarg1: Long , jarg1_: BoolVector ): Boolean BoolVector_reserve [jvm] Content fun BoolVector_reserve (jarg1: Long , jarg1_: BoolVector , jarg2: Long ) bvec_to_string [jvm] Content fun bvec_to_string (jarg1: Long , jarg1_: BoolVector ): String ByteBuf_contents_get [jvm] Content fun ByteBuf_contents_get (jarg1: Long , jarg1_: ByteBuf ): String ByteBuf_contents_set [jvm] Content fun ByteBuf_contents_set (jarg1: Long , jarg1_: ByteBuf , jarg2: String ) ByteBuf_get_data [jvm] Content fun ByteBuf_get_data (jarg1: Long , jarg1_: ByteBuf ): Array < Byte > CharVector_capacity [jvm] Content fun CharVector_capacity (jarg1: Long , jarg1_: CharVector ): Long CharVector_clear [jvm] Content fun CharVector_clear (jarg1: Long , jarg1_: CharVector ) CharVector_doAdd__SWIG_0 [jvm] Content fun CharVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: CharVector , jarg2: Char ) CharVector_doAdd__SWIG_1 [jvm] Content fun CharVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char ) CharVector_doGet [jvm] Content fun CharVector_doGet (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char CharVector_doRemove [jvm] Content fun CharVector_doRemove (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char CharVector_doRemoveRange [jvm] Content fun CharVector_doRemoveRange (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Int ) CharVector_doSet [jvm] Content fun CharVector_doSet (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char ): Char CharVector_doSize [jvm] Content fun CharVector_doSize (jarg1: Long , jarg1_: CharVector ): Int CharVector_isEmpty [jvm] Content fun CharVector_isEmpty (jarg1: Long , jarg1_: CharVector ): Boolean CharVector_reserve [jvm] Content fun CharVector_reserve (jarg1: Long , jarg1_: CharVector , jarg2: Long ) delete_BoolVector [jvm] Content fun delete_BoolVector (jarg1: Long ) delete_ByteBuf [jvm] Content fun delete_ByteBuf (jarg1: Long ) delete_CharVector [jvm] Content fun delete_CharVector (jarg1: Long ) delete_IntVector [jvm] Content fun delete_IntVector (jarg1: Long ) delete_Keypair [jvm] Content fun delete_Keypair (jarg1: Long ) delete_R1CSInstance [jvm] Content fun delete_R1CSInstance (jarg1: Long ) delete_ShaResult [jvm] Content fun delete_ShaResult (jarg1: Long ) delete_Var [jvm] Content fun delete_Var (jarg1: Long ) delete_VarArray [jvm] Content fun delete_VarArray (jarg1: Long ) divide_rounding_up [jvm] Content fun divide_rounding_up (jarg1: Long , jarg2: Long ): Long ensure_satisfied__SWIG_0 [jvm] Content fun ensure_satisfied__SWIG_0 (jarg1: Long , jarg2: Long , jarg3: Long ): Boolean ensure_satisfied__SWIG_1 [jvm] Content fun ensure_satisfied__SWIG_1 (jarg1: Long ): Boolean get_sha_nonce_val [jvm] Content fun get_sha_nonce_val (jarg1: Long , jarg1_: ByteBuf , jarg2: Long ): Long initZKP [jvm] Content fun initZKP () IntVector_capacity [jvm] Content fun IntVector_capacity (jarg1: Long , jarg1_: IntVector ): Long IntVector_clear [jvm] Content fun IntVector_clear (jarg1: Long , jarg1_: IntVector ) IntVector_doAdd__SWIG_0 [jvm] Content fun IntVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: IntVector , jarg2: Int ) IntVector_doAdd__SWIG_1 [jvm] Content fun IntVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ) IntVector_doGet [jvm] Content fun IntVector_doGet (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int IntVector_doRemove [jvm] Content fun IntVector_doRemove (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int IntVector_doRemoveRange [jvm] Content fun IntVector_doRemoveRange (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ) IntVector_doSet [jvm] Content fun IntVector_doSet (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ): Int IntVector_doSize [jvm] Content fun IntVector_doSize (jarg1: Long , jarg1_: IntVector ): Int IntVector_isEmpty [jvm] Content fun IntVector_isEmpty (jarg1: Long , jarg1_: IntVector ): Boolean IntVector_reserve [jvm] Content fun IntVector_reserve (jarg1: Long , jarg1_: IntVector , jarg2: Long ) Keypair_proving_key_get [jvm] Content fun Keypair_proving_key_get (jarg1: Long , jarg1_: Keypair ): Long Keypair_proving_key_set [jvm] Content fun Keypair_proving_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf ) Keypair_verification_key_get [jvm] Content fun Keypair_verification_key_get (jarg1: Long , jarg1_: Keypair ): Long Keypair_verification_key_set [jvm] Content fun Keypair_verification_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf ) mkByteBuf [jvm] Content fun mkByteBuf (jarg1: Array < Byte >): Long mkSHA [jvm] Content fun mkSHA (jarg1: Long , jarg2: Long , jarg3: String , jarg4: Boolean ): Long new_BoolVector__SWIG_0 [jvm] Content fun new_BoolVector__SWIG_0 (): Long new_BoolVector__SWIG_1 [jvm] Content fun new_BoolVector__SWIG_1 (jarg1: Long , jarg1_: BoolVector ): Long new_BoolVector__SWIG_2 [jvm] Content fun new_BoolVector__SWIG_2 (jarg1: Int , jarg2: Boolean ): Long new_ByteBuf [jvm] Content fun new_ByteBuf (): Long new_CharVector__SWIG_0 [jvm] Content fun new_CharVector__SWIG_0 (): Long new_CharVector__SWIG_1 [jvm] Content fun new_CharVector__SWIG_1 (jarg1: Long , jarg1_: CharVector ): Long new_CharVector__SWIG_2 [jvm] Content fun new_CharVector__SWIG_2 (jarg1: Int , jarg2: Char ): Long new_IntVector__SWIG_0 [jvm] Content fun new_IntVector__SWIG_0 (): Long new_IntVector__SWIG_1 [jvm] Content fun new_IntVector__SWIG_1 (jarg1: Long , jarg1_: IntVector ): Long new_IntVector__SWIG_2 [jvm] Content fun new_IntVector__SWIG_2 (jarg1: Int , jarg2: Int ): Long new_Keypair [jvm] Content fun new_Keypair (): Long new_R1CSInstance [jvm] Content fun new_R1CSInstance (): Long new_ShaResult [jvm] Content fun new_ShaResult (): Long new_Var [jvm] Content fun new_Var (): Long new_VarArray [jvm] Content fun new_VarArray (): Long R1CSInstance_AddEquality [jvm] Content fun R1CSInstance_AddEquality (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ) R1CSInstance_generateProof [jvm] Content fun R1CSInstance_generateProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long R1CSInstance_genKeypair [jvm] Content fun R1CSInstance_genKeypair (jarg1: Long , jarg1_: R1CSInstance ): Long R1CSInstance_isProver_get [jvm] Content fun R1CSInstance_isProver_get (jarg1: Long , jarg1_: R1CSInstance ): Boolean R1CSInstance_isProver_set [jvm] Content fun R1CSInstance_isProver_set (jarg1: Long , jarg1_: R1CSInstance , jarg2: Boolean ) R1CSInstance_mkAdd [jvm] Content fun R1CSInstance_mkAdd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkAnd [jvm] Content fun R1CSInstance_mkAnd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkEqualTo [jvm] Content fun R1CSInstance_mkEqualTo (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkLE [jvm] Content fun R1CSInstance_mkLE (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkLessThan [jvm] Content fun R1CSInstance_mkLessThan (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkMult [jvm] Content fun R1CSInstance_mkMult (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkMux [jvm] Content fun R1CSInstance_mkMux (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var , jarg4: Long , jarg4_: Var ): Long R1CSInstance_mkNot [jvm] Content fun R1CSInstance_mkNot (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var ): Long R1CSInstance_mkOr [jvm] Content fun R1CSInstance_mkOr (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long R1CSInstance_mkPrivateValProver [jvm] Content fun R1CSInstance_mkPrivateValProver (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg3: Long , jarg3_: VarArray , jarg4: Long , jarg4_: VarArray ): Long R1CSInstance_mkPrivateValVerifier [jvm] Content fun R1CSInstance_mkPrivateValVerifier (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: VarArray , jarg3: Long , jarg3_: VarArray ): Long R1CSInstance_mkPublicBitvec__SWIG_0 [jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_0 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: BoolVector ): Long R1CSInstance_mkPublicBitvec__SWIG_1 [jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_1 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long R1CSInstance_mkPublicVal [jvm] Content fun R1CSInstance_mkPublicVal (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long ): Long R1CSInstance_verifyProof [jvm] Content fun R1CSInstance_verifyProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf , jarg3: Long , jarg3_: ByteBuf ): Boolean ShaResult_data_get [jvm] Content fun ShaResult_data_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_data_set [jvm] Content fun ShaResult_data_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) ShaResult_nonce_get [jvm] Content fun ShaResult_nonce_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_nonce_set [jvm] Content fun ShaResult_nonce_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) ShaResult_output_get [jvm] Content fun ShaResult_output_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_output_set [jvm] Content fun ShaResult_output_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) ShaResult_val_var_get [jvm] Content fun ShaResult_val_var_get (jarg1: Long , jarg1_: ShaResult ): Long ShaResult_val_var_set [jvm] Content fun ShaResult_val_var_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long ) string_to_bvec [jvm] Content fun string_to_bvec (jarg1: String ): Long Var_value_get [jvm] Content fun Var_value_get (jarg1: Long , jarg1_: Var ): Long Var_value_set [jvm] Content fun Var_value_set (jarg1: Long , jarg1_: Var , jarg2: Long ) VarArray_values_get [jvm] Content fun VarArray_values_get (jarg1: Long , jarg1_: VarArray ): Long VarArray_values_set [jvm] Content fun VarArray_values_set (jarg1: Long , jarg1_: VarArray , jarg2: Long )","title":"Functions"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_capacity/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_capacity BoolVector_capacity \u00b6 [jvm] Content fun BoolVector_capacity (jarg1: Long , jarg1_: BoolVector ): Long","title":" bool vector capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_capacity/#boolvector_capacity","text":"[jvm] Content fun BoolVector_capacity (jarg1: Long , jarg1_: BoolVector ): Long","title":"BoolVector_capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_clear/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_clear BoolVector_clear \u00b6 [jvm] Content fun BoolVector_clear (jarg1: Long , jarg1_: BoolVector )","title":" bool vector clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_clear/#boolvector_clear","text":"[jvm] Content fun BoolVector_clear (jarg1: Long , jarg1_: BoolVector )","title":"BoolVector_clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-add__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_doAdd__SWIG_0 BoolVector_doAdd__SWIG_0 \u00b6 [jvm] Content fun BoolVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: BoolVector , jarg2: Boolean )","title":" bool vector do add   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-add__-s-w-i-g_0/#boolvector_doadd__swig_0","text":"[jvm] Content fun BoolVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: BoolVector , jarg2: Boolean )","title":"BoolVector_doAdd__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-add__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_doAdd__SWIG_1 BoolVector_doAdd__SWIG_1 \u00b6 [jvm] Content fun BoolVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean )","title":" bool vector do add   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-add__-s-w-i-g_1/#boolvector_doadd__swig_1","text":"[jvm] Content fun BoolVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean )","title":"BoolVector_doAdd__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_doGet BoolVector_doGet \u00b6 [jvm] Content fun BoolVector_doGet (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean","title":" bool vector do get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-get/#boolvector_doget","text":"[jvm] Content fun BoolVector_doGet (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean","title":"BoolVector_doGet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-remove-range/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_doRemoveRange BoolVector_doRemoveRange \u00b6 [jvm] Content fun BoolVector_doRemoveRange (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Int )","title":" bool vector do remove range"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-remove-range/#boolvector_doremoverange","text":"[jvm] Content fun BoolVector_doRemoveRange (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Int )","title":"BoolVector_doRemoveRange"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-remove/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_doRemove BoolVector_doRemove \u00b6 [jvm] Content fun BoolVector_doRemove (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean","title":" bool vector do remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-remove/#boolvector_doremove","text":"[jvm] Content fun BoolVector_doRemove (jarg1: Long , jarg1_: BoolVector , jarg2: Int ): Boolean","title":"BoolVector_doRemove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_doSet BoolVector_doSet \u00b6 [jvm] Content fun BoolVector_doSet (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean ): Boolean","title":" bool vector do set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-set/#boolvector_doset","text":"[jvm] Content fun BoolVector_doSet (jarg1: Long , jarg1_: BoolVector , jarg2: Int , jarg3: Boolean ): Boolean","title":"BoolVector_doSet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-size/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_doSize BoolVector_doSize \u00b6 [jvm] Content fun BoolVector_doSize (jarg1: Long , jarg1_: BoolVector ): Int","title":" bool vector do size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-size/#boolvector_dosize","text":"[jvm] Content fun BoolVector_doSize (jarg1: Long , jarg1_: BoolVector ): Int","title":"BoolVector_doSize"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_is-empty/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_isEmpty BoolVector_isEmpty \u00b6 [jvm] Content fun BoolVector_isEmpty (jarg1: Long , jarg1_: BoolVector ): Boolean","title":" bool vector is empty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_is-empty/#boolvector_isempty","text":"[jvm] Content fun BoolVector_isEmpty (jarg1: Long , jarg1_: BoolVector ): Boolean","title":"BoolVector_isEmpty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_reserve/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / BoolVector_reserve BoolVector_reserve \u00b6 [jvm] Content fun BoolVector_reserve (jarg1: Long , jarg1_: BoolVector , jarg2: Long )","title":" bool vector reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_reserve/#boolvector_reserve","text":"[jvm] Content fun BoolVector_reserve (jarg1: Long , jarg1_: BoolVector , jarg2: Long )","title":"BoolVector_reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_contents_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ByteBuf_contents_get ByteBuf_contents_get \u00b6 [jvm] Content fun ByteBuf_contents_get (jarg1: Long , jarg1_: ByteBuf ): String","title":" byte buf contents get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_contents_get/#bytebuf_contents_get","text":"[jvm] Content fun ByteBuf_contents_get (jarg1: Long , jarg1_: ByteBuf ): String","title":"ByteBuf_contents_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_contents_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ByteBuf_contents_set ByteBuf_contents_set \u00b6 [jvm] Content fun ByteBuf_contents_set (jarg1: Long , jarg1_: ByteBuf , jarg2: String )","title":" byte buf contents set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_contents_set/#bytebuf_contents_set","text":"[jvm] Content fun ByteBuf_contents_set (jarg1: Long , jarg1_: ByteBuf , jarg2: String )","title":"ByteBuf_contents_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_get_data/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ByteBuf_get_data ByteBuf_get_data \u00b6 [jvm] Content fun ByteBuf_get_data (jarg1: Long , jarg1_: ByteBuf ): Array < Byte >","title":" byte buf get data"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_get_data/#bytebuf_get_data","text":"[jvm] Content fun ByteBuf_get_data (jarg1: Long , jarg1_: ByteBuf ): Array < Byte >","title":"ByteBuf_get_data"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_capacity/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_capacity CharVector_capacity \u00b6 [jvm] Content fun CharVector_capacity (jarg1: Long , jarg1_: CharVector ): Long","title":" char vector capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_capacity/#charvector_capacity","text":"[jvm] Content fun CharVector_capacity (jarg1: Long , jarg1_: CharVector ): Long","title":"CharVector_capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_clear/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_clear CharVector_clear \u00b6 [jvm] Content fun CharVector_clear (jarg1: Long , jarg1_: CharVector )","title":" char vector clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_clear/#charvector_clear","text":"[jvm] Content fun CharVector_clear (jarg1: Long , jarg1_: CharVector )","title":"CharVector_clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-add__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_doAdd__SWIG_0 CharVector_doAdd__SWIG_0 \u00b6 [jvm] Content fun CharVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: CharVector , jarg2: Char )","title":" char vector do add   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-add__-s-w-i-g_0/#charvector_doadd__swig_0","text":"[jvm] Content fun CharVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: CharVector , jarg2: Char )","title":"CharVector_doAdd__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-add__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_doAdd__SWIG_1 CharVector_doAdd__SWIG_1 \u00b6 [jvm] Content fun CharVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char )","title":" char vector do add   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-add__-s-w-i-g_1/#charvector_doadd__swig_1","text":"[jvm] Content fun CharVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char )","title":"CharVector_doAdd__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_doGet CharVector_doGet \u00b6 [jvm] Content fun CharVector_doGet (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char","title":" char vector do get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-get/#charvector_doget","text":"[jvm] Content fun CharVector_doGet (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char","title":"CharVector_doGet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-remove-range/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_doRemoveRange CharVector_doRemoveRange \u00b6 [jvm] Content fun CharVector_doRemoveRange (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Int )","title":" char vector do remove range"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-remove-range/#charvector_doremoverange","text":"[jvm] Content fun CharVector_doRemoveRange (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Int )","title":"CharVector_doRemoveRange"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-remove/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_doRemove CharVector_doRemove \u00b6 [jvm] Content fun CharVector_doRemove (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char","title":" char vector do remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-remove/#charvector_doremove","text":"[jvm] Content fun CharVector_doRemove (jarg1: Long , jarg1_: CharVector , jarg2: Int ): Char","title":"CharVector_doRemove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_doSet CharVector_doSet \u00b6 [jvm] Content fun CharVector_doSet (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char ): Char","title":" char vector do set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-set/#charvector_doset","text":"[jvm] Content fun CharVector_doSet (jarg1: Long , jarg1_: CharVector , jarg2: Int , jarg3: Char ): Char","title":"CharVector_doSet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-size/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_doSize CharVector_doSize \u00b6 [jvm] Content fun CharVector_doSize (jarg1: Long , jarg1_: CharVector ): Int","title":" char vector do size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-size/#charvector_dosize","text":"[jvm] Content fun CharVector_doSize (jarg1: Long , jarg1_: CharVector ): Int","title":"CharVector_doSize"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_is-empty/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_isEmpty CharVector_isEmpty \u00b6 [jvm] Content fun CharVector_isEmpty (jarg1: Long , jarg1_: CharVector ): Boolean","title":" char vector is empty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_is-empty/#charvector_isempty","text":"[jvm] Content fun CharVector_isEmpty (jarg1: Long , jarg1_: CharVector ): Boolean","title":"CharVector_isEmpty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_reserve/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / CharVector_reserve CharVector_reserve \u00b6 [jvm] Content fun CharVector_reserve (jarg1: Long , jarg1_: CharVector , jarg2: Long )","title":" char vector reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_reserve/#charvector_reserve","text":"[jvm] Content fun CharVector_reserve (jarg1: Long , jarg1_: CharVector , jarg2: Long )","title":"CharVector_reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_capacity/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_capacity IntVector_capacity \u00b6 [jvm] Content fun IntVector_capacity (jarg1: Long , jarg1_: IntVector ): Long","title":" int vector capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_capacity/#intvector_capacity","text":"[jvm] Content fun IntVector_capacity (jarg1: Long , jarg1_: IntVector ): Long","title":"IntVector_capacity"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_clear/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_clear IntVector_clear \u00b6 [jvm] Content fun IntVector_clear (jarg1: Long , jarg1_: IntVector )","title":" int vector clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_clear/#intvector_clear","text":"[jvm] Content fun IntVector_clear (jarg1: Long , jarg1_: IntVector )","title":"IntVector_clear"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-add__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_doAdd__SWIG_0 IntVector_doAdd__SWIG_0 \u00b6 [jvm] Content fun IntVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: IntVector , jarg2: Int )","title":" int vector do add   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-add__-s-w-i-g_0/#intvector_doadd__swig_0","text":"[jvm] Content fun IntVector_doAdd__SWIG_0 (jarg1: Long , jarg1_: IntVector , jarg2: Int )","title":"IntVector_doAdd__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-add__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_doAdd__SWIG_1 IntVector_doAdd__SWIG_1 \u00b6 [jvm] Content fun IntVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int )","title":" int vector do add   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-add__-s-w-i-g_1/#intvector_doadd__swig_1","text":"[jvm] Content fun IntVector_doAdd__SWIG_1 (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int )","title":"IntVector_doAdd__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_doGet IntVector_doGet \u00b6 [jvm] Content fun IntVector_doGet (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int","title":" int vector do get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-get/#intvector_doget","text":"[jvm] Content fun IntVector_doGet (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int","title":"IntVector_doGet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-remove-range/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_doRemoveRange IntVector_doRemoveRange \u00b6 [jvm] Content fun IntVector_doRemoveRange (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int )","title":" int vector do remove range"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-remove-range/#intvector_doremoverange","text":"[jvm] Content fun IntVector_doRemoveRange (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int )","title":"IntVector_doRemoveRange"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-remove/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_doRemove IntVector_doRemove \u00b6 [jvm] Content fun IntVector_doRemove (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int","title":" int vector do remove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-remove/#intvector_doremove","text":"[jvm] Content fun IntVector_doRemove (jarg1: Long , jarg1_: IntVector , jarg2: Int ): Int","title":"IntVector_doRemove"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_doSet IntVector_doSet \u00b6 [jvm] Content fun IntVector_doSet (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ): Int","title":" int vector do set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-set/#intvector_doset","text":"[jvm] Content fun IntVector_doSet (jarg1: Long , jarg1_: IntVector , jarg2: Int , jarg3: Int ): Int","title":"IntVector_doSet"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-size/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_doSize IntVector_doSize \u00b6 [jvm] Content fun IntVector_doSize (jarg1: Long , jarg1_: IntVector ): Int","title":" int vector do size"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-size/#intvector_dosize","text":"[jvm] Content fun IntVector_doSize (jarg1: Long , jarg1_: IntVector ): Int","title":"IntVector_doSize"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_is-empty/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_isEmpty IntVector_isEmpty \u00b6 [jvm] Content fun IntVector_isEmpty (jarg1: Long , jarg1_: IntVector ): Boolean","title":" int vector is empty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_is-empty/#intvector_isempty","text":"[jvm] Content fun IntVector_isEmpty (jarg1: Long , jarg1_: IntVector ): Boolean","title":"IntVector_isEmpty"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_reserve/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / IntVector_reserve IntVector_reserve \u00b6 [jvm] Content fun IntVector_reserve (jarg1: Long , jarg1_: IntVector , jarg2: Long )","title":" int vector reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_reserve/#intvector_reserve","text":"[jvm] Content fun IntVector_reserve (jarg1: Long , jarg1_: IntVector , jarg2: Long )","title":"IntVector_reserve"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_proving_key_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / Keypair_proving_key_get Keypair_proving_key_get \u00b6 [jvm] Content fun Keypair_proving_key_get (jarg1: Long , jarg1_: Keypair ): Long","title":" keypair proving key get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_proving_key_get/#keypair_proving_key_get","text":"[jvm] Content fun Keypair_proving_key_get (jarg1: Long , jarg1_: Keypair ): Long","title":"Keypair_proving_key_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_proving_key_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / Keypair_proving_key_set Keypair_proving_key_set \u00b6 [jvm] Content fun Keypair_proving_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf )","title":" keypair proving key set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_proving_key_set/#keypair_proving_key_set","text":"[jvm] Content fun Keypair_proving_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf )","title":"Keypair_proving_key_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_verification_key_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / Keypair_verification_key_get Keypair_verification_key_get \u00b6 [jvm] Content fun Keypair_verification_key_get (jarg1: Long , jarg1_: Keypair ): Long","title":" keypair verification key get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_verification_key_get/#keypair_verification_key_get","text":"[jvm] Content fun Keypair_verification_key_get (jarg1: Long , jarg1_: Keypair ): Long","title":"Keypair_verification_key_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_verification_key_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / Keypair_verification_key_set Keypair_verification_key_set \u00b6 [jvm] Content fun Keypair_verification_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf )","title":" keypair verification key set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_verification_key_set/#keypair_verification_key_set","text":"[jvm] Content fun Keypair_verification_key_set (jarg1: Long , jarg1_: Keypair , jarg2: Long , jarg2_: ByteBuf )","title":"Keypair_verification_key_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_-add-equality/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_AddEquality R1CSInstance_AddEquality \u00b6 [jvm] Content fun R1CSInstance_AddEquality (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var )","title":" r1 c s instance  add equality"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_-add-equality/#r1csinstance_addequality","text":"[jvm] Content fun R1CSInstance_AddEquality (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var )","title":"R1CSInstance_AddEquality"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_gen-keypair/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_genKeypair R1CSInstance_genKeypair \u00b6 [jvm] Content fun R1CSInstance_genKeypair (jarg1: Long , jarg1_: R1CSInstance ): Long","title":" r1 c s instance gen keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_gen-keypair/#r1csinstance_genkeypair","text":"[jvm] Content fun R1CSInstance_genKeypair (jarg1: Long , jarg1_: R1CSInstance ): Long","title":"R1CSInstance_genKeypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_generate-proof/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_generateProof R1CSInstance_generateProof \u00b6 [jvm] Content fun R1CSInstance_generateProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long","title":" r1 c s instance generate proof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_generate-proof/#r1csinstance_generateproof","text":"[jvm] Content fun R1CSInstance_generateProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long","title":"R1CSInstance_generateProof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_is-prover_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_isProver_get R1CSInstance_isProver_get \u00b6 [jvm] Content fun R1CSInstance_isProver_get (jarg1: Long , jarg1_: R1CSInstance ): Boolean","title":" r1 c s instance is prover get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_is-prover_get/#r1csinstance_isprover_get","text":"[jvm] Content fun R1CSInstance_isProver_get (jarg1: Long , jarg1_: R1CSInstance ): Boolean","title":"R1CSInstance_isProver_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_is-prover_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_isProver_set R1CSInstance_isProver_set \u00b6 [jvm] Content fun R1CSInstance_isProver_set (jarg1: Long , jarg1_: R1CSInstance , jarg2: Boolean )","title":" r1 c s instance is prover set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_is-prover_set/#r1csinstance_isprover_set","text":"[jvm] Content fun R1CSInstance_isProver_set (jarg1: Long , jarg1_: R1CSInstance , jarg2: Boolean )","title":"R1CSInstance_isProver_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-add/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkAdd R1CSInstance_mkAdd \u00b6 [jvm] Content fun R1CSInstance_mkAdd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":" r1 c s instance mk add"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-add/#r1csinstance_mkadd","text":"[jvm] Content fun R1CSInstance_mkAdd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":"R1CSInstance_mkAdd"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-and/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkAnd R1CSInstance_mkAnd \u00b6 [jvm] Content fun R1CSInstance_mkAnd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":" r1 c s instance mk and"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-and/#r1csinstance_mkand","text":"[jvm] Content fun R1CSInstance_mkAnd (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":"R1CSInstance_mkAnd"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-equal-to/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkEqualTo R1CSInstance_mkEqualTo \u00b6 [jvm] Content fun R1CSInstance_mkEqualTo (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":" r1 c s instance mk equal to"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-equal-to/#r1csinstance_mkequalto","text":"[jvm] Content fun R1CSInstance_mkEqualTo (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":"R1CSInstance_mkEqualTo"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-l-e/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkLE R1CSInstance_mkLE \u00b6 [jvm] Content fun R1CSInstance_mkLE (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":" r1 c s instance mk l e"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-l-e/#r1csinstance_mkle","text":"[jvm] Content fun R1CSInstance_mkLE (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":"R1CSInstance_mkLE"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-less-than/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkLessThan R1CSInstance_mkLessThan \u00b6 [jvm] Content fun R1CSInstance_mkLessThan (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":" r1 c s instance mk less than"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-less-than/#r1csinstance_mklessthan","text":"[jvm] Content fun R1CSInstance_mkLessThan (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":"R1CSInstance_mkLessThan"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-mult/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkMult R1CSInstance_mkMult \u00b6 [jvm] Content fun R1CSInstance_mkMult (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":" r1 c s instance mk mult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-mult/#r1csinstance_mkmult","text":"[jvm] Content fun R1CSInstance_mkMult (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":"R1CSInstance_mkMult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-mux/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkMux R1CSInstance_mkMux \u00b6 [jvm] Content fun R1CSInstance_mkMux (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var , jarg4: Long , jarg4_: Var ): Long","title":" r1 c s instance mk mux"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-mux/#r1csinstance_mkmux","text":"[jvm] Content fun R1CSInstance_mkMux (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var , jarg4: Long , jarg4_: Var ): Long","title":"R1CSInstance_mkMux"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-not/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkNot R1CSInstance_mkNot \u00b6 [jvm] Content fun R1CSInstance_mkNot (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var ): Long","title":" r1 c s instance mk not"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-not/#r1csinstance_mknot","text":"[jvm] Content fun R1CSInstance_mkNot (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var ): Long","title":"R1CSInstance_mkNot"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-or/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkOr R1CSInstance_mkOr \u00b6 [jvm] Content fun R1CSInstance_mkOr (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":" r1 c s instance mk or"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-or/#r1csinstance_mkor","text":"[jvm] Content fun R1CSInstance_mkOr (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var ): Long","title":"R1CSInstance_mkOr"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-private-val-prover/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkPrivateValProver R1CSInstance_mkPrivateValProver \u00b6 [jvm] Content fun R1CSInstance_mkPrivateValProver (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg3: Long , jarg3_: VarArray , jarg4: Long , jarg4_: VarArray ): Long","title":" r1 c s instance mk private val prover"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-private-val-prover/#r1csinstance_mkprivatevalprover","text":"[jvm] Content fun R1CSInstance_mkPrivateValProver (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg3: Long , jarg3_: VarArray , jarg4: Long , jarg4_: VarArray ): Long","title":"R1CSInstance_mkPrivateValProver"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-private-val-verifier/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkPrivateValVerifier R1CSInstance_mkPrivateValVerifier \u00b6 [jvm] Content fun R1CSInstance_mkPrivateValVerifier (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: VarArray , jarg3: Long , jarg3_: VarArray ): Long","title":" r1 c s instance mk private val verifier"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-private-val-verifier/#r1csinstance_mkprivatevalverifier","text":"[jvm] Content fun R1CSInstance_mkPrivateValVerifier (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: VarArray , jarg3: Long , jarg3_: VarArray ): Long","title":"R1CSInstance_mkPrivateValVerifier"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-bitvec__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkPublicBitvec__SWIG_0 R1CSInstance_mkPublicBitvec__SWIG_0 \u00b6 [jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_0 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: BoolVector ): Long","title":" r1 c s instance mk public bitvec   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-bitvec__-s-w-i-g_0/#r1csinstance_mkpublicbitvec__swig_0","text":"[jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_0 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: BoolVector ): Long","title":"R1CSInstance_mkPublicBitvec__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-bitvec__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkPublicBitvec__SWIG_1 R1CSInstance_mkPublicBitvec__SWIG_1 \u00b6 [jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_1 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long","title":" r1 c s instance mk public bitvec   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-bitvec__-s-w-i-g_1/#r1csinstance_mkpublicbitvec__swig_1","text":"[jvm] Content fun R1CSInstance_mkPublicBitvec__SWIG_1 (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf ): Long","title":"R1CSInstance_mkPublicBitvec__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-val/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_mkPublicVal R1CSInstance_mkPublicVal \u00b6 [jvm] Content fun R1CSInstance_mkPublicVal (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long ): Long","title":" r1 c s instance mk public val"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-val/#r1csinstance_mkpublicval","text":"[jvm] Content fun R1CSInstance_mkPublicVal (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long ): Long","title":"R1CSInstance_mkPublicVal"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_verify-proof/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / R1CSInstance_verifyProof R1CSInstance_verifyProof \u00b6 [jvm] Content fun R1CSInstance_verifyProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf , jarg3: Long , jarg3_: ByteBuf ): Boolean","title":" r1 c s instance verify proof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_verify-proof/#r1csinstance_verifyproof","text":"[jvm] Content fun R1CSInstance_verifyProof (jarg1: Long , jarg1_: R1CSInstance , jarg2: Long , jarg2_: ByteBuf , jarg3: Long , jarg3_: ByteBuf ): Boolean","title":"R1CSInstance_verifyProof"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_data_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_data_get ShaResult_data_get \u00b6 [jvm] Content fun ShaResult_data_get (jarg1: Long , jarg1_: ShaResult ): Long","title":" sha result data get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_data_get/#sharesult_data_get","text":"[jvm] Content fun ShaResult_data_get (jarg1: Long , jarg1_: ShaResult ): Long","title":"ShaResult_data_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_data_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_data_set ShaResult_data_set \u00b6 [jvm] Content fun ShaResult_data_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":" sha result data set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_data_set/#sharesult_data_set","text":"[jvm] Content fun ShaResult_data_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":"ShaResult_data_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_nonce_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_nonce_get ShaResult_nonce_get \u00b6 [jvm] Content fun ShaResult_nonce_get (jarg1: Long , jarg1_: ShaResult ): Long","title":" sha result nonce get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_nonce_get/#sharesult_nonce_get","text":"[jvm] Content fun ShaResult_nonce_get (jarg1: Long , jarg1_: ShaResult ): Long","title":"ShaResult_nonce_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_nonce_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_nonce_set ShaResult_nonce_set \u00b6 [jvm] Content fun ShaResult_nonce_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":" sha result nonce set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_nonce_set/#sharesult_nonce_set","text":"[jvm] Content fun ShaResult_nonce_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":"ShaResult_nonce_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_output_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_output_get ShaResult_output_get \u00b6 [jvm] Content fun ShaResult_output_get (jarg1: Long , jarg1_: ShaResult ): Long","title":" sha result output get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_output_get/#sharesult_output_get","text":"[jvm] Content fun ShaResult_output_get (jarg1: Long , jarg1_: ShaResult ): Long","title":"ShaResult_output_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_output_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_output_set ShaResult_output_set \u00b6 [jvm] Content fun ShaResult_output_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":" sha result output set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_output_set/#sharesult_output_set","text":"[jvm] Content fun ShaResult_output_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":"ShaResult_output_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_val_var_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_val_var_get ShaResult_val_var_get \u00b6 [jvm] Content fun ShaResult_val_var_get (jarg1: Long , jarg1_: ShaResult ): Long","title":" sha result val var get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_val_var_get/#sharesult_val_var_get","text":"[jvm] Content fun ShaResult_val_var_get (jarg1: Long , jarg1_: ShaResult ): Long","title":"ShaResult_val_var_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_val_var_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ShaResult_val_var_set ShaResult_val_var_set \u00b6 [jvm] Content fun ShaResult_val_var_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":" sha result val var set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_val_var_set/#sharesult_val_var_set","text":"[jvm] Content fun ShaResult_val_var_set (jarg1: Long , jarg1_: ShaResult , jarg2: Long )","title":"ShaResult_val_var_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var-array_values_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / VarArray_values_get VarArray_values_get \u00b6 [jvm] Content fun VarArray_values_get (jarg1: Long , jarg1_: VarArray ): Long","title":" var array values get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var-array_values_get/#vararray_values_get","text":"[jvm] Content fun VarArray_values_get (jarg1: Long , jarg1_: VarArray ): Long","title":"VarArray_values_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var-array_values_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / VarArray_values_set VarArray_values_set \u00b6 [jvm] Content fun VarArray_values_set (jarg1: Long , jarg1_: VarArray , jarg2: Long )","title":" var array values set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var-array_values_set/#vararray_values_set","text":"[jvm] Content fun VarArray_values_set (jarg1: Long , jarg1_: VarArray , jarg2: Long )","title":"VarArray_values_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var_value_get/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / Var_value_get Var_value_get \u00b6 [jvm] Content fun Var_value_get (jarg1: Long , jarg1_: Var ): Long","title":" var value get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var_value_get/#var_value_get","text":"[jvm] Content fun Var_value_get (jarg1: Long , jarg1_: Var ): Long","title":"Var_value_get"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var_value_set/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / Var_value_set Var_value_set \u00b6 [jvm] Content fun Var_value_set (jarg1: Long , jarg1_: Var , jarg2: Long )","title":" var value set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var_value_set/#var_value_set","text":"[jvm] Content fun Var_value_set (jarg1: Long , jarg1_: Var , jarg2: Long )","title":"Var_value_set"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/add-equality__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / addEquality__SWIG_0 addEquality__SWIG_0 \u00b6 [jvm] Content fun addEquality__SWIG_0 (jarg1: Long , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var )","title":"Add equality   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/add-equality__-s-w-i-g_0/#addequality__swig_0","text":"[jvm] Content fun addEquality__SWIG_0 (jarg1: Long , jarg2: Long , jarg2_: Var , jarg3: Long , jarg3_: Var )","title":"addEquality__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/add-equality__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / addEquality__SWIG_1 addEquality__SWIG_1 \u00b6 [jvm] Content fun addEquality__SWIG_1 (jarg1: Long , jarg2: Long , jarg3: Long )","title":"Add equality   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/add-equality__-s-w-i-g_1/#addequality__swig_1","text":"[jvm] Content fun addEquality__SWIG_1 (jarg1: Long , jarg2: Long , jarg3: Long )","title":"addEquality__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/bvec_to_string/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / bvec_to_string bvec_to_string \u00b6 [jvm] Content fun bvec_to_string (jarg1: Long , jarg1_: BoolVector ): String","title":"Bvec to string"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/bvec_to_string/#bvec_to_string","text":"[jvm] Content fun bvec_to_string (jarg1: Long , jarg1_: BoolVector ): String","title":"bvec_to_string"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-bool-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_BoolVector delete_BoolVector \u00b6 [jvm] Content fun delete_BoolVector (jarg1: Long )","title":"Delete  bool vector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-bool-vector/#delete_boolvector","text":"[jvm] Content fun delete_BoolVector (jarg1: Long )","title":"delete_BoolVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-byte-buf/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_ByteBuf delete_ByteBuf \u00b6 [jvm] Content fun delete_ByteBuf (jarg1: Long )","title":"Delete  byte buf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-byte-buf/#delete_bytebuf","text":"[jvm] Content fun delete_ByteBuf (jarg1: Long )","title":"delete_ByteBuf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-char-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_CharVector delete_CharVector \u00b6 [jvm] Content fun delete_CharVector (jarg1: Long )","title":"Delete  char vector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-char-vector/#delete_charvector","text":"[jvm] Content fun delete_CharVector (jarg1: Long )","title":"delete_CharVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-int-vector/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_IntVector delete_IntVector \u00b6 [jvm] Content fun delete_IntVector (jarg1: Long )","title":"Delete  int vector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-int-vector/#delete_intvector","text":"[jvm] Content fun delete_IntVector (jarg1: Long )","title":"delete_IntVector"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-keypair/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_Keypair delete_Keypair \u00b6 [jvm] Content fun delete_Keypair (jarg1: Long )","title":"Delete  keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-keypair/#delete_keypair","text":"[jvm] Content fun delete_Keypair (jarg1: Long )","title":"delete_Keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-r1-c-s-instance/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_R1CSInstance delete_R1CSInstance \u00b6 [jvm] Content fun delete_R1CSInstance (jarg1: Long )","title":"Delete  r1 c s instance"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-r1-c-s-instance/#delete_r1csinstance","text":"[jvm] Content fun delete_R1CSInstance (jarg1: Long )","title":"delete_R1CSInstance"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-sha-result/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_ShaResult delete_ShaResult \u00b6 [jvm] Content fun delete_ShaResult (jarg1: Long )","title":"Delete  sha result"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-sha-result/#delete_sharesult","text":"[jvm] Content fun delete_ShaResult (jarg1: Long )","title":"delete_ShaResult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-var-array/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_VarArray delete_VarArray \u00b6 [jvm] Content fun delete_VarArray (jarg1: Long )","title":"Delete  var array"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-var-array/#delete_vararray","text":"[jvm] Content fun delete_VarArray (jarg1: Long )","title":"delete_VarArray"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-var/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / delete_Var delete_Var \u00b6 [jvm] Content fun delete_Var (jarg1: Long )","title":"Delete  var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-var/#delete_var","text":"[jvm] Content fun delete_Var (jarg1: Long )","title":"delete_Var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/divide_rounding_up/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / divide_rounding_up divide_rounding_up \u00b6 [jvm] Content fun divide_rounding_up (jarg1: Long , jarg2: Long ): Long","title":"Divide rounding up"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/divide_rounding_up/#divide_rounding_up","text":"[jvm] Content fun divide_rounding_up (jarg1: Long , jarg2: Long ): Long","title":"divide_rounding_up"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/ensure_satisfied__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ensure_satisfied__SWIG_0 ensure_satisfied__SWIG_0 \u00b6 [jvm] Content fun ensure_satisfied__SWIG_0 (jarg1: Long , jarg2: Long , jarg3: Long ): Boolean","title":"Ensure satisfied   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/ensure_satisfied__-s-w-i-g_0/#ensure_satisfied__swig_0","text":"[jvm] Content fun ensure_satisfied__SWIG_0 (jarg1: Long , jarg2: Long , jarg3: Long ): Boolean","title":"ensure_satisfied__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/ensure_satisfied__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / ensure_satisfied__SWIG_1 ensure_satisfied__SWIG_1 \u00b6 [jvm] Content fun ensure_satisfied__SWIG_1 (jarg1: Long ): Boolean","title":"Ensure satisfied   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/ensure_satisfied__-s-w-i-g_1/#ensure_satisfied__swig_1","text":"[jvm] Content fun ensure_satisfied__SWIG_1 (jarg1: Long ): Boolean","title":"ensure_satisfied__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/get_sha_nonce_val/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / get_sha_nonce_val get_sha_nonce_val \u00b6 [jvm] Content fun get_sha_nonce_val (jarg1: Long , jarg1_: ByteBuf , jarg2: Long ): Long","title":"Get sha nonce val"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/get_sha_nonce_val/#get_sha_nonce_val","text":"[jvm] Content fun get_sha_nonce_val (jarg1: Long , jarg1_: ByteBuf , jarg2: Long ): Long","title":"get_sha_nonce_val"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/init-z-k-p/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / initZKP initZKP \u00b6 [jvm] Content fun initZKP ()","title":"Init z k p"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/init-z-k-p/#initzkp","text":"[jvm] Content fun initZKP ()","title":"initZKP"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/mk-byte-buf/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / mkByteBuf mkByteBuf \u00b6 [jvm] Content fun mkByteBuf (jarg1: Array < Byte >): Long","title":"Mk byte buf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/mk-byte-buf/#mkbytebuf","text":"[jvm] Content fun mkByteBuf (jarg1: Array < Byte >): Long","title":"mkByteBuf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/mk-s-h-a/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / mkSHA mkSHA \u00b6 [jvm] Content fun mkSHA (jarg1: Long , jarg2: Long , jarg3: String , jarg4: Boolean ): Long","title":"Mk s h a"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/mk-s-h-a/#mksha","text":"[jvm] Content fun mkSHA (jarg1: Long , jarg2: Long , jarg3: String , jarg4: Boolean ): Long","title":"mkSHA"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_BoolVector__SWIG_0 new_BoolVector__SWIG_0 \u00b6 [jvm] Content fun new_BoolVector__SWIG_0 (): Long","title":"New  bool vector   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_0/#new_boolvector__swig_0","text":"[jvm] Content fun new_BoolVector__SWIG_0 (): Long","title":"new_BoolVector__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_BoolVector__SWIG_1 new_BoolVector__SWIG_1 \u00b6 [jvm] Content fun new_BoolVector__SWIG_1 (jarg1: Long , jarg1_: BoolVector ): Long","title":"New  bool vector   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_1/#new_boolvector__swig_1","text":"[jvm] Content fun new_BoolVector__SWIG_1 (jarg1: Long , jarg1_: BoolVector ): Long","title":"new_BoolVector__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_2/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_BoolVector__SWIG_2 new_BoolVector__SWIG_2 \u00b6 [jvm] Content fun new_BoolVector__SWIG_2 (jarg1: Int , jarg2: Boolean ): Long","title":"New  bool vector   s w i g 2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_2/#new_boolvector__swig_2","text":"[jvm] Content fun new_BoolVector__SWIG_2 (jarg1: Int , jarg2: Boolean ): Long","title":"new_BoolVector__SWIG_2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-byte-buf/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_ByteBuf new_ByteBuf \u00b6 [jvm] Content fun new_ByteBuf (): Long","title":"New  byte buf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-byte-buf/#new_bytebuf","text":"[jvm] Content fun new_ByteBuf (): Long","title":"new_ByteBuf"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_CharVector__SWIG_0 new_CharVector__SWIG_0 \u00b6 [jvm] Content fun new_CharVector__SWIG_0 (): Long","title":"New  char vector   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_0/#new_charvector__swig_0","text":"[jvm] Content fun new_CharVector__SWIG_0 (): Long","title":"new_CharVector__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_CharVector__SWIG_1 new_CharVector__SWIG_1 \u00b6 [jvm] Content fun new_CharVector__SWIG_1 (jarg1: Long , jarg1_: CharVector ): Long","title":"New  char vector   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_1/#new_charvector__swig_1","text":"[jvm] Content fun new_CharVector__SWIG_1 (jarg1: Long , jarg1_: CharVector ): Long","title":"new_CharVector__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_2/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_CharVector__SWIG_2 new_CharVector__SWIG_2 \u00b6 [jvm] Content fun new_CharVector__SWIG_2 (jarg1: Int , jarg2: Char ): Long","title":"New  char vector   s w i g 2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_2/#new_charvector__swig_2","text":"[jvm] Content fun new_CharVector__SWIG_2 (jarg1: Int , jarg2: Char ): Long","title":"new_CharVector__SWIG_2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_0/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_IntVector__SWIG_0 new_IntVector__SWIG_0 \u00b6 [jvm] Content fun new_IntVector__SWIG_0 (): Long","title":"New  int vector   s w i g 0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_0/#new_intvector__swig_0","text":"[jvm] Content fun new_IntVector__SWIG_0 (): Long","title":"new_IntVector__SWIG_0"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_1/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_IntVector__SWIG_1 new_IntVector__SWIG_1 \u00b6 [jvm] Content fun new_IntVector__SWIG_1 (jarg1: Long , jarg1_: IntVector ): Long","title":"New  int vector   s w i g 1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_1/#new_intvector__swig_1","text":"[jvm] Content fun new_IntVector__SWIG_1 (jarg1: Long , jarg1_: IntVector ): Long","title":"new_IntVector__SWIG_1"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_2/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_IntVector__SWIG_2 new_IntVector__SWIG_2 \u00b6 [jvm] Content fun new_IntVector__SWIG_2 (jarg1: Int , jarg2: Int ): Long","title":"New  int vector   s w i g 2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_2/#new_intvector__swig_2","text":"[jvm] Content fun new_IntVector__SWIG_2 (jarg1: Int , jarg2: Int ): Long","title":"new_IntVector__SWIG_2"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-keypair/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_Keypair new_Keypair \u00b6 [jvm] Content fun new_Keypair (): Long","title":"New  keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-keypair/#new_keypair","text":"[jvm] Content fun new_Keypair (): Long","title":"new_Keypair"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-r1-c-s-instance/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_R1CSInstance new_R1CSInstance \u00b6 [jvm] Content fun new_R1CSInstance (): Long","title":"New  r1 c s instance"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-r1-c-s-instance/#new_r1csinstance","text":"[jvm] Content fun new_R1CSInstance (): Long","title":"new_R1CSInstance"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-sha-result/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_ShaResult new_ShaResult \u00b6 [jvm] Content fun new_ShaResult (): Long","title":"New  sha result"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-sha-result/#new_sharesult","text":"[jvm] Content fun new_ShaResult (): Long","title":"new_ShaResult"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-var-array/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_VarArray new_VarArray \u00b6 [jvm] Content fun new_VarArray (): Long","title":"New  var array"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-var-array/#new_vararray","text":"[jvm] Content fun new_VarArray (): Long","title":"new_VarArray"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-var/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / new_Var new_Var \u00b6 [jvm] Content fun new_Var (): Long","title":"New  var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-var/#new_var","text":"[jvm] Content fun new_Var (): Long","title":"new_Var"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/string_to_bvec/","text":"// runtime / edu.cornell.cs.apl.viaduct.libsnarkwrapper / libsnarkwrapperJNI / string_to_bvec string_to_bvec \u00b6 [jvm] Content fun string_to_bvec (jarg1: String ): Long","title":"String to bvec"},{"location":"api/runtime/runtime/edu.cornell.cs.apl.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/string_to_bvec/#string_to_bvec","text":"[jvm] Content fun string_to_bvec (jarg1: String ): Long","title":"string_to_bvec"},{"location":"api/shared/shared/","text":"// shared shared \u00b6 Packages \u00b6 Name Summary edu.cornell.cs.apl.attributes Attribute grammars based on the Kiama library. edu.cornell.cs.apl.prettyprinting edu.cornell.cs.apl.viaduct","title":"Shared Modules"},{"location":"api/shared/shared/#shared","text":"","title":"shared"},{"location":"api/shared/shared/#packages","text":"Name Summary edu.cornell.cs.apl.attributes Attribute grammars based on the Kiama library. edu.cornell.cs.apl.prettyprinting edu.cornell.cs.apl.viaduct","title":"Packages"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/","text":"// shared / edu.cornell.cs.apl.attributes Package edu.cornell.cs.apl.attributes \u00b6 [jvm] Attribute grammars based on the Kiama library. Please read the section on Attribute Grammars in Kiama's user manual to learn how to use this library. Types \u00b6 Name Summary Attribute [jvm] Content abstract class Attribute Node , out T > : Function1 < Node , T > , ReadOnlyProperty < Node , T > More info An attribute of type T for nodes of type Node . CycleInAttributeDefinitionException [jvm] Content class CycleInAttributeDefinitionException : RuntimeException More info Thrown when a cycle is (dynamically) detected in an Attribute definition. Tree [jvm] Content class Tree < Node : TreeNode < Node >, out RootNode : Node >( root : RootNode ) More info Computes and stores parent/child/sibling relations in a tree structure. TreeNode [jvm] Content interface TreeNode Node > More info A node in a Tree . Functions \u00b6 Name Summary attribute [jvm] Content fun < Node , T > attribute (f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . circularAttribute [jvm] Content fun < Node , T > circularAttribute (initial: T , f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . collectedAttribute [jvm] Content fun < Node : TreeNode < Node >, T > collectedAttribute (tree: Tree < Node , Node >, f: ( Node ) -> Iterable < Pair < Node , T >>): Attribute < Node , Set < T >> More info Defines an Attribute where the value of each Node is determined by the contributions from the other nodes.","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/#package-educornellcsaplattributes","text":"[jvm] Attribute grammars based on the Kiama library. Please read the section on Attribute Grammars in Kiama's user manual to learn how to use this library.","title":"Package edu.cornell.cs.apl.attributes"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/#types","text":"Name Summary Attribute [jvm] Content abstract class Attribute Node , out T > : Function1 < Node , T > , ReadOnlyProperty < Node , T > More info An attribute of type T for nodes of type Node . CycleInAttributeDefinitionException [jvm] Content class CycleInAttributeDefinitionException : RuntimeException More info Thrown when a cycle is (dynamically) detected in an Attribute definition. Tree [jvm] Content class Tree < Node : TreeNode < Node >, out RootNode : Node >( root : RootNode ) More info Computes and stores parent/child/sibling relations in a tree structure. TreeNode [jvm] Content interface TreeNode Node > More info A node in a Tree .","title":"Types"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/#functions","text":"Name Summary attribute [jvm] Content fun < Node , T > attribute (f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . circularAttribute [jvm] Content fun < Node , T > circularAttribute (initial: T , f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . collectedAttribute [jvm] Content fun < Node : TreeNode < Node >, T > collectedAttribute (tree: Tree < Node , Node >, f: ( Node ) -> Iterable < Pair < Node , T >>): Attribute < Node , Set < T >> More info Defines an Attribute where the value of each Node is determined by the contributions from the other nodes.","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/attribute/","text":"// shared / edu.cornell.cs.apl.attributes / attribute attribute \u00b6 [jvm] Content fun < Node , T > attribute (f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . The value of the attribute for a given Node is determined by the function f. Calls to f are cached, so there is at most one call to f for any given Node . If the value of the attribute for a Node is never requested, then there are no calls to f for that Node . Note that Node equality is determined by object identity, not Any.equals . See also \u00b6 jvm Name Summary edu.cornell.cs.apl.attributes.Attribute Throws \u00b6 Name Summary edu.cornell.cs.apl.attributes.CycleInAttributeDefinitionException if f(node) depends on f(node) for some node.","title":"Attribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/attribute/#attribute","text":"[jvm] Content fun < Node , T > attribute (f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . The value of the attribute for a given Node is determined by the function f. Calls to f are cached, so there is at most one call to f for any given Node . If the value of the attribute for a Node is never requested, then there are no calls to f for that Node . Note that Node equality is determined by object identity, not Any.equals .","title":"attribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/attribute/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.attributes.Attribute","title":"See also"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/attribute/#throws","text":"Name Summary edu.cornell.cs.apl.attributes.CycleInAttributeDefinitionException if f(node) depends on f(node) for some node.","title":"Throws"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/circular-attribute/","text":"// shared / edu.cornell.cs.apl.attributes / circularAttribute circularAttribute \u00b6 [jvm] Content fun < Node , T > circularAttribute (initial: T , f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . Unlike with attribute , attribute definitions are allowed to be circular. The value of the attribute is computed by the function f, which may itself use the value of the attribute. Attribute values are initialized to initial. The attribute (and any circular attributes on which it depends) are evaluated until no value changes (i.e., a fixed point is reached). The final result is cached so that subsequent evaluations are fast and return the same value. See also \u00b6 jvm Name Summary attribute edu.cornell.cs.apl.attributes.Attribute","title":"Circular attribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/circular-attribute/#circularattribute","text":"[jvm] Content fun < Node , T > circularAttribute (initial: T , f: Node .() -> T ): Attribute < Node , T > More info Defines an Attribute of type T for nodes of type Node . Unlike with attribute , attribute definitions are allowed to be circular. The value of the attribute is computed by the function f, which may itself use the value of the attribute. Attribute values are initialized to initial. The attribute (and any circular attributes on which it depends) are evaluated until no value changes (i.e., a fixed point is reached). The final result is cached so that subsequent evaluations are fast and return the same value.","title":"circularAttribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/circular-attribute/#see-also","text":"jvm Name Summary attribute edu.cornell.cs.apl.attributes.Attribute","title":"See also"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/collected-attribute/","text":"// shared / edu.cornell.cs.apl.attributes / collectedAttribute collectedAttribute \u00b6 [jvm] Content fun < Node : TreeNode < Node >, T > collectedAttribute (tree: Tree < Node , Node >, f: ( Node ) -> Iterable < Pair < Node , T >>): Attribute < Node , Set < T >> More info Defines an Attribute where the value of each Node is determined by the contributions from the other nodes. For every node, f specifies the contribution of that node to the other nodes. All nodes in tree are traversed to collect the attributes for each node. The tree is traversed lazily\u2014only when the value of any node is demanded. Note that it is safe for f to use other attributes, but f should not depend the attribute being defined.","title":"Collected attribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/collected-attribute/#collectedattribute","text":"[jvm] Content fun < Node : TreeNode < Node >, T > collectedAttribute (tree: Tree < Node , Node >, f: ( Node ) -> Iterable < Pair < Node , T >>): Attribute < Node , Set < T >> More info Defines an Attribute where the value of each Node is determined by the contributions from the other nodes. For every node, f specifies the contribution of that node to the other nodes. All nodes in tree are traversed to collect the attributes for each node. The tree is traversed lazily\u2014only when the value of any node is demanded. Note that it is safe for f to use other attributes, but f should not depend the attribute being defined.","title":"collectedAttribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/","text":"// shared / edu.cornell.cs.apl.attributes / Attribute Attribute \u00b6 [jvm] abstract class Attribute Node , out T > : Function1 < Node , T > , ReadOnlyProperty < Node , T > An attribute of type T for nodes of type Node . This class is meant to be used as a property delegate: val height: Int by attribute { ... } Constructors \u00b6 Name Summary Attribute [jvm] fun Attribute () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content operator override fun getValue (thisRef: Node , property: KProperty <*>): T hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content abstract operator fun invoke (p1: Node ): T toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/#attribute","text":"[jvm] abstract class Attribute Node , out T > : Function1 < Node , T > , ReadOnlyProperty < Node , T > An attribute of type T for nodes of type Node . This class is meant to be used as a property delegate: val height: Int by attribute { ... }","title":"Attribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/#constructors","text":"Name Summary Attribute [jvm] fun Attribute ()","title":"Constructors"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean getValue [jvm] Content operator override fun getValue (thisRef: Node , property: KProperty <*>): T hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content abstract operator fun invoke (p1: Node ): T toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/-attribute/","text":"// shared / edu.cornell.cs.apl.attributes / Attribute / Attribute Attribute \u00b6 [jvm] Content fun Attribute ()","title":" attribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/-attribute/#attribute","text":"[jvm] Content fun Attribute ()","title":"Attribute"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/get-value/","text":"// shared / edu.cornell.cs.apl.attributes / Attribute / getValue getValue \u00b6 [jvm] Content operator override fun getValue (thisRef: Node , property: KProperty <*>): T","title":"Get value"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-attribute/get-value/#getvalue","text":"[jvm] Content operator override fun getValue (thisRef: Node , property: KProperty <*>): T","title":"getValue"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-cycle-in-attribute-definition-exception/","text":"// shared / edu.cornell.cs.apl.attributes / CycleInAttributeDefinitionException CycleInAttributeDefinitionException \u00b6 [jvm] class CycleInAttributeDefinitionException : RuntimeException Thrown when a cycle is (dynamically) detected in an Attribute definition. Constructors \u00b6 Name Summary CycleInAttributeDefinitionException [jvm] fun CycleInAttributeDefinitionException () Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-cycle-in-attribute-definition-exception/#cycleinattributedefinitionexception","text":"[jvm] class CycleInAttributeDefinitionException : RuntimeException Thrown when a cycle is (dynamically) detected in an Attribute definition.","title":"CycleInAttributeDefinitionException"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-cycle-in-attribute-definition-exception/#constructors","text":"Name Summary CycleInAttributeDefinitionException [jvm] fun CycleInAttributeDefinitionException ()","title":"Constructors"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-cycle-in-attribute-definition-exception/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) equals [jvm] Content open operator fun equals (other: Any ?): Boolean fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > hashCode [jvm] Content open fun hashCode (): Int initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-cycle-in-attribute-definition-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-cycle-in-attribute-definition-exception/-cycle-in-attribute-definition-exception/","text":"// shared / edu.cornell.cs.apl.attributes / CycleInAttributeDefinitionException / CycleInAttributeDefinitionException CycleInAttributeDefinitionException \u00b6 [jvm] Content fun CycleInAttributeDefinitionException ()","title":" cycle in attribute definition exception"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-cycle-in-attribute-definition-exception/-cycle-in-attribute-definition-exception/#cycleinattributedefinitionexception","text":"[jvm] Content fun CycleInAttributeDefinitionException ()","title":"CycleInAttributeDefinitionException"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/","text":"// shared / edu.cornell.cs.apl.attributes / Tree Tree \u00b6 [jvm] class Tree < Node : TreeNode < Node >, out RootNode : Node >( root : RootNode ) Computes and stores parent/child/sibling relations in a tree structure. This class is a simplified version of Kiama's tree relations. Refer to the sections on Attribute Grammars and Relations . in Kiama's user manual for more information. Parameters \u00b6 jvm Name Summary Node The type of nodes in the tree. RootNode The type of the root node of the tree. root The root node of the tree. Constructors \u00b6 Name Summary Tree [jvm] fun RootNode : Node > Tree (root: RootNode )The type of nodes in the tree. Functions \u00b6 Name Summary childIndex [jvm] Content fun childIndex (node: Node ): Int More info Returns the index of node in its parent's children list. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int nextSibling [jvm] Content fun nextSibling (node: Node ): Node ? More info Returns the node that occurs just after node in its parent's children list, or null if node is the root or node is its parent's last child. parent [jvm] Content fun parent (node: Node ): Node ? More info Returns the parent of node, or null if node is the root. previousSibling [jvm] Content fun previousSibling (node: Node ): Node ? More info Returns the node that occurs just before node in its parent's children list, or null if node is the root or node is its parent's first child. toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary root [jvm] val root : RootNode The root node of the tree.","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/#tree","text":"[jvm] class Tree < Node : TreeNode < Node >, out RootNode : Node >( root : RootNode ) Computes and stores parent/child/sibling relations in a tree structure. This class is a simplified version of Kiama's tree relations. Refer to the sections on Attribute Grammars and Relations . in Kiama's user manual for more information.","title":"Tree"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/#parameters","text":"jvm Name Summary Node The type of nodes in the tree. RootNode The type of the root node of the tree. root The root node of the tree.","title":"Parameters"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/#constructors","text":"Name Summary Tree [jvm] fun RootNode : Node > Tree (root: RootNode )The type of nodes in the tree.","title":"Constructors"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/#functions","text":"Name Summary childIndex [jvm] Content fun childIndex (node: Node ): Int More info Returns the index of node in its parent's children list. equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int nextSibling [jvm] Content fun nextSibling (node: Node ): Node ? More info Returns the node that occurs just after node in its parent's children list, or null if node is the root or node is its parent's last child. parent [jvm] Content fun parent (node: Node ): Node ? More info Returns the parent of node, or null if node is the root. previousSibling [jvm] Content fun previousSibling (node: Node ): Node ? More info Returns the node that occurs just before node in its parent's children list, or null if node is the root or node is its parent's first child. toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/#properties","text":"Name Summary root [jvm] val root : RootNode The root node of the tree.","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/-tree/","text":"// shared / edu.cornell.cs.apl.attributes / Tree / Tree Tree \u00b6 [jvm] Content fun RootNode : Node > Tree (root: RootNode ) More info Parameters \u00b6 jvm Name Summary Node The type of nodes in the tree. RootNode The type of the root node of the tree. root The root node of the tree.","title":" tree"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/-tree/#tree","text":"[jvm] Content fun RootNode : Node > Tree (root: RootNode ) More info","title":"Tree"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/-tree/#parameters","text":"jvm Name Summary Node The type of nodes in the tree. RootNode The type of the root node of the tree. root The root node of the tree.","title":"Parameters"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/child-index/","text":"// shared / edu.cornell.cs.apl.attributes / Tree / childIndex childIndex \u00b6 [jvm] Content fun childIndex (node: Node ): Int More info Returns the index of node in its parent's children list.","title":"Child index"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/child-index/#childindex","text":"[jvm] Content fun childIndex (node: Node ): Int More info Returns the index of node in its parent's children list.","title":"childIndex"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/next-sibling/","text":"// shared / edu.cornell.cs.apl.attributes / Tree / nextSibling nextSibling \u00b6 [jvm] Content fun nextSibling (node: Node ): Node ? More info Returns the node that occurs just after node in its parent's children list, or null if node is the root or node is its parent's last child.","title":"Next sibling"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/next-sibling/#nextsibling","text":"[jvm] Content fun nextSibling (node: Node ): Node ? More info Returns the node that occurs just after node in its parent's children list, or null if node is the root or node is its parent's last child.","title":"nextSibling"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/parent/","text":"// shared / edu.cornell.cs.apl.attributes / Tree / parent parent \u00b6 [jvm] Content fun parent (node: Node ): Node ? More info Returns the parent of node, or null if node is the root.","title":"Parent"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/parent/#parent","text":"[jvm] Content fun parent (node: Node ): Node ? More info Returns the parent of node, or null if node is the root.","title":"parent"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/previous-sibling/","text":"// shared / edu.cornell.cs.apl.attributes / Tree / previousSibling previousSibling \u00b6 [jvm] Content fun previousSibling (node: Node ): Node ? More info Returns the node that occurs just before node in its parent's children list, or null if node is the root or node is its parent's first child.","title":"Previous sibling"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/previous-sibling/#previoussibling","text":"[jvm] Content fun previousSibling (node: Node ): Node ? More info Returns the node that occurs just before node in its parent's children list, or null if node is the root or node is its parent's first child.","title":"previousSibling"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/root/","text":"// shared / edu.cornell.cs.apl.attributes / Tree / root root \u00b6 [jvm] Content val root : RootNode More info Parameters \u00b6 jvm Name Summary root The root node of the tree.","title":"Root"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/root/#root","text":"[jvm] Content val root : RootNode More info","title":"root"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree/root/#parameters","text":"jvm Name Summary root The root node of the tree.","title":"Parameters"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree-node/","text":"// shared / edu.cornell.cs.apl.attributes / TreeNode TreeNode \u00b6 [jvm] interface TreeNode Node > A node in a Tree . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary children [jvm] abstract val children : Iterable < Node >The list of all children nodes.","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree-node/#treenode","text":"[jvm] interface TreeNode Node > A node in a Tree .","title":"TreeNode"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree-node/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree-node/#properties","text":"Name Summary children [jvm] abstract val children : Iterable < Node >The list of all children nodes.","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree-node/children/","text":"// shared / edu.cornell.cs.apl.attributes / TreeNode / children children \u00b6 [jvm] Content abstract val children : Iterable < Node > More info The list of all children nodes. This is empty for leaf nodes.","title":"Children"},{"location":"api/shared/shared/edu.cornell.cs.apl.attributes/-tree-node/children/#children","text":"[jvm] Content abstract val children : Iterable < Node > More info The list of all children nodes. This is empty for leaf nodes.","title":"children"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/","text":"// shared / edu.cornell.cs.apl.prettyprinting Package edu.cornell.cs.apl.prettyprinting \u00b6 Types \u00b6 Name Summary AnsiBaseColor [jvm] Content enum AnsiBaseColor : Enum < AnsiBaseColor > More info One of the 8 basic colors supported by the ANSI standard. AnsiColor [jvm] Content sealed class AnsiColor More info An ANSI 4-bit color . BrightColor [jvm] Content data class BrightColor ( baseColor : AnsiBaseColor ) : AnsiColor More info Bright variant of baseColor . DefaultColor [jvm] Content object DefaultColor : AnsiColor More info The default foreground or background color. DefaultStyle [jvm] Content object DefaultStyle : Style More info The default Style . Document [jvm] Content sealed class Document : PrettyPrintable More info Represents a pretty printed document. NormalColor [jvm] Content data class NormalColor ( baseColor : AnsiBaseColor ) : AnsiColor More info Normal variant of baseColor . PrettyPrintable [jvm] Content interface PrettyPrintable More info An object that has a pretty text representation. Style [jvm] Content interface Style More info A style describing how text should be printed on an ANSI terminal. Functions \u00b6 Name Summary braced [jvm] Content fun List < PrettyPrintable >. braced (): Document More info Like joined but using commas as separators and enclosed in curly braces. bracketed [jvm] Content fun List < PrettyPrintable >. bracketed (): Document More info Like joined but using commas as separators and enclosed in square brackets. commented [jvm] Content fun PrettyPrintable . commented (): Document More info Like joined but using commas as separators and enclosed in /* and */. concatenated [jvm] Content fun List < PrettyPrintable >. concatenated (separator: PrettyPrintable = Document()): Document More info Concatenates all the elements together with separators in between. div [jvm] Content operator fun PrettyPrintable . div (other: PrettyPrintable ): Document More info Concatenates this and other with a line break in between. [jvm] Content operator fun PrettyPrintable . div (other: String ): Document More info Convenience method. grouped [jvm] Content fun PrettyPrintable . grouped (): Document More info Tries laying out this document into a single line by removing the contained Document.lineBreak s (and replacing them with spaces); if this does not fit the page, the document is laid out without any changes. joined [jvm] Content fun List < PrettyPrintable >. joined (separator: PrettyPrintable = Document(\",\"), prefix: PrettyPrintable = Document(), postfix: PrettyPrintable = Document()): Document More info Concatenates all the elements separated by separator and enclosed in prefix and postfix. nested [jvm] Content fun PrettyPrintable . nested (indentationChange: Int = 4): Document More info Returns a new document that is this with the nesting level (indentation after newlines) increased by indentationChange. plus [jvm] Content operator fun PrettyPrintable . plus (other: PrettyPrintable ): Document More info Concatenates this and other. [jvm] Content operator fun PrettyPrintable . plus (other: String ): Document More info Convenience method that automatically converts other to a Document . styled [jvm] Content fun PrettyPrintable . styled (style: Style ): Document More info Returns a new document that is this with style applied. times [jvm] Content operator fun PrettyPrintable . times (other: PrettyPrintable ): Document More info Concatenates this and other with a space in between. [jvm] Content operator fun PrettyPrintable . times (other: String ): Document More info Convenience method. tupled [jvm] Content fun List < PrettyPrintable >. tupled (): Document More info Like joined but using commas as separators and enclosed in parentheses. Properties \u00b6 Name Summary DEFAULT_LINE_WIDTH [jvm] const val DEFAULT_LINE_WIDTH : Int = 80The maximum number of characters to put on one line.","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/#package-educornellcsaplprettyprinting","text":"","title":"Package edu.cornell.cs.apl.prettyprinting"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/#types","text":"Name Summary AnsiBaseColor [jvm] Content enum AnsiBaseColor : Enum < AnsiBaseColor > More info One of the 8 basic colors supported by the ANSI standard. AnsiColor [jvm] Content sealed class AnsiColor More info An ANSI 4-bit color . BrightColor [jvm] Content data class BrightColor ( baseColor : AnsiBaseColor ) : AnsiColor More info Bright variant of baseColor . DefaultColor [jvm] Content object DefaultColor : AnsiColor More info The default foreground or background color. DefaultStyle [jvm] Content object DefaultStyle : Style More info The default Style . Document [jvm] Content sealed class Document : PrettyPrintable More info Represents a pretty printed document. NormalColor [jvm] Content data class NormalColor ( baseColor : AnsiBaseColor ) : AnsiColor More info Normal variant of baseColor . PrettyPrintable [jvm] Content interface PrettyPrintable More info An object that has a pretty text representation. Style [jvm] Content interface Style More info A style describing how text should be printed on an ANSI terminal.","title":"Types"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/#functions","text":"Name Summary braced [jvm] Content fun List < PrettyPrintable >. braced (): Document More info Like joined but using commas as separators and enclosed in curly braces. bracketed [jvm] Content fun List < PrettyPrintable >. bracketed (): Document More info Like joined but using commas as separators and enclosed in square brackets. commented [jvm] Content fun PrettyPrintable . commented (): Document More info Like joined but using commas as separators and enclosed in /* and */. concatenated [jvm] Content fun List < PrettyPrintable >. concatenated (separator: PrettyPrintable = Document()): Document More info Concatenates all the elements together with separators in between. div [jvm] Content operator fun PrettyPrintable . div (other: PrettyPrintable ): Document More info Concatenates this and other with a line break in between. [jvm] Content operator fun PrettyPrintable . div (other: String ): Document More info Convenience method. grouped [jvm] Content fun PrettyPrintable . grouped (): Document More info Tries laying out this document into a single line by removing the contained Document.lineBreak s (and replacing them with spaces); if this does not fit the page, the document is laid out without any changes. joined [jvm] Content fun List < PrettyPrintable >. joined (separator: PrettyPrintable = Document(\",\"), prefix: PrettyPrintable = Document(), postfix: PrettyPrintable = Document()): Document More info Concatenates all the elements separated by separator and enclosed in prefix and postfix. nested [jvm] Content fun PrettyPrintable . nested (indentationChange: Int = 4): Document More info Returns a new document that is this with the nesting level (indentation after newlines) increased by indentationChange. plus [jvm] Content operator fun PrettyPrintable . plus (other: PrettyPrintable ): Document More info Concatenates this and other. [jvm] Content operator fun PrettyPrintable . plus (other: String ): Document More info Convenience method that automatically converts other to a Document . styled [jvm] Content fun PrettyPrintable . styled (style: Style ): Document More info Returns a new document that is this with style applied. times [jvm] Content operator fun PrettyPrintable . times (other: PrettyPrintable ): Document More info Concatenates this and other with a space in between. [jvm] Content operator fun PrettyPrintable . times (other: String ): Document More info Convenience method. tupled [jvm] Content fun List < PrettyPrintable >. tupled (): Document More info Like joined but using commas as separators and enclosed in parentheses.","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/#properties","text":"Name Summary DEFAULT_LINE_WIDTH [jvm] const val DEFAULT_LINE_WIDTH : Int = 80The maximum number of characters to put on one line.","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-d-e-f-a-u-l-t_-l-i-n-e_-w-i-d-t-h/","text":"// shared / edu.cornell.cs.apl.prettyprinting / DEFAULT_LINE_WIDTH DEFAULT_LINE_WIDTH \u00b6 [jvm] Content const val DEFAULT_LINE_WIDTH : Int = 80 More info The maximum number of characters to put on one line.","title":" d e f a u l t  l i n e  w i d t h"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-d-e-f-a-u-l-t_-l-i-n-e_-w-i-d-t-h/#default_line_width","text":"[jvm] Content const val DEFAULT_LINE_WIDTH : Int = 80 More info The maximum number of characters to put on one line.","title":"DEFAULT_LINE_WIDTH"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/braced/","text":"// shared / edu.cornell.cs.apl.prettyprinting / braced braced \u00b6 [jvm] Content fun List < PrettyPrintable >. braced (): Document More info Like joined but using commas as separators and enclosed in curly braces.","title":"Braced"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/braced/#braced","text":"[jvm] Content fun List < PrettyPrintable >. braced (): Document More info Like joined but using commas as separators and enclosed in curly braces.","title":"braced"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/bracketed/","text":"// shared / edu.cornell.cs.apl.prettyprinting / bracketed bracketed \u00b6 [jvm] Content fun List < PrettyPrintable >. bracketed (): Document More info Like joined but using commas as separators and enclosed in square brackets.","title":"Bracketed"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/bracketed/#bracketed","text":"[jvm] Content fun List < PrettyPrintable >. bracketed (): Document More info Like joined but using commas as separators and enclosed in square brackets.","title":"bracketed"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/commented/","text":"// shared / edu.cornell.cs.apl.prettyprinting / commented commented \u00b6 [jvm] Content fun PrettyPrintable . commented (): Document More info Like joined but using commas as separators and enclosed in /* and */.","title":"Commented"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/commented/#commented","text":"[jvm] Content fun PrettyPrintable . commented (): Document More info Like joined but using commas as separators and enclosed in /* and */.","title":"commented"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/concatenated/","text":"// shared / edu.cornell.cs.apl.prettyprinting / concatenated concatenated \u00b6 [jvm] Content fun List < PrettyPrintable >. concatenated (separator: PrettyPrintable = Document()): Document More info Concatenates all the elements together with separators in between. val docs = listOf(\"lorem\", \"ipsum\", \"dolor\", \"sit\").map { Document(it) } docs.concatenated(separator = Document(\", \")) lorem, ipsum, dolor, sit","title":"Concatenated"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/concatenated/#concatenated","text":"[jvm] Content fun List < PrettyPrintable >. concatenated (separator: PrettyPrintable = Document()): Document More info Concatenates all the elements together with separators in between. val docs = listOf(\"lorem\", \"ipsum\", \"dolor\", \"sit\").map { Document(it) } docs.concatenated(separator = Document(\", \")) lorem, ipsum, dolor, sit","title":"concatenated"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/div/","text":"// shared / edu.cornell.cs.apl.prettyprinting / div div \u00b6 [jvm] Content operator fun PrettyPrintable . div (other: PrettyPrintable ): Document More info Concatenates this and other with a line break in between. Equivalent to this + Document.lineBreak + other. Document(\"hello\") / \"world\" hello world [jvm] Content operator fun PrettyPrintable . div (other: String ): Document More info Convenience method. See plus .","title":"Div"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/div/#div","text":"[jvm] Content operator fun PrettyPrintable . div (other: PrettyPrintable ): Document More info Concatenates this and other with a line break in between. Equivalent to this + Document.lineBreak + other. Document(\"hello\") / \"world\" hello world [jvm] Content operator fun PrettyPrintable . div (other: String ): Document More info Convenience method. See plus .","title":"div"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/grouped/","text":"// shared / edu.cornell.cs.apl.prettyprinting / grouped grouped \u00b6 [jvm] Content fun PrettyPrintable . grouped (): Document More info Tries laying out this document into a single line by removing the contained Document.lineBreak s (and replacing them with spaces); if this does not fit the page, the document is laid out without any changes. This function is the key to layouts that adapt to available space nicely. (Document(\"hello\") / \"world\").grouped() hello world","title":"Grouped"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/grouped/#grouped","text":"[jvm] Content fun PrettyPrintable . grouped (): Document More info Tries laying out this document into a single line by removing the contained Document.lineBreak s (and replacing them with spaces); if this does not fit the page, the document is laid out without any changes. This function is the key to layouts that adapt to available space nicely. (Document(\"hello\") / \"world\").grouped() hello world","title":"grouped"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/joined/","text":"// shared / edu.cornell.cs.apl.prettyprinting / joined joined \u00b6 [jvm] Content fun List < PrettyPrintable >. joined (separator: PrettyPrintable = Document(\",\"), prefix: PrettyPrintable = Document(), postfix: PrettyPrintable = Document()): Document More info Concatenates all the elements separated by separator and enclosed in prefix and postfix. The elements are laid out horizontally if that fits the page (note the extra space after separators): val docs = listOf(\"1\", \"2\", \"3\", \"4\").map { Document(it) } docs.joined(separator = Document(\",\"), prefix = Document(\"(\"), postfix = Document(\")\")) (1, 2, 3, 4) If there is not enough space, the input is split into lines entry-wise with separators at the end: docs.joined(separator = Document(\",\"), prefix = Document(\"(\"), postfix = Document(\")\")) ( 1, 2, 3, 4) Use nested to add indentation when the elements are split across lines.","title":"Joined"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/joined/#joined","text":"[jvm] Content fun List < PrettyPrintable >. joined (separator: PrettyPrintable = Document(\",\"), prefix: PrettyPrintable = Document(), postfix: PrettyPrintable = Document()): Document More info Concatenates all the elements separated by separator and enclosed in prefix and postfix. The elements are laid out horizontally if that fits the page (note the extra space after separators): val docs = listOf(\"1\", \"2\", \"3\", \"4\").map { Document(it) } docs.joined(separator = Document(\",\"), prefix = Document(\"(\"), postfix = Document(\")\")) (1, 2, 3, 4) If there is not enough space, the input is split into lines entry-wise with separators at the end: docs.joined(separator = Document(\",\"), prefix = Document(\"(\"), postfix = Document(\")\")) ( 1, 2, 3, 4) Use nested to add indentation when the elements are split across lines.","title":"joined"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/nested/","text":"// shared / edu.cornell.cs.apl.prettyprinting / nested nested \u00b6 [jvm] Content fun PrettyPrintable . nested (indentationChange: Int = 4): Document More info Returns a new document that is this with the nesting level (indentation after newlines) increased by indentationChange. Negative values for indentationChange are allowed, and decrease the nesting level accordingly. Document(\"hello\") + (Document.lineBreak + \"world\").nested() hello world Note that only newlines inside this document are affected. For example, Document(\"hello\") + Document.lineBreak + (Document(\"world\")).nested() hello world","title":"Nested"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/nested/#nested","text":"[jvm] Content fun PrettyPrintable . nested (indentationChange: Int = 4): Document More info Returns a new document that is this with the nesting level (indentation after newlines) increased by indentationChange. Negative values for indentationChange are allowed, and decrease the nesting level accordingly. Document(\"hello\") + (Document.lineBreak + \"world\").nested() hello world Note that only newlines inside this document are affected. For example, Document(\"hello\") + Document.lineBreak + (Document(\"world\")).nested() hello world","title":"nested"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/plus/","text":"// shared / edu.cornell.cs.apl.prettyprinting / plus plus \u00b6 [jvm] Content operator fun PrettyPrintable . plus (other: PrettyPrintable ): Document More info Concatenates this and other. Document(\"hello\") + \"World\" helloWorld [jvm] Content operator fun PrettyPrintable . plus (other: String ): Document More info Convenience method that automatically converts other to a Document . Allows the use of String literals when generating Document s. For example, Document(\"hello\") + Document(\"world\") can instead be written as Document(\"hello\") + \"world\" Unfortunately, the first call to Document.invoke cannot be avoided. See also \u00b6 jvm Name Summary plus","title":"Plus"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/plus/#plus","text":"[jvm] Content operator fun PrettyPrintable . plus (other: PrettyPrintable ): Document More info Concatenates this and other. Document(\"hello\") + \"World\" helloWorld [jvm] Content operator fun PrettyPrintable . plus (other: String ): Document More info Convenience method that automatically converts other to a Document . Allows the use of String literals when generating Document s. For example, Document(\"hello\") + Document(\"world\") can instead be written as Document(\"hello\") + \"world\" Unfortunately, the first call to Document.invoke cannot be avoided.","title":"plus"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/plus/#see-also","text":"jvm Name Summary plus","title":"See also"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/styled/","text":"// shared / edu.cornell.cs.apl.prettyprinting / styled styled \u00b6 [jvm] Content fun PrettyPrintable . styled (style: Style ): Document More info Returns a new document that is this with style applied. Styles can be nested.","title":"Styled"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/styled/#styled","text":"[jvm] Content fun PrettyPrintable . styled (style: Style ): Document More info Returns a new document that is this with style applied. Styles can be nested.","title":"styled"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/times/","text":"// shared / edu.cornell.cs.apl.prettyprinting / times times \u00b6 [jvm] Content operator fun PrettyPrintable . times (other: PrettyPrintable ): Document More info Concatenates this and other with a space in between. Equivalent to this + \" \" + other. Document(\"hello\") * \"world\" hello world [jvm] Content operator fun PrettyPrintable . times (other: String ): Document More info Convenience method. See plus .","title":"Times"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/times/#times","text":"[jvm] Content operator fun PrettyPrintable . times (other: PrettyPrintable ): Document More info Concatenates this and other with a space in between. Equivalent to this + \" \" + other. Document(\"hello\") * \"world\" hello world [jvm] Content operator fun PrettyPrintable . times (other: String ): Document More info Convenience method. See plus .","title":"times"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/tupled/","text":"// shared / edu.cornell.cs.apl.prettyprinting / tupled tupled \u00b6 [jvm] Content fun List < PrettyPrintable >. tupled (): Document More info Like joined but using commas as separators and enclosed in parentheses.","title":"Tupled"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/tupled/#tupled","text":"[jvm] Content fun List < PrettyPrintable >. tupled (): Document More info Like joined but using commas as separators and enclosed in parentheses.","title":"tupled"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor AnsiBaseColor \u00b6 [jvm] enum AnsiBaseColor : Enum < AnsiBaseColor > One of the 8 basic colors supported by the ANSI standard. Entries \u00b6 Name Summary BLACK [jvm] BLACK () RED [jvm] RED () GREEN [jvm] GREEN () YELLOW [jvm] YELLOW () BLUE [jvm] BLUE () MAGENTA [jvm] MAGENTA () CYAN [jvm] CYAN () WHITE [jvm] WHITE () Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/#ansibasecolor","text":"[jvm] enum AnsiBaseColor : Enum < AnsiBaseColor > One of the 8 basic colors supported by the ANSI standard.","title":"AnsiBaseColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/#entries","text":"Name Summary BLACK [jvm] BLACK () RED [jvm] RED () GREEN [jvm] GREEN () YELLOW [jvm] YELLOW () BLUE [jvm] BLUE () MAGENTA [jvm] MAGENTA () CYAN [jvm] CYAN () WHITE [jvm] WHITE ()","title":"Entries"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/#functions","text":"Name Summary compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / BLACK BLACK \u00b6 [jvm] BLACK () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/#black","text":"[jvm] BLACK ()","title":"BLACK"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / BLACK / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / BLACK / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-a-c-k/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / BLUE BLUE \u00b6 [jvm] BLUE () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/#blue","text":"[jvm] BLUE ()","title":"BLUE"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / BLUE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / BLUE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-b-l-u-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / CYAN CYAN \u00b6 [jvm] CYAN () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/#cyan","text":"[jvm] CYAN ()","title":"CYAN"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / CYAN / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / CYAN / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-c-y-a-n/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-companion/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / GREEN GREEN \u00b6 [jvm] GREEN () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/#green","text":"[jvm] GREEN ()","title":"GREEN"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / GREEN / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / GREEN / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-g-r-e-e-n/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / MAGENTA MAGENTA \u00b6 [jvm] MAGENTA () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/#magenta","text":"[jvm] MAGENTA ()","title":"MAGENTA"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / MAGENTA / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / MAGENTA / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / RED RED \u00b6 [jvm] RED () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/#red","text":"[jvm] RED ()","title":"RED"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / RED / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / RED / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-r-e-d/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / WHITE WHITE \u00b6 [jvm] WHITE () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/#white","text":"[jvm] WHITE ()","title":"WHITE"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / WHITE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / WHITE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-w-h-i-t-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / YELLOW YELLOW \u00b6 [jvm] YELLOW () Functions \u00b6 Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/#yellow","text":"[jvm] YELLOW ()","title":"YELLOW"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/#functions","text":"Name Summary clone [jvm] Content protected fun clone (): Any compareTo [jvm] Content operator override fun compareTo (other: AnsiBaseColor ): Int equals [jvm] Content operator override fun equals (other: Any ?): Boolean finalize [jvm] Content fun finalize () getDeclaringClass [jvm] Content fun getDeclaringClass (): Class < AnsiBaseColor > hashCode [jvm] Content override fun hashCode (): Int toAnsiColor [jvm] Content internal fun toAnsiColor (): Ansi.Color More info Converts our representation of colors to the one used by the ANSI library. toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/name/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / YELLOW / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/ordinal/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiBaseColor / YELLOW / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / AnsiColor AnsiColor \u00b6 [jvm] sealed class AnsiColor An ANSI 4-bit color . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Inheritors \u00b6 Name DefaultColor NormalColor BrightColor","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-color/#ansicolor","text":"[jvm] sealed class AnsiColor An ANSI 4-bit color .","title":"AnsiColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-color/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-ansi-color/#inheritors","text":"Name DefaultColor NormalColor BrightColor","title":"Inheritors"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / BrightColor BrightColor \u00b6 [jvm] data class BrightColor ( baseColor : AnsiBaseColor ) : AnsiColor Bright variant of baseColor . Constructors \u00b6 Name Summary BrightColor [jvm] fun BrightColor (baseColor: AnsiBaseColor ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): AnsiBaseColor copy [jvm] Content fun copy (baseColor: AnsiBaseColor ): BrightColor equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary baseColor [jvm] val baseColor : AnsiBaseColor","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/#brightcolor","text":"[jvm] data class BrightColor ( baseColor : AnsiBaseColor ) : AnsiColor Bright variant of baseColor .","title":"BrightColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/#constructors","text":"Name Summary BrightColor [jvm] fun BrightColor (baseColor: AnsiBaseColor )","title":"Constructors"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): AnsiBaseColor copy [jvm] Content fun copy (baseColor: AnsiBaseColor ): BrightColor equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/#properties","text":"Name Summary baseColor [jvm] val baseColor : AnsiBaseColor","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/-bright-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / BrightColor / BrightColor BrightColor \u00b6 [jvm] Content fun BrightColor (baseColor: AnsiBaseColor )","title":" bright color"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/-bright-color/#brightcolor","text":"[jvm] Content fun BrightColor (baseColor: AnsiBaseColor )","title":"BrightColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/base-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / BrightColor / baseColor baseColor \u00b6 [jvm] Content val baseColor : AnsiBaseColor","title":"Base color"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/base-color/#basecolor","text":"[jvm] Content val baseColor : AnsiBaseColor","title":"baseColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/component1/","text":"// shared / edu.cornell.cs.apl.prettyprinting / BrightColor / component1 component1 \u00b6 [jvm] Content operator fun component1 (): AnsiBaseColor","title":"Component1"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/component1/#component1","text":"[jvm] Content operator fun component1 (): AnsiBaseColor","title":"component1"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/copy/","text":"// shared / edu.cornell.cs.apl.prettyprinting / BrightColor / copy copy \u00b6 [jvm] Content fun copy (baseColor: AnsiBaseColor ): BrightColor","title":"Copy"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-bright-color/copy/#copy","text":"[jvm] Content fun copy (baseColor: AnsiBaseColor ): BrightColor","title":"copy"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-default-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / DefaultColor DefaultColor \u00b6 [jvm] object DefaultColor : AnsiColor The default foreground or background color. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-default-color/#defaultcolor","text":"[jvm] object DefaultColor : AnsiColor The default foreground or background color.","title":"DefaultColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-default-color/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-default-style/","text":"// shared / edu.cornell.cs.apl.prettyprinting / DefaultStyle DefaultStyle \u00b6 [jvm] object DefaultStyle : Style The default Style . Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-default-style/#defaultstyle","text":"[jvm] object DefaultStyle : Style The default Style .","title":"DefaultStyle"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-default-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-default-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document Document \u00b6 [jvm] sealed class Document : PrettyPrintable Represents a pretty printed document. More specifically, a Document represents a non-empty set of possible layouts of a document. The print functions select one of these possibilities, taking into account things like the width of the output document. Document s are created using the invoke functions, but the main interface is through PrettyPrintable . Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int print [jvm] Content fun print (lineWidth: Int = DEFAULT_LINE_WIDTH): String More info Renders the document as a String . [jvm] Content fun print (output: PrintStream , lineWidth: Int = DEFAULT_LINE_WIDTH, ansi: Boolean = false) More info Renders this document as a string and writes it to output. toString [jvm] Content override fun toString (): String More info Do not use toString ; use print instead. Properties \u00b6 Name Summary asDocument [jvm] open override val asDocument : Document Returns this object.","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/#document","text":"[jvm] sealed class Document : PrettyPrintable Represents a pretty printed document. More specifically, a Document represents a non-empty set of possible layouts of a document. The print functions select one of these possibilities, taking into account things like the width of the output document. Document s are created using the invoke functions, but the main interface is through PrettyPrintable .","title":"Document"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int print [jvm] Content fun print (lineWidth: Int = DEFAULT_LINE_WIDTH): String More info Renders the document as a String . [jvm] Content fun print (output: PrintStream , lineWidth: Int = DEFAULT_LINE_WIDTH, ansi: Boolean = false) More info Renders this document as a string and writes it to output. toString [jvm] Content override fun toString (): String More info Do not use toString ; use print instead.","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/#properties","text":"Name Summary asDocument [jvm] open override val asDocument : Document Returns this object.","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/as-document/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document / asDocument asDocument \u00b6 [jvm] Content open override val asDocument : Document More info Returns this object.","title":"As document"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/as-document/#asdocument","text":"[jvm] Content open override val asDocument : Document More info Returns this object.","title":"asDocument"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/print/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document / print print \u00b6 [jvm] Content fun print (output: PrintStream , lineWidth: Int = DEFAULT_LINE_WIDTH, ansi: Boolean = false) More info Renders this document as a string and writes it to output. Each line of the output will be under lineWidth characters if possible. If ansi is true, ANSI escape codes are output to style the document according to the Style annotations in the document. [jvm] Content fun print (lineWidth: Int = DEFAULT_LINE_WIDTH): String More info Renders the document as a String . See also \u00b6 jvm Name Summary edu.cornell.cs.apl.prettyprinting.Document","title":"Print"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/print/#print","text":"[jvm] Content fun print (output: PrintStream , lineWidth: Int = DEFAULT_LINE_WIDTH, ansi: Boolean = false) More info Renders this document as a string and writes it to output. Each line of the output will be under lineWidth characters if possible. If ansi is true, ANSI escape codes are output to style the document according to the Style annotations in the document. [jvm] Content fun print (lineWidth: Int = DEFAULT_LINE_WIDTH): String More info Renders the document as a String .","title":"print"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/print/#see-also","text":"jvm Name Summary edu.cornell.cs.apl.prettyprinting.Document","title":"See also"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/to-string/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document / toString toString \u00b6 [jvm] Content override fun toString (): String More info Do not use toString ; use print instead.","title":"To string"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/to-string/#tostring","text":"[jvm] Content override fun toString (): String More info Do not use toString ; use print instead.","title":"toString"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content operator fun invoke (): Document More info Returns the empty document. [jvm] Content @ JvmStatic () operator fun invoke (text: String ): Document More info Returns the document containing text converting all line breaks to lineBreak . toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary forcedLineBreak [jvm] val forcedLineBreak : Document Like lineBreak but always starts a new line. lineBreak [jvm] val lineBreak : Document A line break advances to the next line and indents to the current nesting level.","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int invoke [jvm] Content operator fun invoke (): Document More info Returns the empty document. [jvm] Content @ JvmStatic () operator fun invoke (text: String ): Document More info Returns the document containing text converting all line breaks to lineBreak . toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/#properties","text":"Name Summary forcedLineBreak [jvm] val forcedLineBreak : Document Like lineBreak but always starts a new line. lineBreak [jvm] val lineBreak : Document A line break advances to the next line and indents to the current nesting level.","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/forced-line-break/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document / Companion / forcedLineBreak forcedLineBreak \u00b6 [jvm] Content val forcedLineBreak : Document More info Like lineBreak but always starts a new line. A forcedLineBreak is never removed or replaced, even when PrettyPrintable.grouped and there is plenty of space. Document(\"hello\") + forcedLineBreak + \"world\" hello world>>> (Document(\"hello\") + forcedLineBreak + \"world\").grouped() hello world","title":"Forced line break"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/forced-line-break/#forcedlinebreak","text":"[jvm] Content val forcedLineBreak : Document More info Like lineBreak but always starts a new line. A forcedLineBreak is never removed or replaced, even when PrettyPrintable.grouped and there is plenty of space. Document(\"hello\") + forcedLineBreak + \"world\" hello world>>> (Document(\"hello\") + forcedLineBreak + \"world\").grouped() hello world","title":"forcedLineBreak"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/invoke/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document / Companion / invoke invoke \u00b6 [jvm] Content operator fun invoke (): Document More info Returns the empty document. The empty document behaves the same as Document(\"\"), which means it has a height of 1, not 0. For example, Document(\"hello\") / Document() / Document(\"world\") produces hello world The empty document is the left and right unit to plus . That is Document() + Document(\"hello\") == Document(\"hello\") == Document(\"hello\") + Document() [jvm] Content @ JvmStatic () operator fun invoke (text: String ): Document More info Returns the document containing text converting all line breaks to lineBreak . Note that lineBreak may be undone by grouped : Document(\"hello\\nworld\") hello world Document(\"hello\\nworld\").grouped() hello world","title":"Invoke"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/invoke/#invoke","text":"[jvm] Content operator fun invoke (): Document More info Returns the empty document. The empty document behaves the same as Document(\"\"), which means it has a height of 1, not 0. For example, Document(\"hello\") / Document() / Document(\"world\") produces hello world The empty document is the left and right unit to plus . That is Document() + Document(\"hello\") == Document(\"hello\") == Document(\"hello\") + Document() [jvm] Content @ JvmStatic () operator fun invoke (text: String ): Document More info Returns the document containing text converting all line breaks to lineBreak . Note that lineBreak may be undone by grouped : Document(\"hello\\nworld\") hello world Document(\"hello\\nworld\").grouped() hello world","title":"invoke"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/line-break/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Document / Companion / lineBreak lineBreak \u00b6 [jvm] Content val lineBreak : Document More info A line break advances to the next line and indents to the current nesting level. Document(\"hello\") + lineBreak + \"world\" hello world A line break may be converted into a spaces if the document is PrettyPrintable.grouped and there is enough space. (Document(\"hello\") + lineBreak + \"world\").grouped() hello world","title":"Line break"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-document/-companion/line-break/#linebreak","text":"[jvm] Content val lineBreak : Document More info A line break advances to the next line and indents to the current nesting level. Document(\"hello\") + lineBreak + \"world\" hello world A line break may be converted into a spaces if the document is PrettyPrintable.grouped and there is enough space. (Document(\"hello\") + lineBreak + \"world\").grouped() hello world","title":"lineBreak"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / NormalColor NormalColor \u00b6 [jvm] data class NormalColor ( baseColor : AnsiBaseColor ) : AnsiColor Normal variant of baseColor . Constructors \u00b6 Name Summary NormalColor [jvm] fun NormalColor (baseColor: AnsiBaseColor ) Functions \u00b6 Name Summary component1 [jvm] Content operator fun component1 (): AnsiBaseColor copy [jvm] Content fun copy (baseColor: AnsiBaseColor ): NormalColor equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary baseColor [jvm] val baseColor : AnsiBaseColor","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/#normalcolor","text":"[jvm] data class NormalColor ( baseColor : AnsiBaseColor ) : AnsiColor Normal variant of baseColor .","title":"NormalColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/#constructors","text":"Name Summary NormalColor [jvm] fun NormalColor (baseColor: AnsiBaseColor )","title":"Constructors"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/#functions","text":"Name Summary component1 [jvm] Content operator fun component1 (): AnsiBaseColor copy [jvm] Content fun copy (baseColor: AnsiBaseColor ): NormalColor equals [jvm] Content open operator override fun equals (other: Any ?): Boolean hashCode [jvm] Content open override fun hashCode (): Int toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/#properties","text":"Name Summary baseColor [jvm] val baseColor : AnsiBaseColor","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/-normal-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / NormalColor / NormalColor NormalColor \u00b6 [jvm] Content fun NormalColor (baseColor: AnsiBaseColor )","title":" normal color"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/-normal-color/#normalcolor","text":"[jvm] Content fun NormalColor (baseColor: AnsiBaseColor )","title":"NormalColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/base-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / NormalColor / baseColor baseColor \u00b6 [jvm] Content val baseColor : AnsiBaseColor","title":"Base color"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/base-color/#basecolor","text":"[jvm] Content val baseColor : AnsiBaseColor","title":"baseColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/component1/","text":"// shared / edu.cornell.cs.apl.prettyprinting / NormalColor / component1 component1 \u00b6 [jvm] Content operator fun component1 (): AnsiBaseColor","title":"Component1"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/component1/#component1","text":"[jvm] Content operator fun component1 (): AnsiBaseColor","title":"component1"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/copy/","text":"// shared / edu.cornell.cs.apl.prettyprinting / NormalColor / copy copy \u00b6 [jvm] Content fun copy (baseColor: AnsiBaseColor ): NormalColor","title":"Copy"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-normal-color/copy/#copy","text":"[jvm] Content fun copy (baseColor: AnsiBaseColor ): NormalColor","title":"copy"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/","text":"// shared / edu.cornell.cs.apl.prettyprinting / PrettyPrintable PrettyPrintable \u00b6 [jvm] interface PrettyPrintable An object that has a pretty text representation. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary asDocument [jvm] abstract val asDocument : Document The pretty text representation of this object. Inheritors \u00b6 Name Document Extensions \u00b6 Name Summary commented [jvm] Content fun PrettyPrintable . commented (): Document More info Like joined but using commas as separators and enclosed in /* and */. div [jvm] Content operator fun PrettyPrintable . div (other: PrettyPrintable ): Document More info Concatenates this and other with a line break in between. [jvm] Content operator fun PrettyPrintable . div (other: String ): Document More info Convenience method. grouped [jvm] Content fun PrettyPrintable . grouped (): Document More info Tries laying out this document into a single line by removing the contained Document.lineBreak s (and replacing them with spaces); if this does not fit the page, the document is laid out without any changes. nested [jvm] Content fun PrettyPrintable . nested (indentationChange: Int = 4): Document More info Returns a new document that is this with the nesting level (indentation after newlines) increased by indentationChange. plus [jvm] Content operator fun PrettyPrintable . plus (other: PrettyPrintable ): Document More info Concatenates this and other. [jvm] Content operator fun PrettyPrintable . plus (other: String ): Document More info Convenience method that automatically converts other to a Document . styled [jvm] Content fun PrettyPrintable . styled (style: Style ): Document More info Returns a new document that is this with style applied. times [jvm] Content operator fun PrettyPrintable . times (other: PrettyPrintable ): Document More info Concatenates this and other with a space in between. [jvm] Content operator fun PrettyPrintable . times (other: String ): Document More info Convenience method.","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/#prettyprintable","text":"[jvm] interface PrettyPrintable An object that has a pretty text representation.","title":"PrettyPrintable"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/#properties","text":"Name Summary asDocument [jvm] abstract val asDocument : Document The pretty text representation of this object.","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/#inheritors","text":"Name Document","title":"Inheritors"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/#extensions","text":"Name Summary commented [jvm] Content fun PrettyPrintable . commented (): Document More info Like joined but using commas as separators and enclosed in /* and */. div [jvm] Content operator fun PrettyPrintable . div (other: PrettyPrintable ): Document More info Concatenates this and other with a line break in between. [jvm] Content operator fun PrettyPrintable . div (other: String ): Document More info Convenience method. grouped [jvm] Content fun PrettyPrintable . grouped (): Document More info Tries laying out this document into a single line by removing the contained Document.lineBreak s (and replacing them with spaces); if this does not fit the page, the document is laid out without any changes. nested [jvm] Content fun PrettyPrintable . nested (indentationChange: Int = 4): Document More info Returns a new document that is this with the nesting level (indentation after newlines) increased by indentationChange. plus [jvm] Content operator fun PrettyPrintable . plus (other: PrettyPrintable ): Document More info Concatenates this and other. [jvm] Content operator fun PrettyPrintable . plus (other: String ): Document More info Convenience method that automatically converts other to a Document . styled [jvm] Content fun PrettyPrintable . styled (style: Style ): Document More info Returns a new document that is this with style applied. times [jvm] Content operator fun PrettyPrintable . times (other: PrettyPrintable ): Document More info Concatenates this and other with a space in between. [jvm] Content operator fun PrettyPrintable . times (other: String ): Document More info Convenience method.","title":"Extensions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/as-document/","text":"// shared / edu.cornell.cs.apl.prettyprinting / PrettyPrintable / asDocument asDocument \u00b6 [jvm] Content abstract val asDocument : Document More info The pretty text representation of this object.","title":"As document"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-pretty-printable/as-document/#asdocument","text":"[jvm] Content abstract val asDocument : Document More info The pretty text representation of this object.","title":"asDocument"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Style Style \u00b6 [jvm] interface Style A style describing how text should be printed on an ANSI terminal. Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String Properties \u00b6 Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean Inheritors \u00b6 Name DefaultStyle","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/#style","text":"[jvm] interface Style A style describing how text should be printed on an ANSI terminal.","title":"Style"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/#properties","text":"Name Summary backgroundColor [jvm] open val backgroundColor : AnsiColor bold [jvm] open val bold : Boolean foregroundColor [jvm] open val foregroundColor : AnsiColor italic [jvm] open val italic : Boolean underline [jvm] open val underline : Boolean","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/#inheritors","text":"Name DefaultStyle","title":"Inheritors"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/background-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Style / backgroundColor backgroundColor \u00b6 [jvm] Content open val backgroundColor : AnsiColor","title":"Background color"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/background-color/#backgroundcolor","text":"[jvm] Content open val backgroundColor : AnsiColor","title":"backgroundColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/bold/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Style / bold bold \u00b6 [jvm] Content open val bold : Boolean","title":"Bold"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/bold/#bold","text":"[jvm] Content open val bold : Boolean","title":"bold"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/foreground-color/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Style / foregroundColor foregroundColor \u00b6 [jvm] Content open val foregroundColor : AnsiColor","title":"Foreground color"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/foreground-color/#foregroundcolor","text":"[jvm] Content open val foregroundColor : AnsiColor","title":"foregroundColor"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/italic/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Style / italic italic \u00b6 [jvm] Content open val italic : Boolean","title":"Italic"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/italic/#italic","text":"[jvm] Content open val italic : Boolean","title":"italic"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/underline/","text":"// shared / edu.cornell.cs.apl.prettyprinting / Style / underline underline \u00b6 [jvm] Content open val underline : Boolean","title":"Underline"},{"location":"api/shared/shared/edu.cornell.cs.apl.prettyprinting/-style/underline/#underline","text":"[jvm] Content open val underline : Boolean","title":"underline"},{"location":"api/shared/shared/edu.cornell.cs.apl.viaduct/","text":"// shared / edu.cornell.cs.apl.viaduct Package edu.cornell.cs.apl.viaduct \u00b6 Properties \u00b6 Name Summary group [jvm] const val group : String version [jvm] const val version : String","title":"Index"},{"location":"api/shared/shared/edu.cornell.cs.apl.viaduct/#package-educornellcsaplviaduct","text":"","title":"Package edu.cornell.cs.apl.viaduct"},{"location":"api/shared/shared/edu.cornell.cs.apl.viaduct/#properties","text":"Name Summary group [jvm] const val group : String version [jvm] const val version : String","title":"Properties"},{"location":"api/shared/shared/edu.cornell.cs.apl.viaduct/group/","text":"// shared / edu.cornell.cs.apl.viaduct / group group \u00b6 [jvm] Content const val group : String","title":"Group"},{"location":"api/shared/shared/edu.cornell.cs.apl.viaduct/group/#group","text":"[jvm] Content const val group : String","title":"group"},{"location":"api/shared/shared/edu.cornell.cs.apl.viaduct/version/","text":"// shared / edu.cornell.cs.apl.viaduct / version version \u00b6 [jvm] Content const val version : String","title":"Version"},{"location":"api/shared/shared/edu.cornell.cs.apl.viaduct/version/#version","text":"[jvm] Content const val version : String","title":"version"},{"location":"api/test-utilities/test-utilities/","text":"// test-utilities test-utilities \u00b6 [jvm] Utilities used during testing. Packages \u00b6 Name Summary edu.cornell.cs.apl.viaduct","title":"Test Utilities"},{"location":"api/test-utilities/test-utilities/#test-utilities","text":"[jvm] Utilities used during testing.","title":"test-utilities"},{"location":"api/test-utilities/test-utilities/#packages","text":"Name Summary edu.cornell.cs.apl.viaduct","title":"Packages"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/","text":"// test-utilities / edu.cornell.cs.apl.viaduct Package edu.cornell.cs.apl.viaduct \u00b6 Types \u00b6 Name Summary NegativeTestFileProvider [jvm] Content class NegativeTestFileProvider : ArgumentsProvider More info Enumerates the paths of source files that should fail to compile. PositiveTestFileProvider [jvm] Content class PositiveTestFileProvider : ArgumentsProvider More info Enumerates the paths of source files that should successfully compile. PositiveTestProgramProvider [jvm] Content class PositiveTestProgramProvider : ArgumentsProvider More info Same as PositiveTestFileProvider but parses the programs.","title":"Index"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/#package-educornellcsaplviaduct","text":"","title":"Package edu.cornell.cs.apl.viaduct"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/#types","text":"Name Summary NegativeTestFileProvider [jvm] Content class NegativeTestFileProvider : ArgumentsProvider More info Enumerates the paths of source files that should fail to compile. PositiveTestFileProvider [jvm] Content class PositiveTestFileProvider : ArgumentsProvider More info Enumerates the paths of source files that should successfully compile. PositiveTestProgramProvider [jvm] Content class PositiveTestProgramProvider : ArgumentsProvider More info Same as PositiveTestFileProvider but parses the programs.","title":"Types"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / NegativeTestFileProvider NegativeTestFileProvider \u00b6 [jvm] class NegativeTestFileProvider : ArgumentsProvider Enumerates the paths of source files that should fail to compile. Constructors \u00b6 Name Summary NegativeTestFileProvider [jvm] fun NegativeTestFileProvider () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int provideArguments [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/#negativetestfileprovider","text":"[jvm] class NegativeTestFileProvider : ArgumentsProvider Enumerates the paths of source files that should fail to compile.","title":"NegativeTestFileProvider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/#constructors","text":"Name Summary NegativeTestFileProvider [jvm] fun NegativeTestFileProvider ()","title":"Constructors"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int provideArguments [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/-negative-test-file-provider/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / NegativeTestFileProvider / NegativeTestFileProvider NegativeTestFileProvider \u00b6 [jvm] Content fun NegativeTestFileProvider ()","title":" negative test file provider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/-negative-test-file-provider/#negativetestfileprovider","text":"[jvm] Content fun NegativeTestFileProvider ()","title":"NegativeTestFileProvider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/provide-arguments/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / NegativeTestFileProvider / provideArguments provideArguments \u00b6 [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream","title":"Provide arguments"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-negative-test-file-provider/provide-arguments/#providearguments","text":"[jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream","title":"provideArguments"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / PositiveTestFileProvider PositiveTestFileProvider \u00b6 [jvm] class PositiveTestFileProvider : ArgumentsProvider Enumerates the paths of source files that should successfully compile. Constructors \u00b6 Name Summary PositiveTestFileProvider [jvm] fun PositiveTestFileProvider () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int provideArguments [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/#positivetestfileprovider","text":"[jvm] class PositiveTestFileProvider : ArgumentsProvider Enumerates the paths of source files that should successfully compile.","title":"PositiveTestFileProvider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/#constructors","text":"Name Summary PositiveTestFileProvider [jvm] fun PositiveTestFileProvider ()","title":"Constructors"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int provideArguments [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/-positive-test-file-provider/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / PositiveTestFileProvider / PositiveTestFileProvider PositiveTestFileProvider \u00b6 [jvm] Content fun PositiveTestFileProvider ()","title":" positive test file provider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/-positive-test-file-provider/#positivetestfileprovider","text":"[jvm] Content fun PositiveTestFileProvider ()","title":"PositiveTestFileProvider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/provide-arguments/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / PositiveTestFileProvider / provideArguments provideArguments \u00b6 [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream","title":"Provide arguments"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-file-provider/provide-arguments/#providearguments","text":"[jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream","title":"provideArguments"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / PositiveTestProgramProvider PositiveTestProgramProvider \u00b6 [jvm] class PositiveTestProgramProvider : ArgumentsProvider Same as PositiveTestFileProvider but parses the programs. Constructors \u00b6 Name Summary PositiveTestProgramProvider [jvm] fun PositiveTestProgramProvider () Functions \u00b6 Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int provideArguments [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream toString [jvm] Content open fun toString (): String","title":"Index"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/#positivetestprogramprovider","text":"[jvm] class PositiveTestProgramProvider : ArgumentsProvider Same as PositiveTestFileProvider but parses the programs.","title":"PositiveTestProgramProvider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/#constructors","text":"Name Summary PositiveTestProgramProvider [jvm] fun PositiveTestProgramProvider ()","title":"Constructors"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/#functions","text":"Name Summary equals [jvm] Content open operator fun equals (other: Any ?): Boolean hashCode [jvm] Content open fun hashCode (): Int provideArguments [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream toString [jvm] Content open fun toString (): String","title":"Functions"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/-positive-test-program-provider/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / PositiveTestProgramProvider / PositiveTestProgramProvider PositiveTestProgramProvider \u00b6 [jvm] Content fun PositiveTestProgramProvider ()","title":" positive test program provider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/-positive-test-program-provider/#positivetestprogramprovider","text":"[jvm] Content fun PositiveTestProgramProvider ()","title":"PositiveTestProgramProvider"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/provide-arguments/","text":"// test-utilities / edu.cornell.cs.apl.viaduct / PositiveTestProgramProvider / provideArguments provideArguments \u00b6 [jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream","title":"Provide arguments"},{"location":"api/test-utilities/test-utilities/edu.cornell.cs.apl.viaduct/-positive-test-program-provider/provide-arguments/#providearguments","text":"[jvm] Content open override fun provideArguments (context: ExtensionContext?): Stream","title":"provideArguments"},{"location":"developer-guide/building/","text":"Building \u00b6 We use Gradle for builds. You do not have to install Gradle manually; you only need to have Java available. Once you have Java installed, just run ./gradlew build to build the code. This will also run all tests, so if this command works, you are good to go. On Unix environments, you can run the compiler using ./viaduct from project root. This will use Gradle to automatically rebuild the application as necessary, so you do not have to worry about calling ./gradlew build each time you change something. To start, try ./viaduct --help Building back ends \u00b6 ABY \u00b6 We use ABY for our secure multiparty computation back end. We have bundled ABY as a Java library (see aby-java ), so no additional setup is necessary to make it work. Warning aby-java currently does not support Windows. libsnark \u00b6 We use libsnark for our zero-knowledge proofs back end. You have to manually build the JNI wrapper for libsnark to use the ZKP back end. First, clone libfqfft : https://github.com/scipr-lab/libfqfft . libsnark actually depends on this library, but we have to build it ourselves because we need to set the -fPIC flag manually to get the wrapper to build. To build, navigate to the root of the repository and run this on your shell: mkdir build && cd build && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON .. . Then run make and then make install to install the libraries and header files. Next, clone libsnark : https://github.com/scipr-lab/libsnark . Run this command in the root of the repository: mkdir build && cd build && cmake -DUSE_LINKED_LIBRARIES=ON .. . The cmake flag makes the build use the install version of libfqfft instead of building it again in the depends subrepository. Then run make and then make install to install the libraries and header files. Finally, build the libsnark wrapper. Navigate to this directory of the viaduct repository: runtime/src/main/cwrapper . Next, inspect the Makefile and make sure that the INCLUDES variable points to the JVM directories. Then inspect the libsnarkwrapper.so target and make sure the link directory ( -L ) points to the directory where libff and libsnark were installed. Run make to build libsnarkwrapper. Finally, run make install to install the wrapper in a directory known by the JVM to include JNI libraries. By default the install target will copy the wrapper in /usr/lib/ .","title":"Building"},{"location":"developer-guide/building/#building","text":"We use Gradle for builds. You do not have to install Gradle manually; you only need to have Java available. Once you have Java installed, just run ./gradlew build to build the code. This will also run all tests, so if this command works, you are good to go. On Unix environments, you can run the compiler using ./viaduct from project root. This will use Gradle to automatically rebuild the application as necessary, so you do not have to worry about calling ./gradlew build each time you change something. To start, try ./viaduct --help","title":"Building"},{"location":"developer-guide/building/#building-back-ends","text":"","title":"Building back ends"},{"location":"developer-guide/building/#aby","text":"We use ABY for our secure multiparty computation back end. We have bundled ABY as a Java library (see aby-java ), so no additional setup is necessary to make it work. Warning aby-java currently does not support Windows.","title":"ABY"},{"location":"developer-guide/building/#libsnark","text":"We use libsnark for our zero-knowledge proofs back end. You have to manually build the JNI wrapper for libsnark to use the ZKP back end. First, clone libfqfft : https://github.com/scipr-lab/libfqfft . libsnark actually depends on this library, but we have to build it ourselves because we need to set the -fPIC flag manually to get the wrapper to build. To build, navigate to the root of the repository and run this on your shell: mkdir build && cd build && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON .. . Then run make and then make install to install the libraries and header files. Next, clone libsnark : https://github.com/scipr-lab/libsnark . Run this command in the root of the repository: mkdir build && cd build && cmake -DUSE_LINKED_LIBRARIES=ON .. . The cmake flag makes the build use the install version of libfqfft instead of building it again in the depends subrepository. Then run make and then make install to install the libraries and header files. Finally, build the libsnark wrapper. Navigate to this directory of the viaduct repository: runtime/src/main/cwrapper . Next, inspect the Makefile and make sure that the INCLUDES variable points to the JVM directories. Then inspect the libsnarkwrapper.so target and make sure the link directory ( -L ) points to the directory where libff and libsnark were installed. Run make to build libsnarkwrapper. Finally, run make install to install the wrapper in a directory known by the JVM to include JNI libraries. By default the install target will copy the wrapper in /usr/lib/ .","title":"libsnark"},{"location":"developer-guide/dependencies/","text":"Updating Dependencies \u00b6 We use a Gradle plugin for managing dependencies. Running ./gradlew dependencyUpdates will give you a report listing outdated dependencies. You can now either manually change build.gradle.kts , or run ./gradlew useLatestVersions to automatically update all dependencies. To update Gradle itself, run ./gradlew wrapper --gradle-version <version> where <version> comes from the above report.","title":"Updating Dependencies"},{"location":"developer-guide/dependencies/#updating-dependencies","text":"We use a Gradle plugin for managing dependencies. Running ./gradlew dependencyUpdates will give you a report listing outdated dependencies. You can now either manually change build.gradle.kts , or run ./gradlew useLatestVersions to automatically update all dependencies. To update Gradle itself, run ./gradlew wrapper --gradle-version <version> where <version> comes from the above report.","title":"Updating Dependencies"},{"location":"developer-guide/documentation/","text":"Updating Documentation \u00b6 We use MkDocs to generate documentation. See: mkdocs documentation . mkdocs-material documentation . Project layout \u00b6 docs/ mkdocs.yml # The configuration file. src/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Gradle tasks \u00b6 mkdocsBuild - Build the documentation site. mkdocsServe --no-daemon - Start the live-reloading docs server.","title":"Updating Documentation"},{"location":"developer-guide/documentation/#updating-documentation","text":"We use MkDocs to generate documentation. See: mkdocs documentation . mkdocs-material documentation .","title":"Updating Documentation"},{"location":"developer-guide/documentation/#project-layout","text":"docs/ mkdocs.yml # The configuration file. src/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"developer-guide/documentation/#gradle-tasks","text":"mkdocsBuild - Build the documentation site. mkdocsServe --no-daemon - Start the live-reloading docs server.","title":"Gradle tasks"},{"location":"developer-guide/logging/","text":"Logging \u00b6 We use the kotlin-logging library for showing additional information to the user. Logs go to standard error in accordance with Unix conventions, and the user can control the granularity of logs using the --verbose flag. As a general rule, never use print() or println() to display information to the user. This includes showing information to yourself for debugging. All logging frameworks have a DEGUB level, and if you found this information useful, chances are it will be relevant later. Logging is extremely easy to use. See this section of the Kotlin library.","title":"Logging"},{"location":"developer-guide/logging/#logging","text":"We use the kotlin-logging library for showing additional information to the user. Logs go to standard error in accordance with Unix conventions, and the user can control the granularity of logs using the --verbose flag. As a general rule, never use print() or println() to display information to the user. This includes showing information to yourself for debugging. All logging frameworks have a DEGUB level, and if you found this information useful, chances are it will be relevant later. Logging is extremely easy to use. See this section of the Kotlin library.","title":"Logging"},{"location":"user-guide/compiling-and-running/","text":"Using the Compiler \u00b6 There are two main compiler commands you need to know. The compile command compiles Viaduct source programs into distributed programs. The run command allows hosts to execute a compiled distributed program together. We will go over the basics of using these two commands in the following sections. You can run viaduct compile --help and viaduct run --help to get more information about each of these commands and the various options and flags they support. Compiling Source Programs \u00b6 As an example, we will compile the examples/Millionaires.via program, which is an implementation of the standard Millionaires' problem in Viaduct. You can view the source program with the following command: less examples/Millionaires.via Note that this and other programs in the examples directory are purposefully simple; you can find more complex examples under the benchmarks directory. Run the following to compile the program: viaduct -v compile examples/Millionaires.via This will print the compiled program to the standard output. The -v option turns on detailed logging, and must come before the command name (e.g., viaduct compile -v will not work). You can repeat it (e.g., -vvv ) for more granular messages, or leave it out. To save the compiled file to disk, provide the -o option along with a file name: viaduct -v compile examples/Millionaires.via -o m-out.via You should see logging information that looks like this: 1015 ms [main] INFO Compile - elaborating source program... 1110 ms [main] INFO Compile - specializing functions... 1115 ms [main] INFO Check - name analysis... 1149 ms [main] INFO Check - type checking... 1159 ms [main] INFO Check - out parameter initialization analysis... 1165 ms [main] INFO Check - information flow analysis... 1251 ms [main] INFO InformationFlowAnalysis - number of label variables: 28 1251 ms [main] INFO Check - finished information flow analysis, ran for 87ms 1272 ms [main] INFO Compile - selecting protocols... 1779 ms [main] INFO Z3Selection - number of symvars: 91 1779 ms [main] INFO Z3Selection - cost mode set to MINIMIZE 1828 ms [main] INFO Z3Selection - constraints satisfiable, extracted model 1834 ms [main] INFO Compile - finished protocol selection, ran for 519ms 1842 ms [main] INFO Compile - annotating program with protocols... You can view the compiled program: less m-out.via Notice that the compiled program is an elaborated version of the source program where each variable declaration and let binding is annotated with the protocol that will execute it. Running Compiled Programs \u00b6 The run command takes as arguments a host name and a compiled program, and executes the host's \"projection\" of the distributed program. Since compiled programs are distributed, we need to run multiple instances of Viaduct. For instance, to execute our example program m-out.via , we need two participants standing in for hosts alice and bob , respectively. The easiest way to accomplish this from the single terminal window we have is to run one of the commands in the background: viaduct -v run alice m-out.via -in inputs/alice.txt & viaduct -v run bob m-out.via -in inputs/bob.txt Here, we run two instances with logging enabled (the -v option), and provide inputs from files ( -in FILENAME ). An alternative to running one of the instances in the background is using Tmux and running each participant in a different pane. This method allows you to manually provide input to each participant. However, we only recommend this alternative if you are already familiar with Tmux (or are willing to pick up the basics). Here is a very quick tutorial to get you started: Start a new session by typing tmux . Split your terminal using the keyboard shortcut Ctrl+b \" . Switch between panes using Ctrl+b <arrow key> (up and down keys specifically). Execute the following two commands in separate panes: viaduct run alice m-out.via -in inputs/alice.txt viaduct run bob m-out.via -in inputs/bob.txt We recommend starting Alice's process first; you may get a \"connection timed out\" error otherwise. Quit Tmux by typing tmux kill-session . You can provide input manually for one or both of the participants by omitting the -in option (we also recommend leaving out the -v option). The participant will block on an Input: prompt when you need to provide input. You can repeat these steps for the other programs in the examples and benchmarks directories. However, programs in the benchmarks directory expect many (sometimes hundreds) of inputs, so we don't recommend providing inputs by hand! Editing files \u00b6 You can edit files using the nano editor: nano examples/Millionaires.via","title":"Using the Compiler"},{"location":"user-guide/compiling-and-running/#using-the-compiler","text":"There are two main compiler commands you need to know. The compile command compiles Viaduct source programs into distributed programs. The run command allows hosts to execute a compiled distributed program together. We will go over the basics of using these two commands in the following sections. You can run viaduct compile --help and viaduct run --help to get more information about each of these commands and the various options and flags they support.","title":"Using the Compiler"},{"location":"user-guide/compiling-and-running/#compiling-source-programs","text":"As an example, we will compile the examples/Millionaires.via program, which is an implementation of the standard Millionaires' problem in Viaduct. You can view the source program with the following command: less examples/Millionaires.via Note that this and other programs in the examples directory are purposefully simple; you can find more complex examples under the benchmarks directory. Run the following to compile the program: viaduct -v compile examples/Millionaires.via This will print the compiled program to the standard output. The -v option turns on detailed logging, and must come before the command name (e.g., viaduct compile -v will not work). You can repeat it (e.g., -vvv ) for more granular messages, or leave it out. To save the compiled file to disk, provide the -o option along with a file name: viaduct -v compile examples/Millionaires.via -o m-out.via You should see logging information that looks like this: 1015 ms [main] INFO Compile - elaborating source program... 1110 ms [main] INFO Compile - specializing functions... 1115 ms [main] INFO Check - name analysis... 1149 ms [main] INFO Check - type checking... 1159 ms [main] INFO Check - out parameter initialization analysis... 1165 ms [main] INFO Check - information flow analysis... 1251 ms [main] INFO InformationFlowAnalysis - number of label variables: 28 1251 ms [main] INFO Check - finished information flow analysis, ran for 87ms 1272 ms [main] INFO Compile - selecting protocols... 1779 ms [main] INFO Z3Selection - number of symvars: 91 1779 ms [main] INFO Z3Selection - cost mode set to MINIMIZE 1828 ms [main] INFO Z3Selection - constraints satisfiable, extracted model 1834 ms [main] INFO Compile - finished protocol selection, ran for 519ms 1842 ms [main] INFO Compile - annotating program with protocols... You can view the compiled program: less m-out.via Notice that the compiled program is an elaborated version of the source program where each variable declaration and let binding is annotated with the protocol that will execute it.","title":"Compiling Source Programs"},{"location":"user-guide/compiling-and-running/#running-compiled-programs","text":"The run command takes as arguments a host name and a compiled program, and executes the host's \"projection\" of the distributed program. Since compiled programs are distributed, we need to run multiple instances of Viaduct. For instance, to execute our example program m-out.via , we need two participants standing in for hosts alice and bob , respectively. The easiest way to accomplish this from the single terminal window we have is to run one of the commands in the background: viaduct -v run alice m-out.via -in inputs/alice.txt & viaduct -v run bob m-out.via -in inputs/bob.txt Here, we run two instances with logging enabled (the -v option), and provide inputs from files ( -in FILENAME ). An alternative to running one of the instances in the background is using Tmux and running each participant in a different pane. This method allows you to manually provide input to each participant. However, we only recommend this alternative if you are already familiar with Tmux (or are willing to pick up the basics). Here is a very quick tutorial to get you started: Start a new session by typing tmux . Split your terminal using the keyboard shortcut Ctrl+b \" . Switch between panes using Ctrl+b <arrow key> (up and down keys specifically). Execute the following two commands in separate panes: viaduct run alice m-out.via -in inputs/alice.txt viaduct run bob m-out.via -in inputs/bob.txt We recommend starting Alice's process first; you may get a \"connection timed out\" error otherwise. Quit Tmux by typing tmux kill-session . You can provide input manually for one or both of the participants by omitting the -in option (we also recommend leaving out the -v option). The participant will block on an Input: prompt when you need to provide input. You can repeat these steps for the other programs in the examples and benchmarks directories. However, programs in the benchmarks directory expect many (sometimes hundreds) of inputs, so we don't recommend providing inputs by hand!","title":"Running Compiled Programs"},{"location":"user-guide/compiling-and-running/#editing-files","text":"You can edit files using the nano editor: nano examples/Millionaires.via","title":"Editing files"},{"location":"user-guide/getting-started/","text":"Getting Started \u00b6 The easiest way to try out Viaduct is by using Docker. After installing Docker , run the following in a terminal: docker run --rm -it aplcornell/viaduct This will drop you in a Docker container that has the Viaduct compiler installed. To get started, try viaduct --help To build Viaduct from source code, refer to the Developer's Guide .","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"The easiest way to try out Viaduct is by using Docker. After installing Docker , run the following in a terminal: docker run --rm -it aplcornell/viaduct This will drop you in a Docker container that has the Viaduct compiler installed. To get started, try viaduct --help To build Viaduct from source code, refer to the Developer's Guide .","title":"Getting Started"}]}