import com.github.spotbugs.SpotBugsTask

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id 'application'
    id 'org.jetbrains.dokka' version '0.10.0'

    // Style checking
    id 'checkstyle'
    id "com.diffplug.gradle.spotless" version "3.18.0"
    id "org.ec4j.editorconfig" version "0.0.3"

    // Bug finding
    id 'com.github.spotbugs' version '1.6.9'
    id 'jacoco'

    // Lexing & Parsing
    id "org.xbib.gradle.plugin.jflex" version "1.2.0"
    id "cup.gradle.cup-gradle-plugin" version "1.2"
}

group 'edu.cornell.cs.apl'
version '0.1'

repositories {
    jcenter()
}

application {
    mainClassName = "${project.group}.${project.name}.Main"
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClassName
    }
}

cup {
    args = [
        "-parser", "ImpParser",
        "-interface"
    ]
}

checkstyle {
    maxWarnings 0
    configDir project.file("config/checkstyle")
}

spotless {
    java {
        googleJavaFormat()
        target 'src/**/*.java'
    }
    kotlin {
        ktlint()
    }
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    excludeFilter = project.file("config/spotbugs/excludeFilter.xml")
}

editorconfig {
    includes = ['src/**/*.java', 'src/**/*.kt', 'build.gradle']
}


jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
    useJUnitPlatform()

    // Rerun tests when code examples change.
    inputs.files(project.fileTree(dir: "examples"))
}

run {
    // Enable assertions during manual testing
    enableAssertions = true
}

dependencies {
    // Standard libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Functional data structures
    implementation group: 'io.vavr', name: 'vavr', version: '0.9.3'
    implementation group: "org.jetbrains.kotlinx", name: "kotlinx-collections-immutable-jvm", version: "0.3"

    // Google's Guava (core data structures)
    implementation group: 'com.google.guava', name: 'guava', version: '28.1-jre'

    // Google's AutoValue for creating immutable classes
    implementation group: 'com.google.auto.value', name: 'auto-value-annotations', version: '1.6.2'
    annotationProcessor group: 'com.google.auto.value', name: 'auto-value', version: '1.6.2'

    // Graphs
    implementation group: 'org.jgrapht', name: 'jgrapht-core', version: '1.3.1'
    implementation group: 'org.jgrapht', name: 'jgrapht-io', version: '1.3.1'

    // Unicode support
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '64.2'

    // Command-line-argument parsing
    implementation group: 'com.github.rvesse', name: 'airline', version: '2.7.0'

    // Colored terminal output
    implementation group: 'org.fusesource.jansi', name: 'jansi', version: '1.18'

    // DOT graph output
    implementation group: 'guru.nidi', name: 'graphviz-java', version: '0.11.0'

    // Logging (disabled for now using the NOP engine)
    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.8.0-beta4'

    // Unit testing
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.4.2")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.4.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.4.2")
}

check {
    dependsOn editorconfigCheck
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Kotlin documentation
dokka {
    outputFormat = 'jekyll'
    outputDirectory = "$buildDir/docs"

    configuration {
        includes = ['packages.md']
    }
}
