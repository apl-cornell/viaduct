host alice
host bob

fun main() {
    var a : int = input int from alice;
    var b : int = input int from bob;
    f0(a, b, val win0);
    output win0 to alice;
    output win0 to bob;

    f1(a, b, val win1);
    output win1 to alice;
    output win1 to bob;
}

fun f0(c: int{alice}, d: int{bob}, ret: out bool{alice ⊓ bob}) {
    val a : int = endorse c to {alice & bob<-} from {alice};
    val b : int = endorse d to {bob & alice<-} from {bob};
    val d_b : int = declassify b from {bob & alice<-} to {alice ⊓ bob};
    val equal : bool   = d_b == a;
    val e_equal : bool = endorse equal to {alice & bob<-} from {alice};
    val d_equal : bool = declassify e_equal from {alice & bob<-} to {alice ⊓ bob};
    out ret = d_equal;
}

fun f1(c: int{alice}, d: int{bob}, ret: out bool{alice ⊓ bob}) {
    val a : int = endorse c to {alice & bob<-} from {alice};
    val b : int = endorse d to {bob & alice<-} from {bob};
    val d_b : int = declassify b from {bob & alice<-} to {alice ⊓ bob};
    val equal : bool = d_b == a;
    g(equal, out ret);
}

fun g(equal: bool{alice}, ret: out bool{alice ⊓ bob}){
    val e_equal : bool = endorse equal to {alice & bob<-} from {alice};
    val d_equal : bool = declassify e_equal from {alice & bob<-} to {alice ⊓ bob};
    out ret = d_equal;
}
