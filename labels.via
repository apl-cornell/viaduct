host alice

host bob

fun {X, Z} f_1{Z<-} (a: int{X}, b: int{bob}, c: out int{Z}) {delegation: {X} :> {alice} for Both Projections, delegation: {Z} :> {alice} for Both Projections} {
    /* {X-> ∧ Z<-} */
    let $tmp = a;
    /* {bob-> ∧ Z<-} */
    let $tmp_1 = b;
    /* {(X ∧ bob)-> ∧ Z<-} */
    let $tmp_2 = ($tmp + $tmp_1);
    out c = $tmp_2;
}

fun {} main () {} {
    /* {alice-> ∧ alice<-} */
    let $tmp_3 = input int from alice;
    /* {alice-> ∧ alice<-} */
    val x: int = $tmp_3;
    /* {bob-> ∧ bob<-} */
    let $tmp_4 = input int from bob;
    /* {bob-> ∧ bob<-} */
    val y: int = $tmp_4;
    /* {alice-> ∧ alice<-} */
    let $tmp_5 = x;
    /* {bob-> ∧ bob<-} */
    let $tmp_6 = y;
    f_1($tmp_5, $tmp_6, val z);
}
