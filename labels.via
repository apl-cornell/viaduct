host alice

host bob

fun {} f_1{⊥} (a: int{(alice-> & alice<-)}, b: int{bob}, c: out int{((alice & bob)-> & ⊤<-)}) {} {
    /* {ConfidentialityComponent(principal=alice)-> ∧ ⊤<-} */
    let $tmp = a;
    g_1($tmp, val ga);
    /* {ConfidentialityComponent(principal=bob)-> ∧ ⊤<-} */
    let $tmp_1 = b;
    g_2($tmp_1, val gb);
    /* {ConfidentialityComponent(principal=alice)-> ∧ ⊤<-} */
    let $tmp_2 = ga;
    /* {ConfidentialityComponent(principal=bob)-> ∧ ⊤<-} */
    let $tmp_3 = gb;
    /* {(ConfidentialityComponent(principal=alice) ∧ ConfidentialityComponent(principal=bob))-> ∧ ⊤<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    out c = $tmp_4;
}

fun {} g_1{(alice-> & ⊤<-)} (a_1: int{(alice-> & ⊤<-)}, c_1: out int{(alice-> & ⊤<-)}) {} {
    /* {ConfidentialityComponent(principal=alice)-> ∧ ⊤<-} */
    let $tmp_5 = a_1;
    /* {ConfidentialityComponent(principal=alice)-> ∧ ⊤<-} */
    let $tmp_6 = a_1;
    /* {ConfidentialityComponent(principal=alice)-> ∧ ⊤<-} */
    let $tmp_7 = ($tmp_5 + $tmp_6);
    out c_1 = $tmp_7;
}

fun {} g_2{(bob-> & ⊤<-)} (a_1: int{(bob-> & ⊤<-)}, c_1: out int{(bob-> & ⊤<-)}) {} {
    /* {ConfidentialityComponent(principal=bob)-> ∧ ⊤<-} */
    let $tmp_5 = a_1;
    /* {ConfidentialityComponent(principal=bob)-> ∧ ⊤<-} */
    let $tmp_6 = a_1;
    /* {ConfidentialityComponent(principal=bob)-> ∧ ⊤<-} */
    let $tmp_7 = ($tmp_5 + $tmp_6);
    out c_1 = $tmp_7;
}

fun {} main () {} {
    /* {ConfidentialityComponent(principal=alice)-> ∧ IntegrityComponent(principal=alice)<-} */
    let $tmp_8 = input int from alice;
    /* {ConfidentialityComponent(principal=alice)-> ∧ IntegrityComponent(principal=alice)<-} */
    val x: int{alice} = $tmp_8;
    /* {ConfidentialityComponent(principal=bob)-> ∧ IntegrityComponent(principal=bob)<-} */
    let $tmp_9 = input int from bob;
    /* {ConfidentialityComponent(principal=bob)-> ∧ IntegrityComponent(principal=bob)<-} */
    val y: int{bob} = $tmp_9;
    /* {ConfidentialityComponent(principal=alice)-> ∧ IntegrityComponent(principal=alice)<-} */
    let $tmp_10 = x;
    /* {ConfidentialityComponent(principal=bob)-> ∧ IntegrityComponent(principal=bob)<-} */
    let $tmp_11 = y;
    f_1($tmp_10, $tmp_11, val z);
}
