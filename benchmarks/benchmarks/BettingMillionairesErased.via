host alice
host bob
host chuck

assume for <- alice trusts bob
assume for <- bob trusts alice


/* chuck bets who was richer b/w alice and bob at their poorest */
fun main() {
  val c_bet: bool = endorse (input bool from chuck) from {chuck};

  val length: int = 10;
  var a_min: int = 0;
  var b_min: int = 0;
  for (var i: int = 0; i < length; i += 1) {
      a_min = min(a_min, input int from alice);
      b_min = min(b_min, input int from bob);
  }

  val a_wins: bool = declassify (a_min > b_min) to {alice ⊓ bob ⊓ chuck->};
  val a_wins_trusted: bool = endorse a_wins from {alice ⊓ bob ⊓ chuck->};
  val c_bet_public: bool = declassify c_bet to {alice ⊓ bob ⊓ chuck};
  val c_wins: bool = (c_bet_public && a_wins_trusted)
                  || (!c_bet_public && !a_wins_trusted);

  output c_wins to alice;
  output c_wins to bob;
  output c_wins to chuck;
}
