process main {
  /* Chuck hides the ball under a shell; Alice guesses the shell. */
  val shell: int = endorse (input int from chuck) to {C & A<-};
  val guess: int = endorse (input int from alice) to {A & C<-};

  var win_secret: bool{A & C};

  /* Chuck must prove that `shell` is valid without revealing its value. */
  if (declassify (1 <= shell && shell <= 3) to {A ⊓ C}) {
    win_secret = shell == guess;
  } else {
    win_secret = true;
  }

  val win: bool{A ⊓ C} = declassify win_secret to {A ⊓ C};
  output win to alice;
  output win to chuck;
}

process Host(alice) {
  send 2 to main;
  val alice_wins: bool = receive bool from main;
}

process Host(chuck) {
  send 1 to main;
  val alice_wins: bool = receive bool from main;
  assert !alice_wins;
}

/* Declare the actual machines (i.e. hosts) we have. */
host alice : {A}
host chuck : {C}
