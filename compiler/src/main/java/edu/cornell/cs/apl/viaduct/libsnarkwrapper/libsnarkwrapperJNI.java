/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cornell.cs.apl.viaduct.libsnarkwrapper;

public class libsnarkwrapperJNI {
  public static final native long new_IntVector__SWIG_0();

  public static final native long new_IntVector__SWIG_1(long jarg1, IntVector jarg1_);

  public static final native long IntVector_capacity(long jarg1, IntVector jarg1_);

  public static final native void IntVector_reserve(long jarg1, IntVector jarg1_, long jarg2);

  public static final native boolean IntVector_isEmpty(long jarg1, IntVector jarg1_);

  public static final native void IntVector_clear(long jarg1, IntVector jarg1_);

  public static final native long new_IntVector__SWIG_2(int jarg1, int jarg2);

  public static final native int IntVector_doSize(long jarg1, IntVector jarg1_);

  public static final native void IntVector_doAdd__SWIG_0(long jarg1, IntVector jarg1_, int jarg2);

  public static final native void IntVector_doAdd__SWIG_1(
      long jarg1, IntVector jarg1_, int jarg2, int jarg3);

  public static final native int IntVector_doRemove(long jarg1, IntVector jarg1_, int jarg2);

  public static final native int IntVector_doGet(long jarg1, IntVector jarg1_, int jarg2);

  public static final native int IntVector_doSet(
      long jarg1, IntVector jarg1_, int jarg2, int jarg3);

  public static final native void IntVector_doRemoveRange(
      long jarg1, IntVector jarg1_, int jarg2, int jarg3);

  public static final native void delete_IntVector(long jarg1);

  public static final native long new_BoolVector__SWIG_0();

  public static final native long new_BoolVector__SWIG_1(long jarg1, BoolVector jarg1_);

  public static final native long BoolVector_capacity(long jarg1, BoolVector jarg1_);

  public static final native void BoolVector_reserve(long jarg1, BoolVector jarg1_, long jarg2);

  public static final native boolean BoolVector_isEmpty(long jarg1, BoolVector jarg1_);

  public static final native void BoolVector_clear(long jarg1, BoolVector jarg1_);

  public static final native long new_BoolVector__SWIG_2(int jarg1, boolean jarg2);

  public static final native int BoolVector_doSize(long jarg1, BoolVector jarg1_);

  public static final native void BoolVector_doAdd__SWIG_0(
      long jarg1, BoolVector jarg1_, boolean jarg2);

  public static final native void BoolVector_doAdd__SWIG_1(
      long jarg1, BoolVector jarg1_, int jarg2, boolean jarg3);

  public static final native boolean BoolVector_doRemove(long jarg1, BoolVector jarg1_, int jarg2);

  public static final native boolean BoolVector_doGet(long jarg1, BoolVector jarg1_, int jarg2);

  public static final native boolean BoolVector_doSet(
      long jarg1, BoolVector jarg1_, int jarg2, boolean jarg3);

  public static final native void BoolVector_doRemoveRange(
      long jarg1, BoolVector jarg1_, int jarg2, int jarg3);

  public static final native void delete_BoolVector(long jarg1);

  public static final native long new_CharVector__SWIG_0();

  public static final native long new_CharVector__SWIG_1(long jarg1, CharVector jarg1_);

  public static final native long CharVector_capacity(long jarg1, CharVector jarg1_);

  public static final native void CharVector_reserve(long jarg1, CharVector jarg1_, long jarg2);

  public static final native boolean CharVector_isEmpty(long jarg1, CharVector jarg1_);

  public static final native void CharVector_clear(long jarg1, CharVector jarg1_);

  public static final native long new_CharVector__SWIG_2(int jarg1, char jarg2);

  public static final native int CharVector_doSize(long jarg1, CharVector jarg1_);

  public static final native void CharVector_doAdd__SWIG_0(
      long jarg1, CharVector jarg1_, char jarg2);

  public static final native void CharVector_doAdd__SWIG_1(
      long jarg1, CharVector jarg1_, int jarg2, char jarg3);

  public static final native char CharVector_doRemove(long jarg1, CharVector jarg1_, int jarg2);

  public static final native char CharVector_doGet(long jarg1, CharVector jarg1_, int jarg2);

  public static final native char CharVector_doSet(
      long jarg1, CharVector jarg1_, int jarg2, char jarg3);

  public static final native void CharVector_doRemoveRange(
      long jarg1, CharVector jarg1_, int jarg2, int jarg3);

  public static final native void delete_CharVector(long jarg1);

  public static final native void Keypair_proving_key_set(
      long jarg1, Keypair jarg1_, long jarg2, ByteBuf jarg2_);

  public static final native long Keypair_proving_key_get(long jarg1, Keypair jarg1_);

  public static final native void Keypair_verification_key_set(
      long jarg1, Keypair jarg1_, long jarg2, ByteBuf jarg2_);

  public static final native long Keypair_verification_key_get(long jarg1, Keypair jarg1_);

  public static final native long new_Keypair();

  public static final native void delete_Keypair(long jarg1);

  public static final native void initZKP();

  public static final native long get_sha_nonce_val(long jarg1, ByteBuf jarg1_, long jarg2);

  public static final native long new_R1CSInstance();

  public static final native void R1CSInstance_isProver_set(
      long jarg1, R1CSInstance jarg1_, boolean jarg2);

  public static final native boolean R1CSInstance_isProver_get(long jarg1, R1CSInstance jarg1_);

  public static final native long R1CSInstance_mkPublicVal(
      long jarg1, R1CSInstance jarg1_, long jarg2);

  public static final native long R1CSInstance_mkPublicBitvec__SWIG_0(
      long jarg1, R1CSInstance jarg1_, long jarg2, BoolVector jarg2_);

  public static final native long R1CSInstance_mkPublicBitvec__SWIG_1(
      long jarg1, R1CSInstance jarg1_, long jarg2, ByteBuf jarg2_);

  public static final native long R1CSInstance_mkPrivateValProver(
      long jarg1,
      R1CSInstance jarg1_,
      long jarg2,
      long jarg3,
      VarArray jarg3_,
      long jarg4,
      VarArray jarg4_);

  public static final native long R1CSInstance_mkPrivateValVerifier(
      long jarg1, R1CSInstance jarg1_, long jarg2, VarArray jarg2_, long jarg3, VarArray jarg3_);

  public static final native long R1CSInstance_mkAnd(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native long R1CSInstance_mkNot(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_);

  public static final native long R1CSInstance_mkOr(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native long R1CSInstance_mkMult(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native long R1CSInstance_mkAdd(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native long R1CSInstance_mkMux(
      long jarg1,
      R1CSInstance jarg1_,
      long jarg2,
      Var jarg2_,
      long jarg3,
      Var jarg3_,
      long jarg4,
      Var jarg4_);

  public static final native long R1CSInstance_mkEqualTo(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native long R1CSInstance_mkLessThan(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native long R1CSInstance_mkLE(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native void R1CSInstance_AddEquality(
      long jarg1, R1CSInstance jarg1_, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native boolean R1CSInstance_verifyProof(
      long jarg1, R1CSInstance jarg1_, long jarg2, ByteBuf jarg2_, long jarg3, ByteBuf jarg3_);

  public static final native long R1CSInstance_generateProof(
      long jarg1, R1CSInstance jarg1_, long jarg2, ByteBuf jarg2_);

  public static final native long R1CSInstance_genKeypair(long jarg1, R1CSInstance jarg1_);

  public static final native void delete_R1CSInstance(long jarg1);

  public static final native long divide_rounding_up(long jarg1, long jarg2);

  public static final native String bvec_to_string(long jarg1, BoolVector jarg1_);

  public static final native long string_to_bvec(String jarg1);

  public static final native void ByteBuf_contents_set(long jarg1, ByteBuf jarg1_, String jarg2);

  public static final native String ByteBuf_contents_get(long jarg1, ByteBuf jarg1_);

  public static final native byte[] ByteBuf_get_data(long jarg1, ByteBuf jarg1_);

  public static final native long new_ByteBuf();

  public static final native void delete_ByteBuf(long jarg1);

  public static final native long mkByteBuf(byte[] jarg1);

  public static final native boolean ensure_satisfied__SWIG_0(long jarg1, long jarg2, long jarg3);

  public static final native boolean ensure_satisfied__SWIG_1(long jarg1);

  public static final native void Var_value_set(long jarg1, Var jarg1_, long jarg2);

  public static final native long Var_value_get(long jarg1, Var jarg1_);

  public static final native long new_Var();

  public static final native void delete_Var(long jarg1);

  public static final native void VarArray_values_set(long jarg1, VarArray jarg1_, long jarg2);

  public static final native long VarArray_values_get(long jarg1, VarArray jarg1_);

  public static final native long new_VarArray();

  public static final native void delete_VarArray(long jarg1);

  public static final native void addEquality__SWIG_0(
      long jarg1, long jarg2, Var jarg2_, long jarg3, Var jarg3_);

  public static final native void addEquality__SWIG_1(long jarg1, long jarg2, long jarg3);

  public static final native void ShaResult_val_var_set(long jarg1, ShaResult jarg1_, long jarg2);

  public static final native long ShaResult_val_var_get(long jarg1, ShaResult jarg1_);

  public static final native void ShaResult_data_set(long jarg1, ShaResult jarg1_, long jarg2);

  public static final native long ShaResult_data_get(long jarg1, ShaResult jarg1_);

  public static final native void ShaResult_nonce_set(long jarg1, ShaResult jarg1_, long jarg2);

  public static final native long ShaResult_nonce_get(long jarg1, ShaResult jarg1_);

  public static final native void ShaResult_output_set(long jarg1, ShaResult jarg1_, long jarg2);

  public static final native long ShaResult_output_get(long jarg1, ShaResult jarg1_);

  public static final native long new_ShaResult();

  public static final native void delete_ShaResult(long jarg1);

  public static final native long mkSHA(long jarg1, long jarg2, String jarg3, boolean jarg4);
}
