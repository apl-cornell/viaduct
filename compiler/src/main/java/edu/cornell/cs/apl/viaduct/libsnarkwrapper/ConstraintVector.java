/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cornell.cs.apl.viaduct.libsnarkwrapper;

public class ConstraintVector extends java.util.AbstractList<Constraint>
    implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ConstraintVector(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ConstraintVector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsnarkwrapperJNI.delete_ConstraintVector(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ConstraintVector(Constraint[] initialElements) {
    this();
    reserve(initialElements.length);

    for (Constraint element : initialElements) {
      add(element);
    }
  }

  public ConstraintVector(Iterable<Constraint> initialElements) {
    this();
    for (Constraint element : initialElements) {
      add(element);
    }
  }

  public Constraint get(int index) {
    return doGet(index);
  }

  public Constraint set(int index, Constraint e) {
    return doSet(index, e);
  }

  public boolean add(Constraint e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, Constraint e) {
    modCount++;
    doAdd(index, e);
  }

  public Constraint remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public ConstraintVector() {
    this(libsnarkwrapperJNI.new_ConstraintVector__SWIG_0(), true);
  }

  public ConstraintVector(ConstraintVector other) {
    this(
        libsnarkwrapperJNI.new_ConstraintVector__SWIG_1(ConstraintVector.getCPtr(other), other),
        true);
  }

  public long capacity() {
    return libsnarkwrapperJNI.ConstraintVector_capacity(swigCPtr, this);
  }

  public void reserve(long n) {
    libsnarkwrapperJNI.ConstraintVector_reserve(swigCPtr, this, n);
  }

  public boolean isEmpty() {
    return libsnarkwrapperJNI.ConstraintVector_isEmpty(swigCPtr, this);
  }

  public void clear() {
    libsnarkwrapperJNI.ConstraintVector_clear(swigCPtr, this);
  }

  public ConstraintVector(int count, Constraint value) {
    this(
        libsnarkwrapperJNI.new_ConstraintVector__SWIG_2(count, Constraint.getCPtr(value), value),
        true);
  }

  private int doSize() {
    return libsnarkwrapperJNI.ConstraintVector_doSize(swigCPtr, this);
  }

  private void doAdd(Constraint x) {
    libsnarkwrapperJNI.ConstraintVector_doAdd__SWIG_0(swigCPtr, this, Constraint.getCPtr(x), x);
  }

  private void doAdd(int index, Constraint x) {
    libsnarkwrapperJNI.ConstraintVector_doAdd__SWIG_1(
        swigCPtr, this, index, Constraint.getCPtr(x), x);
  }

  private Constraint doRemove(int index) {
    return new Constraint(
        libsnarkwrapperJNI.ConstraintVector_doRemove(swigCPtr, this, index), true);
  }

  private Constraint doGet(int index) {
    return new Constraint(libsnarkwrapperJNI.ConstraintVector_doGet(swigCPtr, this, index), false);
  }

  private Constraint doSet(int index, Constraint val) {
    return new Constraint(
        libsnarkwrapperJNI.ConstraintVector_doSet(
            swigCPtr, this, index, Constraint.getCPtr(val), val),
        true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    libsnarkwrapperJNI.ConstraintVector_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }
}
