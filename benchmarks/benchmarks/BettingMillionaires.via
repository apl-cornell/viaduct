host alice
host bob
host chuck

assume for <- alice trusts bob
assume for <- bob trusts alice

/* chuck bets who was richer b/w alice and bob at their poorest */
fun main() {
  val c_bet: bool{chuck & (alice&bob)<-} = endorse (input bool from chuck) to {chuck & (alice&bob)<-} from {chuck};

  /* chuck can see this public parameter, but doesn't need to trust it */
  val length: int{alice ⊓ bob ⊓ chuck->} = 10;

  var a_min: int{alice & bob<-} = 0;
  var b_min: int{bob & alice<-} = 0;
  for (var i: int{alice ⊓ bob ⊓ chuck->} = 0; i < length; i += 1) {
      a_min = min(a_min, input int from alice);
      b_min = min(b_min, input int from bob);
  }

  val a_wins: bool{alice ⊓ bob ⊓ chuck->} = declassify (a_min > b_min) to {alice ⊓ bob ⊓ chuck->};
  val a_wins_trusted: bool{alice ⊓ bob ⊓ chuck} = endorse a_wins to {alice ⊓ bob ⊓ chuck} from {alice ⊓ bob ⊓ chuck->};
  val c_bet_public: bool{alice ⊓ bob ⊓ chuck} = declassify c_bet to {alice ⊓ bob ⊓ chuck};
  val c_wins: bool{alice ⊓ bob ⊓ chuck} = (c_bet_public && a_wins_trusted)
                             || (!c_bet_public && !a_wins_trusted);

  output c_wins to alice;
  output c_wins to bob;
  output c_wins to chuck;
}
