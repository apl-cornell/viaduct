/* Alice an Bob bid on an item in two rounds.
 * Who had the higher bid is revealed after the first round,
 * but the bids are kept secret.
 * Person with the higher average bid wins.
 */
process main {
  /* Round 1 */
  int{A} a1 <- recv @alice;
  int{B} b1 <- recv @bob;

  int a1_endorsed = endorse(a1, {A & B<-});
  int b1_endorsed = endorse(b1, {B & A<-});

  /* Reveal who had the higher bid. */
  bool a1_higher = declassify(a1_endorsed > b1_endorsed, {A ⊓ B});
  send a1_higher to @alice;
  send a1_higher to @bob;

  /* Round 2 */
  int{A} a2 <- recv @alice;
  int{B} b2 <- recv @bob;

  /* Reveal the overall winner. */
  int a2_endorsed = endorse(a2, {A & B<-});
  int b2_endorsed = endorse(b2, {B & A<-});

  bool a_higher = declassify(a1_endorsed + a2_endorsed > b1_endorsed + b2_endorsed, {A ⊓ B});
  send a_higher to @alice;
  send a_higher to @bob;
}


process @alice {
  /* First bid. */
  send 10 to main;

  /* Adjust bid based on result of Round 1. */
  bool a1_higher <- recv main;
  if (a1_higher) {
    send 5 to main;
  } else {
    send 20 to main;
  }

  /* See who won. */
  bool a_higher <- recv main;
  assert a_higher;
}

process @bob {
  /* First bid. */
  send 20 to main;

  /* Adjust bid based on result of Round 1. */
  bool a1_higher <- recv main;
  if (a1_higher) {
    send 80 to main;
  } else {
    send 5 to main;
  }

  /* See who won. */
  bool a_higher <- recv main;
  assert a_higher;
}

host alice : {A};
host bob   : {B};
