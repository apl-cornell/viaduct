host alice
host bob

assume for <- alice trusts bob
assume for <- bob trusts alice

fun main() {
  val n: int{alice ⊓ bob} = 10;

  /* assume that input arrays are already sorted */
  val adata = Array[int]{alice & bob<-}(n);
  val bdata = Array[int]{bob & alice<-}(n);

  for (var i: int{alice ⊓ bob} = 0; i < n; i += 1) {
    adata[i] = input int from alice;
    bdata[i] = input int from bob;
  }

  var cur_a: int{alice & bob<-} = 0;
  var cur_b: int{bob & alice<-} = 0;
  for (var iter: int{alice ⊓ bob} = 0; iter < n; iter += 1) {
    if (declassify (adata[cur_a] <= bdata[cur_b]) to {alice ⊓ bob}) {
      cur_a += 1;

    } else {
      cur_b += 1;
    }
  }

  var median: int{alice ⊓ bob};
  if (declassify (adata[cur_a] <= bdata[cur_b]) to {alice ⊓ bob}) {
    median = declassify adata[cur_a] to {alice ⊓ bob};

  } else {
    median = declassify bdata[cur_b] to {alice ⊓ bob};
  }

  output median to alice;
  output median to bob;
}
