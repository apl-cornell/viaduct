host alice

host bob

delegation: {alice} trusts {bob} for Integrity

delegation: {bob} trusts {alice} for Integrity

fun {} buggy_1(a: int{(alice-> & (((alice-> & bob->) & bob) & alice)<-)}, b: int{(bob-> & (((alice-> & bob->) & bob) & alice)<-)}, c: out int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}) {} :{(⊥<- & ⊤->)} {
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp = b;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_1 = a;
    buggy_2($tmp, $tmp_1, out c);
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_2 = a;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_3 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_5 = a;
    buggy_3($tmp_4, $tmp_5, out c);
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_6 = b;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_7 = a;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_8 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_9 = ($tmp_7 + $tmp_8);
    buggy_4($tmp_6, $tmp_9, out c);
}

fun {} buggy_2(a: int{(bob-> & (((alice-> & bob->) & bob) & alice)<-)}, b: int{(alice-> & (((alice-> & bob->) & bob) & alice)<-)}, c: out int{((bob & alice)-> & (((alice-> & bob->) & bob) & alice)<-)}) {} :{(⊥<- & ⊤->)} {
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp = b;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_1 = a;
    buggy_1($tmp, $tmp_1, out c);
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_2 = a;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_3 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_5 = a;
    buggy_5($tmp_4, $tmp_5, out c);
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_6 = b;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_7 = a;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_8 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_9 = ($tmp_7 + $tmp_8);
    buggy_6($tmp_6, $tmp_9, out c);
}

fun {} buggy_3(a: int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}, b: int{(alice-> & (((alice-> & bob->) & bob) & alice)<-)}, c: out int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}) {} :{(⊥<- & ⊤->)} {
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_1 = a;
    buggy_6($tmp, $tmp_1, out c);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_2 = a;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_3 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_5 = a;
    buggy_7($tmp_4, $tmp_5, out c);
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_6 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_7 = a;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_8 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_9 = ($tmp_7 + $tmp_8);
    buggy_6($tmp_6, $tmp_9, out c);
}

fun {} buggy_4(a: int{(bob-> & (((alice-> & bob->) & bob) & alice)<-)}, b: int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}, c: out int{((bob & alice)-> & (((alice-> & bob->) & bob) & alice)<-)}) {} :{(⊥<- & ⊤->)} {
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp = b;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_1 = a;
    buggy_5($tmp, $tmp_1, out c);
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_2 = a;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_3 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_5 = a;
    buggy_5($tmp_4, $tmp_5, out c);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_6 = b;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_7 = a;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_8 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_9 = ($tmp_7 + $tmp_8);
    buggy_7($tmp_6, $tmp_9, out c);
}

fun {} buggy_5(a: int{((bob & alice)-> & (((alice-> & bob->) & bob) & alice)<-)}, b: int{(bob-> & (((alice-> & bob->) & bob) & alice)<-)}, c: out int{((bob & alice)-> & (((alice-> & bob->) & bob) & alice)<-)}) {} :{(⊥<- & ⊤->)} {
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_1 = a;
    buggy_4($tmp, $tmp_1, out c);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_2 = a;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_3 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_5 = a;
    buggy_7($tmp_4, $tmp_5, out c);
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_6 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_7 = a;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_8 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_9 = ($tmp_7 + $tmp_8);
    buggy_4($tmp_6, $tmp_9, out c);
}

fun {} buggy_6(a: int{(alice-> & (((alice-> & bob->) & bob) & alice)<-)}, b: int{((bob & alice)-> & (((alice-> & bob->) & bob) & alice)<-)}, c: out int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}) {} :{(⊥<- & ⊤->)} {
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp = b;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_1 = a;
    buggy_3($tmp, $tmp_1, out c);
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_2 = a;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_3 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_5 = a;
    buggy_3($tmp_4, $tmp_5, out c);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_6 = b;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_7 = a;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_8 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_9 = ($tmp_7 + $tmp_8);
    buggy_7($tmp_6, $tmp_9, out c);
}

fun {} buggy_7(a: int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}, b: int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}, c: out int{((alice & bob)-> & (((alice-> & bob->) & bob) & alice)<-)}) {} :{(⊥<- & ⊤->)} {
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_1 = a;
    buggy_7($tmp, $tmp_1, out c);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_2 = a;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_3 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_4 = ($tmp_2 + $tmp_3);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_5 = a;
    buggy_7($tmp_4, $tmp_5, out c);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_6 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_7 = a;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_8 = b;
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob)<-} */
    let $tmp_9 = ($tmp_7 + $tmp_8);
    buggy_7($tmp_6, $tmp_9, out c);
}

fun {} main() {} :{(⊥<- & ⊤->)} {
    /* {alice-> ∧ alice<-} */
    let $tmp_10 = input int from alice;
    /* {alice-> ∧ alice<-} */
    val x: int{alice} = $tmp_10;
    /* {bob-> ∧ bob<-} */
    let $tmp_11 = input int from bob;
    /* {bob-> ∧ bob<-} */
    val y: int{bob} = $tmp_11;
    /* {alice-> ∧ (alice ∧ bob)<-} */
    let $tmp_12 = x;
    /* {bob-> ∧ (alice ∧ bob)<-} */
    let $tmp_13 = y;
    buggy_1($tmp_12, $tmp_13, val z);
    /* {(alice ∧ bob)-> ∧ (alice ∧ bob ∧ bob)<-} */
    let $tmp_14 = z;
    /* {bob-> ∧ bob<-} */
    let $tmp_15 = declassify $tmp_14 to {bob};
    output $tmp_15 to bob;
    /* {(alice ∧ bob)-> ∧ (alice ∧ alice ∧ bob)<-} */
    let $tmp_16 = z;
    /* {alice-> ∧ alice<-} */
    let $tmp_17 = declassify $tmp_16 to {alice};
    output $tmp_17 to alice;
}
