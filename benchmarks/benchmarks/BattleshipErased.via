fun main() {
    /* load inputs into endorsed arrays, so that they cannot be modified further */
    val aships = Array[int](5);
    val bships = Array[int](5);
    for (var i: int = 0; i < 5; i+=1) {
        aships[i] = endorse (input int from alice) from {alice};
        bships[i] = endorse (input int from bob) from {bob};
    }

    var awins: bool = false;

    /** if someone put multiple battleships in the same cell, they automatically lose */
    var acheated: bool = false;
    var bcheated: bool = false;

    for (var j: int = 0; j < 5 && !acheated && !bcheated; j += 1) {
        for (var k: int = j + 1; k < 5 && !acheated && !bcheated; k += 1) {
            if (declassify (aships[j] == aships[k]) to {alice ⊓ bob}) {
                acheated = true;
            }

            if (declassify(bships[j] == bships[k]) to {alice ⊓ bob}) {
                bcheated = true;
            }
        }
    }

    if (!acheated && !bcheated) {
        var ascore: int = 0;
        var bscore: int = 0;

        var playing: bool = true;
        var aturn: bool = true;

        /** keep playing until someone sinks all the other person's battleships */
        while (playing) {
            if (aturn) {
                val amove: int = declassify (input int from alice) to {(alice|bob)-> & alice<-};
                var amove_trusted: int = endorse amove from {(alice|bob)-> & alice<-};
                var ahit: bool = false;
                for (var aj: int = 0; aj < 5; aj += 1) {
                    if (declassify (bships[aj] == amove_trusted) to {alice ⊓ bob}) {
                        ascore += 1;
                        bships[aj] = 0;
                        ahit = true;
                    }
                }

                output ahit to alice;
                output ahit to bob;
                aturn = false;
            } else {
                var bmove: int = declassify (input int from bob) to {(alice|bob)-> & bob<-};
                val bmove_trusted: int = endorse bmove from {(alice|bob)-> & bob<-};
                var bhit: bool = false;
                for (var bj: int = 0; bj < 5; bj += 1) {
                    if (declassify (aships[bj] == bmove_trusted) to {alice ⊓ bob}) {
                        bscore += 1;
                        aships[bj] = 0;
                        bhit = true;
                    }
                }

                output bhit to alice;
                output bhit to bob;
                aturn = true;
            }

            playing = ascore < 5 && bscore < 5;
        }

        awins = ascore == 5;
        output awins to alice;
        output awins to bob;
    } else {
        output bcheated to alice;
        output bcheated to bob;
    }
}

host alice
host bob
