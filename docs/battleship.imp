process main {
    int{A} ainput[5];
    int{B} binput[5];
    ainput <- recv @alice;
    binput <- recv @bob;

    int{A & B<-} aships[5];
    int{B & A<-} bships[5];
    for (int{A ⊓ B} i = 0; i < 5; i+=1) {
        aships[i] = endorse(ainput[i], {A & B<-});
        bships[i] = endorse(binput[i], {B & A<-});
    }

    int{(A|B)-> & (A&B)<-} ascore = 0;
    int{(A|B)-> & (A&B)<-} bscore = 0;

    bool{(A|B)-> & (A&B)<-} playing = true;
    bool{(A|B)-> & (A&B)<-} aturn = true;

    while (playing) {
        if (aturn) {
            int{A} amove_in <- recv @alice;
            int{A & B<-} amove_trusted = endorse(amove_in, {A & B<-});
            int{A ⊓ B} amove = declassify(amove_trusted, {A ⊓ B});
            bool{A ⊓ B} ahit = false;
            for (int aj = 0; aj < 5; aj+=1) {
                if (declassify(bships[aj] == amove, {A ⊓ B})) {
                    ascore += 1;
                    bships[aj] = 0;
                    ahit = true;
                }
            }

            send ahit to @alice;
            send ahit to @bob;
            aturn = false;

        } else {
            int{B} bmove_in <- recv @bob;
            int{B & A<-} bmove_trusted = endorse(bmove_in, {B & A<-});
            int{A ⊓ B} bmove = declassify(bmove_trusted, {A ⊓ B});
            bool{A ⊓ B} bhit = false;

            for (int bj = 0; bj < 5; bj+=1) {
                if (declassify(aships[bj] == bmove, {A ⊓ B})) {
                    bscore += 1;
                    aships[bj] = 0;
                    bhit = true;
                }
            }

            send bhit to @alice;
            send bhit to @bob;
            aturn = true;
        }

        playing = ascore < 5 && bscore < 5;
    }

    bool{(A|B)-> & (A&B)<-} awins = ascore == 5;
    send awins to @alice;
    send awins to @bob;
}

host alice  : {A};
host bob    : {B};
