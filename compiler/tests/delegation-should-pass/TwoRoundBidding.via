/* Alice an Bob bid on an item in two rounds.
 * Who had the higher bid is revealed after the first round,
 * but the bids are kept secret.
 * Person with the higher average bid wins.
 */
process main {
  /* Round 1 */
  val a1: int = endorse (input int from Alice) to {Alice} from {Alice};
  val b1: int = endorse (input int from Bob) to {Bob} from {Bob};

  /* Reveal who had the higher bid. */
  val a1_higher: bool = declassify (a1 > b1) to {Alice ⊓ Bob};
  output a1_higher to Alice;
  output a1_higher to Bob;

  /* Round 2 */
  val a2: int = endorse (input int from Alice) to {Alice} from {Alice};
  val b2: int = endorse (input int from Bob) to {Bob} from {Bob};

  /* Reveal the overall winner. */
  val a_higher: bool = declassify (a1 + a2 > b1 + b2) to {Alice ⊓ Bob};
  output a_higher to Alice;
  output a_higher to Bob;
}

process Host(Alice) {
  /* First bid. */
  send 10 to main;

  /* Adjust bid based on result of Round 1. */
  val a1_higher: bool = receive bool from main;
  if (a1_higher) {
    send 5 to main;
  } else {
    send 20 to main;
  }

  /* See who won. */
  val a_higher: bool = receive bool from main;
  assert a_higher;
}

process Host(Bob) {
  /* First bid. */
  send 20 to main;

  /* Adjust bid based on result of Round 1. */
  val a1_higher: bool = receive bool from main;
  if (a1_higher) {
    send 80 to main;
  } else {
    send 5 to main;
  }

  /* See who won. */
  val a_higher: bool = receive bool from main;
  assert a_higher;
}

hosts: Alice, Bob
assume: Alice<- <=> Bob<-
