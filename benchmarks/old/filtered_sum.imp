process main {
    int{A} a[100] <- recv @alice;
    int{B} b[100] <- recv @bob;
    int{C} c[100] <- recv @chuck;

    int{A} a_min = 0;
    for (int ai = 0; ai < 100; ai++) {
        a_min = min(a_min, a[ai]);
    }

    int{B} b_min = 0;
    for (int bi = 0; bi < 100; bi++) {
        b_min = min(b_min, b[bi]);
    }

    int{A & (B & C)<-} a_min_trusted = endorse(a_min, {A & (B & C)<-});
    int{B & (A & C)<-} b_min_trusted = endorse(b_min, {B & (A & C)<-});
    bool{A ⊓ B ⊓ C} a_min_greater = declassify(a_min_trusted > b_min_trusted, {A ⊓ B ⊓ C});

    int{C} filter;
    if (a_min_greater) {
        filter = declassify(b_min_trusted, {A ⊓ B ⊓ C});
    } else {
        filter = declassify(a_min_trusted, {A ⊓ B ⊓ C});
    }

    int{C} c_sum = 0;
    for (int ci = 0; ci < 100; ci++) {
        c_sum = min(filter, c[ci]);
    }

    int{C & (A & B)<-} result = endorse(c_sum, {C & (A & B)<-});

    send declassify(result, {A ⊓ B ⊓ C}) to @alice;
    send declassify(result, {A ⊓ B ⊓ C}) to @bob;
    send declassify(result, {A ⊓ B ⊓ C}) to @chuck;
}

host alice  : {A};
host bob    : {B};
host chuck  : {C};
