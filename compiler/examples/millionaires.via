/* The classic MPC problem. */
process main {
  /* Alice and Bob are free to provide any input; we'll just trust it. */
  val a: int{A & B<-} = endorse input int from alice to {A & B<-};
  val b: int{B & A<-} = endorse input int from bob to {B & A<-};

  var bob_richer : bool{A & B} = false;
  if (a <= b) {
    bob_richer = true;
  }

  val bob_richer_decl : bool = declassify bob_richer to {(A | B)-> & (A & B)<-};
  output bob_richer_decl to alice;
  output bob_richer_decl to bob;
}

process Host(alice) {
  send 20 to main;
  val bob_richer: bool = receive bool from main;
}

process Host(bob) {
  send 40 to main;
  val bob_richer: bool = receive bool from main;
  assert bob_richer;
}

host alice : {A}
host bob   : {B}
