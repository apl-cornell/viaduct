/* biometric matching example from HyCC paper */

host alice
host bob

assume for <- alice trusts bob
assume for <- bob trusts alice

fun match(db1: int{alice}, db2: int{alice}, s1: int{bob}, s2: int{bob}, res: out int{alice & bob}) : {(alice & bob)<- & (alice | bob)->} {
    val dist1: int{alice & bob} = db1 - s1;
    val dist2: int{alice & bob} = db2 - s2;
    out res = (dist1 * dist1) + (dist2 * dist2);
}

fun main() {
    val n: int{alice ⊓ bob} = 128;
    val d: int{alice ⊓ bob} = 2;

    val a_db = Array[int]{alice}(n * d);
    val b_sample = Array[int]{bob}(d);

    for (var i: int{alice ⊓ bob} = 0; i < n*d; i += 1) {
        a_db[i] = input int from alice;
    }

    for (var i: int{alice ⊓ bob} = 0; i < d; i += 1) {
        b_sample[i] = input int from bob;
    }

    match(a_db[0], a_db[1], b_sample[0], b_sample[1], val init_min);
    var min_dist: int{alice & bob} = init_min;

    for (var i: int{alice ⊓ bob} = 0; i < n; i += 1) {
        match(a_db[(i*d)], a_db[(i*d)+1], b_sample[0], b_sample[1], val dist);

        if (dist < min_dist) {
            min_dist = dist;
        }
    }

    val result: int{alice ⊓ bob}  = declassify min_dist to {alice ⊓ bob};
    output result to alice;
    output result to bob;
}
