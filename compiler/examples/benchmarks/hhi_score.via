/* calculates the Herfindahl-Hirschman index for market competitiveness.
 * in this scenario, we're assessing the competitiveness of the widget market
 * amongst three widget makers by calculating the revenue of each company
 * (by summing up sales in 100 stores) and then calculating each company's
 * market share and applying the HHI formula. */
process main {
    val a = Array[int]{A}(100);
    for (var i : int = 0; i < 100; i += 1) {
        a[i] = input int from companyA;
    }

    val b = Array[int]{B}(100);
    for (var i : int = 0; i < 100; i += 1) {
        b[i] = input int from companyB;
    }

    val c = Array[int]{C}(100);
    for (var i : int = 0; i < 100; i += 1) {
        c[i] = input int from companyC;
    }

    var a_rev : int{A} = 0;
    for (var i : int = 0; i < 100; i += 1) {
        a_rev += a[i];
    }

    var b_rev : int{B} = 0;
    for (var i : int = 0; i < 100; i += 1) {
        b_rev += b[i];
    }

    var c_rev : int{C} = 0;
    for (var i : int = 0; i < 100; i += 1) {
        c_rev += c[i];
    }


    val a_rev_trusted : int = endorse a_rev to {A & (B & C)<-};
    val b_rev_trusted : int = endorse b_rev to {B & (A & C)<-};
    val c_rev_trusted : int = endorse c_rev to {C & (A & B)<-};
    val total_market : int = a_rev_trusted + b_rev_trusted + c_rev_trusted;

    val a_share : int = (1000 * a_rev_trusted) / total_market;
    val b_share : int = (1000 * b_rev_trusted) / total_market;
    val c_share : int = (1000 * c_rev_trusted) / total_market;

    val hhi : int =
        declassify ((a_share * a_share) + (b_share * b_share) + (c_share * c_share)) to {A ⊓ B ⊓ C};

    output hhi to companyA;
    output hhi to companyB;
    output hhi to companyC;
}

host companyA  : {A}
host companyB  : {B}
host companyC  : {C}
