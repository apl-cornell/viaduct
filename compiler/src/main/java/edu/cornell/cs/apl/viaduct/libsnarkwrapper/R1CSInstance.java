/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cornell.cs.apl.viaduct.libsnarkwrapper;

public class R1CSInstance {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected R1CSInstance(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(R1CSInstance obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsnarkwrapperJNI.delete_R1CSInstance(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public R1CSInstance() {
    this(libsnarkwrapperJNI.new_R1CSInstance(), true);
  }

  public void setIsProver(boolean value) {
    libsnarkwrapperJNI.R1CSInstance_isProver_set(swigCPtr, this, value);
  }

  public boolean getIsProver() {
    return libsnarkwrapperJNI.R1CSInstance_isProver_get(swigCPtr, this);
  }

  public Var mkPublicVal(long val) {
    return new Var(libsnarkwrapperJNI.R1CSInstance_mkPublicVal(swigCPtr, this, val), true);
  }

  public VarArray mkPublicBitvec(BoolVector bits) {
    return new VarArray(
        libsnarkwrapperJNI.R1CSInstance_mkPublicBitvec__SWIG_0(
            swigCPtr, this, BoolVector.getCPtr(bits), bits),
        true);
  }

  public VarArray mkPublicBitvec(ByteBuf buf) {
    return new VarArray(
        libsnarkwrapperJNI.R1CSInstance_mkPublicBitvec__SWIG_1(
            swigCPtr, this, ByteBuf.getCPtr(buf), buf),
        true);
  }

  public Var mkPrivateValProver(long val, VarArray hash, VarArray nonce) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkPrivateValProver(
            swigCPtr, this, val, VarArray.getCPtr(hash), hash, VarArray.getCPtr(nonce), nonce),
        true);
  }

  public Var mkPrivateValVerifier(VarArray hash, VarArray nonce) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkPrivateValVerifier(
            swigCPtr, this, VarArray.getCPtr(hash), hash, VarArray.getCPtr(nonce), nonce),
        true);
  }

  public Var mkAnd(Var lhs, Var rhs) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkAnd(
            swigCPtr, this, Var.getCPtr(lhs), lhs, Var.getCPtr(rhs), rhs),
        true);
  }

  public Var mkNot(Var v) {
    return new Var(libsnarkwrapperJNI.R1CSInstance_mkNot(swigCPtr, this, Var.getCPtr(v), v), true);
  }

  public Var mkOr(Var lhs, Var rhs) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkOr(
            swigCPtr, this, Var.getCPtr(lhs), lhs, Var.getCPtr(rhs), rhs),
        true);
  }

  public Var mkMult(Var lhs, Var rhs) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkMult(
            swigCPtr, this, Var.getCPtr(lhs), lhs, Var.getCPtr(rhs), rhs),
        true);
  }

  public Var mkAdd(Var lhs, Var rhs) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkAdd(
            swigCPtr, this, Var.getCPtr(lhs), lhs, Var.getCPtr(rhs), rhs),
        true);
  }

  public Var mkMux(Var b, Var lhs, Var rhs) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkMux(
            swigCPtr, this, Var.getCPtr(b), b, Var.getCPtr(lhs), lhs, Var.getCPtr(rhs), rhs),
        true);
  }

  public Var mkEqualTo(Var a, Var b) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkEqualTo(
            swigCPtr, this, Var.getCPtr(a), a, Var.getCPtr(b), b),
        true);
  }

  public Var mkLessThan(Var a, Var b) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkLessThan(
            swigCPtr, this, Var.getCPtr(a), a, Var.getCPtr(b), b),
        true);
  }

  public Var mkLE(Var a, Var b) {
    return new Var(
        libsnarkwrapperJNI.R1CSInstance_mkLE(swigCPtr, this, Var.getCPtr(a), a, Var.getCPtr(b), b),
        true);
  }

  public void AddEquality(Var a, Var b) {
    libsnarkwrapperJNI.R1CSInstance_AddEquality(
        swigCPtr, this, Var.getCPtr(a), a, Var.getCPtr(b), b);
  }

  public boolean verifyProof(ByteBuf verificationKey, ByteBuf proof) {
    return libsnarkwrapperJNI.R1CSInstance_verifyProof(
        swigCPtr,
        this,
        ByteBuf.getCPtr(verificationKey),
        verificationKey,
        ByteBuf.getCPtr(proof),
        proof);
  }

  public ByteBuf generateProof(ByteBuf provingKey) {
    return new ByteBuf(
        libsnarkwrapperJNI.R1CSInstance_generateProof(
            swigCPtr, this, ByteBuf.getCPtr(provingKey), provingKey),
        true);
  }

  public Keypair genKeypair() {
    return new Keypair(libsnarkwrapperJNI.R1CSInstance_genKeypair(swigCPtr, this), true);
  }
}
