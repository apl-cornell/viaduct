process main {
    val a = Array[int]{A}(100);
    for (var i : int = 0; i < 100; i += 1) {
        a[i] = input int from alice;
    }

    val b = Array[int]{B}(100);
    for (var i : int = 0; i < 100; i += 1) {
        b[i] = input int from bob;
    }

    val c = Array[int]{C}(100);
    for (var i : int = 0; i < 100; i += 1) {
        c[i] = input int from chuck;
    }

    val d = Array[int]{D}(100);
    for (var i : int = 0; i < 100; i += 1) {
        d[i] = input int from dexter;
    }

    var a_sum : int{A} = 0;
    for (var i : int = 0; i < 100; i += 1) {
        a_sum += a[i] * a[i];
    }

    var b_sum : int{B} = 0;
    for (var i : int = 0; i < 100; i += 1) {
        b_sum += b[i] * b[i];
    }

    var c_sum : int{C} = 0;
    for (var i : int = 0; i < 100; i += 1) {
        c_sum += c[i] * c[i];
    }

    var d_sum : int{D} = 0;
    for (var i : int = 0; i < 100; i += 1) {
        d_sum += d[i] * d[i];
    }

    val sqsums : int =
        endorse a_sum to {A & (B & C & D)<-}
        + endorse b_sum to {B & (A & C & D)<-}
        + endorse c_sum to {C & (B & A & D)<-}
        + endorse d_sum to {D & (A & B & C)<-};

    val result : int = declassify (sqsums / 4) to {A ⊓ B ⊓ C ⊓ D};

    output result to alice;
    output result to bob;
    output result to chuck;
    output result to dexter;
}

host alice  : {A}
host bob    : {B}
host chuck  : {C}
host dexter : {D}
