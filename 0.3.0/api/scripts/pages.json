[{"name":"class Compile : CliktCommand","description":"io.github.aplcornell.viaduct.cli.Compile","location":"cli/io.github.aplcornell.viaduct.cli/-compile/index.html","searchKeys":["Compile","class Compile : CliktCommand","io.github.aplcornell.viaduct.cli.Compile"]},{"name":"class Format : CliktCommand","description":"io.github.aplcornell.viaduct.cli.Format","location":"cli/io.github.aplcornell.viaduct.cli/-format/index.html","searchKeys":["Format","class Format : CliktCommand","io.github.aplcornell.viaduct.cli.Format"]},{"name":"class Run : CliktCommand","description":"io.github.aplcornell.viaduct.cli.Run","location":"cli/io.github.aplcornell.viaduct.cli/-run/index.html","searchKeys":["Run","class Run : CliktCommand","io.github.aplcornell.viaduct.cli.Run"]},{"name":"class Viaduct : NoOpCliktCommand","description":"io.github.aplcornell.viaduct.cli.Viaduct","location":"cli/io.github.aplcornell.viaduct.cli/-viaduct/index.html","searchKeys":["Viaduct","class Viaduct : NoOpCliktCommand","io.github.aplcornell.viaduct.cli.Viaduct"]},{"name":"fun Compile()","description":"io.github.aplcornell.viaduct.cli.Compile.Compile","location":"cli/io.github.aplcornell.viaduct.cli/-compile/-compile.html","searchKeys":["Compile","fun Compile()","io.github.aplcornell.viaduct.cli.Compile.Compile"]},{"name":"fun Format()","description":"io.github.aplcornell.viaduct.cli.Format.Format","location":"cli/io.github.aplcornell.viaduct.cli/-format/-format.html","searchKeys":["Format","fun Format()","io.github.aplcornell.viaduct.cli.Format.Format"]},{"name":"fun Run()","description":"io.github.aplcornell.viaduct.cli.Run.Run","location":"cli/io.github.aplcornell.viaduct.cli/-run/-run.html","searchKeys":["Run","fun Run()","io.github.aplcornell.viaduct.cli.Run.Run"]},{"name":"fun Viaduct()","description":"io.github.aplcornell.viaduct.cli.Viaduct.Viaduct","location":"cli/io.github.aplcornell.viaduct.cli/-viaduct/-viaduct.html","searchKeys":["Viaduct","fun Viaduct()","io.github.aplcornell.viaduct.cli.Viaduct.Viaduct"]},{"name":"fun main(args: Array<String>)","description":"io.github.aplcornell.viaduct.cli.main","location":"cli/io.github.aplcornell.viaduct.cli/main.html","searchKeys":["main","fun main(args: Array<String>)","io.github.aplcornell.viaduct.cli.main"]},{"name":"open override fun run()","description":"io.github.aplcornell.viaduct.cli.Compile.run","location":"cli/io.github.aplcornell.viaduct.cli/-compile/run.html","searchKeys":["run","open override fun run()","io.github.aplcornell.viaduct.cli.Compile.run"]},{"name":"open override fun run()","description":"io.github.aplcornell.viaduct.cli.Format.run","location":"cli/io.github.aplcornell.viaduct.cli/-format/run.html","searchKeys":["run","open override fun run()","io.github.aplcornell.viaduct.cli.Format.run"]},{"name":"open override fun run()","description":"io.github.aplcornell.viaduct.cli.Run.run","location":"cli/io.github.aplcornell.viaduct.cli/-run/run.html","searchKeys":["run","open override fun run()","io.github.aplcornell.viaduct.cli.Run.run"]},{"name":"val abyPort: Int?","description":"io.github.aplcornell.viaduct.cli.Run.abyPort","location":"cli/io.github.aplcornell.viaduct.cli/-run/aby-port.html","searchKeys":["abyPort","val abyPort: Int?","io.github.aplcornell.viaduct.cli.Run.abyPort"]},{"name":"val check: Boolean","description":"io.github.aplcornell.viaduct.cli.Format.check","location":"cli/io.github.aplcornell.viaduct.cli/-format/check.html","searchKeys":["check","val check: Boolean","io.github.aplcornell.viaduct.cli.Format.check"]},{"name":"val compileKotlin: Boolean","description":"io.github.aplcornell.viaduct.cli.Compile.compileKotlin","location":"cli/io.github.aplcornell.viaduct.cli/-compile/compile-kotlin.html","searchKeys":["compileKotlin","val compileKotlin: Boolean","io.github.aplcornell.viaduct.cli.Compile.compileKotlin"]},{"name":"val constraintGraphOutput: File?","description":"io.github.aplcornell.viaduct.cli.Compile.constraintGraphOutput","location":"cli/io.github.aplcornell.viaduct.cli/-compile/constraint-graph-output.html","searchKeys":["constraintGraphOutput","val constraintGraphOutput: File?","io.github.aplcornell.viaduct.cli.Compile.constraintGraphOutput"]},{"name":"val costOutput: File?","description":"io.github.aplcornell.viaduct.cli.Compile.costOutput","location":"cli/io.github.aplcornell.viaduct.cli/-compile/cost-output.html","searchKeys":["costOutput","val costOutput: File?","io.github.aplcornell.viaduct.cli.Compile.costOutput"]},{"name":"val elaborate: Boolean","description":"io.github.aplcornell.viaduct.cli.Format.elaborate","location":"cli/io.github.aplcornell.viaduct.cli/-format/elaborate.html","searchKeys":["elaborate","val elaborate: Boolean","io.github.aplcornell.viaduct.cli.Format.elaborate"]},{"name":"val hostAddress: List<Pair<String, String>>","description":"io.github.aplcornell.viaduct.cli.Run.hostAddress","location":"cli/io.github.aplcornell.viaduct.cli/-run/host-address.html","searchKeys":["hostAddress","val hostAddress: List<Pair<String, String>>","io.github.aplcornell.viaduct.cli.Run.hostAddress"]},{"name":"val input: File?","description":"io.github.aplcornell.viaduct.cli.Compile.input","location":"cli/io.github.aplcornell.viaduct.cli/-compile/input.html","searchKeys":["input","val input: File?","io.github.aplcornell.viaduct.cli.Compile.input"]},{"name":"val input: File?","description":"io.github.aplcornell.viaduct.cli.Format.input","location":"cli/io.github.aplcornell.viaduct.cli/-format/input.html","searchKeys":["input","val input: File?","io.github.aplcornell.viaduct.cli.Format.input"]},{"name":"val input: File?","description":"io.github.aplcornell.viaduct.cli.Run.input","location":"cli/io.github.aplcornell.viaduct.cli/-run/input.html","searchKeys":["input","val input: File?","io.github.aplcornell.viaduct.cli.Run.input"]},{"name":"val inputStrategy: File?","description":"io.github.aplcornell.viaduct.cli.Run.inputStrategy","location":"cli/io.github.aplcornell.viaduct.cli/-run/input-strategy.html","searchKeys":["inputStrategy","val inputStrategy: File?","io.github.aplcornell.viaduct.cli.Run.inputStrategy"]},{"name":"val labelOutput: File?","description":"io.github.aplcornell.viaduct.cli.Compile.labelOutput","location":"cli/io.github.aplcornell.viaduct.cli/-compile/label-output.html","searchKeys":["labelOutput","val labelOutput: File?","io.github.aplcornell.viaduct.cli.Compile.labelOutput"]},{"name":"val maximizeCost: Boolean","description":"io.github.aplcornell.viaduct.cli.Compile.maximizeCost","location":"cli/io.github.aplcornell.viaduct.cli/-compile/maximize-cost.html","searchKeys":["maximizeCost","val maximizeCost: Boolean","io.github.aplcornell.viaduct.cli.Compile.maximizeCost"]},{"name":"val output: File?","description":"io.github.aplcornell.viaduct.cli.Compile.output","location":"cli/io.github.aplcornell.viaduct.cli/-compile/output.html","searchKeys":["output","val output: File?","io.github.aplcornell.viaduct.cli.Compile.output"]},{"name":"val output: File?","description":"io.github.aplcornell.viaduct.cli.Format.output","location":"cli/io.github.aplcornell.viaduct.cli/-format/output.html","searchKeys":["output","val output: File?","io.github.aplcornell.viaduct.cli.Format.output"]},{"name":"val protocolSelectionOutput: File?","description":"io.github.aplcornell.viaduct.cli.Compile.protocolSelectionOutput","location":"cli/io.github.aplcornell.viaduct.cli/-compile/protocol-selection-output.html","searchKeys":["protocolSelectionOutput","val protocolSelectionOutput: File?","io.github.aplcornell.viaduct.cli.Compile.protocolSelectionOutput"]},{"name":"val selectionProblemSolver: SelectionProblemSolver","description":"io.github.aplcornell.viaduct.cli.Compile.selectionProblemSolver","location":"cli/io.github.aplcornell.viaduct.cli/-compile/selection-problem-solver.html","searchKeys":["selectionProblemSolver","val selectionProblemSolver: SelectionProblemSolver","io.github.aplcornell.viaduct.cli.Compile.selectionProblemSolver"]},{"name":"val verbose: Int","description":"io.github.aplcornell.viaduct.cli.Viaduct.verbose","location":"cli/io.github.aplcornell.viaduct.cli/-viaduct/verbose.html","searchKeys":["verbose","val verbose: Int","io.github.aplcornell.viaduct.cli.Viaduct.verbose"]},{"name":"val wanCost: Boolean","description":"io.github.aplcornell.viaduct.cli.Compile.wanCost","location":"cli/io.github.aplcornell.viaduct.cli/-compile/wan-cost.html","searchKeys":["wanCost","val wanCost: Boolean","io.github.aplcornell.viaduct.cli.Compile.wanCost"]},{"name":"BLACK","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.BLACK","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-b-l-a-c-k/index.html","searchKeys":["BLACK","BLACK","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.BLACK"]},{"name":"BLUE","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.BLUE","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-b-l-u-e/index.html","searchKeys":["BLUE","BLUE","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.BLUE"]},{"name":"CYAN","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.CYAN","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-c-y-a-n/index.html","searchKeys":["CYAN","CYAN","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.CYAN"]},{"name":"GREEN","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.GREEN","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-g-r-e-e-n/index.html","searchKeys":["GREEN","GREEN","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.GREEN"]},{"name":"MAGENTA","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.MAGENTA","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-m-a-g-e-n-t-a/index.html","searchKeys":["MAGENTA","MAGENTA","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.MAGENTA"]},{"name":"RED","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.RED","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-r-e-d/index.html","searchKeys":["RED","RED","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.RED"]},{"name":"WHITE","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.WHITE","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-w-h-i-t-e/index.html","searchKeys":["WHITE","WHITE","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.WHITE"]},{"name":"YELLOW","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.YELLOW","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-y-e-l-l-o-w/index.html","searchKeys":["YELLOW","YELLOW","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.YELLOW"]},{"name":"abstract class Value : PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.values.Value","location":"shared/io.github.aplcornell.viaduct.syntax.values/-value/index.html","searchKeys":["Value","abstract class Value : PrettyPrintable","io.github.aplcornell.viaduct.syntax.values.Value"]},{"name":"abstract class ValueType : Type","description":"io.github.aplcornell.viaduct.syntax.types.ValueType","location":"shared/io.github.aplcornell.viaduct.syntax.types/-value-type/index.html","searchKeys":["ValueType","abstract class ValueType : Type","io.github.aplcornell.viaduct.syntax.types.ValueType"]},{"name":"abstract fun toDocument(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.PrettyPrintable.toDocument","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-pretty-printable/to-document.html","searchKeys":["toDocument","abstract fun toDocument(): Document","io.github.aplcornell.viaduct.prettyprinting.PrettyPrintable.toDocument"]},{"name":"abstract val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.ValueType.defaultValue","location":"shared/io.github.aplcornell.viaduct.syntax.types/-value-type/default-value.html","searchKeys":["defaultValue","abstract val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.ValueType.defaultValue"]},{"name":"abstract val name: String","description":"io.github.aplcornell.viaduct.syntax.Name.name","location":"shared/io.github.aplcornell.viaduct.syntax/-name/name.html","searchKeys":["name","abstract val name: String","io.github.aplcornell.viaduct.syntax.Name.name"]},{"name":"abstract val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.Name.nameCategory","location":"shared/io.github.aplcornell.viaduct.syntax/-name/name-category.html","searchKeys":["nameCategory","abstract val nameCategory: String","io.github.aplcornell.viaduct.syntax.Name.nameCategory"]},{"name":"abstract val type: ValueType","description":"io.github.aplcornell.viaduct.syntax.values.Value.type","location":"shared/io.github.aplcornell.viaduct.syntax.values/-value/type.html","searchKeys":["type","abstract val type: ValueType","io.github.aplcornell.viaduct.syntax.values.Value.type"]},{"name":"const val DEFAULT_LINE_WIDTH: Int = 80","description":"io.github.aplcornell.viaduct.prettyprinting.DEFAULT_LINE_WIDTH","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-d-e-f-a-u-l-t_-l-i-n-e_-w-i-d-t-h.html","searchKeys":["DEFAULT_LINE_WIDTH","const val DEFAULT_LINE_WIDTH: Int = 80","io.github.aplcornell.viaduct.prettyprinting.DEFAULT_LINE_WIDTH"]},{"name":"data class BooleanValue(val value: Boolean) : IOValue","description":"io.github.aplcornell.viaduct.syntax.values.BooleanValue","location":"shared/io.github.aplcornell.viaduct.syntax.values/-boolean-value/index.html","searchKeys":["BooleanValue","data class BooleanValue(val value: Boolean) : IOValue","io.github.aplcornell.viaduct.syntax.values.BooleanValue"]},{"name":"data class BrightColor(val baseColor: AnsiBaseColor) : AnsiColor","description":"io.github.aplcornell.viaduct.prettyprinting.BrightColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-bright-color/index.html","searchKeys":["BrightColor","data class BrightColor(val baseColor: AnsiBaseColor) : AnsiColor","io.github.aplcornell.viaduct.prettyprinting.BrightColor"]},{"name":"data class Host(val name: String) : Name, Comparable<Host> ","description":"io.github.aplcornell.viaduct.syntax.Host","location":"shared/io.github.aplcornell.viaduct.syntax/-host/index.html","searchKeys":["Host","data class Host(val name: String) : Name, Comparable<Host> ","io.github.aplcornell.viaduct.syntax.Host"]},{"name":"data class IntegerValue(val value: Int) : IOValue","description":"io.github.aplcornell.viaduct.syntax.values.IntegerValue","location":"shared/io.github.aplcornell.viaduct.syntax.values/-integer-value/index.html","searchKeys":["IntegerValue","data class IntegerValue(val value: Int) : IOValue","io.github.aplcornell.viaduct.syntax.values.IntegerValue"]},{"name":"data class NormalColor(val baseColor: AnsiBaseColor) : AnsiColor","description":"io.github.aplcornell.viaduct.prettyprinting.NormalColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-normal-color/index.html","searchKeys":["NormalColor","data class NormalColor(val baseColor: AnsiBaseColor) : AnsiColor","io.github.aplcornell.viaduct.prettyprinting.NormalColor"]},{"name":"enum AnsiBaseColor : Enum<AnsiBaseColor> ","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/index.html","searchKeys":["AnsiBaseColor","enum AnsiBaseColor : Enum<AnsiBaseColor> ","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor"]},{"name":"fun BooleanValue(value: Boolean)","description":"io.github.aplcornell.viaduct.syntax.values.BooleanValue.BooleanValue","location":"shared/io.github.aplcornell.viaduct.syntax.values/-boolean-value/-boolean-value.html","searchKeys":["BooleanValue","fun BooleanValue(value: Boolean)","io.github.aplcornell.viaduct.syntax.values.BooleanValue.BooleanValue"]},{"name":"fun BrightColor(baseColor: AnsiBaseColor)","description":"io.github.aplcornell.viaduct.prettyprinting.BrightColor.BrightColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-bright-color/-bright-color.html","searchKeys":["BrightColor","fun BrightColor(baseColor: AnsiBaseColor)","io.github.aplcornell.viaduct.prettyprinting.BrightColor.BrightColor"]},{"name":"fun Host(name: String)","description":"io.github.aplcornell.viaduct.syntax.Host.Host","location":"shared/io.github.aplcornell.viaduct.syntax/-host/-host.html","searchKeys":["Host","fun Host(name: String)","io.github.aplcornell.viaduct.syntax.Host.Host"]},{"name":"fun IntegerValue(value: Int)","description":"io.github.aplcornell.viaduct.syntax.values.IntegerValue.IntegerValue","location":"shared/io.github.aplcornell.viaduct.syntax.values/-integer-value/-integer-value.html","searchKeys":["IntegerValue","fun IntegerValue(value: Int)","io.github.aplcornell.viaduct.syntax.values.IntegerValue.IntegerValue"]},{"name":"fun List<PrettyPrintable>.braced(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.braced","location":"shared/io.github.aplcornell.viaduct.prettyprinting/braced.html","searchKeys":["braced","fun List<PrettyPrintable>.braced(): Document","io.github.aplcornell.viaduct.prettyprinting.braced"]},{"name":"fun List<PrettyPrintable>.bracketed(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.bracketed","location":"shared/io.github.aplcornell.viaduct.prettyprinting/bracketed.html","searchKeys":["bracketed","fun List<PrettyPrintable>.bracketed(): Document","io.github.aplcornell.viaduct.prettyprinting.bracketed"]},{"name":"fun List<PrettyPrintable>.concatenated(separator: PrettyPrintable = Document()): Document","description":"io.github.aplcornell.viaduct.prettyprinting.concatenated","location":"shared/io.github.aplcornell.viaduct.prettyprinting/concatenated.html","searchKeys":["concatenated","fun List<PrettyPrintable>.concatenated(separator: PrettyPrintable = Document()): Document","io.github.aplcornell.viaduct.prettyprinting.concatenated"]},{"name":"fun List<PrettyPrintable>.joined(separator: PrettyPrintable = Document(\",\"), prefix: PrettyPrintable = Document(), postfix: PrettyPrintable = Document()): Document","description":"io.github.aplcornell.viaduct.prettyprinting.joined","location":"shared/io.github.aplcornell.viaduct.prettyprinting/joined.html","searchKeys":["joined","fun List<PrettyPrintable>.joined(separator: PrettyPrintable = Document(\",\"), prefix: PrettyPrintable = Document(), postfix: PrettyPrintable = Document()): Document","io.github.aplcornell.viaduct.prettyprinting.joined"]},{"name":"fun List<PrettyPrintable>.tupled(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.tupled","location":"shared/io.github.aplcornell.viaduct.prettyprinting/tupled.html","searchKeys":["tupled","fun List<PrettyPrintable>.tupled(): Document","io.github.aplcornell.viaduct.prettyprinting.tupled"]},{"name":"fun NormalColor(baseColor: AnsiBaseColor)","description":"io.github.aplcornell.viaduct.prettyprinting.NormalColor.NormalColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-normal-color/-normal-color.html","searchKeys":["NormalColor","fun NormalColor(baseColor: AnsiBaseColor)","io.github.aplcornell.viaduct.prettyprinting.NormalColor.NormalColor"]},{"name":"fun PrettyPrintable.commented(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.commented","location":"shared/io.github.aplcornell.viaduct.prettyprinting/commented.html","searchKeys":["commented","fun PrettyPrintable.commented(): Document","io.github.aplcornell.viaduct.prettyprinting.commented"]},{"name":"fun PrettyPrintable.grouped(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.grouped","location":"shared/io.github.aplcornell.viaduct.prettyprinting/grouped.html","searchKeys":["grouped","fun PrettyPrintable.grouped(): Document","io.github.aplcornell.viaduct.prettyprinting.grouped"]},{"name":"fun PrettyPrintable.nested(indentationChange: Int = 4): Document","description":"io.github.aplcornell.viaduct.prettyprinting.nested","location":"shared/io.github.aplcornell.viaduct.prettyprinting/nested.html","searchKeys":["nested","fun PrettyPrintable.nested(indentationChange: Int = 4): Document","io.github.aplcornell.viaduct.prettyprinting.nested"]},{"name":"fun PrettyPrintable.styled(style: Style): Document","description":"io.github.aplcornell.viaduct.prettyprinting.styled","location":"shared/io.github.aplcornell.viaduct.prettyprinting/styled.html","searchKeys":["styled","fun PrettyPrintable.styled(style: Style): Document","io.github.aplcornell.viaduct.prettyprinting.styled"]},{"name":"fun Value()","description":"io.github.aplcornell.viaduct.syntax.values.Value.Value","location":"shared/io.github.aplcornell.viaduct.syntax.values/-value/-value.html","searchKeys":["Value","fun Value()","io.github.aplcornell.viaduct.syntax.values.Value.Value"]},{"name":"fun ValueType()","description":"io.github.aplcornell.viaduct.syntax.types.ValueType.ValueType","location":"shared/io.github.aplcornell.viaduct.syntax.types/-value-type/-value-type.html","searchKeys":["ValueType","fun ValueType()","io.github.aplcornell.viaduct.syntax.types.ValueType.ValueType"]},{"name":"fun print(lineWidth: Int = DEFAULT_LINE_WIDTH): String","description":"io.github.aplcornell.viaduct.prettyprinting.Document.print","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/print.html","searchKeys":["print","fun print(lineWidth: Int = DEFAULT_LINE_WIDTH): String","io.github.aplcornell.viaduct.prettyprinting.Document.print"]},{"name":"fun print(output: PrintStream, lineWidth: Int = DEFAULT_LINE_WIDTH, ansi: Boolean = false)","description":"io.github.aplcornell.viaduct.prettyprinting.Document.print","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/print.html","searchKeys":["print","fun print(output: PrintStream, lineWidth: Int = DEFAULT_LINE_WIDTH, ansi: Boolean = false)","io.github.aplcornell.viaduct.prettyprinting.Document.print"]},{"name":"fun valueOf(value: String): AnsiBaseColor","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.valueOf","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AnsiBaseColor","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.valueOf"]},{"name":"fun values(): Array<AnsiBaseColor>","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.values","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/values.html","searchKeys":["values","fun values(): Array<AnsiBaseColor>","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.values"]},{"name":"interface Name : PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.Name","location":"shared/io.github.aplcornell.viaduct.syntax/-name/index.html","searchKeys":["Name","interface Name : PrettyPrintable","io.github.aplcornell.viaduct.syntax.Name"]},{"name":"interface PrettyPrintable","description":"io.github.aplcornell.viaduct.prettyprinting.PrettyPrintable","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-pretty-printable/index.html","searchKeys":["PrettyPrintable","interface PrettyPrintable","io.github.aplcornell.viaduct.prettyprinting.PrettyPrintable"]},{"name":"interface Style","description":"io.github.aplcornell.viaduct.prettyprinting.Style","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-style/index.html","searchKeys":["Style","interface Style","io.github.aplcornell.viaduct.prettyprinting.Style"]},{"name":"interface Type : PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.types.Type","location":"shared/io.github.aplcornell.viaduct.syntax.types/-type/index.html","searchKeys":["Type","interface Type : PrettyPrintable","io.github.aplcornell.viaduct.syntax.types.Type"]},{"name":"object BooleanType : IOValueType","description":"io.github.aplcornell.viaduct.syntax.types.BooleanType","location":"shared/io.github.aplcornell.viaduct.syntax.types/-boolean-type/index.html","searchKeys":["BooleanType","object BooleanType : IOValueType","io.github.aplcornell.viaduct.syntax.types.BooleanType"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.Companion","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-base-color/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.prettyprinting.AnsiBaseColor.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.prettyprinting.Document.Companion","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.prettyprinting.Document.Companion"]},{"name":"object DefaultColor : AnsiColor","description":"io.github.aplcornell.viaduct.prettyprinting.DefaultColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-default-color/index.html","searchKeys":["DefaultColor","object DefaultColor : AnsiColor","io.github.aplcornell.viaduct.prettyprinting.DefaultColor"]},{"name":"object DefaultStyle : Style","description":"io.github.aplcornell.viaduct.prettyprinting.DefaultStyle","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-default-style/index.html","searchKeys":["DefaultStyle","object DefaultStyle : Style","io.github.aplcornell.viaduct.prettyprinting.DefaultStyle"]},{"name":"object HostStyle : Style","description":"io.github.aplcornell.viaduct.syntax.HostStyle","location":"shared/io.github.aplcornell.viaduct.syntax/-host-style/index.html","searchKeys":["HostStyle","object HostStyle : Style","io.github.aplcornell.viaduct.syntax.HostStyle"]},{"name":"object IntegerType : IOValueType","description":"io.github.aplcornell.viaduct.syntax.types.IntegerType","location":"shared/io.github.aplcornell.viaduct.syntax.types/-integer-type/index.html","searchKeys":["IntegerType","object IntegerType : IOValueType","io.github.aplcornell.viaduct.syntax.types.IntegerType"]},{"name":"object UnitType : IOValueType","description":"io.github.aplcornell.viaduct.syntax.types.UnitType","location":"shared/io.github.aplcornell.viaduct.syntax.types/-unit-type/index.html","searchKeys":["UnitType","object UnitType : IOValueType","io.github.aplcornell.viaduct.syntax.types.UnitType"]},{"name":"object UnitValue : IOValue","description":"io.github.aplcornell.viaduct.syntax.values.UnitValue","location":"shared/io.github.aplcornell.viaduct.syntax.values/-unit-value/index.html","searchKeys":["UnitValue","object UnitValue : IOValue","io.github.aplcornell.viaduct.syntax.values.UnitValue"]},{"name":"object ValueStyle : Style","description":"io.github.aplcornell.viaduct.syntax.values.ValueStyle","location":"shared/io.github.aplcornell.viaduct.syntax.values/-value-style/index.html","searchKeys":["ValueStyle","object ValueStyle : Style","io.github.aplcornell.viaduct.syntax.values.ValueStyle"]},{"name":"object ValueTypeStyle : Style","description":"io.github.aplcornell.viaduct.syntax.types.ValueTypeStyle","location":"shared/io.github.aplcornell.viaduct.syntax.types/-value-type-style/index.html","searchKeys":["ValueTypeStyle","object ValueTypeStyle : Style","io.github.aplcornell.viaduct.syntax.types.ValueTypeStyle"]},{"name":"open operator override fun compareTo(other: Host): Int","description":"io.github.aplcornell.viaduct.syntax.Host.compareTo","location":"shared/io.github.aplcornell.viaduct.syntax/-host/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: Host): Int","io.github.aplcornell.viaduct.syntax.Host.compareTo"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.Document.toDocument","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.prettyprinting.Document.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.Host.toDocument","location":"shared/io.github.aplcornell.viaduct.syntax/-host/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.Host.toDocument"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.types.BooleanType.toString","location":"shared/io.github.aplcornell.viaduct.syntax.types/-boolean-type/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.types.BooleanType.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.types.IntegerType.toString","location":"shared/io.github.aplcornell.viaduct.syntax.types/-integer-type/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.types.IntegerType.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.types.UnitType.toString","location":"shared/io.github.aplcornell.viaduct.syntax.types/-unit-type/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.types.UnitType.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.values.BooleanValue.toString","location":"shared/io.github.aplcornell.viaduct.syntax.values/-boolean-value/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.values.BooleanValue.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.values.IntegerValue.toString","location":"shared/io.github.aplcornell.viaduct.syntax.values/-integer-value/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.values.IntegerValue.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.values.UnitValue.toString","location":"shared/io.github.aplcornell.viaduct.syntax.values/-unit-value/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.values.UnitValue.toString"]},{"name":"open override val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.BooleanType.defaultValue","location":"shared/io.github.aplcornell.viaduct.syntax.types/-boolean-type/default-value.html","searchKeys":["defaultValue","open override val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.BooleanType.defaultValue"]},{"name":"open override val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.IntegerType.defaultValue","location":"shared/io.github.aplcornell.viaduct.syntax.types/-integer-type/default-value.html","searchKeys":["defaultValue","open override val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.IntegerType.defaultValue"]},{"name":"open override val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.UnitType.defaultValue","location":"shared/io.github.aplcornell.viaduct.syntax.types/-unit-type/default-value.html","searchKeys":["defaultValue","open override val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.UnitType.defaultValue"]},{"name":"open override val foregroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.syntax.types.ValueTypeStyle.foregroundColor","location":"shared/io.github.aplcornell.viaduct.syntax.types/-value-type-style/foreground-color.html","searchKeys":["foregroundColor","open override val foregroundColor: AnsiColor","io.github.aplcornell.viaduct.syntax.types.ValueTypeStyle.foregroundColor"]},{"name":"open override val foregroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.syntax.values.ValueStyle.foregroundColor","location":"shared/io.github.aplcornell.viaduct.syntax.values/-value-style/foreground-color.html","searchKeys":["foregroundColor","open override val foregroundColor: AnsiColor","io.github.aplcornell.viaduct.syntax.values.ValueStyle.foregroundColor"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.Host.name","location":"shared/io.github.aplcornell.viaduct.syntax/-host/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.Host.name"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.Host.nameCategory","location":"shared/io.github.aplcornell.viaduct.syntax/-host/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.Host.nameCategory"]},{"name":"open override val type: IOValueType","description":"io.github.aplcornell.viaduct.syntax.values.BooleanValue.type","location":"shared/io.github.aplcornell.viaduct.syntax.values/-boolean-value/type.html","searchKeys":["type","open override val type: IOValueType","io.github.aplcornell.viaduct.syntax.values.BooleanValue.type"]},{"name":"open override val type: IOValueType","description":"io.github.aplcornell.viaduct.syntax.values.IntegerValue.type","location":"shared/io.github.aplcornell.viaduct.syntax.values/-integer-value/type.html","searchKeys":["type","open override val type: IOValueType","io.github.aplcornell.viaduct.syntax.values.IntegerValue.type"]},{"name":"open override val type: IOValueType","description":"io.github.aplcornell.viaduct.syntax.values.UnitValue.type","location":"shared/io.github.aplcornell.viaduct.syntax.values/-unit-value/type.html","searchKeys":["type","open override val type: IOValueType","io.github.aplcornell.viaduct.syntax.values.UnitValue.type"]},{"name":"open val backgroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.prettyprinting.Style.backgroundColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-style/background-color.html","searchKeys":["backgroundColor","open val backgroundColor: AnsiColor","io.github.aplcornell.viaduct.prettyprinting.Style.backgroundColor"]},{"name":"open val bold: Boolean","description":"io.github.aplcornell.viaduct.prettyprinting.Style.bold","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-style/bold.html","searchKeys":["bold","open val bold: Boolean","io.github.aplcornell.viaduct.prettyprinting.Style.bold"]},{"name":"open val foregroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.prettyprinting.Style.foregroundColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-style/foreground-color.html","searchKeys":["foregroundColor","open val foregroundColor: AnsiColor","io.github.aplcornell.viaduct.prettyprinting.Style.foregroundColor"]},{"name":"open val italic: Boolean","description":"io.github.aplcornell.viaduct.prettyprinting.Style.italic","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-style/italic.html","searchKeys":["italic","open val italic: Boolean","io.github.aplcornell.viaduct.prettyprinting.Style.italic"]},{"name":"open val underline: Boolean","description":"io.github.aplcornell.viaduct.prettyprinting.Style.underline","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-style/underline.html","searchKeys":["underline","open val underline: Boolean","io.github.aplcornell.viaduct.prettyprinting.Style.underline"]},{"name":"operator fun PrettyPrintable.div(other: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.prettyprinting.div","location":"shared/io.github.aplcornell.viaduct.prettyprinting/div.html","searchKeys":["div","operator fun PrettyPrintable.div(other: PrettyPrintable): Document","io.github.aplcornell.viaduct.prettyprinting.div"]},{"name":"operator fun PrettyPrintable.div(other: String): Document","description":"io.github.aplcornell.viaduct.prettyprinting.div","location":"shared/io.github.aplcornell.viaduct.prettyprinting/div.html","searchKeys":["div","operator fun PrettyPrintable.div(other: String): Document","io.github.aplcornell.viaduct.prettyprinting.div"]},{"name":"operator fun PrettyPrintable.plus(other: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.prettyprinting.plus","location":"shared/io.github.aplcornell.viaduct.prettyprinting/plus.html","searchKeys":["plus","operator fun PrettyPrintable.plus(other: PrettyPrintable): Document","io.github.aplcornell.viaduct.prettyprinting.plus"]},{"name":"operator fun PrettyPrintable.plus(other: String): Document","description":"io.github.aplcornell.viaduct.prettyprinting.plus","location":"shared/io.github.aplcornell.viaduct.prettyprinting/plus.html","searchKeys":["plus","operator fun PrettyPrintable.plus(other: String): Document","io.github.aplcornell.viaduct.prettyprinting.plus"]},{"name":"operator fun PrettyPrintable.times(other: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.prettyprinting.times","location":"shared/io.github.aplcornell.viaduct.prettyprinting/times.html","searchKeys":["times","operator fun PrettyPrintable.times(other: PrettyPrintable): Document","io.github.aplcornell.viaduct.prettyprinting.times"]},{"name":"operator fun PrettyPrintable.times(other: String): Document","description":"io.github.aplcornell.viaduct.prettyprinting.times","location":"shared/io.github.aplcornell.viaduct.prettyprinting/times.html","searchKeys":["times","operator fun PrettyPrintable.times(other: String): Document","io.github.aplcornell.viaduct.prettyprinting.times"]},{"name":"operator fun invoke(): Document","description":"io.github.aplcornell.viaduct.prettyprinting.Document.Companion.invoke","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(): Document","io.github.aplcornell.viaduct.prettyprinting.Document.Companion.invoke"]},{"name":"operator fun invoke(text: String): Document","description":"io.github.aplcornell.viaduct.prettyprinting.Document.Companion.invoke","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(text: String): Document","io.github.aplcornell.viaduct.prettyprinting.Document.Companion.invoke"]},{"name":"override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.types.ValueType.toDocument","location":"shared/io.github.aplcornell.viaduct.syntax.types/-value-type/to-document.html","searchKeys":["toDocument","override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.types.ValueType.toDocument"]},{"name":"override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.values.Value.toDocument","location":"shared/io.github.aplcornell.viaduct.syntax.values/-value/to-document.html","searchKeys":["toDocument","override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.values.Value.toDocument"]},{"name":"override fun toString(): String","description":"io.github.aplcornell.viaduct.prettyprinting.Document.toString","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/to-string.html","searchKeys":["toString","override fun toString(): String","io.github.aplcornell.viaduct.prettyprinting.Document.toString"]},{"name":"sealed class AnsiColor","description":"io.github.aplcornell.viaduct.prettyprinting.AnsiColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-ansi-color/index.html","searchKeys":["AnsiColor","sealed class AnsiColor","io.github.aplcornell.viaduct.prettyprinting.AnsiColor"]},{"name":"sealed class Document : PrettyPrintable","description":"io.github.aplcornell.viaduct.prettyprinting.Document","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/index.html","searchKeys":["Document","sealed class Document : PrettyPrintable","io.github.aplcornell.viaduct.prettyprinting.Document"]},{"name":"sealed class IOValue : Value","description":"io.github.aplcornell.viaduct.syntax.values.IOValue","location":"shared/io.github.aplcornell.viaduct.syntax.values/-i-o-value/index.html","searchKeys":["IOValue","sealed class IOValue : Value","io.github.aplcornell.viaduct.syntax.values.IOValue"]},{"name":"sealed class IOValueType : ValueType","description":"io.github.aplcornell.viaduct.syntax.types.IOValueType","location":"shared/io.github.aplcornell.viaduct.syntax.types/-i-o-value-type/index.html","searchKeys":["IOValueType","sealed class IOValueType : ValueType","io.github.aplcornell.viaduct.syntax.types.IOValueType"]},{"name":"val baseColor: AnsiBaseColor","description":"io.github.aplcornell.viaduct.prettyprinting.BrightColor.baseColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-bright-color/base-color.html","searchKeys":["baseColor","val baseColor: AnsiBaseColor","io.github.aplcornell.viaduct.prettyprinting.BrightColor.baseColor"]},{"name":"val baseColor: AnsiBaseColor","description":"io.github.aplcornell.viaduct.prettyprinting.NormalColor.baseColor","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-normal-color/base-color.html","searchKeys":["baseColor","val baseColor: AnsiBaseColor","io.github.aplcornell.viaduct.prettyprinting.NormalColor.baseColor"]},{"name":"val forcedLineBreak: Document","description":"io.github.aplcornell.viaduct.prettyprinting.Document.Companion.forcedLineBreak","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/-companion/forced-line-break.html","searchKeys":["forcedLineBreak","val forcedLineBreak: Document","io.github.aplcornell.viaduct.prettyprinting.Document.Companion.forcedLineBreak"]},{"name":"val lineBreak: Document","description":"io.github.aplcornell.viaduct.prettyprinting.Document.Companion.lineBreak","location":"shared/io.github.aplcornell.viaduct.prettyprinting/-document/-companion/line-break.html","searchKeys":["lineBreak","val lineBreak: Document","io.github.aplcornell.viaduct.prettyprinting.Document.Companion.lineBreak"]},{"name":"val value: Boolean","description":"io.github.aplcornell.viaduct.syntax.values.BooleanValue.value","location":"shared/io.github.aplcornell.viaduct.syntax.values/-boolean-value/value.html","searchKeys":["value","val value: Boolean","io.github.aplcornell.viaduct.syntax.values.BooleanValue.value"]},{"name":"val value: Int","description":"io.github.aplcornell.viaduct.syntax.values.IntegerValue.value","location":"shared/io.github.aplcornell.viaduct.syntax.values/-integer-value/value.html","searchKeys":["value","val value: Int","io.github.aplcornell.viaduct.syntax.values.IntegerValue.value"]},{"name":"class CircuitTestFileProvider(subfolder: String = \"\") : ArgumentsProvider","description":"io.github.aplcornell.viaduct.CircuitTestFileProvider","location":"test-utilities/io.github.aplcornell.viaduct/-circuit-test-file-provider/index.html","searchKeys":["CircuitTestFileProvider","class CircuitTestFileProvider(subfolder: String = \"\") : ArgumentsProvider","io.github.aplcornell.viaduct.CircuitTestFileProvider"]},{"name":"class NegativeTestFileProvider(subfolder: String = \"\") : ArgumentsProvider","description":"io.github.aplcornell.viaduct.NegativeTestFileProvider","location":"test-utilities/io.github.aplcornell.viaduct/-negative-test-file-provider/index.html","searchKeys":["NegativeTestFileProvider","class NegativeTestFileProvider(subfolder: String = \"\") : ArgumentsProvider","io.github.aplcornell.viaduct.NegativeTestFileProvider"]},{"name":"class PositiveTestFileProvider(subfolder: String = \"\") : ArgumentsProvider","description":"io.github.aplcornell.viaduct.PositiveTestFileProvider","location":"test-utilities/io.github.aplcornell.viaduct/-positive-test-file-provider/index.html","searchKeys":["PositiveTestFileProvider","class PositiveTestFileProvider(subfolder: String = \"\") : ArgumentsProvider","io.github.aplcornell.viaduct.PositiveTestFileProvider"]},{"name":"class PositiveTestProgramProvider(subfolder: String = \"\") : ArgumentsProvider","description":"io.github.aplcornell.viaduct.PositiveTestProgramProvider","location":"test-utilities/io.github.aplcornell.viaduct/-positive-test-program-provider/index.html","searchKeys":["PositiveTestProgramProvider","class PositiveTestProgramProvider(subfolder: String = \"\") : ArgumentsProvider","io.github.aplcornell.viaduct.PositiveTestProgramProvider"]},{"name":"fun CircuitTestFileProvider(subfolder: String = \"\")","description":"io.github.aplcornell.viaduct.CircuitTestFileProvider.CircuitTestFileProvider","location":"test-utilities/io.github.aplcornell.viaduct/-circuit-test-file-provider/-circuit-test-file-provider.html","searchKeys":["CircuitTestFileProvider","fun CircuitTestFileProvider(subfolder: String = \"\")","io.github.aplcornell.viaduct.CircuitTestFileProvider.CircuitTestFileProvider"]},{"name":"fun NegativeTestFileProvider(subfolder: String = \"\")","description":"io.github.aplcornell.viaduct.NegativeTestFileProvider.NegativeTestFileProvider","location":"test-utilities/io.github.aplcornell.viaduct/-negative-test-file-provider/-negative-test-file-provider.html","searchKeys":["NegativeTestFileProvider","fun NegativeTestFileProvider(subfolder: String = \"\")","io.github.aplcornell.viaduct.NegativeTestFileProvider.NegativeTestFileProvider"]},{"name":"fun PositiveTestFileProvider(subfolder: String = \"\")","description":"io.github.aplcornell.viaduct.PositiveTestFileProvider.PositiveTestFileProvider","location":"test-utilities/io.github.aplcornell.viaduct/-positive-test-file-provider/-positive-test-file-provider.html","searchKeys":["PositiveTestFileProvider","fun PositiveTestFileProvider(subfolder: String = \"\")","io.github.aplcornell.viaduct.PositiveTestFileProvider.PositiveTestFileProvider"]},{"name":"fun PositiveTestProgramProvider(subfolder: String = \"\")","description":"io.github.aplcornell.viaduct.PositiveTestProgramProvider.PositiveTestProgramProvider","location":"test-utilities/io.github.aplcornell.viaduct/-positive-test-program-provider/-positive-test-program-provider.html","searchKeys":["PositiveTestProgramProvider","fun PositiveTestProgramProvider(subfolder: String = \"\")","io.github.aplcornell.viaduct.PositiveTestProgramProvider.PositiveTestProgramProvider"]},{"name":"open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","description":"io.github.aplcornell.viaduct.CircuitTestFileProvider.provideArguments","location":"test-utilities/io.github.aplcornell.viaduct/-circuit-test-file-provider/provide-arguments.html","searchKeys":["provideArguments","open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","io.github.aplcornell.viaduct.CircuitTestFileProvider.provideArguments"]},{"name":"open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","description":"io.github.aplcornell.viaduct.NegativeTestFileProvider.provideArguments","location":"test-utilities/io.github.aplcornell.viaduct/-negative-test-file-provider/provide-arguments.html","searchKeys":["provideArguments","open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","io.github.aplcornell.viaduct.NegativeTestFileProvider.provideArguments"]},{"name":"open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","description":"io.github.aplcornell.viaduct.PositiveTestFileProvider.provideArguments","location":"test-utilities/io.github.aplcornell.viaduct/-positive-test-file-provider/provide-arguments.html","searchKeys":["provideArguments","open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","io.github.aplcornell.viaduct.PositiveTestFileProvider.provideArguments"]},{"name":"open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","description":"io.github.aplcornell.viaduct.PositiveTestProgramProvider.provideArguments","location":"test-utilities/io.github.aplcornell.viaduct/-positive-test-program-provider/provide-arguments.html","searchKeys":["provideArguments","open override fun provideArguments(context: ExtensionContext?): Stream<out Arguments>","io.github.aplcornell.viaduct.PositiveTestProgramProvider.provideArguments"]},{"name":"abstract class CompileViaductTask : DefaultTask","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/index.html","searchKeys":["CompileViaductTask","abstract class CompileViaductTask : DefaultTask","io.github.aplcornell.viaduct.gradle.CompileViaductTask"]},{"name":"abstract class ViaductPluginExtension","description":"io.github.aplcornell.viaduct.gradle.ViaductPluginExtension","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-viaduct-plugin-extension/index.html","searchKeys":["ViaductPluginExtension","abstract class ViaductPluginExtension","io.github.aplcornell.viaduct.gradle.ViaductPluginExtension"]},{"name":"abstract val backend: Property<Backend>","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.backend","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/backend.html","searchKeys":["backend","abstract val backend: Property<Backend>","io.github.aplcornell.viaduct.gradle.CompileViaductTask.backend"]},{"name":"abstract val debugOutputDirectory: DirectoryProperty","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.debugOutputDirectory","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/debug-output-directory.html","searchKeys":["debugOutputDirectory","abstract val debugOutputDirectory: DirectoryProperty","io.github.aplcornell.viaduct.gradle.CompileViaductTask.debugOutputDirectory"]},{"name":"abstract val outputDirectory: DirectoryProperty","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.outputDirectory","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/output-directory.html","searchKeys":["outputDirectory","abstract val outputDirectory: DirectoryProperty","io.github.aplcornell.viaduct.gradle.CompileViaductTask.outputDirectory"]},{"name":"abstract val sourceDirectory: DirectoryProperty","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.sourceDirectory","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/source-directory.html","searchKeys":["sourceDirectory","abstract val sourceDirectory: DirectoryProperty","io.github.aplcornell.viaduct.gradle.CompileViaductTask.sourceDirectory"]},{"name":"class ViaductPlugin : Plugin<Project> ","description":"io.github.aplcornell.viaduct.gradle.ViaductPlugin","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-viaduct-plugin/index.html","searchKeys":["ViaductPlugin","class ViaductPlugin : Plugin<Project> ","io.github.aplcornell.viaduct.gradle.ViaductPlugin"]},{"name":"fun CompileViaductTask()","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.CompileViaductTask","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/-compile-viaduct-task.html","searchKeys":["CompileViaductTask","fun CompileViaductTask()","io.github.aplcornell.viaduct.gradle.CompileViaductTask.CompileViaductTask"]},{"name":"fun ViaductPlugin()","description":"io.github.aplcornell.viaduct.gradle.ViaductPlugin.ViaductPlugin","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-viaduct-plugin/-viaduct-plugin.html","searchKeys":["ViaductPlugin","fun ViaductPlugin()","io.github.aplcornell.viaduct.gradle.ViaductPlugin.ViaductPlugin"]},{"name":"fun ViaductPluginExtension()","description":"io.github.aplcornell.viaduct.gradle.ViaductPluginExtension.ViaductPluginExtension","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-viaduct-plugin-extension/-viaduct-plugin-extension.html","searchKeys":["ViaductPluginExtension","fun ViaductPluginExtension()","io.github.aplcornell.viaduct.gradle.ViaductPluginExtension.ViaductPluginExtension"]},{"name":"fun compileAll(sourceChanges: InputChanges)","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.compileAll","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/compile-all.html","searchKeys":["compileAll","fun compileAll(sourceChanges: InputChanges)","io.github.aplcornell.viaduct.gradle.CompileViaductTask.compileAll"]},{"name":"open override fun apply(project: Project)","description":"io.github.aplcornell.viaduct.gradle.ViaductPlugin.apply","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-viaduct-plugin/apply.html","searchKeys":["apply","open override fun apply(project: Project)","io.github.aplcornell.viaduct.gradle.ViaductPlugin.apply"]},{"name":"open override fun getDescription(): String","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.getDescription","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/get-description.html","searchKeys":["getDescription","open override fun getDescription(): String","io.github.aplcornell.viaduct.gradle.CompileViaductTask.getDescription"]},{"name":"open override fun getGroup(): String","description":"io.github.aplcornell.viaduct.gradle.CompileViaductTask.getGroup","location":"gradle-plugin/io.github.aplcornell.viaduct.gradle/-compile-viaduct-task/get-group.html","searchKeys":["getGroup","open override fun getGroup(): String","io.github.aplcornell.viaduct.gradle.CompileViaductTask.getGroup"]},{"name":"abstract class ViaductRuntimeException(message: String) : RuntimeException","description":"io.github.aplcornell.viaduct.runtime.ViaductRuntimeException","location":"runtime/io.github.aplcornell.viaduct.runtime/-viaduct-runtime-exception/index.html","searchKeys":["ViaductRuntimeException","abstract class ViaductRuntimeException(message: String) : RuntimeException","io.github.aplcornell.viaduct.runtime.ViaductRuntimeException"]},{"name":"abstract fun <T> receive(type: KType, sender: Host): T","description":"io.github.aplcornell.viaduct.runtime.NetworkStrategy.receive","location":"runtime/io.github.aplcornell.viaduct.runtime/-network-strategy/receive.html","searchKeys":["receive","abstract fun <T> receive(type: KType, sender: Host): T","io.github.aplcornell.viaduct.runtime.NetworkStrategy.receive"]},{"name":"abstract fun <T> send(type: KType, value: T, receiver: Host)","description":"io.github.aplcornell.viaduct.runtime.NetworkStrategy.send","location":"runtime/io.github.aplcornell.viaduct.runtime/-network-strategy/send.html","searchKeys":["send","abstract fun <T> send(type: KType, value: T, receiver: Host)","io.github.aplcornell.viaduct.runtime.NetworkStrategy.send"]},{"name":"abstract fun input(type: IOValueType): Value","description":"io.github.aplcornell.viaduct.runtime.IOStrategy.input","location":"runtime/io.github.aplcornell.viaduct.runtime/-i-o-strategy/input.html","searchKeys":["input","abstract fun input(type: IOValueType): Value","io.github.aplcornell.viaduct.runtime.IOStrategy.input"]},{"name":"abstract fun main(host: Host, runtime: ViaductRuntime)","description":"io.github.aplcornell.viaduct.runtime.ViaductGeneratedProgram.main","location":"runtime/io.github.aplcornell.viaduct.runtime/-viaduct-generated-program/main.html","searchKeys":["main","abstract fun main(host: Host, runtime: ViaductRuntime)","io.github.aplcornell.viaduct.runtime.ViaductGeneratedProgram.main"]},{"name":"abstract fun output(value: IOValue)","description":"io.github.aplcornell.viaduct.runtime.IOStrategy.output","location":"runtime/io.github.aplcornell.viaduct.runtime/-i-o-strategy/output.html","searchKeys":["output","abstract fun output(value: IOValue)","io.github.aplcornell.viaduct.runtime.IOStrategy.output"]},{"name":"abstract fun url(host: Host): InetSocketAddress","description":"io.github.aplcornell.viaduct.runtime.NetworkStrategy.url","location":"runtime/io.github.aplcornell.viaduct.runtime/-network-strategy/url.html","searchKeys":["url","abstract fun url(host: Host): InetSocketAddress","io.github.aplcornell.viaduct.runtime.NetworkStrategy.url"]},{"name":"abstract val hosts: Set<Host>","description":"io.github.aplcornell.viaduct.runtime.ViaductGeneratedProgram.hosts","location":"runtime/io.github.aplcornell.viaduct.runtime/-viaduct-generated-program/hosts.html","searchKeys":["hosts","abstract val hosts: Set<Host>","io.github.aplcornell.viaduct.runtime.ViaductGeneratedProgram.hosts"]},{"name":"class Boxed<T>(value: T)","description":"io.github.aplcornell.viaduct.runtime.Boxed","location":"runtime/io.github.aplcornell.viaduct.runtime/-boxed/index.html","searchKeys":["Boxed","class Boxed<T>(value: T)","io.github.aplcornell.viaduct.runtime.Boxed"]},{"name":"class CombinedRuntime(ioStrategy: IOStrategy, networkStrategy: NetworkStrategy) : ViaductRuntime, IOStrategy, NetworkStrategy","description":"io.github.aplcornell.viaduct.runtime.CombinedRuntime","location":"runtime/io.github.aplcornell.viaduct.runtime/-combined-runtime/index.html","searchKeys":["CombinedRuntime","class CombinedRuntime(ioStrategy: IOStrategy, networkStrategy: NetworkStrategy) : ViaductRuntime, IOStrategy, NetworkStrategy","io.github.aplcornell.viaduct.runtime.CombinedRuntime"]},{"name":"class Commitment<T>(val hash: ByteArray)","description":"io.github.aplcornell.viaduct.runtime.commitment.Commitment","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-commitment/index.html","searchKeys":["Commitment","class Commitment<T>(val hash: ByteArray)","io.github.aplcornell.viaduct.runtime.commitment.Commitment"]},{"name":"class Committed<T>","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/index.html","searchKeys":["Committed","class Committed<T>","io.github.aplcornell.viaduct.runtime.commitment.Committed"]},{"name":"class EquivocationException : ViaductRuntimeException","description":"io.github.aplcornell.viaduct.runtime.EquivocationException","location":"runtime/io.github.aplcornell.viaduct.runtime/-equivocation-exception/index.html","searchKeys":["EquivocationException","class EquivocationException : ViaductRuntimeException","io.github.aplcornell.viaduct.runtime.EquivocationException"]},{"name":"class HostCommunicationException(host: Host, otherHost: Host) : ViaductRuntimeException","description":"io.github.aplcornell.viaduct.runtime.HostCommunicationException","location":"runtime/io.github.aplcornell.viaduct.runtime/-host-communication-exception/index.html","searchKeys":["HostCommunicationException","class HostCommunicationException(host: Host, otherHost: Host) : ViaductRuntimeException","io.github.aplcornell.viaduct.runtime.HostCommunicationException"]},{"name":"class HostConnectionException(host: Host, otherHost: Host, address: InetSocketAddress) : ViaductRuntimeException","description":"io.github.aplcornell.viaduct.runtime.HostConnectionException","location":"runtime/io.github.aplcornell.viaduct.runtime/-host-connection-exception/index.html","searchKeys":["HostConnectionException","class HostConnectionException(host: Host, otherHost: Host, address: InetSocketAddress) : ViaductRuntimeException","io.github.aplcornell.viaduct.runtime.HostConnectionException"]},{"name":"class InvalidCommitmentException(value: Any?) : ViaductRuntimeException","description":"io.github.aplcornell.viaduct.runtime.commitment.InvalidCommitmentException","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-invalid-commitment-exception/index.html","searchKeys":["InvalidCommitmentException","class InvalidCommitmentException(value: Any?) : ViaductRuntimeException","io.github.aplcornell.viaduct.runtime.commitment.InvalidCommitmentException"]},{"name":"class Out<T : Any>","description":"io.github.aplcornell.viaduct.runtime.Out","location":"runtime/io.github.aplcornell.viaduct.runtime/-out/index.html","searchKeys":["Out","class Out<T : Any>","io.github.aplcornell.viaduct.runtime.Out"]},{"name":"class ScannerIOStrategy(input: Scanner, output: Writer = System.out.writer(Charset.defaultCharset())) : IOStrategy","description":"io.github.aplcornell.viaduct.runtime.ScannerIOStrategy","location":"runtime/io.github.aplcornell.viaduct.runtime/-scanner-i-o-strategy/index.html","searchKeys":["ScannerIOStrategy","class ScannerIOStrategy(input: Scanner, output: Writer = System.out.writer(Charset.defaultCharset())) : IOStrategy","io.github.aplcornell.viaduct.runtime.ScannerIOStrategy"]},{"name":"class TCPNetworkStrategy(host: Host, hostAddresses: Map<Host, InetSocketAddress>, connectionNumRetry: Int = CONNECTION_NUM_RETRY, connectionRetryDelay: Long = CONNECTION_RETRY_DELAY) : NetworkStrategy, Closeable","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/index.html","searchKeys":["TCPNetworkStrategy","class TCPNetworkStrategy(host: Host, hostAddresses: Map<Host, InetSocketAddress>, connectionNumRetry: Int = CONNECTION_NUM_RETRY, connectionRetryDelay: Long = CONNECTION_RETRY_DELAY) : NetworkStrategy, Closeable","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy"]},{"name":"class UnknownHostException(host: Host) : ViaductRuntimeException","description":"io.github.aplcornell.viaduct.runtime.UnknownHostException","location":"runtime/io.github.aplcornell.viaduct.runtime/-unknown-host-exception/index.html","searchKeys":["UnknownHostException","class UnknownHostException(host: Host) : ViaductRuntimeException","io.github.aplcornell.viaduct.runtime.UnknownHostException"]},{"name":"const val CONNECTION_NUM_RETRY: Int = 10","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.Companion.CONNECTION_NUM_RETRY","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/-companion/-c-o-n-n-e-c-t-i-o-n_-n-u-m_-r-e-t-r-y.html","searchKeys":["CONNECTION_NUM_RETRY","const val CONNECTION_NUM_RETRY: Int = 10","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.Companion.CONNECTION_NUM_RETRY"]},{"name":"const val CONNECTION_RETRY_DELAY: Long = 1000","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.Companion.CONNECTION_RETRY_DELAY","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/-companion/-c-o-n-n-e-c-t-i-o-n_-r-e-t-r-y_-d-e-l-a-y.html","searchKeys":["CONNECTION_RETRY_DELAY","const val CONNECTION_RETRY_DELAY: Long = 1000","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.Companion.CONNECTION_RETRY_DELAY"]},{"name":"const val NONCE_LENGTH: Int","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion.NONCE_LENGTH","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/-companion/-n-o-n-c-e_-l-e-n-g-t-h.html","searchKeys":["NONCE_LENGTH","const val NONCE_LENGTH: Int","io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion.NONCE_LENGTH"]},{"name":"fun <T> Boxed(value: T)","description":"io.github.aplcornell.viaduct.runtime.Boxed.Boxed","location":"runtime/io.github.aplcornell.viaduct.runtime/-boxed/-boxed.html","searchKeys":["Boxed","fun <T> Boxed(value: T)","io.github.aplcornell.viaduct.runtime.Boxed.Boxed"]},{"name":"fun <T> Committed(value: T)","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed.Committed","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/-committed.html","searchKeys":["Committed","fun <T> Committed(value: T)","io.github.aplcornell.viaduct.runtime.commitment.Committed.Committed"]},{"name":"fun <T> assertEquals(expectedValue: T, expectedValueProvider: Host, actualValue: T, actualValueProvider: Host)","description":"io.github.aplcornell.viaduct.runtime.EquivocationException.Companion.assertEquals","location":"runtime/io.github.aplcornell.viaduct.runtime/-equivocation-exception/-companion/assert-equals.html","searchKeys":["assertEquals","fun <T> assertEquals(expectedValue: T, expectedValueProvider: Host, actualValue: T, actualValueProvider: Host)","io.github.aplcornell.viaduct.runtime.EquivocationException.Companion.assertEquals"]},{"name":"fun <T> fake(value: T): Committed<T>","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion.fake","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/-companion/fake.html","searchKeys":["fake","fun <T> fake(value: T): Committed<T>","io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion.fake"]},{"name":"fun Array<Share>.secretUpdateModify(circuit: Circuit, index: Share, operation: (Share) -> Share)","description":"io.github.aplcornell.viaduct.runtime.aby.secretUpdateModify","location":"runtime/io.github.aplcornell.viaduct.runtime.aby/secret-update-modify.html","searchKeys":["secretUpdateModify","fun Array<Share>.secretUpdateModify(circuit: Circuit, index: Share, operation: (Share) -> Share)","io.github.aplcornell.viaduct.runtime.aby.secretUpdateModify"]},{"name":"fun Array<Share>.secretUpdateSet(circuit: Circuit, index: Share, argument: Share)","description":"io.github.aplcornell.viaduct.runtime.aby.secretUpdateSet","location":"runtime/io.github.aplcornell.viaduct.runtime.aby/secret-update-set.html","searchKeys":["secretUpdateSet","fun Array<Share>.secretUpdateSet(circuit: Circuit, index: Share, argument: Share)","io.github.aplcornell.viaduct.runtime.aby.secretUpdateSet"]},{"name":"fun Circuit.putNOTGate(input: Share): Share","description":"io.github.aplcornell.viaduct.runtime.aby.putNOTGate","location":"runtime/io.github.aplcornell.viaduct.runtime.aby/put-n-o-t-gate.html","searchKeys":["putNOTGate","fun Circuit.putNOTGate(input: Share): Share","io.github.aplcornell.viaduct.runtime.aby.putNOTGate"]},{"name":"fun Circuit.secretIndexQuery(indexValue: Share, shareVector: Array<Share>): Share","description":"io.github.aplcornell.viaduct.runtime.aby.secretIndexQuery","location":"runtime/io.github.aplcornell.viaduct.runtime.aby/secret-index-query.html","searchKeys":["secretIndexQuery","fun Circuit.secretIndexQuery(indexValue: Share, shareVector: Array<Share>): Share","io.github.aplcornell.viaduct.runtime.aby.secretIndexQuery"]},{"name":"fun CombinedRuntime(ioStrategy: IOStrategy, networkStrategy: NetworkStrategy)","description":"io.github.aplcornell.viaduct.runtime.CombinedRuntime.CombinedRuntime","location":"runtime/io.github.aplcornell.viaduct.runtime/-combined-runtime/-combined-runtime.html","searchKeys":["CombinedRuntime","fun CombinedRuntime(ioStrategy: IOStrategy, networkStrategy: NetworkStrategy)","io.github.aplcornell.viaduct.runtime.CombinedRuntime.CombinedRuntime"]},{"name":"fun Commitment(hash: ByteArray)","description":"io.github.aplcornell.viaduct.runtime.commitment.Commitment.Commitment","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-commitment/-commitment.html","searchKeys":["Commitment","fun Commitment(hash: ByteArray)","io.github.aplcornell.viaduct.runtime.commitment.Commitment.Commitment"]},{"name":"fun HostCommunicationException(host: Host, otherHost: Host)","description":"io.github.aplcornell.viaduct.runtime.HostCommunicationException.HostCommunicationException","location":"runtime/io.github.aplcornell.viaduct.runtime/-host-communication-exception/-host-communication-exception.html","searchKeys":["HostCommunicationException","fun HostCommunicationException(host: Host, otherHost: Host)","io.github.aplcornell.viaduct.runtime.HostCommunicationException.HostCommunicationException"]},{"name":"fun HostConnectionException(host: Host, otherHost: Host, address: InetSocketAddress)","description":"io.github.aplcornell.viaduct.runtime.HostConnectionException.HostConnectionException","location":"runtime/io.github.aplcornell.viaduct.runtime/-host-connection-exception/-host-connection-exception.html","searchKeys":["HostConnectionException","fun HostConnectionException(host: Host, otherHost: Host, address: InetSocketAddress)","io.github.aplcornell.viaduct.runtime.HostConnectionException.HostConnectionException"]},{"name":"fun InvalidCommitmentException(value: Any?)","description":"io.github.aplcornell.viaduct.runtime.commitment.InvalidCommitmentException.InvalidCommitmentException","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-invalid-commitment-exception/-invalid-commitment-exception.html","searchKeys":["InvalidCommitmentException","fun InvalidCommitmentException(value: Any?)","io.github.aplcornell.viaduct.runtime.commitment.InvalidCommitmentException.InvalidCommitmentException"]},{"name":"fun Out()","description":"io.github.aplcornell.viaduct.runtime.Out.Out","location":"runtime/io.github.aplcornell.viaduct.runtime/-out/-out.html","searchKeys":["Out","fun Out()","io.github.aplcornell.viaduct.runtime.Out.Out"]},{"name":"fun ScannerIOStrategy(input: Scanner, output: Writer = System.out.writer(Charset.defaultCharset()))","description":"io.github.aplcornell.viaduct.runtime.ScannerIOStrategy.ScannerIOStrategy","location":"runtime/io.github.aplcornell.viaduct.runtime/-scanner-i-o-strategy/-scanner-i-o-strategy.html","searchKeys":["ScannerIOStrategy","fun ScannerIOStrategy(input: Scanner, output: Writer = System.out.writer(Charset.defaultCharset()))","io.github.aplcornell.viaduct.runtime.ScannerIOStrategy.ScannerIOStrategy"]},{"name":"fun TCPNetworkStrategy(host: Host, hostAddresses: Map<Host, InetSocketAddress>, connectionNumRetry: Int = CONNECTION_NUM_RETRY, connectionRetryDelay: Long = CONNECTION_RETRY_DELAY)","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.TCPNetworkStrategy","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/-t-c-p-network-strategy.html","searchKeys":["TCPNetworkStrategy","fun TCPNetworkStrategy(host: Host, hostAddresses: Map<Host, InetSocketAddress>, connectionNumRetry: Int = CONNECTION_NUM_RETRY, connectionRetryDelay: Long = CONNECTION_RETRY_DELAY)","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.TCPNetworkStrategy"]},{"name":"fun UnknownHostException(host: Host)","description":"io.github.aplcornell.viaduct.runtime.UnknownHostException.UnknownHostException","location":"runtime/io.github.aplcornell.viaduct.runtime/-unknown-host-exception/-unknown-host-exception.html","searchKeys":["UnknownHostException","fun UnknownHostException(host: Host)","io.github.aplcornell.viaduct.runtime.UnknownHostException.UnknownHostException"]},{"name":"fun ViaductRuntimeException(message: String)","description":"io.github.aplcornell.viaduct.runtime.ViaductRuntimeException.ViaductRuntimeException","location":"runtime/io.github.aplcornell.viaduct.runtime/-viaduct-runtime-exception/-viaduct-runtime-exception.html","searchKeys":["ViaductRuntimeException","fun ViaductRuntimeException(message: String)","io.github.aplcornell.viaduct.runtime.ViaductRuntimeException.ViaductRuntimeException"]},{"name":"fun findAvailableTcpPort(): Int","description":"io.github.aplcornell.viaduct.runtime.findAvailableTcpPort","location":"runtime/io.github.aplcornell.viaduct.runtime/find-available-tcp-port.html","searchKeys":["findAvailableTcpPort","fun findAvailableTcpPort(): Int","io.github.aplcornell.viaduct.runtime.findAvailableTcpPort"]},{"name":"fun get(): T","description":"io.github.aplcornell.viaduct.runtime.Boxed.get","location":"runtime/io.github.aplcornell.viaduct.runtime/-boxed/get.html","searchKeys":["get","fun get(): T","io.github.aplcornell.viaduct.runtime.Boxed.get"]},{"name":"fun get(): T","description":"io.github.aplcornell.viaduct.runtime.Out.get","location":"runtime/io.github.aplcornell.viaduct.runtime/-out/get.html","searchKeys":["get","fun get(): T","io.github.aplcornell.viaduct.runtime.Out.get"]},{"name":"fun set(update: T)","description":"io.github.aplcornell.viaduct.runtime.Boxed.set","location":"runtime/io.github.aplcornell.viaduct.runtime/-boxed/set.html","searchKeys":["set","fun set(update: T)","io.github.aplcornell.viaduct.runtime.Boxed.set"]},{"name":"fun set(value: T)","description":"io.github.aplcornell.viaduct.runtime.Out.set","location":"runtime/io.github.aplcornell.viaduct.runtime/-out/set.html","searchKeys":["set","fun set(value: T)","io.github.aplcornell.viaduct.runtime.Out.set"]},{"name":"fun start()","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.start","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/start.html","searchKeys":["start","fun start()","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.start"]},{"name":"inline fun <T> Committed<T>.commitment(): Commitment<T>","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion.commitment","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/-companion/commitment.html","searchKeys":["commitment","inline fun <T> Committed<T>.commitment(): Commitment<T>","io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion.commitment"]},{"name":"inline fun <T> NetworkStrategy.receive(sender: Host): T","description":"io.github.aplcornell.viaduct.runtime.receive","location":"runtime/io.github.aplcornell.viaduct.runtime/receive.html","searchKeys":["receive","inline fun <T> NetworkStrategy.receive(sender: Host): T","io.github.aplcornell.viaduct.runtime.receive"]},{"name":"inline fun <T> NetworkStrategy.send(value: T, receiver: Host)","description":"io.github.aplcornell.viaduct.runtime.send","location":"runtime/io.github.aplcornell.viaduct.runtime/send.html","searchKeys":["send","inline fun <T> NetworkStrategy.send(value: T, receiver: Host)","io.github.aplcornell.viaduct.runtime.send"]},{"name":"inline fun <T> open(secret: Committed<T>): T","description":"io.github.aplcornell.viaduct.runtime.commitment.Commitment.open","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-commitment/open.html","searchKeys":["open","inline fun <T> open(secret: Committed<T>): T","io.github.aplcornell.viaduct.runtime.commitment.Commitment.open"]},{"name":"interface IOStrategy","description":"io.github.aplcornell.viaduct.runtime.IOStrategy","location":"runtime/io.github.aplcornell.viaduct.runtime/-i-o-strategy/index.html","searchKeys":["IOStrategy","interface IOStrategy","io.github.aplcornell.viaduct.runtime.IOStrategy"]},{"name":"interface NetworkStrategy","description":"io.github.aplcornell.viaduct.runtime.NetworkStrategy","location":"runtime/io.github.aplcornell.viaduct.runtime/-network-strategy/index.html","searchKeys":["NetworkStrategy","interface NetworkStrategy","io.github.aplcornell.viaduct.runtime.NetworkStrategy"]},{"name":"interface ViaductGeneratedProgram","description":"io.github.aplcornell.viaduct.runtime.ViaductGeneratedProgram","location":"runtime/io.github.aplcornell.viaduct.runtime/-viaduct-generated-program/index.html","searchKeys":["ViaductGeneratedProgram","interface ViaductGeneratedProgram","io.github.aplcornell.viaduct.runtime.ViaductGeneratedProgram"]},{"name":"interface ViaductRuntime : IOStrategy, NetworkStrategy","description":"io.github.aplcornell.viaduct.runtime.ViaductRuntime","location":"runtime/io.github.aplcornell.viaduct.runtime/-viaduct-runtime/index.html","searchKeys":["ViaductRuntime","interface ViaductRuntime : IOStrategy, NetworkStrategy","io.github.aplcornell.viaduct.runtime.ViaductRuntime"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.runtime.EquivocationException.Companion","location":"runtime/io.github.aplcornell.viaduct.runtime/-equivocation-exception/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.runtime.EquivocationException.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.Companion","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.runtime.commitment.Committed.Companion"]},{"name":"open override fun <T> receive(type: KType, sender: Host): T","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.receive","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/receive.html","searchKeys":["receive","open override fun <T> receive(type: KType, sender: Host): T","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.receive"]},{"name":"open override fun <T> send(type: KType, value: T, receiver: Host)","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.send","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/send.html","searchKeys":["send","open override fun <T> send(type: KType, value: T, receiver: Host)","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.send"]},{"name":"open override fun close()","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.close","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/close.html","searchKeys":["close","open override fun close()","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.close"]},{"name":"open override fun input(type: IOValueType): Value","description":"io.github.aplcornell.viaduct.runtime.ScannerIOStrategy.input","location":"runtime/io.github.aplcornell.viaduct.runtime/-scanner-i-o-strategy/input.html","searchKeys":["input","open override fun input(type: IOValueType): Value","io.github.aplcornell.viaduct.runtime.ScannerIOStrategy.input"]},{"name":"open override fun output(value: IOValue)","description":"io.github.aplcornell.viaduct.runtime.ScannerIOStrategy.output","location":"runtime/io.github.aplcornell.viaduct.runtime/-scanner-i-o-strategy/output.html","searchKeys":["output","open override fun output(value: IOValue)","io.github.aplcornell.viaduct.runtime.ScannerIOStrategy.output"]},{"name":"open override fun url(host: Host): InetSocketAddress","description":"io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.url","location":"runtime/io.github.aplcornell.viaduct.runtime/-t-c-p-network-strategy/url.html","searchKeys":["url","open override fun url(host: Host): InetSocketAddress","io.github.aplcornell.viaduct.runtime.TCPNetworkStrategy.url"]},{"name":"val Long.bool: Boolean","description":"io.github.aplcornell.viaduct.runtime.aby.bool","location":"runtime/io.github.aplcornell.viaduct.runtime.aby/bool.html","searchKeys":["bool","val Long.bool: Boolean","io.github.aplcornell.viaduct.runtime.aby.bool"]},{"name":"val hash: ByteArray","description":"io.github.aplcornell.viaduct.runtime.commitment.Commitment.hash","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-commitment/hash.html","searchKeys":["hash","val hash: ByteArray","io.github.aplcornell.viaduct.runtime.commitment.Commitment.hash"]},{"name":"val nonce: ByteArray","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed.nonce","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/nonce.html","searchKeys":["nonce","val nonce: ByteArray","io.github.aplcornell.viaduct.runtime.commitment.Committed.nonce"]},{"name":"val value: T","description":"io.github.aplcornell.viaduct.runtime.commitment.Committed.value","location":"runtime/io.github.aplcornell.viaduct.runtime.commitment/-committed/value.html","searchKeys":["value","val value: T","io.github.aplcornell.viaduct.runtime.commitment.Committed.value"]},{"name":"ARITH","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.ARITH","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-type/-a-r-i-t-h/index.html","searchKeys":["ARITH","ARITH","io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.ARITH"]},{"name":"BOOL","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.BOOL","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-type/-b-o-o-l/index.html","searchKeys":["BOOL","BOOL","io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.BOOL"]},{"name":"YAO","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.YAO","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-type/-y-a-o/index.html","searchKeys":["YAO","YAO","io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.YAO"]},{"name":"abstract class ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/index.html","searchKeys":["ABYClassObject","abstract class ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject"]},{"name":"abstract class AbstractProtocolInterpreter<Obj>(val program: ProgramNode) : ProtocolInterpreter","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/index.html","searchKeys":["AbstractProtocolInterpreter","abstract class AbstractProtocolInterpreter<Obj>(val program: ProgramNode) : ProtocolInterpreter","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter"]},{"name":"abstract class CommitmentObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/index.html","searchKeys":["CommitmentObject","abstract class CommitmentObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject"]},{"name":"abstract class HashedObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/index.html","searchKeys":["HashedObject","abstract class HashedObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject"]},{"name":"abstract class SingleProtocolInterpreter<Obj>(program: ProgramNode, protocol: Protocol) : AbstractProtocolInterpreter<Obj> ","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/index.html","searchKeys":["SingleProtocolInterpreter","abstract class SingleProtocolInterpreter<Obj>(program: ProgramNode, protocol: Protocol) : AbstractProtocolInterpreter<Obj> ","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter"]},{"name":"abstract fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","description":"io.github.aplcornell.viaduct.backend.ProtocolBackend.buildProtocolInterpreters","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-backend/build-protocol-interpreters.html","searchKeys":["buildProtocolInterpreters","abstract fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","io.github.aplcornell.viaduct.backend.ProtocolBackend.buildProtocolInterpreters"]},{"name":"abstract fun getContextMarker(): Int","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.getContextMarker","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/get-context-marker.html","searchKeys":["getContextMarker","abstract fun getContextMarker(): Int","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.getContextMarker"]},{"name":"abstract fun getNullObject(): Obj","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/get-null-object.html","searchKeys":["getNullObject","abstract fun getNullObject(): Obj","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.getNullObject"]},{"name":"abstract fun getNullObject(protocol: Protocol): Obj","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/get-null-object.html","searchKeys":["getNullObject","abstract fun getNullObject(protocol: Protocol): Obj","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.getNullObject"]},{"name":"abstract fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.putGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-gate/put-gate.html","searchKeys":["putGate","abstract fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.putGate"]},{"name":"abstract fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/query.html","searchKeys":["query","abstract fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject.query"]},{"name":"abstract fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/query.html","searchKeys":["query","abstract fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject.query"]},{"name":"abstract fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/query.html","searchKeys":["query","abstract fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): List<Byte>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject.query"]},{"name":"abstract fun query(query: QueryNameNode, arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.backend.CleartextClassObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-class-object/query.html","searchKeys":["query","abstract fun query(query: QueryNameNode, arguments: List<Value>): Value","io.github.aplcornell.viaduct.backend.CleartextClassObject.query"]},{"name":"abstract fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/update.html","searchKeys":["update","abstract fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject.update"]},{"name":"abstract fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/update.html","searchKeys":["update","abstract fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject.update"]},{"name":"abstract fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/update.html","searchKeys":["update","abstract fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject.update"]},{"name":"abstract fun update(update: UpdateNameNode, arguments: List<Value>)","description":"io.github.aplcornell.viaduct.backend.CleartextClassObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-class-object/update.html","searchKeys":["update","abstract fun update(update: UpdateNameNode, arguments: List<Value>)","io.github.aplcornell.viaduct.backend.CleartextClassObject.update"]},{"name":"abstract suspend fun buildExpressionObject(expr: AtomicExpressionNode): Obj","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","abstract suspend fun buildExpressionObject(expr: AtomicExpressionNode): Obj","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildExpressionObject"]},{"name":"abstract suspend fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): Obj","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","abstract suspend fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): Obj","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.buildExpressionObject"]},{"name":"abstract suspend fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): Obj","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/build-object.html","searchKeys":["buildObject","abstract suspend fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): Obj","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildObject"]},{"name":"abstract suspend fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): Obj","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/build-object.html","searchKeys":["buildObject","abstract suspend fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): Obj","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.buildObject"]},{"name":"abstract suspend fun getInput(): Value","description":"io.github.aplcornell.viaduct.backend.io.Strategy.getInput","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-strategy/get-input.html","searchKeys":["getInput","abstract suspend fun getInput(): Value","io.github.aplcornell.viaduct.backend.io.Strategy.getInput"]},{"name":"abstract suspend fun popContext()","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.popContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/pop-context.html","searchKeys":["popContext","abstract suspend fun popContext()","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.popContext"]},{"name":"abstract suspend fun popFunctionContext()","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.popFunctionContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/pop-function-context.html","searchKeys":["popFunctionContext","abstract suspend fun popFunctionContext()","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.popFunctionContext"]},{"name":"abstract suspend fun pushContext()","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.pushContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/push-context.html","searchKeys":["pushContext","abstract suspend fun pushContext()","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.pushContext"]},{"name":"abstract suspend fun pushFunctionContext(arguments: PersistentMap<ParameterNode, Pair<Protocol, FunctionArgumentNode>>)","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.pushFunctionContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/push-function-context.html","searchKeys":["pushFunctionContext","abstract suspend fun pushFunctionContext(arguments: PersistentMap<ParameterNode, Pair<Protocol, FunctionArgumentNode>>)","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.pushFunctionContext"]},{"name":"abstract suspend fun recvOutput(value: Value)","description":"io.github.aplcornell.viaduct.backend.io.Strategy.recvOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-strategy/recv-output.html","searchKeys":["recvOutput","abstract suspend fun recvOutput(value: Value)","io.github.aplcornell.viaduct.backend.io.Strategy.recvOutput"]},{"name":"abstract suspend fun restoreContext(marker: Int)","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.restoreContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/restore-context.html","searchKeys":["restoreContext","abstract suspend fun restoreContext(marker: Int)","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.restoreContext"]},{"name":"abstract suspend fun runGuard(expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-guard.html","searchKeys":["runGuard","abstract suspend fun runGuard(expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runGuard"]},{"name":"abstract suspend fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/run-guard.html","searchKeys":["runGuard","abstract suspend fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runGuard"]},{"name":"abstract suspend fun runLet(protocol: Protocol, stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/run-let.html","searchKeys":["runLet","abstract suspend fun runLet(protocol: Protocol, stmt: LetNode)","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runLet"]},{"name":"abstract suspend fun runLet(stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-let.html","searchKeys":["runLet","abstract suspend fun runLet(stmt: LetNode)","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runLet"]},{"name":"abstract suspend fun runOutput(protocol: Protocol, stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/run-output.html","searchKeys":["runOutput","abstract suspend fun runOutput(protocol: Protocol, stmt: OutputNode)","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runOutput"]},{"name":"abstract suspend fun runOutput(stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-output.html","searchKeys":["runOutput","abstract suspend fun runOutput(stmt: OutputNode)","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runOutput"]},{"name":"abstract suspend fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runReceive","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/run-receive.html","searchKeys":["runReceive","abstract suspend fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runReceive"]},{"name":"abstract suspend fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runSend","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/run-send.html","searchKeys":["runSend","abstract suspend fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runSend"]},{"name":"abstract suspend fun runSimpleStatement(protocol: Protocol, stmt: SimpleStatementNode)","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runSimpleStatement","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/run-simple-statement.html","searchKeys":["runSimpleStatement","abstract suspend fun runSimpleStatement(protocol: Protocol, stmt: SimpleStatementNode)","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.runSimpleStatement"]},{"name":"abstract suspend fun runUpdate(protocol: Protocol, stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/run-update.html","searchKeys":["runUpdate","abstract suspend fun runUpdate(protocol: Protocol, stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runUpdate"]},{"name":"abstract suspend fun runUpdate(stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-update.html","searchKeys":["runUpdate","abstract suspend fun runUpdate(stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runUpdate"]},{"name":"abstract val availableProtocols: Set<Protocol>","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter.availableProtocols","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/available-protocols.html","searchKeys":["availableProtocols","abstract val availableProtocols: Set<Protocol>","io.github.aplcornell.viaduct.backend.ProtocolInterpreter.availableProtocols"]},{"name":"class ABYCircuitBuilder(val arithCircuit: Circuit, val boolCircuit: Circuit, val yaoCircuit: Circuit, val bitlen: Long, val role: Role)","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/index.html","searchKeys":["ABYCircuitBuilder","class ABYCircuitBuilder(val arithCircuit: Circuit, val boolCircuit: Circuit, val yaoCircuit: Circuit, val bitlen: Long, val role: Role)","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder"]},{"name":"class ABYConstantGate(val value: Int, val circuitType: ABYCircuitType) : ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYConstantGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-constant-gate/index.html","searchKeys":["ABYConstantGate","class ABYConstantGate(val value: Int, val circuitType: ABYCircuitType) : ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYConstantGate"]},{"name":"class ABYConversionGate(inputGate: ABYCircuitGate, val circuitType: ABYCircuitType) : ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYConversionGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-conversion-gate/index.html","searchKeys":["ABYConversionGate","class ABYConversionGate(inputGate: ABYCircuitGate, val circuitType: ABYCircuitType) : ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYConversionGate"]},{"name":"class ABYDummyInGate(val circuitType: ABYCircuitType) : ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYDummyInGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-dummy-in-gate/index.html","searchKeys":["ABYDummyInGate","class ABYDummyInGate(val circuitType: ABYCircuitType) : ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYDummyInGate"]},{"name":"class ABYImmutableCellObject(gate: ABYCircuitGate) : ABYProtocolInterpreter.ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/index.html","searchKeys":["ABYImmutableCellObject","class ABYImmutableCellObject(gate: ABYCircuitGate) : ABYProtocolInterpreter.ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject"]},{"name":"class ABYInGate(val value: Int, val circuitType: ABYCircuitType) : ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYInGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-in-gate/index.html","searchKeys":["ABYInGate","class ABYInGate(val value: Int, val circuitType: ABYCircuitType) : ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYInGate"]},{"name":"class ABYOperationGate(val operation: PutOperationGate, operands: List<ABYCircuitGate>, val circuitType: ABYCircuitType) : ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYOperationGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-operation-gate/index.html","searchKeys":["ABYOperationGate","class ABYOperationGate(val operation: PutOperationGate, operands: List<ABYCircuitGate>, val circuitType: ABYCircuitType) : ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYOperationGate"]},{"name":"class ABYProtocolInterpreter(host: Host, otherHost: Host, role: Role, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>, port: Int = DEFAULT_PORT) : AbstractProtocolInterpreter<ABYProtocolInterpreter.ABYClassObject> ","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/index.html","searchKeys":["ABYProtocolInterpreter","class ABYProtocolInterpreter(host: Host, otherHost: Host, role: Role, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>, port: Int = DEFAULT_PORT) : AbstractProtocolInterpreter<ABYProtocolInterpreter.ABYClassObject> ","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter"]},{"name":"class BackendInterpreter(host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, protocolInterpreters: List<ProtocolInterpreter>, runtime: ViaductProcessRuntime)","description":"io.github.aplcornell.viaduct.backend.BackendInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-backend-interpreter/index.html","searchKeys":["BackendInterpreter","class BackendInterpreter(host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, protocolInterpreters: List<ProtocolInterpreter>, runtime: ViaductProcessRuntime)","io.github.aplcornell.viaduct.backend.BackendInterpreter"]},{"name":"class CleartextProtocolInterpreter(program: ProgramNode, protocols: Set<Protocol>, host: Host, runtime: ViaductRuntime) : AbstractProtocolInterpreter<CleartextClassObject> ","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/index.html","searchKeys":["CleartextProtocolInterpreter","class CleartextProtocolInterpreter(program: ProgramNode, protocols: Set<Protocol>, host: Host, runtime: ViaductRuntime) : AbstractProtocolInterpreter<CleartextClassObject> ","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter"]},{"name":"class CommitmentProtocolCleartextInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<CommitmentProtocolCleartextInterpreter.HashedObject> ","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/index.html","searchKeys":["CommitmentProtocolCleartextInterpreter","class CommitmentProtocolCleartextInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<CommitmentProtocolCleartextInterpreter.HashedObject> ","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter"]},{"name":"class CommitmentProtocolHashReplicaInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<CommitmentProtocolHashReplicaInterpreter.CommitmentObject> ","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/index.html","searchKeys":["CommitmentProtocolHashReplicaInterpreter","class CommitmentProtocolHashReplicaInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<CommitmentProtocolHashReplicaInterpreter.CommitmentObject> ","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter"]},{"name":"class FileStrategy(inFile: File) : Strategy","description":"io.github.aplcornell.viaduct.backend.io.FileStrategy","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-file-strategy/index.html","searchKeys":["FileStrategy","class FileStrategy(inFile: File) : Strategy","io.github.aplcornell.viaduct.backend.io.FileStrategy"]},{"name":"class ImmutableCellObject(val value: Value) : CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.ImmutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-immutable-cell-object/index.html","searchKeys":["ImmutableCellObject","class ImmutableCellObject(val value: Value) : CleartextClassObject","io.github.aplcornell.viaduct.backend.ImmutableCellObject"]},{"name":"class LibsnarkJNI","description":"io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-libsnark-j-n-i/index.html","searchKeys":["LibsnarkJNI","class LibsnarkJNI","io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI"]},{"name":"class MutableCellObject(var value: Value) : CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.MutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-mutable-cell-object/index.html","searchKeys":["MutableCellObject","class MutableCellObject(var value: Value) : CleartextClassObject","io.github.aplcornell.viaduct.backend.MutableCellObject"]},{"name":"class R1CS(val isProver: Boolean, val wire: WireTerm, val is_eq_to: Long)","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/index.html","searchKeys":["R1CS","class R1CS(val isProver: Boolean, val wire: WireTerm, val is_eq_to: Long)","io.github.aplcornell.viaduct.backend.zkp.R1CS"]},{"name":"class Synchronization(hosts: Set<Host>) : Protocol","description":"io.github.aplcornell.viaduct.protocols.Synchronization","location":"interpreter/io.github.aplcornell.viaduct.protocols/-synchronization/index.html","searchKeys":["Synchronization","class Synchronization(hosts: Set<Host>) : Protocol","io.github.aplcornell.viaduct.protocols.Synchronization"]},{"name":"class TerminalIO : Strategy","description":"io.github.aplcornell.viaduct.backend.io.TerminalIO","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-terminal-i-o/index.html","searchKeys":["TerminalIO","class TerminalIO : Strategy","io.github.aplcornell.viaduct.backend.io.TerminalIO"]},{"name":"class VectorObject(val size: Int, defaultValue: Value) : CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.VectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-vector-object/index.html","searchKeys":["VectorObject","class VectorObject(val size: Int, defaultValue: Value) : CleartextClassObject","io.github.aplcornell.viaduct.backend.VectorObject"]},{"name":"class ViaductBackend(backends: List<ProtocolBackend>, customConnectionInfo: Map<Host, HostAddress> = mapOf())","description":"io.github.aplcornell.viaduct.backend.ViaductBackend","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-backend/index.html","searchKeys":["ViaductBackend","class ViaductBackend(backends: List<ProtocolBackend>, customConnectionInfo: Map<Host, HostAddress> = mapOf())","io.github.aplcornell.viaduct.backend.ViaductBackend"]},{"name":"class ViaductProcessRuntime(runtime: ViaductRuntime, val projection: ProtocolProjection)","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/index.html","searchKeys":["ViaductProcessRuntime","class ViaductProcessRuntime(runtime: ViaductRuntime, val projection: ProtocolProjection)","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime"]},{"name":"class ViaductRuntime(val host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, hostConnectionInfo: Map<Host, HostAddress>, backends: List<ProtocolBackend>, strategy: Strategy)","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/index.html","searchKeys":["ViaductRuntime","class ViaductRuntime(val host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, hostConnectionInfo: Map<Host, HostAddress>, backends: List<ProtocolBackend>, strategy: Strategy)","io.github.aplcornell.viaduct.backend.ViaductRuntime"]},{"name":"class WireGenerator","description":"io.github.aplcornell.viaduct.backend.WireGenerator","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-generator/index.html","searchKeys":["WireGenerator","class WireGenerator","io.github.aplcornell.viaduct.backend.WireGenerator"]},{"name":"class ZKPInit","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPInit","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-init/index.html","searchKeys":["ZKPInit","class ZKPInit","io.github.aplcornell.viaduct.backend.zkp.ZKPInit"]},{"name":"class ZKPProverInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, val runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<ZKPObject> ","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/index.html","searchKeys":["ZKPProverInterpreter","class ZKPProverInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, val runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<ZKPObject> ","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter"]},{"name":"class ZKPVectorObject(val size: Int, val defaultValue: Value, val wireGenerator: WireGenerator) : ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/index.html","searchKeys":["ZKPVectorObject","class ZKPVectorObject(val size: Int, val defaultValue: Value, val wireGenerator: WireGenerator) : ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject"]},{"name":"class ZKPVerifierInterpreter(program: ProgramNode, val protocolAnalysis: ProtocolAnalysis, val runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<ZKPObject> ","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/index.html","searchKeys":["ZKPVerifierInterpreter","class ZKPVerifierInterpreter(program: ProgramNode, val protocolAnalysis: ProtocolAnalysis, val runtime: ViaductProcessRuntime) : SingleProtocolInterpreter<ZKPObject> ","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter"]},{"name":"const val CONNECTION_NUM_RETRY: Int = 20","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.Companion.CONNECTION_NUM_RETRY","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/-companion/-c-o-n-n-e-c-t-i-o-n_-n-u-m_-r-e-t-r-y.html","searchKeys":["CONNECTION_NUM_RETRY","const val CONNECTION_NUM_RETRY: Int = 20","io.github.aplcornell.viaduct.backend.ViaductRuntime.Companion.CONNECTION_NUM_RETRY"]},{"name":"const val CONNECTION_RETRY_DELAY: Long = 500","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.Companion.CONNECTION_RETRY_DELAY","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/-companion/-c-o-n-n-e-c-t-i-o-n_-r-e-t-r-y_-d-e-l-a-y.html","searchKeys":["CONNECTION_RETRY_DELAY","const val CONNECTION_RETRY_DELAY: Long = 500","io.github.aplcornell.viaduct.backend.ViaductRuntime.Companion.CONNECTION_RETRY_DELAY"]},{"name":"const val DEFAULT_ADDRESS: String","description":"io.github.aplcornell.viaduct.backend.ViaductBackend.Companion.DEFAULT_ADDRESS","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-backend/-companion/-d-e-f-a-u-l-t_-a-d-d-r-e-s-s.html","searchKeys":["DEFAULT_ADDRESS","const val DEFAULT_ADDRESS: String","io.github.aplcornell.viaduct.backend.ViaductBackend.Companion.DEFAULT_ADDRESS"]},{"name":"const val DEFAULT_PORT: Int = 5000","description":"io.github.aplcornell.viaduct.backend.ViaductBackend.Companion.DEFAULT_PORT","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-backend/-companion/-d-e-f-a-u-l-t_-p-o-r-t.html","searchKeys":["DEFAULT_PORT","const val DEFAULT_PORT: Int = 5000","io.github.aplcornell.viaduct.backend.ViaductBackend.Companion.DEFAULT_PORT"]},{"name":"data class ABYCleartextValue(val value: Value) : ABYValue","description":"io.github.aplcornell.viaduct.backend.aby.ABYCleartextValue","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-cleartext-value/index.html","searchKeys":["ABYCleartextValue","data class ABYCleartextValue(val value: Value) : ABYValue","io.github.aplcornell.viaduct.backend.aby.ABYCleartextValue"]},{"name":"data class ABYSecretValue(val value: ABYCircuitGate) : ABYValue","description":"io.github.aplcornell.viaduct.backend.aby.ABYSecretValue","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-secret-value/index.html","searchKeys":["ABYSecretValue","data class ABYSecretValue(val value: ABYCircuitGate) : ABYValue","io.github.aplcornell.viaduct.backend.aby.ABYSecretValue"]},{"name":"data class HashInfo(val hash: List<Byte>, val nonce: List<Byte>)","description":"io.github.aplcornell.viaduct.backend.commitment.HashInfo","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hash-info/index.html","searchKeys":["HashInfo","data class HashInfo(val hash: List<Byte>, val nonce: List<Byte>)","io.github.aplcornell.viaduct.backend.commitment.HashInfo"]},{"name":"data class Hashed<T>(val value: T, val info: HashInfo)","description":"io.github.aplcornell.viaduct.backend.commitment.Hashed","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashed/index.html","searchKeys":["Hashed","data class Hashed<T>(val value: T, val info: HashInfo)","io.github.aplcornell.viaduct.backend.commitment.Hashed"]},{"name":"data class HostAddress(val ipAddress: IpAddress, val port: Port)","description":"io.github.aplcornell.viaduct.backend.HostAddress","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-address/index.html","searchKeys":["HostAddress","data class HostAddress(val ipAddress: IpAddress, val port: Port)","io.github.aplcornell.viaduct.backend.HostAddress"]},{"name":"data class HostInfo(val host: Host, val id: HostId, val address: HostAddress, val recvChannel: Channel<ViaductMessage>, val sendChannel: Channel<ViaductMessage>)","description":"io.github.aplcornell.viaduct.backend.HostInfo","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-info/index.html","searchKeys":["HostInfo","data class HostInfo(val host: Host, val id: HostId, val address: HostAddress, val recvChannel: Channel<ViaductMessage>, val sendChannel: Channel<ViaductMessage>)","io.github.aplcornell.viaduct.backend.HostInfo"]},{"name":"data class NormalizeCounter(var inIndex: Int = 0, val inMap: MutableMap<Int, Int>, var publicIndex: Int = 0, val publicMap: MutableMap<Int, Int>)","description":"io.github.aplcornell.viaduct.backend.NormalizeCounter","location":"interpreter/io.github.aplcornell.viaduct.backend/-normalize-counter/index.html","searchKeys":["NormalizeCounter","data class NormalizeCounter(var inIndex: Int = 0, val inMap: MutableMap<Int, Int>, var publicIndex: Int = 0, val publicMap: MutableMap<Int, Int>)","io.github.aplcornell.viaduct.backend.NormalizeCounter"]},{"name":"data class ProcessInfo(val process: ProtocolProjection, val id: ProcessId)","description":"io.github.aplcornell.viaduct.backend.ProcessInfo","location":"interpreter/io.github.aplcornell.viaduct.backend/-process-info/index.html","searchKeys":["ProcessInfo","data class ProcessInfo(val process: ProtocolProjection, val id: ProcessId)","io.github.aplcornell.viaduct.backend.ProcessInfo"]},{"name":"data class ReceiveMessage(val sender: ProcessId, val receiver: ProcessId) : CommunicationMessage","description":"io.github.aplcornell.viaduct.backend.ReceiveMessage","location":"interpreter/io.github.aplcornell.viaduct.backend/-receive-message/index.html","searchKeys":["ReceiveMessage","data class ReceiveMessage(val sender: ProcessId, val receiver: ProcessId) : CommunicationMessage","io.github.aplcornell.viaduct.backend.ReceiveMessage"]},{"name":"data class SendMessage(val sender: ProcessId, val receiver: ProcessId, val message: Value) : CommunicationMessage","description":"io.github.aplcornell.viaduct.backend.SendMessage","location":"interpreter/io.github.aplcornell.viaduct.backend/-send-message/index.html","searchKeys":["SendMessage","data class SendMessage(val sender: ProcessId, val receiver: ProcessId, val message: Value) : CommunicationMessage","io.github.aplcornell.viaduct.backend.SendMessage"]},{"name":"data class WireConst(val index: Int, val v: Int) : WireTerm","description":"io.github.aplcornell.viaduct.backend.WireConst","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-const/index.html","searchKeys":["WireConst","data class WireConst(val index: Int, val v: Int) : WireTerm","io.github.aplcornell.viaduct.backend.WireConst"]},{"name":"data class WireDummyIn(val index: Int, val hash: List<Byte>, val nonce: List<Byte>) : WireTerm","description":"io.github.aplcornell.viaduct.backend.WireDummyIn","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-dummy-in/index.html","searchKeys":["WireDummyIn","data class WireDummyIn(val index: Int, val hash: List<Byte>, val nonce: List<Byte>) : WireTerm","io.github.aplcornell.viaduct.backend.WireDummyIn"]},{"name":"data class WireIn(val v: Int, val index: Int, val hash: List<Byte>, val nonce: List<Byte>) : WireTerm","description":"io.github.aplcornell.viaduct.backend.WireIn","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-in/index.html","searchKeys":["WireIn","data class WireIn(val v: Int, val index: Int, val hash: List<Byte>, val nonce: List<Byte>) : WireTerm","io.github.aplcornell.viaduct.backend.WireIn"]},{"name":"data class WireOp(val op: Operator, val inputs: List<WireTerm>) : WireTerm","description":"io.github.aplcornell.viaduct.backend.WireOp","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-op/index.html","searchKeys":["WireOp","data class WireOp(val op: Operator, val inputs: List<WireTerm>) : WireTerm","io.github.aplcornell.viaduct.backend.WireOp"]},{"name":"data class ZKPImmutableCell(val value: WireTerm) : ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPImmutableCell","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/index.html","searchKeys":["ZKPImmutableCell","data class ZKPImmutableCell(val value: WireTerm) : ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPImmutableCell"]},{"name":"data class ZKPMutableCell(var value: WireTerm) : ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPMutableCell","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/index.html","searchKeys":["ZKPMutableCell","data class ZKPMutableCell(var value: WireTerm) : ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPMutableCell"]},{"name":"enum ABYCircuitType : Enum<ABYCircuitType> ","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitType","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-type/index.html","searchKeys":["ABYCircuitType","enum ABYCircuitType : Enum<ABYCircuitType> ","io.github.aplcornell.viaduct.backend.aby.ABYCircuitType"]},{"name":"external fun sayHello()","description":"io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI.sayHello","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-libsnark-j-n-i/say-hello.html","searchKeys":["sayHello","external fun sayHello()","io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI.sayHello"]},{"name":"fun <T> Hashed(value: T, info: HashInfo)","description":"io.github.aplcornell.viaduct.backend.commitment.Hashed.Hashed","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashed/-hashed.html","searchKeys":["Hashed","fun <T> Hashed(value: T, info: HashInfo)","io.github.aplcornell.viaduct.backend.commitment.Hashed.Hashed"]},{"name":"fun ABYCircuitBuilder(arithCircuit: Circuit, boolCircuit: Circuit, yaoCircuit: Circuit, bitlen: Long, role: Role)","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.ABYCircuitBuilder","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/-a-b-y-circuit-builder.html","searchKeys":["ABYCircuitBuilder","fun ABYCircuitBuilder(arithCircuit: Circuit, boolCircuit: Circuit, yaoCircuit: Circuit, bitlen: Long, role: Role)","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.ABYCircuitBuilder"]},{"name":"fun ABYCircuitGate.addConversionGates(target: ABYCircuitType): ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.addConversionGates","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/add-conversion-gates.html","searchKeys":["addConversionGates","fun ABYCircuitGate.addConversionGates(target: ABYCircuitType): ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.addConversionGates"]},{"name":"fun ABYClassObject()","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject.ABYClassObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-class-object/-a-b-y-class-object.html","searchKeys":["ABYClassObject","fun ABYClassObject()","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYClassObject.ABYClassObject"]},{"name":"fun ABYCleartextValue(value: Value)","description":"io.github.aplcornell.viaduct.backend.aby.ABYCleartextValue.ABYCleartextValue","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-cleartext-value/-a-b-y-cleartext-value.html","searchKeys":["ABYCleartextValue","fun ABYCleartextValue(value: Value)","io.github.aplcornell.viaduct.backend.aby.ABYCleartextValue.ABYCleartextValue"]},{"name":"fun ABYConstantGate(value: Int, circuitType: ABYCircuitType)","description":"io.github.aplcornell.viaduct.backend.aby.ABYConstantGate.ABYConstantGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-constant-gate/-a-b-y-constant-gate.html","searchKeys":["ABYConstantGate","fun ABYConstantGate(value: Int, circuitType: ABYCircuitType)","io.github.aplcornell.viaduct.backend.aby.ABYConstantGate.ABYConstantGate"]},{"name":"fun ABYConversionGate(inputGate: ABYCircuitGate, circuitType: ABYCircuitType)","description":"io.github.aplcornell.viaduct.backend.aby.ABYConversionGate.ABYConversionGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-conversion-gate/-a-b-y-conversion-gate.html","searchKeys":["ABYConversionGate","fun ABYConversionGate(inputGate: ABYCircuitGate, circuitType: ABYCircuitType)","io.github.aplcornell.viaduct.backend.aby.ABYConversionGate.ABYConversionGate"]},{"name":"fun ABYDummyInGate(circuitType: ABYCircuitType)","description":"io.github.aplcornell.viaduct.backend.aby.ABYDummyInGate.ABYDummyInGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-dummy-in-gate/-a-b-y-dummy-in-gate.html","searchKeys":["ABYDummyInGate","fun ABYDummyInGate(circuitType: ABYCircuitType)","io.github.aplcornell.viaduct.backend.aby.ABYDummyInGate.ABYDummyInGate"]},{"name":"fun ABYImmutableCellObject(gate: ABYCircuitGate)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject.ABYImmutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/-a-b-y-immutable-cell-object.html","searchKeys":["ABYImmutableCellObject","fun ABYImmutableCellObject(gate: ABYCircuitGate)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject.ABYImmutableCellObject"]},{"name":"fun ABYInGate(value: Int, circuitType: ABYCircuitType)","description":"io.github.aplcornell.viaduct.backend.aby.ABYInGate.ABYInGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-in-gate/-a-b-y-in-gate.html","searchKeys":["ABYInGate","fun ABYInGate(value: Int, circuitType: ABYCircuitType)","io.github.aplcornell.viaduct.backend.aby.ABYInGate.ABYInGate"]},{"name":"fun ABYMutableCellObject(gate: ABYCircuitGate)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject.ABYMutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/-a-b-y-mutable-cell-object.html","searchKeys":["ABYMutableCellObject","fun ABYMutableCellObject(gate: ABYCircuitGate)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject.ABYMutableCellObject"]},{"name":"fun ABYOperationGate(operation: PutOperationGate, operands: List<ABYCircuitGate>, circuitType: ABYCircuitType)","description":"io.github.aplcornell.viaduct.backend.aby.ABYOperationGate.ABYOperationGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-operation-gate/-a-b-y-operation-gate.html","searchKeys":["ABYOperationGate","fun ABYOperationGate(operation: PutOperationGate, operands: List<ABYCircuitGate>, circuitType: ABYCircuitType)","io.github.aplcornell.viaduct.backend.aby.ABYOperationGate.ABYOperationGate"]},{"name":"fun ABYProtocolInterpreter(host: Host, otherHost: Host, role: Role, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>, port: Int = DEFAULT_PORT)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-protocol-interpreter.html","searchKeys":["ABYProtocolInterpreter","fun ABYProtocolInterpreter(host: Host, otherHost: Host, role: Role, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>, port: Int = DEFAULT_PORT)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYProtocolInterpreter"]},{"name":"fun ABYSecretValue(value: ABYCircuitGate)","description":"io.github.aplcornell.viaduct.backend.aby.ABYSecretValue.ABYSecretValue","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-secret-value/-a-b-y-secret-value.html","searchKeys":["ABYSecretValue","fun ABYSecretValue(value: ABYCircuitGate)","io.github.aplcornell.viaduct.backend.aby.ABYSecretValue.ABYSecretValue"]},{"name":"fun ABYVectorObject(circuitType: ABYCircuitType, size: Int, defaultValue: Value)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.ABYVectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/-a-b-y-vector-object.html","searchKeys":["ABYVectorObject","fun ABYVectorObject(circuitType: ABYCircuitType, size: Int, defaultValue: Value)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.ABYVectorObject"]},{"name":"fun AbstractProtocolInterpreter(program: ProgramNode)","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.AbstractProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/-abstract-protocol-interpreter.html","searchKeys":["AbstractProtocolInterpreter","fun AbstractProtocolInterpreter(program: ProgramNode)","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.AbstractProtocolInterpreter"]},{"name":"fun BackendInterpreter(host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, protocolInterpreters: List<ProtocolInterpreter>, runtime: ViaductProcessRuntime)","description":"io.github.aplcornell.viaduct.backend.BackendInterpreter.BackendInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-backend-interpreter/-backend-interpreter.html","searchKeys":["BackendInterpreter","fun BackendInterpreter(host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, protocolInterpreters: List<ProtocolInterpreter>, runtime: ViaductProcessRuntime)","io.github.aplcornell.viaduct.backend.BackendInterpreter.BackendInterpreter"]},{"name":"fun BoolVector_capacity(jarg1: Long, jarg1_: BoolVector): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_capacity","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_capacity.html","searchKeys":["BoolVector_capacity","fun BoolVector_capacity(jarg1: Long, jarg1_: BoolVector): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_capacity"]},{"name":"fun BoolVector_clear(jarg1: Long, jarg1_: BoolVector)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_clear","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_clear.html","searchKeys":["BoolVector_clear","fun BoolVector_clear(jarg1: Long, jarg1_: BoolVector)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_clear"]},{"name":"fun BoolVector_doAdd__SWIG_0(jarg1: Long, jarg1_: BoolVector, jarg2: Boolean)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doAdd__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-add__-s-w-i-g_0.html","searchKeys":["BoolVector_doAdd__SWIG_0","fun BoolVector_doAdd__SWIG_0(jarg1: Long, jarg1_: BoolVector, jarg2: Boolean)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doAdd__SWIG_0"]},{"name":"fun BoolVector_doAdd__SWIG_1(jarg1: Long, jarg1_: BoolVector, jarg2: Int, jarg3: Boolean)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doAdd__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-add__-s-w-i-g_1.html","searchKeys":["BoolVector_doAdd__SWIG_1","fun BoolVector_doAdd__SWIG_1(jarg1: Long, jarg1_: BoolVector, jarg2: Int, jarg3: Boolean)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doAdd__SWIG_1"]},{"name":"fun BoolVector_doGet(jarg1: Long, jarg1_: BoolVector, jarg2: Int): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doGet","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-get.html","searchKeys":["BoolVector_doGet","fun BoolVector_doGet(jarg1: Long, jarg1_: BoolVector, jarg2: Int): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doGet"]},{"name":"fun BoolVector_doRemove(jarg1: Long, jarg1_: BoolVector, jarg2: Int): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doRemove","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-remove.html","searchKeys":["BoolVector_doRemove","fun BoolVector_doRemove(jarg1: Long, jarg1_: BoolVector, jarg2: Int): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doRemove"]},{"name":"fun BoolVector_doRemoveRange(jarg1: Long, jarg1_: BoolVector, jarg2: Int, jarg3: Int)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doRemoveRange","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-remove-range.html","searchKeys":["BoolVector_doRemoveRange","fun BoolVector_doRemoveRange(jarg1: Long, jarg1_: BoolVector, jarg2: Int, jarg3: Int)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doRemoveRange"]},{"name":"fun BoolVector_doSet(jarg1: Long, jarg1_: BoolVector, jarg2: Int, jarg3: Boolean): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doSet","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-set.html","searchKeys":["BoolVector_doSet","fun BoolVector_doSet(jarg1: Long, jarg1_: BoolVector, jarg2: Int, jarg3: Boolean): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doSet"]},{"name":"fun BoolVector_doSize(jarg1: Long, jarg1_: BoolVector): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doSize","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_do-size.html","searchKeys":["BoolVector_doSize","fun BoolVector_doSize(jarg1: Long, jarg1_: BoolVector): Int","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_doSize"]},{"name":"fun BoolVector_isEmpty(jarg1: Long, jarg1_: BoolVector): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_isEmpty","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_is-empty.html","searchKeys":["BoolVector_isEmpty","fun BoolVector_isEmpty(jarg1: Long, jarg1_: BoolVector): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_isEmpty"]},{"name":"fun BoolVector_reserve(jarg1: Long, jarg1_: BoolVector, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_reserve","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-bool-vector_reserve.html","searchKeys":["BoolVector_reserve","fun BoolVector_reserve(jarg1: Long, jarg1_: BoolVector, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.BoolVector_reserve"]},{"name":"fun Boolean.toByte(): Byte","description":"io.github.aplcornell.viaduct.backend.commitment.toByte","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/to-byte.html","searchKeys":["toByte","fun Boolean.toByte(): Byte","io.github.aplcornell.viaduct.backend.commitment.toByte"]},{"name":"fun ByteBuf_contents_get(jarg1: Long, jarg1_: ByteBuf): String","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ByteBuf_contents_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_contents_get.html","searchKeys":["ByteBuf_contents_get","fun ByteBuf_contents_get(jarg1: Long, jarg1_: ByteBuf): String","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ByteBuf_contents_get"]},{"name":"fun ByteBuf_contents_set(jarg1: Long, jarg1_: ByteBuf, jarg2: String)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ByteBuf_contents_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_contents_set.html","searchKeys":["ByteBuf_contents_set","fun ByteBuf_contents_set(jarg1: Long, jarg1_: ByteBuf, jarg2: String)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ByteBuf_contents_set"]},{"name":"fun ByteBuf_get_data(jarg1: Long, jarg1_: ByteBuf): Array<Byte>","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ByteBuf_get_data","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-byte-buf_get_data.html","searchKeys":["ByteBuf_get_data","fun ByteBuf_get_data(jarg1: Long, jarg1_: ByteBuf): Array<Byte>","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ByteBuf_get_data"]},{"name":"fun CharVector_capacity(jarg1: Long, jarg1_: CharVector): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_capacity","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_capacity.html","searchKeys":["CharVector_capacity","fun CharVector_capacity(jarg1: Long, jarg1_: CharVector): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_capacity"]},{"name":"fun CharVector_clear(jarg1: Long, jarg1_: CharVector)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_clear","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_clear.html","searchKeys":["CharVector_clear","fun CharVector_clear(jarg1: Long, jarg1_: CharVector)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_clear"]},{"name":"fun CharVector_doAdd__SWIG_0(jarg1: Long, jarg1_: CharVector, jarg2: Char)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doAdd__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-add__-s-w-i-g_0.html","searchKeys":["CharVector_doAdd__SWIG_0","fun CharVector_doAdd__SWIG_0(jarg1: Long, jarg1_: CharVector, jarg2: Char)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doAdd__SWIG_0"]},{"name":"fun CharVector_doAdd__SWIG_1(jarg1: Long, jarg1_: CharVector, jarg2: Int, jarg3: Char)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doAdd__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-add__-s-w-i-g_1.html","searchKeys":["CharVector_doAdd__SWIG_1","fun CharVector_doAdd__SWIG_1(jarg1: Long, jarg1_: CharVector, jarg2: Int, jarg3: Char)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doAdd__SWIG_1"]},{"name":"fun CharVector_doGet(jarg1: Long, jarg1_: CharVector, jarg2: Int): Char","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doGet","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-get.html","searchKeys":["CharVector_doGet","fun CharVector_doGet(jarg1: Long, jarg1_: CharVector, jarg2: Int): Char","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doGet"]},{"name":"fun CharVector_doRemove(jarg1: Long, jarg1_: CharVector, jarg2: Int): Char","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doRemove","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-remove.html","searchKeys":["CharVector_doRemove","fun CharVector_doRemove(jarg1: Long, jarg1_: CharVector, jarg2: Int): Char","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doRemove"]},{"name":"fun CharVector_doRemoveRange(jarg1: Long, jarg1_: CharVector, jarg2: Int, jarg3: Int)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doRemoveRange","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-remove-range.html","searchKeys":["CharVector_doRemoveRange","fun CharVector_doRemoveRange(jarg1: Long, jarg1_: CharVector, jarg2: Int, jarg3: Int)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doRemoveRange"]},{"name":"fun CharVector_doSet(jarg1: Long, jarg1_: CharVector, jarg2: Int, jarg3: Char): Char","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doSet","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-set.html","searchKeys":["CharVector_doSet","fun CharVector_doSet(jarg1: Long, jarg1_: CharVector, jarg2: Int, jarg3: Char): Char","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doSet"]},{"name":"fun CharVector_doSize(jarg1: Long, jarg1_: CharVector): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doSize","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_do-size.html","searchKeys":["CharVector_doSize","fun CharVector_doSize(jarg1: Long, jarg1_: CharVector): Int","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_doSize"]},{"name":"fun CharVector_isEmpty(jarg1: Long, jarg1_: CharVector): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_isEmpty","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_is-empty.html","searchKeys":["CharVector_isEmpty","fun CharVector_isEmpty(jarg1: Long, jarg1_: CharVector): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_isEmpty"]},{"name":"fun CharVector_reserve(jarg1: Long, jarg1_: CharVector, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_reserve","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-char-vector_reserve.html","searchKeys":["CharVector_reserve","fun CharVector_reserve(jarg1: Long, jarg1_: CharVector, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.CharVector_reserve"]},{"name":"fun Circuit.putNOTGate(input: Share): Share","description":"io.github.aplcornell.viaduct.backend.aby.putNOTGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/put-n-o-t-gate.html","searchKeys":["putNOTGate","fun Circuit.putNOTGate(input: Share): Share","io.github.aplcornell.viaduct.backend.aby.putNOTGate"]},{"name":"fun CleartextClassObject.encode(): List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.encode","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/encode.html","searchKeys":["encode","fun CleartextClassObject.encode(): List<Byte>","io.github.aplcornell.viaduct.backend.commitment.encode"]},{"name":"fun CleartextProtocolInterpreter(program: ProgramNode, protocols: Set<Protocol>, host: Host, runtime: ViaductRuntime)","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.CleartextProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/-cleartext-protocol-interpreter.html","searchKeys":["CleartextProtocolInterpreter","fun CleartextProtocolInterpreter(program: ProgramNode, protocols: Set<Protocol>, host: Host, runtime: ViaductRuntime)","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.CleartextProtocolInterpreter"]},{"name":"fun CommitmentCell(bytes: List<Byte>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.CommitmentCell","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/-commitment-cell.html","searchKeys":["CommitmentCell","fun CommitmentCell(bytes: List<Byte>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.CommitmentCell"]},{"name":"fun CommitmentObject()","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject.CommitmentObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-object/-commitment-object.html","searchKeys":["CommitmentObject","fun CommitmentObject()","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentObject.CommitmentObject"]},{"name":"fun CommitmentProtocolCleartextInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.CommitmentProtocolCleartextInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-commitment-protocol-cleartext-interpreter.html","searchKeys":["CommitmentProtocolCleartextInterpreter","fun CommitmentProtocolCleartextInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.CommitmentProtocolCleartextInterpreter"]},{"name":"fun CommitmentProtocolHashReplicaInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentProtocolHashReplicaInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-protocol-hash-replica-interpreter.html","searchKeys":["CommitmentProtocolHashReplicaInterpreter","fun CommitmentProtocolHashReplicaInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentProtocolHashReplicaInterpreter"]},{"name":"fun CommitmentVector(size: Int, defaultValue: List<Byte>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.CommitmentVector","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/-commitment-vector.html","searchKeys":["CommitmentVector","fun CommitmentVector(size: Int, defaultValue: List<Byte>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.CommitmentVector"]},{"name":"fun FileStrategy(inFile: File)","description":"io.github.aplcornell.viaduct.backend.io.FileStrategy.FileStrategy","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-file-strategy/-file-strategy.html","searchKeys":["FileStrategy","fun FileStrategy(inFile: File)","io.github.aplcornell.viaduct.backend.io.FileStrategy.FileStrategy"]},{"name":"fun HashInfo(hash: List<Byte>, nonce: List<Byte>)","description":"io.github.aplcornell.viaduct.backend.commitment.HashInfo.HashInfo","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hash-info/-hash-info.html","searchKeys":["HashInfo","fun HashInfo(hash: List<Byte>, nonce: List<Byte>)","io.github.aplcornell.viaduct.backend.commitment.HashInfo.HashInfo"]},{"name":"fun HashedCellObject(value: Hashed<Value>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.HashedCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/-hashed-cell-object.html","searchKeys":["HashedCellObject","fun HashedCellObject(value: Hashed<Value>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.HashedCellObject"]},{"name":"fun HashedObject()","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject.HashedObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-object/-hashed-object.html","searchKeys":["HashedObject","fun HashedObject()","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedObject.HashedObject"]},{"name":"fun HashedVectorObject(size: Int, defaultValue: Hashed<Value>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.HashedVectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/-hashed-vector-object.html","searchKeys":["HashedVectorObject","fun HashedVectorObject(size: Int, defaultValue: Hashed<Value>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.HashedVectorObject"]},{"name":"fun HostAddress(ipAddress: IpAddress, port: Port)","description":"io.github.aplcornell.viaduct.backend.HostAddress.HostAddress","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-address/-host-address.html","searchKeys":["HostAddress","fun HostAddress(ipAddress: IpAddress, port: Port)","io.github.aplcornell.viaduct.backend.HostAddress.HostAddress"]},{"name":"fun HostInfo(host: Host, id: HostId, address: HostAddress, recvChannel: Channel<ViaductMessage>, sendChannel: Channel<ViaductMessage>)","description":"io.github.aplcornell.viaduct.backend.HostInfo.HostInfo","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-info/-host-info.html","searchKeys":["HostInfo","fun HostInfo(host: Host, id: HostId, address: HostAddress, recvChannel: Channel<ViaductMessage>, sendChannel: Channel<ViaductMessage>)","io.github.aplcornell.viaduct.backend.HostInfo.HostInfo"]},{"name":"fun ImmutableCellObject(value: Value)","description":"io.github.aplcornell.viaduct.backend.ImmutableCellObject.ImmutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-immutable-cell-object/-immutable-cell-object.html","searchKeys":["ImmutableCellObject","fun ImmutableCellObject(value: Value)","io.github.aplcornell.viaduct.backend.ImmutableCellObject.ImmutableCellObject"]},{"name":"fun IntVector_capacity(jarg1: Long, jarg1_: IntVector): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_capacity","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_capacity.html","searchKeys":["IntVector_capacity","fun IntVector_capacity(jarg1: Long, jarg1_: IntVector): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_capacity"]},{"name":"fun IntVector_clear(jarg1: Long, jarg1_: IntVector)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_clear","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_clear.html","searchKeys":["IntVector_clear","fun IntVector_clear(jarg1: Long, jarg1_: IntVector)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_clear"]},{"name":"fun IntVector_doAdd__SWIG_0(jarg1: Long, jarg1_: IntVector, jarg2: Int)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doAdd__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-add__-s-w-i-g_0.html","searchKeys":["IntVector_doAdd__SWIG_0","fun IntVector_doAdd__SWIG_0(jarg1: Long, jarg1_: IntVector, jarg2: Int)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doAdd__SWIG_0"]},{"name":"fun IntVector_doAdd__SWIG_1(jarg1: Long, jarg1_: IntVector, jarg2: Int, jarg3: Int)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doAdd__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-add__-s-w-i-g_1.html","searchKeys":["IntVector_doAdd__SWIG_1","fun IntVector_doAdd__SWIG_1(jarg1: Long, jarg1_: IntVector, jarg2: Int, jarg3: Int)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doAdd__SWIG_1"]},{"name":"fun IntVector_doGet(jarg1: Long, jarg1_: IntVector, jarg2: Int): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doGet","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-get.html","searchKeys":["IntVector_doGet","fun IntVector_doGet(jarg1: Long, jarg1_: IntVector, jarg2: Int): Int","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doGet"]},{"name":"fun IntVector_doRemove(jarg1: Long, jarg1_: IntVector, jarg2: Int): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doRemove","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-remove.html","searchKeys":["IntVector_doRemove","fun IntVector_doRemove(jarg1: Long, jarg1_: IntVector, jarg2: Int): Int","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doRemove"]},{"name":"fun IntVector_doRemoveRange(jarg1: Long, jarg1_: IntVector, jarg2: Int, jarg3: Int)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doRemoveRange","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-remove-range.html","searchKeys":["IntVector_doRemoveRange","fun IntVector_doRemoveRange(jarg1: Long, jarg1_: IntVector, jarg2: Int, jarg3: Int)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doRemoveRange"]},{"name":"fun IntVector_doSet(jarg1: Long, jarg1_: IntVector, jarg2: Int, jarg3: Int): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doSet","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-set.html","searchKeys":["IntVector_doSet","fun IntVector_doSet(jarg1: Long, jarg1_: IntVector, jarg2: Int, jarg3: Int): Int","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doSet"]},{"name":"fun IntVector_doSize(jarg1: Long, jarg1_: IntVector): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doSize","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_do-size.html","searchKeys":["IntVector_doSize","fun IntVector_doSize(jarg1: Long, jarg1_: IntVector): Int","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_doSize"]},{"name":"fun IntVector_isEmpty(jarg1: Long, jarg1_: IntVector): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_isEmpty","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_is-empty.html","searchKeys":["IntVector_isEmpty","fun IntVector_isEmpty(jarg1: Long, jarg1_: IntVector): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_isEmpty"]},{"name":"fun IntVector_reserve(jarg1: Long, jarg1_: IntVector, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_reserve","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-int-vector_reserve.html","searchKeys":["IntVector_reserve","fun IntVector_reserve(jarg1: Long, jarg1_: IntVector, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.IntVector_reserve"]},{"name":"fun Keypair_proving_key_get(jarg1: Long, jarg1_: Keypair): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_proving_key_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_proving_key_get.html","searchKeys":["Keypair_proving_key_get","fun Keypair_proving_key_get(jarg1: Long, jarg1_: Keypair): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_proving_key_get"]},{"name":"fun Keypair_proving_key_set(jarg1: Long, jarg1_: Keypair, jarg2: Long, jarg2_: ByteBuf)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_proving_key_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_proving_key_set.html","searchKeys":["Keypair_proving_key_set","fun Keypair_proving_key_set(jarg1: Long, jarg1_: Keypair, jarg2: Long, jarg2_: ByteBuf)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_proving_key_set"]},{"name":"fun Keypair_verification_key_get(jarg1: Long, jarg1_: Keypair): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_verification_key_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_verification_key_get.html","searchKeys":["Keypair_verification_key_get","fun Keypair_verification_key_get(jarg1: Long, jarg1_: Keypair): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_verification_key_get"]},{"name":"fun Keypair_verification_key_set(jarg1: Long, jarg1_: Keypair, jarg2: Long, jarg2_: ByteBuf)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_verification_key_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-keypair_verification_key_set.html","searchKeys":["Keypair_verification_key_set","fun Keypair_verification_key_set(jarg1: Long, jarg1_: Keypair, jarg2: Long, jarg2_: ByteBuf)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Keypair_verification_key_set"]},{"name":"fun LibsnarkJNI()","description":"io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI.LibsnarkJNI","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-libsnark-j-n-i/-libsnark-j-n-i.html","searchKeys":["LibsnarkJNI","fun LibsnarkJNI()","io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI.LibsnarkJNI"]},{"name":"fun MutableCellObject(value: Value)","description":"io.github.aplcornell.viaduct.backend.MutableCellObject.MutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-mutable-cell-object/-mutable-cell-object.html","searchKeys":["MutableCellObject","fun MutableCellObject(value: Value)","io.github.aplcornell.viaduct.backend.MutableCellObject.MutableCellObject"]},{"name":"fun NormalizeCounter(inIndex: Int = 0, inMap: MutableMap<Int, Int>, publicIndex: Int = 0, publicMap: MutableMap<Int, Int>)","description":"io.github.aplcornell.viaduct.backend.NormalizeCounter.NormalizeCounter","location":"interpreter/io.github.aplcornell.viaduct.backend/-normalize-counter/-normalize-counter.html","searchKeys":["NormalizeCounter","fun NormalizeCounter(inIndex: Int = 0, inMap: MutableMap<Int, Int>, publicIndex: Int = 0, publicMap: MutableMap<Int, Int>)","io.github.aplcornell.viaduct.backend.NormalizeCounter.NormalizeCounter"]},{"name":"fun ProcessInfo(process: ProtocolProjection, id: ProcessId)","description":"io.github.aplcornell.viaduct.backend.ProcessInfo.ProcessInfo","location":"interpreter/io.github.aplcornell.viaduct.backend/-process-info/-process-info.html","searchKeys":["ProcessInfo","fun ProcessInfo(process: ProtocolProjection, id: ProcessId)","io.github.aplcornell.viaduct.backend.ProcessInfo.ProcessInfo"]},{"name":"fun R1CS(isProver: Boolean, wire: WireTerm, is_eq_to: Long)","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.R1CS","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/-r1-c-s.html","searchKeys":["R1CS","fun R1CS(isProver: Boolean, wire: WireTerm, is_eq_to: Long)","io.github.aplcornell.viaduct.backend.zkp.R1CS.R1CS"]},{"name":"fun R1CSInstance_AddEquality(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_AddEquality","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_-add-equality.html","searchKeys":["R1CSInstance_AddEquality","fun R1CSInstance_AddEquality(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_AddEquality"]},{"name":"fun R1CSInstance_genKeypair(jarg1: Long, jarg1_: R1CSInstance): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_genKeypair","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_gen-keypair.html","searchKeys":["R1CSInstance_genKeypair","fun R1CSInstance_genKeypair(jarg1: Long, jarg1_: R1CSInstance): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_genKeypair"]},{"name":"fun R1CSInstance_generateProof(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: ByteBuf): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_generateProof","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_generate-proof.html","searchKeys":["R1CSInstance_generateProof","fun R1CSInstance_generateProof(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: ByteBuf): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_generateProof"]},{"name":"fun R1CSInstance_isProver_get(jarg1: Long, jarg1_: R1CSInstance): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_isProver_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_is-prover_get.html","searchKeys":["R1CSInstance_isProver_get","fun R1CSInstance_isProver_get(jarg1: Long, jarg1_: R1CSInstance): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_isProver_get"]},{"name":"fun R1CSInstance_isProver_set(jarg1: Long, jarg1_: R1CSInstance, jarg2: Boolean)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_isProver_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_is-prover_set.html","searchKeys":["R1CSInstance_isProver_set","fun R1CSInstance_isProver_set(jarg1: Long, jarg1_: R1CSInstance, jarg2: Boolean)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_isProver_set"]},{"name":"fun R1CSInstance_mkAdd(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkAdd","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-add.html","searchKeys":["R1CSInstance_mkAdd","fun R1CSInstance_mkAdd(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkAdd"]},{"name":"fun R1CSInstance_mkAnd(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkAnd","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-and.html","searchKeys":["R1CSInstance_mkAnd","fun R1CSInstance_mkAnd(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkAnd"]},{"name":"fun R1CSInstance_mkEqualTo(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkEqualTo","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-equal-to.html","searchKeys":["R1CSInstance_mkEqualTo","fun R1CSInstance_mkEqualTo(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkEqualTo"]},{"name":"fun R1CSInstance_mkLE(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkLE","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-l-e.html","searchKeys":["R1CSInstance_mkLE","fun R1CSInstance_mkLE(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkLE"]},{"name":"fun R1CSInstance_mkLessThan(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkLessThan","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-less-than.html","searchKeys":["R1CSInstance_mkLessThan","fun R1CSInstance_mkLessThan(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkLessThan"]},{"name":"fun R1CSInstance_mkMult(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkMult","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-mult.html","searchKeys":["R1CSInstance_mkMult","fun R1CSInstance_mkMult(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkMult"]},{"name":"fun R1CSInstance_mkMux(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var, jarg4: Long, jarg4_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkMux","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-mux.html","searchKeys":["R1CSInstance_mkMux","fun R1CSInstance_mkMux(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var, jarg4: Long, jarg4_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkMux"]},{"name":"fun R1CSInstance_mkNot(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkNot","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-not.html","searchKeys":["R1CSInstance_mkNot","fun R1CSInstance_mkNot(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkNot"]},{"name":"fun R1CSInstance_mkOr(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkOr","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-or.html","searchKeys":["R1CSInstance_mkOr","fun R1CSInstance_mkOr(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkOr"]},{"name":"fun R1CSInstance_mkPrivateValProver(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg3: Long, jarg3_: VarArray, jarg4: Long, jarg4_: VarArray): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPrivateValProver","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-private-val-prover.html","searchKeys":["R1CSInstance_mkPrivateValProver","fun R1CSInstance_mkPrivateValProver(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg3: Long, jarg3_: VarArray, jarg4: Long, jarg4_: VarArray): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPrivateValProver"]},{"name":"fun R1CSInstance_mkPrivateValVerifier(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: VarArray, jarg3: Long, jarg3_: VarArray): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPrivateValVerifier","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-private-val-verifier.html","searchKeys":["R1CSInstance_mkPrivateValVerifier","fun R1CSInstance_mkPrivateValVerifier(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: VarArray, jarg3: Long, jarg3_: VarArray): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPrivateValVerifier"]},{"name":"fun R1CSInstance_mkPublicBitvec__SWIG_0(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: BoolVector): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPublicBitvec__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-bitvec__-s-w-i-g_0.html","searchKeys":["R1CSInstance_mkPublicBitvec__SWIG_0","fun R1CSInstance_mkPublicBitvec__SWIG_0(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: BoolVector): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPublicBitvec__SWIG_0"]},{"name":"fun R1CSInstance_mkPublicBitvec__SWIG_1(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: ByteBuf): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPublicBitvec__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-bitvec__-s-w-i-g_1.html","searchKeys":["R1CSInstance_mkPublicBitvec__SWIG_1","fun R1CSInstance_mkPublicBitvec__SWIG_1(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: ByteBuf): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPublicBitvec__SWIG_1"]},{"name":"fun R1CSInstance_mkPublicVal(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPublicVal","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_mk-public-val.html","searchKeys":["R1CSInstance_mkPublicVal","fun R1CSInstance_mkPublicVal(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_mkPublicVal"]},{"name":"fun R1CSInstance_verifyProof(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: ByteBuf, jarg3: Long, jarg3_: ByteBuf): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_verifyProof","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-r1-c-s-instance_verify-proof.html","searchKeys":["R1CSInstance_verifyProof","fun R1CSInstance_verifyProof(jarg1: Long, jarg1_: R1CSInstance, jarg2: Long, jarg2_: ByteBuf, jarg3: Long, jarg3_: ByteBuf): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.R1CSInstance_verifyProof"]},{"name":"fun ReceiveMessage(sender: ProcessId, receiver: ProcessId)","description":"io.github.aplcornell.viaduct.backend.ReceiveMessage.ReceiveMessage","location":"interpreter/io.github.aplcornell.viaduct.backend/-receive-message/-receive-message.html","searchKeys":["ReceiveMessage","fun ReceiveMessage(sender: ProcessId, receiver: ProcessId)","io.github.aplcornell.viaduct.backend.ReceiveMessage.ReceiveMessage"]},{"name":"fun SendMessage(sender: ProcessId, receiver: ProcessId, message: Value)","description":"io.github.aplcornell.viaduct.backend.SendMessage.SendMessage","location":"interpreter/io.github.aplcornell.viaduct.backend/-send-message/-send-message.html","searchKeys":["SendMessage","fun SendMessage(sender: ProcessId, receiver: ProcessId, message: Value)","io.github.aplcornell.viaduct.backend.SendMessage.SendMessage"]},{"name":"fun ShaResult_data_get(jarg1: Long, jarg1_: ShaResult): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_data_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_data_get.html","searchKeys":["ShaResult_data_get","fun ShaResult_data_get(jarg1: Long, jarg1_: ShaResult): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_data_get"]},{"name":"fun ShaResult_data_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_data_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_data_set.html","searchKeys":["ShaResult_data_set","fun ShaResult_data_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_data_set"]},{"name":"fun ShaResult_nonce_get(jarg1: Long, jarg1_: ShaResult): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_nonce_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_nonce_get.html","searchKeys":["ShaResult_nonce_get","fun ShaResult_nonce_get(jarg1: Long, jarg1_: ShaResult): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_nonce_get"]},{"name":"fun ShaResult_nonce_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_nonce_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_nonce_set.html","searchKeys":["ShaResult_nonce_set","fun ShaResult_nonce_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_nonce_set"]},{"name":"fun ShaResult_output_get(jarg1: Long, jarg1_: ShaResult): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_output_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_output_get.html","searchKeys":["ShaResult_output_get","fun ShaResult_output_get(jarg1: Long, jarg1_: ShaResult): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_output_get"]},{"name":"fun ShaResult_output_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_output_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_output_set.html","searchKeys":["ShaResult_output_set","fun ShaResult_output_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_output_set"]},{"name":"fun ShaResult_val_var_get(jarg1: Long, jarg1_: ShaResult): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_val_var_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_val_var_get.html","searchKeys":["ShaResult_val_var_get","fun ShaResult_val_var_get(jarg1: Long, jarg1_: ShaResult): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_val_var_get"]},{"name":"fun ShaResult_val_var_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_val_var_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-sha-result_val_var_set.html","searchKeys":["ShaResult_val_var_set","fun ShaResult_val_var_set(jarg1: Long, jarg1_: ShaResult, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ShaResult_val_var_set"]},{"name":"fun SingleProtocolInterpreter(program: ProgramNode, protocol: Protocol)","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.SingleProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/-single-protocol-interpreter.html","searchKeys":["SingleProtocolInterpreter","fun SingleProtocolInterpreter(program: ProgramNode, protocol: Protocol)","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.SingleProtocolInterpreter"]},{"name":"fun String.asPrettyPrintable(): PrettyPrintable","description":"io.github.aplcornell.viaduct.backend.asPrettyPrintable","location":"interpreter/io.github.aplcornell.viaduct.backend/as-pretty-printable.html","searchKeys":["asPrettyPrintable","fun String.asPrettyPrintable(): PrettyPrintable","io.github.aplcornell.viaduct.backend.asPrettyPrintable"]},{"name":"fun Synchronization(hosts: Set<Host>)","description":"io.github.aplcornell.viaduct.protocols.Synchronization.Synchronization","location":"interpreter/io.github.aplcornell.viaduct.protocols/-synchronization/-synchronization.html","searchKeys":["Synchronization","fun Synchronization(hosts: Set<Host>)","io.github.aplcornell.viaduct.protocols.Synchronization.Synchronization"]},{"name":"fun TerminalIO()","description":"io.github.aplcornell.viaduct.backend.io.TerminalIO.TerminalIO","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-terminal-i-o/-terminal-i-o.html","searchKeys":["TerminalIO","fun TerminalIO()","io.github.aplcornell.viaduct.backend.io.TerminalIO.TerminalIO"]},{"name":"fun Value.encode(): List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.encode","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/encode.html","searchKeys":["encode","fun Value.encode(): List<Byte>","io.github.aplcornell.viaduct.backend.commitment.encode"]},{"name":"fun VarArray_values_get(jarg1: Long, jarg1_: VarArray): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.VarArray_values_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var-array_values_get.html","searchKeys":["VarArray_values_get","fun VarArray_values_get(jarg1: Long, jarg1_: VarArray): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.VarArray_values_get"]},{"name":"fun VarArray_values_set(jarg1: Long, jarg1_: VarArray, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.VarArray_values_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var-array_values_set.html","searchKeys":["VarArray_values_set","fun VarArray_values_set(jarg1: Long, jarg1_: VarArray, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.VarArray_values_set"]},{"name":"fun Var_value_get(jarg1: Long, jarg1_: Var): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Var_value_get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var_value_get.html","searchKeys":["Var_value_get","fun Var_value_get(jarg1: Long, jarg1_: Var): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Var_value_get"]},{"name":"fun Var_value_set(jarg1: Long, jarg1_: Var, jarg2: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Var_value_set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/-var_value_set.html","searchKeys":["Var_value_set","fun Var_value_set(jarg1: Long, jarg1_: Var, jarg2: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.Var_value_set"]},{"name":"fun VectorObject(size: Int, defaultValue: Value)","description":"io.github.aplcornell.viaduct.backend.VectorObject.VectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-vector-object/-vector-object.html","searchKeys":["VectorObject","fun VectorObject(size: Int, defaultValue: Value)","io.github.aplcornell.viaduct.backend.VectorObject.VectorObject"]},{"name":"fun ViaductBackend(backends: List<ProtocolBackend>, customConnectionInfo: Map<Host, HostAddress> = mapOf())","description":"io.github.aplcornell.viaduct.backend.ViaductBackend.ViaductBackend","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-backend/-viaduct-backend.html","searchKeys":["ViaductBackend","fun ViaductBackend(backends: List<ProtocolBackend>, customConnectionInfo: Map<Host, HostAddress> = mapOf())","io.github.aplcornell.viaduct.backend.ViaductBackend.ViaductBackend"]},{"name":"fun ViaductProcessRuntime(runtime: ViaductRuntime, projection: ProtocolProjection)","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.ViaductProcessRuntime","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/-viaduct-process-runtime.html","searchKeys":["ViaductProcessRuntime","fun ViaductProcessRuntime(runtime: ViaductRuntime, projection: ProtocolProjection)","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.ViaductProcessRuntime"]},{"name":"fun ViaductRuntime(host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, hostConnectionInfo: Map<Host, HostAddress>, backends: List<ProtocolBackend>, strategy: Strategy)","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.ViaductRuntime","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/-viaduct-runtime.html","searchKeys":["ViaductRuntime","fun ViaductRuntime(host: Host, program: ProgramNode, protocolAnalysis: ProtocolAnalysis, hostConnectionInfo: Map<Host, HostAddress>, backends: List<ProtocolBackend>, strategy: Strategy)","io.github.aplcornell.viaduct.backend.ViaductRuntime.ViaductRuntime"]},{"name":"fun WireConst(index: Int, v: Int)","description":"io.github.aplcornell.viaduct.backend.WireConst.WireConst","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-const/-wire-const.html","searchKeys":["WireConst","fun WireConst(index: Int, v: Int)","io.github.aplcornell.viaduct.backend.WireConst.WireConst"]},{"name":"fun WireDummyIn(index: Int, hash: List<Byte>, nonce: List<Byte>)","description":"io.github.aplcornell.viaduct.backend.WireDummyIn.WireDummyIn","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-dummy-in/-wire-dummy-in.html","searchKeys":["WireDummyIn","fun WireDummyIn(index: Int, hash: List<Byte>, nonce: List<Byte>)","io.github.aplcornell.viaduct.backend.WireDummyIn.WireDummyIn"]},{"name":"fun WireGenerator()","description":"io.github.aplcornell.viaduct.backend.WireGenerator.WireGenerator","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-generator/-wire-generator.html","searchKeys":["WireGenerator","fun WireGenerator()","io.github.aplcornell.viaduct.backend.WireGenerator.WireGenerator"]},{"name":"fun WireIn(v: Int, index: Int, hash: List<Byte>, nonce: List<Byte>)","description":"io.github.aplcornell.viaduct.backend.WireIn.WireIn","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-in/-wire-in.html","searchKeys":["WireIn","fun WireIn(v: Int, index: Int, hash: List<Byte>, nonce: List<Byte>)","io.github.aplcornell.viaduct.backend.WireIn.WireIn"]},{"name":"fun WireOp(op: Operator, inputs: List<WireTerm>)","description":"io.github.aplcornell.viaduct.backend.WireOp.WireOp","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-op/-wire-op.html","searchKeys":["WireOp","fun WireOp(op: Operator, inputs: List<WireTerm>)","io.github.aplcornell.viaduct.backend.WireOp.WireOp"]},{"name":"fun WireTerm.asString(): String","description":"io.github.aplcornell.viaduct.backend.asString","location":"interpreter/io.github.aplcornell.viaduct.backend/as-string.html","searchKeys":["asString","fun WireTerm.asString(): String","io.github.aplcornell.viaduct.backend.asString"]},{"name":"fun WireTerm.eval(): Int","description":"io.github.aplcornell.viaduct.backend.eval","location":"interpreter/io.github.aplcornell.viaduct.backend/eval.html","searchKeys":["eval","fun WireTerm.eval(): Int","io.github.aplcornell.viaduct.backend.eval"]},{"name":"fun WireTerm.hash(): String","description":"io.github.aplcornell.viaduct.backend.hash","location":"interpreter/io.github.aplcornell.viaduct.backend/hash.html","searchKeys":["hash","fun WireTerm.hash(): String","io.github.aplcornell.viaduct.backend.hash"]},{"name":"fun WireTerm.normalize(counter: NormalizeCounter): WireTerm","description":"io.github.aplcornell.viaduct.backend.normalize","location":"interpreter/io.github.aplcornell.viaduct.backend/normalize.html","searchKeys":["normalize","fun WireTerm.normalize(counter: NormalizeCounter): WireTerm","io.github.aplcornell.viaduct.backend.normalize"]},{"name":"fun WireTerm.populatePrimaryInputs()","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.populatePrimaryInputs","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/populate-primary-inputs.html","searchKeys":["populatePrimaryInputs","fun WireTerm.populatePrimaryInputs()","io.github.aplcornell.viaduct.backend.zkp.R1CS.populatePrimaryInputs"]},{"name":"fun WireTerm.setupAuxInputs()","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.setupAuxInputs","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/setup-aux-inputs.html","searchKeys":["setupAuxInputs","fun WireTerm.setupAuxInputs()","io.github.aplcornell.viaduct.backend.zkp.R1CS.setupAuxInputs"]},{"name":"fun WireTerm.toR1CS(isProver: Boolean, is_eq_to: Int): R1CS","description":"io.github.aplcornell.viaduct.backend.zkp.toR1CS","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/to-r1-c-s.html","searchKeys":["toR1CS","fun WireTerm.toR1CS(isProver: Boolean, is_eq_to: Int): R1CS","io.github.aplcornell.viaduct.backend.zkp.toR1CS"]},{"name":"fun WireTerm.value(): Var","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.value","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/value.html","searchKeys":["value","fun WireTerm.value(): Var","io.github.aplcornell.viaduct.backend.zkp.R1CS.value"]},{"name":"fun WireTerm.wireName(): String","description":"io.github.aplcornell.viaduct.backend.wireName","location":"interpreter/io.github.aplcornell.viaduct.backend/wire-name.html","searchKeys":["wireName","fun WireTerm.wireName(): String","io.github.aplcornell.viaduct.backend.wireName"]},{"name":"fun ZKPImmutableCell(value: WireTerm)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPImmutableCell.ZKPImmutableCell","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/-z-k-p-immutable-cell.html","searchKeys":["ZKPImmutableCell","fun ZKPImmutableCell(value: WireTerm)","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPImmutableCell.ZKPImmutableCell"]},{"name":"fun ZKPInit()","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPInit.ZKPInit","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-init/-z-k-p-init.html","searchKeys":["ZKPInit","fun ZKPInit()","io.github.aplcornell.viaduct.backend.zkp.ZKPInit.ZKPInit"]},{"name":"fun ZKPMutableCell(value: WireTerm)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPMutableCell.ZKPMutableCell","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/-z-k-p-mutable-cell.html","searchKeys":["ZKPMutableCell","fun ZKPMutableCell(value: WireTerm)","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPMutableCell.ZKPMutableCell"]},{"name":"fun ZKPProverInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.ZKPProverInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/-z-k-p-prover-interpreter.html","searchKeys":["ZKPProverInterpreter","fun ZKPProverInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.ZKPProverInterpreter"]},{"name":"fun ZKPVectorObject(size: Int, defaultValue: Value, wireGenerator: WireGenerator)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.ZKPVectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/-z-k-p-vector-object.html","searchKeys":["ZKPVectorObject","fun ZKPVectorObject(size: Int, defaultValue: Value, wireGenerator: WireGenerator)","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.ZKPVectorObject"]},{"name":"fun ZKPVerifierInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.ZKPVerifierInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/-z-k-p-verifier-interpreter.html","searchKeys":["ZKPVerifierInterpreter","fun ZKPVerifierInterpreter(program: ProgramNode, protocolAnalysis: ProtocolAnalysis, runtime: ViaductProcessRuntime)","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.ZKPVerifierInterpreter"]},{"name":"fun addEquality__SWIG_0(jarg1: Long, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.addEquality__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/add-equality__-s-w-i-g_0.html","searchKeys":["addEquality__SWIG_0","fun addEquality__SWIG_0(jarg1: Long, jarg2: Long, jarg2_: Var, jarg3: Long, jarg3_: Var)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.addEquality__SWIG_0"]},{"name":"fun addEquality__SWIG_1(jarg1: Long, jarg2: Long, jarg3: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.addEquality__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/add-equality__-s-w-i-g_1.html","searchKeys":["addEquality__SWIG_1","fun addEquality__SWIG_1(jarg1: Long, jarg2: Long, jarg3: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.addEquality__SWIG_1"]},{"name":"fun bvec_to_string(jarg1: Long, jarg1_: BoolVector): String","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.bvec_to_string","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/bvec_to_string.html","searchKeys":["bvec_to_string","fun bvec_to_string(jarg1: Long, jarg1_: BoolVector): String","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.bvec_to_string"]},{"name":"fun circuit(type: ABYCircuitType): Circuit","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.circuit","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/circuit.html","searchKeys":["circuit","fun circuit(type: ABYCircuitType): Circuit","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.circuit"]},{"name":"fun delete_BoolVector(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_BoolVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-bool-vector.html","searchKeys":["delete_BoolVector","fun delete_BoolVector(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_BoolVector"]},{"name":"fun delete_ByteBuf(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_ByteBuf","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-byte-buf.html","searchKeys":["delete_ByteBuf","fun delete_ByteBuf(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_ByteBuf"]},{"name":"fun delete_CharVector(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_CharVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-char-vector.html","searchKeys":["delete_CharVector","fun delete_CharVector(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_CharVector"]},{"name":"fun delete_IntVector(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_IntVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-int-vector.html","searchKeys":["delete_IntVector","fun delete_IntVector(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_IntVector"]},{"name":"fun delete_Keypair(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_Keypair","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-keypair.html","searchKeys":["delete_Keypair","fun delete_Keypair(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_Keypair"]},{"name":"fun delete_R1CSInstance(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_R1CSInstance","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-r1-c-s-instance.html","searchKeys":["delete_R1CSInstance","fun delete_R1CSInstance(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_R1CSInstance"]},{"name":"fun delete_ShaResult(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_ShaResult","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-sha-result.html","searchKeys":["delete_ShaResult","fun delete_ShaResult(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_ShaResult"]},{"name":"fun delete_Var(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_Var","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-var.html","searchKeys":["delete_Var","fun delete_Var(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_Var"]},{"name":"fun delete_VarArray(jarg1: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_VarArray","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/delete_-var-array.html","searchKeys":["delete_VarArray","fun delete_VarArray(jarg1: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.delete_VarArray"]},{"name":"fun deterministicHash(data: List<Byte>): HashInfo","description":"io.github.aplcornell.viaduct.backend.commitment.Hashing.deterministicHash","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashing/deterministic-hash.html","searchKeys":["deterministicHash","fun deterministicHash(data: List<Byte>): HashInfo","io.github.aplcornell.viaduct.backend.commitment.Hashing.deterministicHash"]},{"name":"fun deterministicHash(v: Value): HashInfo","description":"io.github.aplcornell.viaduct.backend.commitment.Hashing.deterministicHash","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashing/deterministic-hash.html","searchKeys":["deterministicHash","fun deterministicHash(v: Value): HashInfo","io.github.aplcornell.viaduct.backend.commitment.Hashing.deterministicHash"]},{"name":"fun divide_rounding_up(jarg1: Long, jarg2: Long): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.divide_rounding_up","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/divide_rounding_up.html","searchKeys":["divide_rounding_up","fun divide_rounding_up(jarg1: Long, jarg2: Long): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.divide_rounding_up"]},{"name":"fun ensure_satisfied__SWIG_0(jarg1: Long, jarg2: Long, jarg3: Long): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ensure_satisfied__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/ensure_satisfied__-s-w-i-g_0.html","searchKeys":["ensure_satisfied__SWIG_0","fun ensure_satisfied__SWIG_0(jarg1: Long, jarg2: Long, jarg3: Long): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ensure_satisfied__SWIG_0"]},{"name":"fun ensure_satisfied__SWIG_1(jarg1: Long): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ensure_satisfied__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/ensure_satisfied__-s-w-i-g_1.html","searchKeys":["ensure_satisfied__SWIG_1","fun ensure_satisfied__SWIG_1(jarg1: Long): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.ensure_satisfied__SWIG_1"]},{"name":"fun genKeypair(): Keypair","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.genKeypair","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/gen-keypair.html","searchKeys":["genKeypair","fun genKeypair(): Keypair","io.github.aplcornell.viaduct.backend.zkp.R1CS.genKeypair"]},{"name":"fun genNonce(width: Int): List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.genNonce","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/gen-nonce.html","searchKeys":["genNonce","fun genNonce(width: Int): List<Byte>","io.github.aplcornell.viaduct.backend.commitment.genNonce"]},{"name":"fun generateHash(c: CleartextClassObject): HashInfo","description":"io.github.aplcornell.viaduct.backend.commitment.Hashing.generateHash","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashing/generate-hash.html","searchKeys":["generateHash","fun generateHash(c: CleartextClassObject): HashInfo","io.github.aplcornell.viaduct.backend.commitment.Hashing.generateHash"]},{"name":"fun generateHash(v: Value): HashInfo","description":"io.github.aplcornell.viaduct.backend.commitment.Hashing.generateHash","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashing/generate-hash.html","searchKeys":["generateHash","fun generateHash(v: Value): HashInfo","io.github.aplcornell.viaduct.backend.commitment.Hashing.generateHash"]},{"name":"fun getHostById(id: HostId): HostInfo","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.getHostById","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/get-host-by-id.html","searchKeys":["getHostById","fun getHostById(id: HostId): HostInfo","io.github.aplcornell.viaduct.backend.ViaductRuntime.getHostById"]},{"name":"fun getProcessById(id: ProcessId): ProcessInfo","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.getProcessById","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/get-process-by-id.html","searchKeys":["getProcessById","fun getProcessById(id: ProcessId): ProcessInfo","io.github.aplcornell.viaduct.backend.ViaductRuntime.getProcessById"]},{"name":"fun get_sha_nonce_val(jarg1: Long, jarg1_: ByteBuf, jarg2: Long): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.get_sha_nonce_val","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/get_sha_nonce_val.html","searchKeys":["get_sha_nonce_val","fun get_sha_nonce_val(jarg1: Long, jarg1_: ByteBuf, jarg2: Long): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.get_sha_nonce_val"]},{"name":"fun initZKP()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.initZKP","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/init-z-k-p.html","searchKeys":["initZKP","fun initZKP()","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.initZKP"]},{"name":"fun makeProof(pk: ByteBuf): ByteBuf","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.makeProof","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/make-proof.html","searchKeys":["makeProof","fun makeProof(pk: ByteBuf): ByteBuf","io.github.aplcornell.viaduct.backend.zkp.R1CS.makeProof"]},{"name":"fun mkByteBuf(jarg1: Array<Byte>): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.mkByteBuf","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/mk-byte-buf.html","searchKeys":["mkByteBuf","fun mkByteBuf(jarg1: Array<Byte>): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.mkByteBuf"]},{"name":"fun mkConst(v: Int): WireTerm","description":"io.github.aplcornell.viaduct.backend.WireGenerator.mkConst","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-generator/mk-const.html","searchKeys":["mkConst","fun mkConst(v: Int): WireTerm","io.github.aplcornell.viaduct.backend.WireGenerator.mkConst"]},{"name":"fun mkDummyIn(hash: List<Byte>, nonce: List<Byte>): WireTerm","description":"io.github.aplcornell.viaduct.backend.WireGenerator.mkDummyIn","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-generator/mk-dummy-in.html","searchKeys":["mkDummyIn","fun mkDummyIn(hash: List<Byte>, nonce: List<Byte>): WireTerm","io.github.aplcornell.viaduct.backend.WireGenerator.mkDummyIn"]},{"name":"fun mkIn(v: Int, hash: List<Byte>, nonce: List<Byte>): WireTerm","description":"io.github.aplcornell.viaduct.backend.WireGenerator.mkIn","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-generator/mk-in.html","searchKeys":["mkIn","fun mkIn(v: Int, hash: List<Byte>, nonce: List<Byte>): WireTerm","io.github.aplcornell.viaduct.backend.WireGenerator.mkIn"]},{"name":"fun mkOp(op: Operator, inputs: List<WireTerm>): WireOp","description":"io.github.aplcornell.viaduct.backend.WireGenerator.mkOp","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-generator/mk-op.html","searchKeys":["mkOp","fun mkOp(op: Operator, inputs: List<WireTerm>): WireOp","io.github.aplcornell.viaduct.backend.WireGenerator.mkOp"]},{"name":"fun mkSHA(jarg1: Long, jarg2: Long, jarg3: String, jarg4: Boolean): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.mkSHA","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/mk-s-h-a.html","searchKeys":["mkSHA","fun mkSHA(jarg1: Long, jarg2: Long, jarg3: String, jarg4: Boolean): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.mkSHA"]},{"name":"fun new_BoolVector__SWIG_0(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_BoolVector__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_0.html","searchKeys":["new_BoolVector__SWIG_0","fun new_BoolVector__SWIG_0(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_BoolVector__SWIG_0"]},{"name":"fun new_BoolVector__SWIG_1(jarg1: Long, jarg1_: BoolVector): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_BoolVector__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_1.html","searchKeys":["new_BoolVector__SWIG_1","fun new_BoolVector__SWIG_1(jarg1: Long, jarg1_: BoolVector): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_BoolVector__SWIG_1"]},{"name":"fun new_BoolVector__SWIG_2(jarg1: Int, jarg2: Boolean): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_BoolVector__SWIG_2","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-bool-vector__-s-w-i-g_2.html","searchKeys":["new_BoolVector__SWIG_2","fun new_BoolVector__SWIG_2(jarg1: Int, jarg2: Boolean): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_BoolVector__SWIG_2"]},{"name":"fun new_ByteBuf(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_ByteBuf","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-byte-buf.html","searchKeys":["new_ByteBuf","fun new_ByteBuf(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_ByteBuf"]},{"name":"fun new_CharVector__SWIG_0(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_CharVector__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_0.html","searchKeys":["new_CharVector__SWIG_0","fun new_CharVector__SWIG_0(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_CharVector__SWIG_0"]},{"name":"fun new_CharVector__SWIG_1(jarg1: Long, jarg1_: CharVector): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_CharVector__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_1.html","searchKeys":["new_CharVector__SWIG_1","fun new_CharVector__SWIG_1(jarg1: Long, jarg1_: CharVector): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_CharVector__SWIG_1"]},{"name":"fun new_CharVector__SWIG_2(jarg1: Int, jarg2: Char): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_CharVector__SWIG_2","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-char-vector__-s-w-i-g_2.html","searchKeys":["new_CharVector__SWIG_2","fun new_CharVector__SWIG_2(jarg1: Int, jarg2: Char): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_CharVector__SWIG_2"]},{"name":"fun new_IntVector__SWIG_0(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_IntVector__SWIG_0","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_0.html","searchKeys":["new_IntVector__SWIG_0","fun new_IntVector__SWIG_0(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_IntVector__SWIG_0"]},{"name":"fun new_IntVector__SWIG_1(jarg1: Long, jarg1_: IntVector): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_IntVector__SWIG_1","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_1.html","searchKeys":["new_IntVector__SWIG_1","fun new_IntVector__SWIG_1(jarg1: Long, jarg1_: IntVector): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_IntVector__SWIG_1"]},{"name":"fun new_IntVector__SWIG_2(jarg1: Int, jarg2: Int): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_IntVector__SWIG_2","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-int-vector__-s-w-i-g_2.html","searchKeys":["new_IntVector__SWIG_2","fun new_IntVector__SWIG_2(jarg1: Int, jarg2: Int): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_IntVector__SWIG_2"]},{"name":"fun new_Keypair(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_Keypair","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-keypair.html","searchKeys":["new_Keypair","fun new_Keypair(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_Keypair"]},{"name":"fun new_R1CSInstance(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_R1CSInstance","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-r1-c-s-instance.html","searchKeys":["new_R1CSInstance","fun new_R1CSInstance(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_R1CSInstance"]},{"name":"fun new_ShaResult(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_ShaResult","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-sha-result.html","searchKeys":["new_ShaResult","fun new_ShaResult(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_ShaResult"]},{"name":"fun new_Var(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_Var","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-var.html","searchKeys":["new_Var","fun new_Var(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_Var"]},{"name":"fun new_VarArray(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_VarArray","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/new_-var-array.html","searchKeys":["new_VarArray","fun new_VarArray(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.new_VarArray"]},{"name":"fun operatorToCircuit(operator: Operator, arguments: List<ABYCircuitGate>, circuitType: ABYCircuitType): ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.operatorToCircuit","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/operator-to-circuit.html","searchKeys":["operatorToCircuit","fun operatorToCircuit(operator: Operator, arguments: List<ABYCircuitGate>, circuitType: ABYCircuitType): ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.operatorToCircuit"]},{"name":"fun run(program: ProgramNode, host: Host, strategy: Strategy)","description":"io.github.aplcornell.viaduct.backend.ViaductBackend.run","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-backend/run.html","searchKeys":["run","fun run(program: ProgramNode, host: Host, strategy: Strategy)","io.github.aplcornell.viaduct.backend.ViaductBackend.run"]},{"name":"fun runRead(read: ReadNode): List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runRead","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-read.html","searchKeys":["runRead","fun runRead(read: ReadNode): List<Byte>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runRead"]},{"name":"fun start()","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.start","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/start.html","searchKeys":["start","fun start()","io.github.aplcornell.viaduct.backend.ViaductRuntime.start"]},{"name":"fun string_to_bvec(jarg1: String): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.string_to_bvec","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/string_to_bvec.html","searchKeys":["string_to_bvec","fun string_to_bvec(jarg1: String): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI.string_to_bvec"]},{"name":"fun valueOf(value: String): ABYCircuitType","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.valueOf","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ABYCircuitType","io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.valueOf"]},{"name":"fun values(): Array<ABYCircuitType>","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.values","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-type/values.html","searchKeys":["values","fun values(): Array<ABYCircuitType>","io.github.aplcornell.viaduct.backend.aby.ABYCircuitType.values"]},{"name":"fun verify(data: List<Byte>): Boolean","description":"io.github.aplcornell.viaduct.backend.commitment.HashInfo.verify","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hash-info/verify.html","searchKeys":["verify","fun verify(data: List<Byte>): Boolean","io.github.aplcornell.viaduct.backend.commitment.HashInfo.verify"]},{"name":"fun verifyProof(vk: ByteBuf, pf: ByteBuf): Boolean","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.verifyProof","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/verify-proof.html","searchKeys":["verifyProof","fun verifyProof(vk: ByteBuf, pf: ByteBuf): Boolean","io.github.aplcornell.viaduct.backend.zkp.R1CS.verifyProof"]},{"name":"inner class ABYMutableCellObject(gate: ABYCircuitGate) : ABYProtocolInterpreter.ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/index.html","searchKeys":["ABYMutableCellObject","inner class ABYMutableCellObject(gate: ABYCircuitGate) : ABYProtocolInterpreter.ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject"]},{"name":"inner class ABYVectorObject(circuitType: ABYCircuitType, val size: Int, defaultValue: Value) : ABYProtocolInterpreter.ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/index.html","searchKeys":["ABYVectorObject","inner class ABYVectorObject(circuitType: ABYCircuitType, val size: Int, defaultValue: Value) : ABYProtocolInterpreter.ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject"]},{"name":"inner class CommitmentCell(var bytes: List<Byte>) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/index.html","searchKeys":["CommitmentCell","inner class CommitmentCell(var bytes: List<Byte>) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell"]},{"name":"inner class CommitmentVector(val size: Int, defaultValue: List<Byte>) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/index.html","searchKeys":["CommitmentVector","inner class CommitmentVector(val size: Int, defaultValue: List<Byte>) : CommitmentProtocolHashReplicaInterpreter.CommitmentObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector"]},{"name":"inner class HashedCellObject(var value: Hashed<Value>) : CommitmentProtocolCleartextInterpreter.HashedObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/index.html","searchKeys":["HashedCellObject","inner class HashedCellObject(var value: Hashed<Value>) : CommitmentProtocolCleartextInterpreter.HashedObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject"]},{"name":"inner class HashedVectorObject(val size: Int, defaultValue: Hashed<Value>) : CommitmentProtocolCleartextInterpreter.HashedObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/index.html","searchKeys":["HashedVectorObject","inner class HashedVectorObject(val size: Int, defaultValue: Hashed<Value>) : CommitmentProtocolCleartextInterpreter.HashedObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject"]},{"name":"interface ProtocolBackend","description":"io.github.aplcornell.viaduct.backend.ProtocolBackend","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-backend/index.html","searchKeys":["ProtocolBackend","interface ProtocolBackend","io.github.aplcornell.viaduct.backend.ProtocolBackend"]},{"name":"interface ProtocolInterpreter","description":"io.github.aplcornell.viaduct.backend.ProtocolInterpreter","location":"interpreter/io.github.aplcornell.viaduct.backend/-protocol-interpreter/index.html","searchKeys":["ProtocolInterpreter","interface ProtocolInterpreter","io.github.aplcornell.viaduct.backend.ProtocolInterpreter"]},{"name":"interface Strategy","description":"io.github.aplcornell.viaduct.backend.io.Strategy","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-strategy/index.html","searchKeys":["Strategy","interface Strategy","io.github.aplcornell.viaduct.backend.io.Strategy"]},{"name":"object ABYNullObject : ABYProtocolInterpreter.ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/index.html","searchKeys":["ABYNullObject","object ABYNullObject : ABYProtocolInterpreter.ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYNullObject"]},{"name":"object CommitmentProtocolInterpreterFactory : ProtocolBackend","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolInterpreterFactory","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-interpreter-factory/index.html","searchKeys":["CommitmentProtocolInterpreterFactory","object CommitmentProtocolInterpreterFactory : ProtocolBackend","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolInterpreterFactory"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backend.ViaductBackend.Companion","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-backend/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backend.ViaductBackend.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.Companion","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backend.ViaductRuntime.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI.Companion","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-libsnark-j-n-i/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backend.zkp.LibsnarkJNI.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPInit.Companion","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-init/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backend.zkp.ZKPInit.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.protocols.Synchronization.Companion","location":"interpreter/io.github.aplcornell.viaduct.protocols/-synchronization/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.protocols.Synchronization.Companion"]},{"name":"object Companion : ProtocolBackend","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.Companion","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/-companion/index.html","searchKeys":["Companion","object Companion : ProtocolBackend","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.Companion"]},{"name":"object Companion : ProtocolBackend","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.Companion","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/index.html","searchKeys":["Companion","object Companion : ProtocolBackend","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.Companion"]},{"name":"object HashedNullObject : CommitmentProtocolCleartextInterpreter.HashedObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/index.html","searchKeys":["HashedNullObject","object HashedNullObject : CommitmentProtocolCleartextInterpreter.HashedObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject"]},{"name":"object Hashing","description":"io.github.aplcornell.viaduct.backend.commitment.Hashing","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashing/index.html","searchKeys":["Hashing","object Hashing","io.github.aplcornell.viaduct.backend.commitment.Hashing"]},{"name":"object NullObject : CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.NullObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-null-object/index.html","searchKeys":["NullObject","object NullObject : CleartextClassObject","io.github.aplcornell.viaduct.backend.NullObject"]},{"name":"object ShutdownMessage : ViaductMessage","description":"io.github.aplcornell.viaduct.backend.ShutdownMessage","location":"interpreter/io.github.aplcornell.viaduct.backend/-shutdown-message/index.html","searchKeys":["ShutdownMessage","object ShutdownMessage : ViaductMessage","io.github.aplcornell.viaduct.backend.ShutdownMessage"]},{"name":"object ZKPNullObject : ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-null-object/index.html","searchKeys":["ZKPNullObject","object ZKPNullObject : ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPNullObject"]},{"name":"object ZKPProtocolInterpreterFactory : ProtocolBackend","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProtocolInterpreterFactory","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-protocol-interpreter-factory/index.html","searchKeys":["ZKPProtocolInterpreterFactory","object ZKPProtocolInterpreterFactory : ProtocolBackend","io.github.aplcornell.viaduct.backend.zkp.ZKPProtocolInterpreterFactory"]},{"name":"open class BoolVector : AbstractList<E> , RandomAccess","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/index.html","searchKeys":["BoolVector","open class BoolVector : AbstractList<E> , RandomAccess","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector"]},{"name":"open class ByteBuf","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-byte-buf/index.html","searchKeys":["ByteBuf","open class ByteBuf","io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf"]},{"name":"open class CharVector : AbstractList<E> , RandomAccess","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/index.html","searchKeys":["CharVector","open class CharVector : AbstractList<E> , RandomAccess","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector"]},{"name":"open class IntVector : AbstractList<E> , RandomAccess","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/index.html","searchKeys":["IntVector","open class IntVector : AbstractList<E> , RandomAccess","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector"]},{"name":"open class Keypair","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Keypair","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-keypair/index.html","searchKeys":["Keypair","open class Keypair","io.github.aplcornell.viaduct.libsnarkwrapper.Keypair"]},{"name":"open class R1CSInstance","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/index.html","searchKeys":["R1CSInstance","open class R1CSInstance","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance"]},{"name":"open class SWIGTYPE_p_libsnark__pb_variableT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__pb_variableT_field128_t","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__pb_variable-t_field128_t/index.html","searchKeys":["SWIGTYPE_p_libsnark__pb_variableT_field128_t","open class SWIGTYPE_p_libsnark__pb_variableT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__pb_variableT_field128_t"]},{"name":"open class SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__pb_variable_array-t_field128_t/index.html","searchKeys":["SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","open class SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t"]},{"name":"open class SWIGTYPE_p_libsnark__protoboardT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__protoboardT_field128_t","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__protoboard-t_field128_t/index.html","searchKeys":["SWIGTYPE_p_libsnark__protoboardT_field128_t","open class SWIGTYPE_p_libsnark__protoboardT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__protoboardT_field128_t"]},{"name":"open class SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_libsnark__r1cs_constraint_system-t_libff__-fr-t_libsnark__default_r1cs_ppzksnark_pp_t_t/index.html","searchKeys":["SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","open class SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t"]},{"name":"open class SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-s-w-i-g-t-y-p-e_p_std__vector-t_libff__-fr-t_libsnark__default_r1cs_ppzksnark_pp_t_t/index.html","searchKeys":["SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","open class SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t","io.github.aplcornell.viaduct.libsnarkwrapper.SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t"]},{"name":"open class ShaResult","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/index.html","searchKeys":["ShaResult","open class ShaResult","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult"]},{"name":"open class Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Var","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var/index.html","searchKeys":["Var","open class Var","io.github.aplcornell.viaduct.libsnarkwrapper.Var"]},{"name":"open class VarArray","description":"io.github.aplcornell.viaduct.libsnarkwrapper.VarArray","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var-array/index.html","searchKeys":["VarArray","open class VarArray","io.github.aplcornell.viaduct.libsnarkwrapper.VarArray"]},{"name":"open class libsnarkwrapper","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/index.html","searchKeys":["libsnarkwrapper","open class libsnarkwrapper","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper"]},{"name":"open class libsnarkwrapperJNI","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper-j-n-i/index.html","searchKeys":["libsnarkwrapperJNI","open class libsnarkwrapperJNI","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapperJNI"]},{"name":"open fun AddEquality(a: Var, b: Var)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.AddEquality","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/-add-equality.html","searchKeys":["AddEquality","open fun AddEquality(a: Var, b: Var)","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.AddEquality"]},{"name":"open fun BoolVector()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/-bool-vector.html","searchKeys":["BoolVector","open fun BoolVector()","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector"]},{"name":"open fun BoolVector(count: Int, value: Boolean)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/-bool-vector.html","searchKeys":["BoolVector","open fun BoolVector(count: Int, value: Boolean)","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector"]},{"name":"open fun BoolVector(initialElements: Array<Boolean>)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/-bool-vector.html","searchKeys":["BoolVector","open fun BoolVector(initialElements: Array<Boolean>)","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector"]},{"name":"open fun BoolVector(initialElements: Iterable<Boolean>)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/-bool-vector.html","searchKeys":["BoolVector","open fun BoolVector(initialElements: Iterable<Boolean>)","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector"]},{"name":"open fun BoolVector(other: BoolVector)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/-bool-vector.html","searchKeys":["BoolVector","open fun BoolVector(other: BoolVector)","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.BoolVector"]},{"name":"open fun ByteBuf()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.ByteBuf","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-byte-buf/-byte-buf.html","searchKeys":["ByteBuf","open fun ByteBuf()","io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.ByteBuf"]},{"name":"open fun CharVector()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/-char-vector.html","searchKeys":["CharVector","open fun CharVector()","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector"]},{"name":"open fun CharVector(count: Int, value: Char)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/-char-vector.html","searchKeys":["CharVector","open fun CharVector(count: Int, value: Char)","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector"]},{"name":"open fun CharVector(initialElements: Array<Char>)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/-char-vector.html","searchKeys":["CharVector","open fun CharVector(initialElements: Array<Char>)","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector"]},{"name":"open fun CharVector(initialElements: Iterable<Character>)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/-char-vector.html","searchKeys":["CharVector","open fun CharVector(initialElements: Iterable<Character>)","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector"]},{"name":"open fun CharVector(other: CharVector)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/-char-vector.html","searchKeys":["CharVector","open fun CharVector(other: CharVector)","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.CharVector"]},{"name":"open fun IntVector()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/-int-vector.html","searchKeys":["IntVector","open fun IntVector()","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector"]},{"name":"open fun IntVector(count: Int, value: Int)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/-int-vector.html","searchKeys":["IntVector","open fun IntVector(count: Int, value: Int)","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector"]},{"name":"open fun IntVector(initialElements: Array<Int>)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/-int-vector.html","searchKeys":["IntVector","open fun IntVector(initialElements: Array<Int>)","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector"]},{"name":"open fun IntVector(initialElements: Iterable<Integer>)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/-int-vector.html","searchKeys":["IntVector","open fun IntVector(initialElements: Iterable<Integer>)","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector"]},{"name":"open fun IntVector(other: IntVector)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/-int-vector.html","searchKeys":["IntVector","open fun IntVector(other: IntVector)","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.IntVector"]},{"name":"open fun Keypair()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.Keypair","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-keypair/-keypair.html","searchKeys":["Keypair","open fun Keypair()","io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.Keypair"]},{"name":"open fun R1CSInstance()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.R1CSInstance","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/-r1-c-s-instance.html","searchKeys":["R1CSInstance","open fun R1CSInstance()","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.R1CSInstance"]},{"name":"open fun ShaResult()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.ShaResult","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/-sha-result.html","searchKeys":["ShaResult","open fun ShaResult()","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.ShaResult"]},{"name":"open fun Var()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Var.Var","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var/-var.html","searchKeys":["Var","open fun Var()","io.github.aplcornell.viaduct.libsnarkwrapper.Var.Var"]},{"name":"open fun VarArray()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.VarArray","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var-array/-var-array.html","searchKeys":["VarArray","open fun VarArray()","io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.VarArray"]},{"name":"open fun add(e: Boolean): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.add","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/add.html","searchKeys":["add","open fun add(e: Boolean): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.add"]},{"name":"open fun add(e: Character): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.add","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/add.html","searchKeys":["add","open fun add(e: Character): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.add"]},{"name":"open fun add(e: Integer): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.add","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/add.html","searchKeys":["add","open fun add(e: Integer): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.add"]},{"name":"open fun add(index: Int, e: Boolean)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.add","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/add.html","searchKeys":["add","open fun add(index: Int, e: Boolean)","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.add"]},{"name":"open fun add(index: Int, e: Character)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.add","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/add.html","searchKeys":["add","open fun add(index: Int, e: Character)","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.add"]},{"name":"open fun add(index: Int, e: Integer)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.add","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/add.html","searchKeys":["add","open fun add(index: Int, e: Integer)","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.add"]},{"name":"open fun addEquality(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t, a: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t, b: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.addEquality","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/add-equality.html","searchKeys":["addEquality","open fun addEquality(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t, a: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t, b: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.addEquality"]},{"name":"open fun addEquality(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t, a: Var, b: Var)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.addEquality","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/add-equality.html","searchKeys":["addEquality","open fun addEquality(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t, a: Var, b: Var)","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.addEquality"]},{"name":"open fun bvec_to_string(bitvector: BoolVector): String","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.bvec_to_string","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/bvec_to_string.html","searchKeys":["bvec_to_string","open fun bvec_to_string(bitvector: BoolVector): String","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.bvec_to_string"]},{"name":"open fun capacity(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.capacity","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/capacity.html","searchKeys":["capacity","open fun capacity(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.capacity"]},{"name":"open fun capacity(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.capacity","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/capacity.html","searchKeys":["capacity","open fun capacity(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.capacity"]},{"name":"open fun capacity(): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.capacity","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/capacity.html","searchKeys":["capacity","open fun capacity(): Long","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.capacity"]},{"name":"open fun clear()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.clear","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/clear.html","searchKeys":["clear","open fun clear()","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.clear"]},{"name":"open fun clear()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.clear","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/clear.html","searchKeys":["clear","open fun clear()","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.clear"]},{"name":"open fun clear()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.clear","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/clear.html","searchKeys":["clear","open fun clear()","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.clear"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-byte-buf/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-keypair/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Var.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.Var.delete"]},{"name":"open fun delete()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.delete","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var-array/delete.html","searchKeys":["delete","open fun delete()","io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.delete"]},{"name":"open fun divide_rounding_up(dividend: Long, divisor: Long): Long","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.divide_rounding_up","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/divide_rounding_up.html","searchKeys":["divide_rounding_up","open fun divide_rounding_up(dividend: Long, divisor: Long): Long","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.divide_rounding_up"]},{"name":"open fun ensure_satisfied(CS: SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t, primary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t, auxiliary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.ensure_satisfied","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/ensure_satisfied.html","searchKeys":["ensure_satisfied","open fun ensure_satisfied(CS: SWIGTYPE_p_libsnark__r1cs_constraint_systemT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t, primary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t, auxiliary_input: SWIGTYPE_p_std__vectorT_libff__FrT_libsnark__default_r1cs_ppzksnark_pp_t_t): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.ensure_satisfied"]},{"name":"open fun ensure_satisfied(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.ensure_satisfied","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/ensure_satisfied.html","searchKeys":["ensure_satisfied","open fun ensure_satisfied(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.ensure_satisfied"]},{"name":"open fun genKeypair(): Keypair","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.genKeypair","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/gen-keypair.html","searchKeys":["genKeypair","open fun genKeypair(): Keypair","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.genKeypair"]},{"name":"open fun generateProof(provingKey: ByteBuf): ByteBuf","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.generateProof","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/generate-proof.html","searchKeys":["generateProof","open fun generateProof(provingKey: ByteBuf): ByteBuf","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.generateProof"]},{"name":"open fun get(index: Int): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/get.html","searchKeys":["get","open fun get(index: Int): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.get"]},{"name":"open fun get(index: Int): Character","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/get.html","searchKeys":["get","open fun get(index: Int): Character","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.get"]},{"name":"open fun get(index: Int): Integer","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.get","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/get.html","searchKeys":["get","open fun get(index: Int): Integer","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.get"]},{"name":"open fun getContents(): String","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.getContents","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-byte-buf/get-contents.html","searchKeys":["getContents","open fun getContents(): String","io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.getContents"]},{"name":"open fun getData(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getData","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/get-data.html","searchKeys":["getData","open fun getData(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getData"]},{"name":"open fun getIsProver(): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.getIsProver","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/get-is-prover.html","searchKeys":["getIsProver","open fun getIsProver(): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.getIsProver"]},{"name":"open fun getNonce(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getNonce","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/get-nonce.html","searchKeys":["getNonce","open fun getNonce(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getNonce"]},{"name":"open fun getOutput(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getOutput","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/get-output.html","searchKeys":["getOutput","open fun getOutput(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getOutput"]},{"name":"open fun getProving_key(): ByteBuf","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.getProving_key","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-keypair/get-proving_key.html","searchKeys":["getProving_key","open fun getProving_key(): ByteBuf","io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.getProving_key"]},{"name":"open fun getVal_var(): SWIGTYPE_p_libsnark__pb_variableT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getVal_var","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/get-val_var.html","searchKeys":["getVal_var","open fun getVal_var(): SWIGTYPE_p_libsnark__pb_variableT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.getVal_var"]},{"name":"open fun getValue(): SWIGTYPE_p_libsnark__pb_variableT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Var.getValue","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var/get-value.html","searchKeys":["getValue","open fun getValue(): SWIGTYPE_p_libsnark__pb_variableT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.Var.getValue"]},{"name":"open fun getValues(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","description":"io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.getValues","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var-array/get-values.html","searchKeys":["getValues","open fun getValues(): SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t","io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.getValues"]},{"name":"open fun getVerification_key(): ByteBuf","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.getVerification_key","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-keypair/get-verification_key.html","searchKeys":["getVerification_key","open fun getVerification_key(): ByteBuf","io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.getVerification_key"]},{"name":"open fun get_data(): Array<Byte>","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.get_data","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-byte-buf/get_data.html","searchKeys":["get_data","open fun get_data(): Array<Byte>","io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.get_data"]},{"name":"open fun get_sha_nonce_val(nonce: ByteBuf, val: Long): ByteBuf","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.get_sha_nonce_val","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/get_sha_nonce_val.html","searchKeys":["get_sha_nonce_val","open fun get_sha_nonce_val(nonce: ByteBuf, val: Long): ByteBuf","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.get_sha_nonce_val"]},{"name":"open fun initZKP()","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.initZKP","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/init-z-k-p.html","searchKeys":["initZKP","open fun initZKP()","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.initZKP"]},{"name":"open fun isEmpty(): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.isEmpty","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/is-empty.html","searchKeys":["isEmpty","open fun isEmpty(): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.isEmpty"]},{"name":"open fun isEmpty(): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.isEmpty","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/is-empty.html","searchKeys":["isEmpty","open fun isEmpty(): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.isEmpty"]},{"name":"open fun isEmpty(): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.isEmpty","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/is-empty.html","searchKeys":["isEmpty","open fun isEmpty(): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.isEmpty"]},{"name":"open fun mkAdd(lhs: Var, rhs: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkAdd","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-add.html","searchKeys":["mkAdd","open fun mkAdd(lhs: Var, rhs: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkAdd"]},{"name":"open fun mkAnd(lhs: Var, rhs: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkAnd","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-and.html","searchKeys":["mkAnd","open fun mkAnd(lhs: Var, rhs: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkAnd"]},{"name":"open fun mkByteBuf(data: Array<Byte>): ByteBuf","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.mkByteBuf","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/mk-byte-buf.html","searchKeys":["mkByteBuf","open fun mkByteBuf(data: Array<Byte>): ByteBuf","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.mkByteBuf"]},{"name":"open fun mkEqualTo(a: Var, b: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkEqualTo","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-equal-to.html","searchKeys":["mkEqualTo","open fun mkEqualTo(a: Var, b: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkEqualTo"]},{"name":"open fun mkLE(a: Var, b: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkLE","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-l-e.html","searchKeys":["mkLE","open fun mkLE(a: Var, b: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkLE"]},{"name":"open fun mkLessThan(a: Var, b: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkLessThan","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-less-than.html","searchKeys":["mkLessThan","open fun mkLessThan(a: Var, b: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkLessThan"]},{"name":"open fun mkMult(lhs: Var, rhs: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkMult","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-mult.html","searchKeys":["mkMult","open fun mkMult(lhs: Var, rhs: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkMult"]},{"name":"open fun mkMux(b: Var, lhs: Var, rhs: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkMux","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-mux.html","searchKeys":["mkMux","open fun mkMux(b: Var, lhs: Var, rhs: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkMux"]},{"name":"open fun mkNot(v: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkNot","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-not.html","searchKeys":["mkNot","open fun mkNot(v: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkNot"]},{"name":"open fun mkOr(lhs: Var, rhs: Var): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkOr","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-or.html","searchKeys":["mkOr","open fun mkOr(lhs: Var, rhs: Var): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkOr"]},{"name":"open fun mkPrivateValProver(val: Long, hash: VarArray, nonce: VarArray): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPrivateValProver","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-private-val-prover.html","searchKeys":["mkPrivateValProver","open fun mkPrivateValProver(val: Long, hash: VarArray, nonce: VarArray): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPrivateValProver"]},{"name":"open fun mkPrivateValVerifier(hash: VarArray, nonce: VarArray): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPrivateValVerifier","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-private-val-verifier.html","searchKeys":["mkPrivateValVerifier","open fun mkPrivateValVerifier(hash: VarArray, nonce: VarArray): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPrivateValVerifier"]},{"name":"open fun mkPublicBitvec(bits: BoolVector): VarArray","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPublicBitvec","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-public-bitvec.html","searchKeys":["mkPublicBitvec","open fun mkPublicBitvec(bits: BoolVector): VarArray","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPublicBitvec"]},{"name":"open fun mkPublicBitvec(buf: ByteBuf): VarArray","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPublicBitvec","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-public-bitvec.html","searchKeys":["mkPublicBitvec","open fun mkPublicBitvec(buf: ByteBuf): VarArray","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPublicBitvec"]},{"name":"open fun mkPublicVal(val: Long): Var","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPublicVal","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/mk-public-val.html","searchKeys":["mkPublicVal","open fun mkPublicVal(val: Long): Var","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.mkPublicVal"]},{"name":"open fun mkSHA(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t, v: Long, nonce: String, isProver: Boolean): ShaResult","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.mkSHA","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/mk-s-h-a.html","searchKeys":["mkSHA","open fun mkSHA(pb: SWIGTYPE_p_libsnark__protoboardT_field128_t, v: Long, nonce: String, isProver: Boolean): ShaResult","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.mkSHA"]},{"name":"open fun remove(index: Int): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.remove","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/remove.html","searchKeys":["remove","open fun remove(index: Int): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.remove"]},{"name":"open fun remove(index: Int): Character","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.remove","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/remove.html","searchKeys":["remove","open fun remove(index: Int): Character","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.remove"]},{"name":"open fun remove(index: Int): Integer","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.remove","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/remove.html","searchKeys":["remove","open fun remove(index: Int): Integer","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.remove"]},{"name":"open fun reserve(n: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.reserve","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/reserve.html","searchKeys":["reserve","open fun reserve(n: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.reserve"]},{"name":"open fun reserve(n: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.reserve","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/reserve.html","searchKeys":["reserve","open fun reserve(n: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.reserve"]},{"name":"open fun reserve(n: Long)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.reserve","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/reserve.html","searchKeys":["reserve","open fun reserve(n: Long)","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.reserve"]},{"name":"open fun set(index: Int, e: Boolean): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/set.html","searchKeys":["set","open fun set(index: Int, e: Boolean): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.set"]},{"name":"open fun set(index: Int, e: Character): Character","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/set.html","searchKeys":["set","open fun set(index: Int, e: Character): Character","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.set"]},{"name":"open fun set(index: Int, e: Integer): Integer","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.set","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/set.html","searchKeys":["set","open fun set(index: Int, e: Integer): Integer","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.set"]},{"name":"open fun setContents(value: String)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.setContents","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-byte-buf/set-contents.html","searchKeys":["setContents","open fun setContents(value: String)","io.github.aplcornell.viaduct.libsnarkwrapper.ByteBuf.setContents"]},{"name":"open fun setData(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setData","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/set-data.html","searchKeys":["setData","open fun setData(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setData"]},{"name":"open fun setIsProver(value: Boolean)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.setIsProver","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/set-is-prover.html","searchKeys":["setIsProver","open fun setIsProver(value: Boolean)","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.setIsProver"]},{"name":"open fun setNonce(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setNonce","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/set-nonce.html","searchKeys":["setNonce","open fun setNonce(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setNonce"]},{"name":"open fun setOutput(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setOutput","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/set-output.html","searchKeys":["setOutput","open fun setOutput(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setOutput"]},{"name":"open fun setProving_key(value: ByteBuf)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.setProving_key","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-keypair/set-proving_key.html","searchKeys":["setProving_key","open fun setProving_key(value: ByteBuf)","io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.setProving_key"]},{"name":"open fun setVal_var(value: SWIGTYPE_p_libsnark__pb_variableT_field128_t)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setVal_var","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-sha-result/set-val_var.html","searchKeys":["setVal_var","open fun setVal_var(value: SWIGTYPE_p_libsnark__pb_variableT_field128_t)","io.github.aplcornell.viaduct.libsnarkwrapper.ShaResult.setVal_var"]},{"name":"open fun setValue(value: SWIGTYPE_p_libsnark__pb_variableT_field128_t)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Var.setValue","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var/set-value.html","searchKeys":["setValue","open fun setValue(value: SWIGTYPE_p_libsnark__pb_variableT_field128_t)","io.github.aplcornell.viaduct.libsnarkwrapper.Var.setValue"]},{"name":"open fun setValues(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.setValues","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-var-array/set-values.html","searchKeys":["setValues","open fun setValues(value: SWIGTYPE_p_libsnark__pb_variable_arrayT_field128_t)","io.github.aplcornell.viaduct.libsnarkwrapper.VarArray.setValues"]},{"name":"open fun setVerification_key(value: ByteBuf)","description":"io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.setVerification_key","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-keypair/set-verification_key.html","searchKeys":["setVerification_key","open fun setVerification_key(value: ByteBuf)","io.github.aplcornell.viaduct.libsnarkwrapper.Keypair.setVerification_key"]},{"name":"open fun size(): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.size","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-bool-vector/size.html","searchKeys":["size","open fun size(): Int","io.github.aplcornell.viaduct.libsnarkwrapper.BoolVector.size"]},{"name":"open fun size(): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.size","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-char-vector/size.html","searchKeys":["size","open fun size(): Int","io.github.aplcornell.viaduct.libsnarkwrapper.CharVector.size"]},{"name":"open fun size(): Int","description":"io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.size","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-int-vector/size.html","searchKeys":["size","open fun size(): Int","io.github.aplcornell.viaduct.libsnarkwrapper.IntVector.size"]},{"name":"open fun string_to_bvec(data: String): BoolVector","description":"io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.string_to_bvec","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/libsnarkwrapper/string_to_bvec.html","searchKeys":["string_to_bvec","open fun string_to_bvec(data: String): BoolVector","io.github.aplcornell.viaduct.libsnarkwrapper.libsnarkwrapper.string_to_bvec"]},{"name":"open fun verifyProof(verificationKey: ByteBuf, proof: ByteBuf): Boolean","description":"io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.verifyProof","location":"interpreter/io.github.aplcornell.viaduct.libsnarkwrapper/-r1-c-s-instance/verify-proof.html","searchKeys":["verifyProof","open fun verifyProof(verificationKey: ByteBuf, proof: ByteBuf): Boolean","io.github.aplcornell.viaduct.libsnarkwrapper.R1CSInstance.verifyProof"]},{"name":"open override fun authority(): Label","description":"io.github.aplcornell.viaduct.protocols.Synchronization.authority","location":"interpreter/io.github.aplcornell.viaduct.protocols/-synchronization/authority.html","searchKeys":["authority","open override fun authority(): Label","io.github.aplcornell.viaduct.protocols.Synchronization.authority"]},{"name":"open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.Companion.buildProtocolInterpreters","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/-companion/build-protocol-interpreters.html","searchKeys":["buildProtocolInterpreters","open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.Companion.buildProtocolInterpreters"]},{"name":"open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.Companion.buildProtocolInterpreters","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/build-protocol-interpreters.html","searchKeys":["buildProtocolInterpreters","open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.Companion.buildProtocolInterpreters"]},{"name":"open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolInterpreterFactory.buildProtocolInterpreters","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-interpreter-factory/build-protocol-interpreters.html","searchKeys":["buildProtocolInterpreters","open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolInterpreterFactory.buildProtocolInterpreters"]},{"name":"open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProtocolInterpreterFactory.buildProtocolInterpreters","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-protocol-interpreter-factory/build-protocol-interpreters.html","searchKeys":["buildProtocolInterpreters","open override fun buildProtocolInterpreters(host: Host, program: ProgramNode, protocols: Set<Protocol>, protocolAnalysis: ProtocolAnalysis, runtime: ViaductRuntime, connectionMap: Map<Host, HostAddress>): Iterable<ProtocolInterpreter>","io.github.aplcornell.viaduct.backend.zkp.ZKPProtocolInterpreterFactory.buildProtocolInterpreters"]},{"name":"open override fun getContextMarker(): Int","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.getContextMarker","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/get-context-marker.html","searchKeys":["getContextMarker","open override fun getContextMarker(): Int","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.getContextMarker"]},{"name":"open override fun getNullObject(): CommitmentProtocolCleartextInterpreter.HashedObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/get-null-object.html","searchKeys":["getNullObject","open override fun getNullObject(): CommitmentProtocolCleartextInterpreter.HashedObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.getNullObject"]},{"name":"open override fun getNullObject(): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/get-null-object.html","searchKeys":["getNullObject","open override fun getNullObject(): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.getNullObject"]},{"name":"open override fun getNullObject(): ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/get-null-object.html","searchKeys":["getNullObject","open override fun getNullObject(): ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.getNullObject"]},{"name":"open override fun getNullObject(): ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/get-null-object.html","searchKeys":["getNullObject","open override fun getNullObject(): ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.getNullObject"]},{"name":"open override fun getNullObject(protocol: Protocol): ABYProtocolInterpreter.ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/get-null-object.html","searchKeys":["getNullObject","open override fun getNullObject(protocol: Protocol): ABYProtocolInterpreter.ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.getNullObject"]},{"name":"open override fun getNullObject(protocol: Protocol): CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/get-null-object.html","searchKeys":["getNullObject","open override fun getNullObject(protocol: Protocol): CleartextClassObject","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.getNullObject"]},{"name":"open override fun getNullObject(protocol: Protocol): Obj","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.getNullObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/get-null-object.html","searchKeys":["getNullObject","open override fun getNullObject(protocol: Protocol): Obj","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.getNullObject"]},{"name":"open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","description":"io.github.aplcornell.viaduct.backend.aby.ABYConstantGate.putGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-constant-gate/put-gate.html","searchKeys":["putGate","open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","io.github.aplcornell.viaduct.backend.aby.ABYConstantGate.putGate"]},{"name":"open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","description":"io.github.aplcornell.viaduct.backend.aby.ABYConversionGate.putGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-conversion-gate/put-gate.html","searchKeys":["putGate","open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","io.github.aplcornell.viaduct.backend.aby.ABYConversionGate.putGate"]},{"name":"open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","description":"io.github.aplcornell.viaduct.backend.aby.ABYDummyInGate.putGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-dummy-in-gate/put-gate.html","searchKeys":["putGate","open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","io.github.aplcornell.viaduct.backend.aby.ABYDummyInGate.putGate"]},{"name":"open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","description":"io.github.aplcornell.viaduct.backend.aby.ABYInGate.putGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-in-gate/put-gate.html","searchKeys":["putGate","open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","io.github.aplcornell.viaduct.backend.aby.ABYInGate.putGate"]},{"name":"open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","description":"io.github.aplcornell.viaduct.backend.aby.ABYOperationGate.putGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-operation-gate/put-gate.html","searchKeys":["putGate","open override fun putGate(builder: ABYCircuitBuilder, childShares: List<Share>): Share","io.github.aplcornell.viaduct.backend.aby.ABYOperationGate.putGate"]},{"name":"open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/query.html","searchKeys":["query","open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject.query"]},{"name":"open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/query.html","searchKeys":["query","open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject.query"]},{"name":"open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYNullObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/query.html","searchKeys":["query","open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYNullObject.query"]},{"name":"open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/query.html","searchKeys":["query","open override fun query(circuitType: ABYCircuitType, query: QueryNameNode, arguments: List<AtomicExpressionNode>): ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): Hashed<Value>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.query","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): List<Byte>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.query","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<AtomicExpressionNode>): List<Byte>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.backend.ImmutableCellObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend/-immutable-cell-object/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<Value>): Value","io.github.aplcornell.viaduct.backend.ImmutableCellObject.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.backend.MutableCellObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend/-mutable-cell-object/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<Value>): Value","io.github.aplcornell.viaduct.backend.MutableCellObject.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.backend.NullObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend/-null-object/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<Value>): Value","io.github.aplcornell.viaduct.backend.NullObject.query"]},{"name":"open override fun query(query: QueryNameNode, arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.backend.VectorObject.query","location":"interpreter/io.github.aplcornell.viaduct.backend/-vector-object/query.html","searchKeys":["query","open override fun query(query: QueryNameNode, arguments: List<Value>): Value","io.github.aplcornell.viaduct.backend.VectorObject.query"]},{"name":"open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-immutable-cell-object/update.html","searchKeys":["update","open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYImmutableCellObject.update"]},{"name":"open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-mutable-cell-object/update.html","searchKeys":["update","open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYMutableCellObject.update"]},{"name":"open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYNullObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-null-object/update.html","searchKeys":["update","open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYNullObject.update"]},{"name":"open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/update.html","searchKeys":["update","open override fun update(circuitType: ABYCircuitType, update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.update","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.update","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<AtomicExpressionNode>)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<Value>)","description":"io.github.aplcornell.viaduct.backend.ImmutableCellObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend/-immutable-cell-object/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<Value>)","io.github.aplcornell.viaduct.backend.ImmutableCellObject.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<Value>)","description":"io.github.aplcornell.viaduct.backend.MutableCellObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend/-mutable-cell-object/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<Value>)","io.github.aplcornell.viaduct.backend.MutableCellObject.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<Value>)","description":"io.github.aplcornell.viaduct.backend.NullObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend/-null-object/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<Value>)","io.github.aplcornell.viaduct.backend.NullObject.update"]},{"name":"open override fun update(update: UpdateNameNode, arguments: List<Value>)","description":"io.github.aplcornell.viaduct.backend.VectorObject.update","location":"interpreter/io.github.aplcornell.viaduct.backend/-vector-object/update.html","searchKeys":["update","open override fun update(update: UpdateNameNode, arguments: List<Value>)","io.github.aplcornell.viaduct.backend.VectorObject.update"]},{"name":"open override val arguments: Map<String, Value>","description":"io.github.aplcornell.viaduct.protocols.Synchronization.arguments","location":"interpreter/io.github.aplcornell.viaduct.protocols/-synchronization/arguments.html","searchKeys":["arguments","open override val arguments: Map<String, Value>","io.github.aplcornell.viaduct.protocols.Synchronization.arguments"]},{"name":"open override val availableProtocols: Set<Protocol>","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.availableProtocols","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/available-protocols.html","searchKeys":["availableProtocols","open override val availableProtocols: Set<Protocol>","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.availableProtocols"]},{"name":"open override val availableProtocols: Set<Protocol>","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.availableProtocols","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/available-protocols.html","searchKeys":["availableProtocols","open override val availableProtocols: Set<Protocol>","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.availableProtocols"]},{"name":"open override val availableProtocols: Set<Protocol>","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.availableProtocols","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/available-protocols.html","searchKeys":["availableProtocols","open override val availableProtocols: Set<Protocol>","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.availableProtocols"]},{"name":"open override val availableProtocols: Set<Protocol>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.availableProtocols","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/available-protocols.html","searchKeys":["availableProtocols","open override val availableProtocols: Set<Protocol>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.availableProtocols"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.protocols.Synchronization.protocolName","location":"interpreter/io.github.aplcornell.viaduct.protocols/-synchronization/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.protocols.Synchronization.protocolName"]},{"name":"open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): CommitmentProtocolCleartextInterpreter.HashedObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.buildExpressionObject"]},{"name":"open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.buildExpressionObject"]},{"name":"open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.buildExpressionObject"]},{"name":"open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","open suspend override fun buildExpressionObject(expr: AtomicExpressionNode): ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.buildExpressionObject"]},{"name":"open suspend override fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): ABYProtocolInterpreter.ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","open suspend override fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): ABYProtocolInterpreter.ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.buildExpressionObject"]},{"name":"open suspend override fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","open suspend override fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): CleartextClassObject","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.buildExpressionObject"]},{"name":"open suspend override fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): Obj","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildExpressionObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/build-expression-object.html","searchKeys":["buildExpressionObject","open suspend override fun buildExpressionObject(protocol: Protocol, expr: AtomicExpressionNode): Obj","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildExpressionObject"]},{"name":"open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): CommitmentProtocolCleartextInterpreter.HashedObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/build-object.html","searchKeys":["buildObject","open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): CommitmentProtocolCleartextInterpreter.HashedObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.buildObject"]},{"name":"open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/build-object.html","searchKeys":["buildObject","open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): CommitmentProtocolHashReplicaInterpreter.CommitmentObject","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.buildObject"]},{"name":"open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/build-object.html","searchKeys":["buildObject","open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.buildObject"]},{"name":"open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/build-object.html","searchKeys":["buildObject","open suspend override fun buildObject(className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.buildObject"]},{"name":"open suspend override fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): ABYProtocolInterpreter.ABYClassObject","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/build-object.html","searchKeys":["buildObject","open suspend override fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): ABYProtocolInterpreter.ABYClassObject","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.buildObject"]},{"name":"open suspend override fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/build-object.html","searchKeys":["buildObject","open suspend override fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): CleartextClassObject","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.buildObject"]},{"name":"open suspend override fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): Obj","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/build-object.html","searchKeys":["buildObject","open suspend override fun buildObject(protocol: Protocol, className: ClassName, typeArguments: List<ValueType>, arguments: List<AtomicExpressionNode>): Obj","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.buildObject"]},{"name":"open suspend override fun getInput(): Value","description":"io.github.aplcornell.viaduct.backend.io.FileStrategy.getInput","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-file-strategy/get-input.html","searchKeys":["getInput","open suspend override fun getInput(): Value","io.github.aplcornell.viaduct.backend.io.FileStrategy.getInput"]},{"name":"open suspend override fun getInput(): Value","description":"io.github.aplcornell.viaduct.backend.io.TerminalIO.getInput","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-terminal-i-o/get-input.html","searchKeys":["getInput","open suspend override fun getInput(): Value","io.github.aplcornell.viaduct.backend.io.TerminalIO.getInput"]},{"name":"open suspend override fun popContext()","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.popContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/pop-context.html","searchKeys":["popContext","open suspend override fun popContext()","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.popContext"]},{"name":"open suspend override fun popContext()","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.popContext","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/pop-context.html","searchKeys":["popContext","open suspend override fun popContext()","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.popContext"]},{"name":"open suspend override fun popContext()","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.popContext","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/pop-context.html","searchKeys":["popContext","open suspend override fun popContext()","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.popContext"]},{"name":"open suspend override fun popContext()","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.popContext","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/pop-context.html","searchKeys":["popContext","open suspend override fun popContext()","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.popContext"]},{"name":"open suspend override fun popContext()","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.popContext","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/pop-context.html","searchKeys":["popContext","open suspend override fun popContext()","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.popContext"]},{"name":"open suspend override fun popContext()","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.popContext","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/pop-context.html","searchKeys":["popContext","open suspend override fun popContext()","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.popContext"]},{"name":"open suspend override fun popFunctionContext()","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.popFunctionContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/pop-function-context.html","searchKeys":["popFunctionContext","open suspend override fun popFunctionContext()","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.popFunctionContext"]},{"name":"open suspend override fun pushContext()","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.pushContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/push-context.html","searchKeys":["pushContext","open suspend override fun pushContext()","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.pushContext"]},{"name":"open suspend override fun pushContext()","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.pushContext","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/push-context.html","searchKeys":["pushContext","open suspend override fun pushContext()","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.pushContext"]},{"name":"open suspend override fun pushContext()","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.pushContext","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/push-context.html","searchKeys":["pushContext","open suspend override fun pushContext()","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.pushContext"]},{"name":"open suspend override fun pushContext()","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.pushContext","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/push-context.html","searchKeys":["pushContext","open suspend override fun pushContext()","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.pushContext"]},{"name":"open suspend override fun pushContext()","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.pushContext","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/push-context.html","searchKeys":["pushContext","open suspend override fun pushContext()","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.pushContext"]},{"name":"open suspend override fun pushContext()","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.pushContext","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/push-context.html","searchKeys":["pushContext","open suspend override fun pushContext()","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.pushContext"]},{"name":"open suspend override fun pushFunctionContext(arguments: PersistentMap<ParameterNode, Pair<Protocol, FunctionArgumentNode>>)","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.pushFunctionContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/push-function-context.html","searchKeys":["pushFunctionContext","open suspend override fun pushFunctionContext(arguments: PersistentMap<ParameterNode, Pair<Protocol, FunctionArgumentNode>>)","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.pushFunctionContext"]},{"name":"open suspend override fun recvOutput(value: Value)","description":"io.github.aplcornell.viaduct.backend.io.FileStrategy.recvOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-file-strategy/recv-output.html","searchKeys":["recvOutput","open suspend override fun recvOutput(value: Value)","io.github.aplcornell.viaduct.backend.io.FileStrategy.recvOutput"]},{"name":"open suspend override fun recvOutput(value: Value)","description":"io.github.aplcornell.viaduct.backend.io.TerminalIO.recvOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.io/-terminal-i-o/recv-output.html","searchKeys":["recvOutput","open suspend override fun recvOutput(value: Value)","io.github.aplcornell.viaduct.backend.io.TerminalIO.recvOutput"]},{"name":"open suspend override fun restoreContext(marker: Int)","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.restoreContext","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/restore-context.html","searchKeys":["restoreContext","open suspend override fun restoreContext(marker: Int)","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.restoreContext"]},{"name":"open suspend override fun runGuard(expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-guard.html","searchKeys":["runGuard","open suspend override fun runGuard(expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runGuard"]},{"name":"open suspend override fun runGuard(expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-guard.html","searchKeys":["runGuard","open suspend override fun runGuard(expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runGuard"]},{"name":"open suspend override fun runGuard(expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-guard.html","searchKeys":["runGuard","open suspend override fun runGuard(expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runGuard"]},{"name":"open suspend override fun runGuard(expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-guard.html","searchKeys":["runGuard","open suspend override fun runGuard(expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runGuard"]},{"name":"open suspend override fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/run-guard.html","searchKeys":["runGuard","open suspend override fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runGuard"]},{"name":"open suspend override fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-guard.html","searchKeys":["runGuard","open suspend override fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runGuard"]},{"name":"open suspend override fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runGuard","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-guard.html","searchKeys":["runGuard","open suspend override fun runGuard(protocol: Protocol, expr: AtomicExpressionNode): Value","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runGuard"]},{"name":"open suspend override fun runLet(protocol: Protocol, stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/run-let.html","searchKeys":["runLet","open suspend override fun runLet(protocol: Protocol, stmt: LetNode)","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runLet"]},{"name":"open suspend override fun runLet(protocol: Protocol, stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-let.html","searchKeys":["runLet","open suspend override fun runLet(protocol: Protocol, stmt: LetNode)","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runLet"]},{"name":"open suspend override fun runLet(protocol: Protocol, stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-let.html","searchKeys":["runLet","open suspend override fun runLet(protocol: Protocol, stmt: LetNode)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runLet"]},{"name":"open suspend override fun runLet(stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-let.html","searchKeys":["runLet","open suspend override fun runLet(stmt: LetNode)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runLet"]},{"name":"open suspend override fun runLet(stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-let.html","searchKeys":["runLet","open suspend override fun runLet(stmt: LetNode)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runLet"]},{"name":"open suspend override fun runLet(stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-let.html","searchKeys":["runLet","open suspend override fun runLet(stmt: LetNode)","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runLet"]},{"name":"open suspend override fun runLet(stmt: LetNode)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runLet","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-let.html","searchKeys":["runLet","open suspend override fun runLet(stmt: LetNode)","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runLet"]},{"name":"open suspend override fun runOutput(protocol: Protocol, stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/run-output.html","searchKeys":["runOutput","open suspend override fun runOutput(protocol: Protocol, stmt: OutputNode)","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runOutput"]},{"name":"open suspend override fun runOutput(protocol: Protocol, stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-output.html","searchKeys":["runOutput","open suspend override fun runOutput(protocol: Protocol, stmt: OutputNode)","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runOutput"]},{"name":"open suspend override fun runOutput(protocol: Protocol, stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-output.html","searchKeys":["runOutput","open suspend override fun runOutput(protocol: Protocol, stmt: OutputNode)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runOutput"]},{"name":"open suspend override fun runOutput(stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-output.html","searchKeys":["runOutput","open suspend override fun runOutput(stmt: OutputNode)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runOutput"]},{"name":"open suspend override fun runOutput(stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-output.html","searchKeys":["runOutput","open suspend override fun runOutput(stmt: OutputNode)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runOutput"]},{"name":"open suspend override fun runOutput(stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-output.html","searchKeys":["runOutput","open suspend override fun runOutput(stmt: OutputNode)","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runOutput"]},{"name":"open suspend override fun runOutput(stmt: OutputNode)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runOutput","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-output.html","searchKeys":["runOutput","open suspend override fun runOutput(stmt: OutputNode)","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runOutput"]},{"name":"open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runReceive","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/run-receive.html","searchKeys":["runReceive","open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runReceive"]},{"name":"open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runReceive","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-receive.html","searchKeys":["runReceive","open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runReceive"]},{"name":"open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runReceive","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-receive.html","searchKeys":["runReceive","open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runReceive"]},{"name":"open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runReceive","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-receive.html","searchKeys":["runReceive","open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runReceive"]},{"name":"open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runReceive","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-receive.html","searchKeys":["runReceive","open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runReceive"]},{"name":"open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runReceive","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-receive.html","searchKeys":["runReceive","open suspend override fun runReceive(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runReceive"]},{"name":"open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runSend","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/run-send.html","searchKeys":["runSend","open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runSend"]},{"name":"open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runSend","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-send.html","searchKeys":["runSend","open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runSend"]},{"name":"open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runSend","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-send.html","searchKeys":["runSend","open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runSend"]},{"name":"open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runSend","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-send.html","searchKeys":["runSend","open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runSend"]},{"name":"open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runSend","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-send.html","searchKeys":["runSend","open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runSend"]},{"name":"open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runSend","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-send.html","searchKeys":["runSend","open suspend override fun runSend(sender: LetNode, sendProtocol: Protocol, receiver: SimpleStatementNode, recvProtocol: Protocol, events: ProtocolCommunication)","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runSend"]},{"name":"open suspend override fun runSimpleStatement(protocol: Protocol, stmt: SimpleStatementNode)","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runSimpleStatement","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/run-simple-statement.html","searchKeys":["runSimpleStatement","open suspend override fun runSimpleStatement(protocol: Protocol, stmt: SimpleStatementNode)","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.runSimpleStatement"]},{"name":"open suspend override fun runUpdate(protocol: Protocol, stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-protocol-interpreter/run-update.html","searchKeys":["runUpdate","open suspend override fun runUpdate(protocol: Protocol, stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.CleartextProtocolInterpreter.runUpdate"]},{"name":"open suspend override fun runUpdate(protocol: Protocol, stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend/-single-protocol-interpreter/run-update.html","searchKeys":["runUpdate","open suspend override fun runUpdate(protocol: Protocol, stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.SingleProtocolInterpreter.runUpdate"]},{"name":"open suspend override fun runUpdate(protocol: Protocol, stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/run-update.html","searchKeys":["runUpdate","open suspend override fun runUpdate(protocol: Protocol, stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.runUpdate"]},{"name":"open suspend override fun runUpdate(stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/run-update.html","searchKeys":["runUpdate","open suspend override fun runUpdate(stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.runUpdate"]},{"name":"open suspend override fun runUpdate(stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/run-update.html","searchKeys":["runUpdate","open suspend override fun runUpdate(stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.runUpdate"]},{"name":"open suspend override fun runUpdate(stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/run-update.html","searchKeys":["runUpdate","open suspend override fun runUpdate(stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runUpdate"]},{"name":"open suspend override fun runUpdate(stmt: UpdateNode)","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runUpdate","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/run-update.html","searchKeys":["runUpdate","open suspend override fun runUpdate(stmt: UpdateNode)","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runUpdate"]},{"name":"sealed class ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-gate/index.html","searchKeys":["ABYCircuitGate","sealed class ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate"]},{"name":"sealed class ABYValue","description":"io.github.aplcornell.viaduct.backend.aby.ABYValue","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-value/index.html","searchKeys":["ABYValue","sealed class ABYValue","io.github.aplcornell.viaduct.backend.aby.ABYValue"]},{"name":"sealed class CleartextClassObject","description":"io.github.aplcornell.viaduct.backend.CleartextClassObject","location":"interpreter/io.github.aplcornell.viaduct.backend/-cleartext-class-object/index.html","searchKeys":["CleartextClassObject","sealed class CleartextClassObject","io.github.aplcornell.viaduct.backend.CleartextClassObject"]},{"name":"sealed class CommunicationMessage : ViaductMessage","description":"io.github.aplcornell.viaduct.backend.CommunicationMessage","location":"interpreter/io.github.aplcornell.viaduct.backend/-communication-message/index.html","searchKeys":["CommunicationMessage","sealed class CommunicationMessage : ViaductMessage","io.github.aplcornell.viaduct.backend.CommunicationMessage"]},{"name":"sealed class ViaductMessage","description":"io.github.aplcornell.viaduct.backend.ViaductMessage","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-message/index.html","searchKeys":["ViaductMessage","sealed class ViaductMessage","io.github.aplcornell.viaduct.backend.ViaductMessage"]},{"name":"sealed class WireTerm","description":"io.github.aplcornell.viaduct.backend.WireTerm","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-term/index.html","searchKeys":["WireTerm","sealed class WireTerm","io.github.aplcornell.viaduct.backend.WireTerm"]},{"name":"sealed class ZKPObject","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/index.html","searchKeys":["ZKPObject","sealed class ZKPObject","io.github.aplcornell.viaduct.backend.zkp.ZKPObject"]},{"name":"suspend fun input(): Value","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.input","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/input.html","searchKeys":["input","suspend fun input(): Value","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.input"]},{"name":"suspend fun input(): Value","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.input","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/input.html","searchKeys":["input","suspend fun input(): Value","io.github.aplcornell.viaduct.backend.ViaductRuntime.input"]},{"name":"suspend fun output(value: Value)","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.output","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/output.html","searchKeys":["output","suspend fun output(value: Value)","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.output"]},{"name":"suspend fun output(value: Value)","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.output","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/output.html","searchKeys":["output","suspend fun output(value: Value)","io.github.aplcornell.viaduct.backend.ViaductRuntime.output"]},{"name":"suspend fun receive(event: CommunicationEvent): Value","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.receive","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/receive.html","searchKeys":["receive","suspend fun receive(event: CommunicationEvent): Value","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.receive"]},{"name":"suspend fun receive(event: CommunicationEvent): Value","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.receive","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/receive.html","searchKeys":["receive","suspend fun receive(event: CommunicationEvent): Value","io.github.aplcornell.viaduct.backend.ViaductRuntime.receive"]},{"name":"suspend fun receive(sender: Process, receiver: Process): Value","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.receive","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/receive.html","searchKeys":["receive","suspend fun receive(sender: Process, receiver: Process): Value","io.github.aplcornell.viaduct.backend.ViaductRuntime.receive"]},{"name":"suspend fun receive(sender: ProtocolProjection): Value","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.receive","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/receive.html","searchKeys":["receive","suspend fun receive(sender: ProtocolProjection): Value","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.receive"]},{"name":"suspend fun run()","description":"io.github.aplcornell.viaduct.backend.BackendInterpreter.run","location":"interpreter/io.github.aplcornell.viaduct.backend/-backend-interpreter/run.html","searchKeys":["run","suspend fun run()","io.github.aplcornell.viaduct.backend.BackendInterpreter.run"]},{"name":"suspend fun run(function: FunctionName, stmt: StatementNode)","description":"io.github.aplcornell.viaduct.backend.BackendInterpreter.run","location":"interpreter/io.github.aplcornell.viaduct.backend/-backend-interpreter/run.html","searchKeys":["run","suspend fun run(function: FunctionName, stmt: StatementNode)","io.github.aplcornell.viaduct.backend.BackendInterpreter.run"]},{"name":"suspend fun send(value: Value, event: CommunicationEvent)","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.send","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/send.html","searchKeys":["send","suspend fun send(value: Value, event: CommunicationEvent)","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.send"]},{"name":"suspend fun send(value: Value, event: CommunicationEvent)","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.send","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/send.html","searchKeys":["send","suspend fun send(value: Value, event: CommunicationEvent)","io.github.aplcornell.viaduct.backend.ViaductRuntime.send"]},{"name":"suspend fun send(value: Value, receiver: ProtocolProjection)","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.send","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/send.html","searchKeys":["send","suspend fun send(value: Value, receiver: ProtocolProjection)","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.send"]},{"name":"suspend fun send(value: Value, sender: Process, receiver: Process)","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.send","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/send.html","searchKeys":["send","suspend fun send(value: Value, sender: Process, receiver: Process)","io.github.aplcornell.viaduct.backend.ViaductRuntime.send"]},{"name":"suspend fun synchronize(senders: Set<Host>, receivers: Set<Host>)","description":"io.github.aplcornell.viaduct.backend.BackendInterpreter.synchronize","location":"interpreter/io.github.aplcornell.viaduct.backend/-backend-interpreter/synchronize.html","searchKeys":["synchronize","suspend fun synchronize(senders: Set<Host>, receivers: Set<Host>)","io.github.aplcornell.viaduct.backend.BackendInterpreter.synchronize"]},{"name":"val address: HostAddress","description":"io.github.aplcornell.viaduct.backend.HostInfo.address","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-info/address.html","searchKeys":["address","val address: HostAddress","io.github.aplcornell.viaduct.backend.HostInfo.address"]},{"name":"val arithCircuit: Circuit","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.arithCircuit","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/arith-circuit.html","searchKeys":["arithCircuit","val arithCircuit: Circuit","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.arithCircuit"]},{"name":"val auxInputHashes: MutableMap<Int, VarArray>","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.auxInputHashes","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/aux-input-hashes.html","searchKeys":["auxInputHashes","val auxInputHashes: MutableMap<Int, VarArray>","io.github.aplcornell.viaduct.backend.zkp.R1CS.auxInputHashes"]},{"name":"val auxInputNonces: MutableMap<Int, VarArray>","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.auxInputNonces","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/aux-input-nonces.html","searchKeys":["auxInputNonces","val auxInputNonces: MutableMap<Int, VarArray>","io.github.aplcornell.viaduct.backend.zkp.R1CS.auxInputNonces"]},{"name":"val auxInputs: MutableMap<Int, Var>","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.auxInputs","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/aux-inputs.html","searchKeys":["auxInputs","val auxInputs: MutableMap<Int, Var>","io.github.aplcornell.viaduct.backend.zkp.R1CS.auxInputs"]},{"name":"val bitlen: Long","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.bitlen","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/bitlen.html","searchKeys":["bitlen","val bitlen: Long","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.bitlen"]},{"name":"val boolCircuit: Circuit","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.boolCircuit","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/bool-circuit.html","searchKeys":["boolCircuit","val boolCircuit: Circuit","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.boolCircuit"]},{"name":"val children: List<ABYCircuitGate>","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.children","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-gate/children.html","searchKeys":["children","val children: List<ABYCircuitGate>","io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.children"]},{"name":"val circuitType: ABYCircuitType","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.circuitType","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-gate/circuit-type.html","searchKeys":["circuitType","val circuitType: ABYCircuitType","io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.circuitType"]},{"name":"val defaultValue: Value","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.defaultValue","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/default-value.html","searchKeys":["defaultValue","val defaultValue: Value","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.defaultValue"]},{"name":"val gates: ArrayList<WireTerm>","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.gates","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/gates.html","searchKeys":["gates","val gates: ArrayList<WireTerm>","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.gates"]},{"name":"val hash: List<Byte>","description":"io.github.aplcornell.viaduct.backend.WireDummyIn.hash","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-dummy-in/hash.html","searchKeys":["hash","val hash: List<Byte>","io.github.aplcornell.viaduct.backend.WireDummyIn.hash"]},{"name":"val hash: List<Byte>","description":"io.github.aplcornell.viaduct.backend.WireIn.hash","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-in/hash.html","searchKeys":["hash","val hash: List<Byte>","io.github.aplcornell.viaduct.backend.WireIn.hash"]},{"name":"val hash: List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.HashInfo.hash","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hash-info/hash.html","searchKeys":["hash","val hash: List<Byte>","io.github.aplcornell.viaduct.backend.commitment.HashInfo.hash"]},{"name":"val hashed: Hashed<Value>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject.hashed","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-null-object/hashed.html","searchKeys":["hashed","val hashed: Hashed<Value>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedNullObject.hashed"]},{"name":"val host: Host","description":"io.github.aplcornell.viaduct.backend.HostInfo.host","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-info/host.html","searchKeys":["host","val host: Host","io.github.aplcornell.viaduct.backend.HostInfo.host"]},{"name":"val host: Host","description":"io.github.aplcornell.viaduct.backend.ProcessInfo.host","location":"interpreter/io.github.aplcornell.viaduct.backend/-process-info/host.html","searchKeys":["host","val host: Host","io.github.aplcornell.viaduct.backend.ProcessInfo.host"]},{"name":"val host: Host","description":"io.github.aplcornell.viaduct.backend.ViaductRuntime.host","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-runtime/host.html","searchKeys":["host","val host: Host","io.github.aplcornell.viaduct.backend.ViaductRuntime.host"]},{"name":"val id: HostId","description":"io.github.aplcornell.viaduct.backend.HostInfo.id","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-info/id.html","searchKeys":["id","val id: HostId","io.github.aplcornell.viaduct.backend.HostInfo.id"]},{"name":"val id: ProcessId","description":"io.github.aplcornell.viaduct.backend.ProcessInfo.id","location":"interpreter/io.github.aplcornell.viaduct.backend/-process-info/id.html","searchKeys":["id","val id: ProcessId","io.github.aplcornell.viaduct.backend.ProcessInfo.id"]},{"name":"val inMap: MutableMap<Int, Int>","description":"io.github.aplcornell.viaduct.backend.NormalizeCounter.inMap","location":"interpreter/io.github.aplcornell.viaduct.backend/-normalize-counter/in-map.html","searchKeys":["inMap","val inMap: MutableMap<Int, Int>","io.github.aplcornell.viaduct.backend.NormalizeCounter.inMap"]},{"name":"val index: Int","description":"io.github.aplcornell.viaduct.backend.WireConst.index","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-const/--index--.html","searchKeys":["index","val index: Int","io.github.aplcornell.viaduct.backend.WireConst.index"]},{"name":"val index: Int","description":"io.github.aplcornell.viaduct.backend.WireDummyIn.index","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-dummy-in/--index--.html","searchKeys":["index","val index: Int","io.github.aplcornell.viaduct.backend.WireDummyIn.index"]},{"name":"val index: Int","description":"io.github.aplcornell.viaduct.backend.WireIn.index","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-in/--index--.html","searchKeys":["index","val index: Int","io.github.aplcornell.viaduct.backend.WireIn.index"]},{"name":"val info: HashInfo","description":"io.github.aplcornell.viaduct.backend.commitment.Hashed.info","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashed/info.html","searchKeys":["info","val info: HashInfo","io.github.aplcornell.viaduct.backend.commitment.Hashed.info"]},{"name":"val inputs: List<WireTerm>","description":"io.github.aplcornell.viaduct.backend.WireOp.inputs","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-op/inputs.html","searchKeys":["inputs","val inputs: List<WireTerm>","io.github.aplcornell.viaduct.backend.WireOp.inputs"]},{"name":"val ipAddress: IpAddress","description":"io.github.aplcornell.viaduct.backend.HostAddress.ipAddress","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-address/ip-address.html","searchKeys":["ipAddress","val ipAddress: IpAddress","io.github.aplcornell.viaduct.backend.HostAddress.ipAddress"]},{"name":"val isProver: Boolean","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.isProver","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/is-prover.html","searchKeys":["isProver","val isProver: Boolean","io.github.aplcornell.viaduct.backend.zkp.R1CS.isProver"]},{"name":"val is_eq_to: Long","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.is_eq_to","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/is_eq_to.html","searchKeys":["is_eq_to","val is_eq_to: Long","io.github.aplcornell.viaduct.backend.zkp.R1CS.is_eq_to"]},{"name":"val message: Value","description":"io.github.aplcornell.viaduct.backend.SendMessage.message","location":"interpreter/io.github.aplcornell.viaduct.backend/-send-message/message.html","searchKeys":["message","val message: Value","io.github.aplcornell.viaduct.backend.SendMessage.message"]},{"name":"val nonce: List<Byte>","description":"io.github.aplcornell.viaduct.backend.WireDummyIn.nonce","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-dummy-in/nonce.html","searchKeys":["nonce","val nonce: List<Byte>","io.github.aplcornell.viaduct.backend.WireDummyIn.nonce"]},{"name":"val nonce: List<Byte>","description":"io.github.aplcornell.viaduct.backend.WireIn.nonce","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-in/nonce.html","searchKeys":["nonce","val nonce: List<Byte>","io.github.aplcornell.viaduct.backend.WireIn.nonce"]},{"name":"val nonce: List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.HashInfo.nonce","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hash-info/nonce.html","searchKeys":["nonce","val nonce: List<Byte>","io.github.aplcornell.viaduct.backend.commitment.HashInfo.nonce"]},{"name":"val op: Operator","description":"io.github.aplcornell.viaduct.backend.WireOp.op","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-op/op.html","searchKeys":["op","val op: Operator","io.github.aplcornell.viaduct.backend.WireOp.op"]},{"name":"val operation: PutOperationGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYOperationGate.operation","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-operation-gate/operation.html","searchKeys":["operation","val operation: PutOperationGate","io.github.aplcornell.viaduct.backend.aby.ABYOperationGate.operation"]},{"name":"val port: Port","description":"io.github.aplcornell.viaduct.backend.HostAddress.port","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-address/port.html","searchKeys":["port","val port: Port","io.github.aplcornell.viaduct.backend.HostAddress.port"]},{"name":"val primaryInputs: MutableMap<Int, Var>","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.primaryInputs","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/primary-inputs.html","searchKeys":["primaryInputs","val primaryInputs: MutableMap<Int, Var>","io.github.aplcornell.viaduct.backend.zkp.R1CS.primaryInputs"]},{"name":"val process: ProtocolProjection","description":"io.github.aplcornell.viaduct.backend.ProcessInfo.process","location":"interpreter/io.github.aplcornell.viaduct.backend/-process-info/process.html","searchKeys":["process","val process: ProtocolProjection","io.github.aplcornell.viaduct.backend.ProcessInfo.process"]},{"name":"val program: ProgramNode","description":"io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.program","location":"interpreter/io.github.aplcornell.viaduct.backend/-abstract-protocol-interpreter/program.html","searchKeys":["program","val program: ProgramNode","io.github.aplcornell.viaduct.backend.AbstractProtocolInterpreter.program"]},{"name":"val projection: ProtocolProjection","description":"io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.projection","location":"interpreter/io.github.aplcornell.viaduct.backend/-viaduct-process-runtime/projection.html","searchKeys":["projection","val projection: ProtocolProjection","io.github.aplcornell.viaduct.backend.ViaductProcessRuntime.projection"]},{"name":"val protocol: Protocol","description":"io.github.aplcornell.viaduct.backend.ProcessInfo.protocol","location":"interpreter/io.github.aplcornell.viaduct.backend/-process-info/protocol.html","searchKeys":["protocol","val protocol: Protocol","io.github.aplcornell.viaduct.backend.ProcessInfo.protocol"]},{"name":"val protocolAnalysis: ProtocolAnalysis","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.protocolAnalysis","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/protocol-analysis.html","searchKeys":["protocolAnalysis","val protocolAnalysis: ProtocolAnalysis","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.protocolAnalysis"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.protocols.Synchronization.Companion.protocolName","location":"interpreter/io.github.aplcornell.viaduct.protocols/-synchronization/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.protocols.Synchronization.Companion.protocolName"]},{"name":"val publicMap: MutableMap<Int, Int>","description":"io.github.aplcornell.viaduct.backend.NormalizeCounter.publicMap","location":"interpreter/io.github.aplcornell.viaduct.backend/-normalize-counter/public-map.html","searchKeys":["publicMap","val publicMap: MutableMap<Int, Int>","io.github.aplcornell.viaduct.backend.NormalizeCounter.publicMap"]},{"name":"val r1cs: R1CSInstance","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.r1cs","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/r1cs.html","searchKeys":["r1cs","val r1cs: R1CSInstance","io.github.aplcornell.viaduct.backend.zkp.R1CS.r1cs"]},{"name":"val receiver: ProcessId","description":"io.github.aplcornell.viaduct.backend.ReceiveMessage.receiver","location":"interpreter/io.github.aplcornell.viaduct.backend/-receive-message/receiver.html","searchKeys":["receiver","val receiver: ProcessId","io.github.aplcornell.viaduct.backend.ReceiveMessage.receiver"]},{"name":"val receiver: ProcessId","description":"io.github.aplcornell.viaduct.backend.SendMessage.receiver","location":"interpreter/io.github.aplcornell.viaduct.backend/-send-message/receiver.html","searchKeys":["receiver","val receiver: ProcessId","io.github.aplcornell.viaduct.backend.SendMessage.receiver"]},{"name":"val recvChannel: Channel<ViaductMessage>","description":"io.github.aplcornell.viaduct.backend.HostInfo.recvChannel","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-info/recv-channel.html","searchKeys":["recvChannel","val recvChannel: Channel<ViaductMessage>","io.github.aplcornell.viaduct.backend.HostInfo.recvChannel"]},{"name":"val role: Role","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.role","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/role.html","searchKeys":["role","val role: Role","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.role"]},{"name":"val runtime: ViaductProcessRuntime","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runtime","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-prover-interpreter/runtime.html","searchKeys":["runtime","val runtime: ViaductProcessRuntime","io.github.aplcornell.viaduct.backend.zkp.ZKPProverInterpreter.runtime"]},{"name":"val runtime: ViaductProcessRuntime","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runtime","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-verifier-interpreter/runtime.html","searchKeys":["runtime","val runtime: ViaductProcessRuntime","io.github.aplcornell.viaduct.backend.zkp.ZKPVerifierInterpreter.runtime"]},{"name":"val sendChannel: Channel<ViaductMessage>","description":"io.github.aplcornell.viaduct.backend.HostInfo.sendChannel","location":"interpreter/io.github.aplcornell.viaduct.backend/-host-info/send-channel.html","searchKeys":["sendChannel","val sendChannel: Channel<ViaductMessage>","io.github.aplcornell.viaduct.backend.HostInfo.sendChannel"]},{"name":"val sender: ProcessId","description":"io.github.aplcornell.viaduct.backend.ReceiveMessage.sender","location":"interpreter/io.github.aplcornell.viaduct.backend/-receive-message/sender.html","searchKeys":["sender","val sender: ProcessId","io.github.aplcornell.viaduct.backend.ReceiveMessage.sender"]},{"name":"val sender: ProcessId","description":"io.github.aplcornell.viaduct.backend.SendMessage.sender","location":"interpreter/io.github.aplcornell.viaduct.backend/-send-message/sender.html","searchKeys":["sender","val sender: ProcessId","io.github.aplcornell.viaduct.backend.SendMessage.sender"]},{"name":"val size: Int","description":"io.github.aplcornell.viaduct.backend.VectorObject.size","location":"interpreter/io.github.aplcornell.viaduct.backend/-vector-object/size.html","searchKeys":["size","val size: Int","io.github.aplcornell.viaduct.backend.VectorObject.size"]},{"name":"val size: Int","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.size","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-a-b-y-vector-object/size.html","searchKeys":["size","val size: Int","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.ABYVectorObject.size"]},{"name":"val size: Int","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.size","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-vector-object/size.html","searchKeys":["size","val size: Int","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedVectorObject.size"]},{"name":"val size: Int","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.size","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-vector/size.html","searchKeys":["size","val size: Int","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentVector.size"]},{"name":"val size: Int","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.size","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/size.html","searchKeys":["size","val size: Int","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.size"]},{"name":"val v: Int","description":"io.github.aplcornell.viaduct.backend.WireConst.v","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-const/v.html","searchKeys":["v","val v: Int","io.github.aplcornell.viaduct.backend.WireConst.v"]},{"name":"val v: Int","description":"io.github.aplcornell.viaduct.backend.WireIn.v","location":"interpreter/io.github.aplcornell.viaduct.backend/-wire-in/v.html","searchKeys":["v","val v: Int","io.github.aplcornell.viaduct.backend.WireIn.v"]},{"name":"val value: ABYCircuitGate","description":"io.github.aplcornell.viaduct.backend.aby.ABYSecretValue.value","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-secret-value/value.html","searchKeys":["value","val value: ABYCircuitGate","io.github.aplcornell.viaduct.backend.aby.ABYSecretValue.value"]},{"name":"val value: Int","description":"io.github.aplcornell.viaduct.backend.aby.ABYConstantGate.value","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-constant-gate/value.html","searchKeys":["value","val value: Int","io.github.aplcornell.viaduct.backend.aby.ABYConstantGate.value"]},{"name":"val value: Int","description":"io.github.aplcornell.viaduct.backend.aby.ABYInGate.value","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-in-gate/value.html","searchKeys":["value","val value: Int","io.github.aplcornell.viaduct.backend.aby.ABYInGate.value"]},{"name":"val value: T","description":"io.github.aplcornell.viaduct.backend.commitment.Hashed.value","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-hashed/value.html","searchKeys":["value","val value: T","io.github.aplcornell.viaduct.backend.commitment.Hashed.value"]},{"name":"val value: Value","description":"io.github.aplcornell.viaduct.backend.ImmutableCellObject.value","location":"interpreter/io.github.aplcornell.viaduct.backend/-immutable-cell-object/value.html","searchKeys":["value","val value: Value","io.github.aplcornell.viaduct.backend.ImmutableCellObject.value"]},{"name":"val value: Value","description":"io.github.aplcornell.viaduct.backend.aby.ABYCleartextValue.value","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-cleartext-value/value.html","searchKeys":["value","val value: Value","io.github.aplcornell.viaduct.backend.aby.ABYCleartextValue.value"]},{"name":"val value: WireTerm","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPImmutableCell.value","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-immutable-cell/value.html","searchKeys":["value","val value: WireTerm","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPImmutableCell.value"]},{"name":"val values: ArrayList<Value>","description":"io.github.aplcornell.viaduct.backend.VectorObject.values","location":"interpreter/io.github.aplcornell.viaduct.backend/-vector-object/values.html","searchKeys":["values","val values: ArrayList<Value>","io.github.aplcornell.viaduct.backend.VectorObject.values"]},{"name":"val wire: WireTerm","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.wire","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/wire.html","searchKeys":["wire","val wire: WireTerm","io.github.aplcornell.viaduct.backend.zkp.R1CS.wire"]},{"name":"val wireGenerator: WireGenerator","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.wireGenerator","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-vector-object/wire-generator.html","searchKeys":["wireGenerator","val wireGenerator: WireGenerator","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPVectorObject.wireGenerator"]},{"name":"val yaoCircuit: Circuit","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.yaoCircuit","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-builder/yao-circuit.html","searchKeys":["yaoCircuit","val yaoCircuit: Circuit","io.github.aplcornell.viaduct.backend.aby.ABYCircuitBuilder.yaoCircuit"]},{"name":"var bytes: List<Byte>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.bytes","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-hash-replica-interpreter/-commitment-cell/bytes.html","searchKeys":["bytes","var bytes: List<Byte>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolHashReplicaInterpreter.CommitmentCell.bytes"]},{"name":"var inIndex: Int = 0","description":"io.github.aplcornell.viaduct.backend.NormalizeCounter.inIndex","location":"interpreter/io.github.aplcornell.viaduct.backend/-normalize-counter/in-index.html","searchKeys":["inIndex","var inIndex: Int = 0","io.github.aplcornell.viaduct.backend.NormalizeCounter.inIndex"]},{"name":"var output: Var? = null","description":"io.github.aplcornell.viaduct.backend.zkp.R1CS.output","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-r1-c-s/output.html","searchKeys":["output","var output: Var? = null","io.github.aplcornell.viaduct.backend.zkp.R1CS.output"]},{"name":"var port: Int","description":"io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.Companion.port","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-protocol-interpreter/-companion/port.html","searchKeys":["port","var port: Int","io.github.aplcornell.viaduct.backend.aby.ABYProtocolInterpreter.Companion.port"]},{"name":"var publicIndex: Int = 0","description":"io.github.aplcornell.viaduct.backend.NormalizeCounter.publicIndex","location":"interpreter/io.github.aplcornell.viaduct.backend/-normalize-counter/public-index.html","searchKeys":["publicIndex","var publicIndex: Int = 0","io.github.aplcornell.viaduct.backend.NormalizeCounter.publicIndex"]},{"name":"var value: Hashed<Value>","description":"io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.value","location":"interpreter/io.github.aplcornell.viaduct.backend.commitment/-commitment-protocol-cleartext-interpreter/-hashed-cell-object/value.html","searchKeys":["value","var value: Hashed<Value>","io.github.aplcornell.viaduct.backend.commitment.CommitmentProtocolCleartextInterpreter.HashedCellObject.value"]},{"name":"var value: Value","description":"io.github.aplcornell.viaduct.backend.MutableCellObject.value","location":"interpreter/io.github.aplcornell.viaduct.backend/-mutable-cell-object/value.html","searchKeys":["value","var value: Value","io.github.aplcornell.viaduct.backend.MutableCellObject.value"]},{"name":"var value: WireTerm","description":"io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPMutableCell.value","location":"interpreter/io.github.aplcornell.viaduct.backend.zkp/-z-k-p-object/-z-k-p-mutable-cell/value.html","searchKeys":["value","var value: WireTerm","io.github.aplcornell.viaduct.backend.zkp.ZKPObject.ZKPMutableCell.value"]},{"name":"var variableGate: Boolean = false","description":"io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.variableGate","location":"interpreter/io.github.aplcornell.viaduct.backend.aby/-a-b-y-circuit-gate/variable-gate.html","searchKeys":["variableGate","var variableGate: Boolean = false","io.github.aplcornell.viaduct.backend.aby.ABYCircuitGate.variableGate"]},{"name":"AUTHORITY","description":"io.github.aplcornell.viaduct.syntax.DelegationKind.AUTHORITY","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-kind/-a-u-t-h-o-r-i-t-y/index.html","searchKeys":["AUTHORITY","AUTHORITY","io.github.aplcornell.viaduct.syntax.DelegationKind.AUTHORITY"]},{"name":"BOTH","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.BOTH","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/-b-o-t-h/index.html","searchKeys":["BOTH","BOTH","io.github.aplcornell.viaduct.syntax.DelegationProjection.BOTH"]},{"name":"CONFIDENTIALITY","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.CONFIDENTIALITY","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/-c-o-n-f-i-d-e-n-t-i-a-l-i-t-y/index.html","searchKeys":["CONFIDENTIALITY","CONFIDENTIALITY","io.github.aplcornell.viaduct.syntax.DelegationProjection.CONFIDENTIALITY"]},{"name":"HIGHER","description":"io.github.aplcornell.viaduct.syntax.Order.HIGHER","location":"compiler/io.github.aplcornell.viaduct.syntax/-order/-h-i-g-h-e-r/index.html","searchKeys":["HIGHER","HIGHER","io.github.aplcornell.viaduct.syntax.Order.HIGHER"]},{"name":"IFC","description":"io.github.aplcornell.viaduct.syntax.DelegationKind.IFC","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-kind/-i-f-c/index.html","searchKeys":["IFC","IFC","io.github.aplcornell.viaduct.syntax.DelegationKind.IFC"]},{"name":"IN","description":"io.github.aplcornell.viaduct.syntax.ParameterDirection.IN","location":"compiler/io.github.aplcornell.viaduct.syntax/-parameter-direction/-i-n/index.html","searchKeys":["IN","IN","io.github.aplcornell.viaduct.syntax.ParameterDirection.IN"]},{"name":"INTEGRITY","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.INTEGRITY","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/-i-n-t-e-g-r-i-t-y/index.html","searchKeys":["INTEGRITY","INTEGRITY","io.github.aplcornell.viaduct.syntax.DelegationProjection.INTEGRITY"]},{"name":"LAN","description":"io.github.aplcornell.viaduct.selection.SimpleCostRegime.LAN","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-regime/-l-a-n/index.html","searchKeys":["LAN","LAN","io.github.aplcornell.viaduct.selection.SimpleCostRegime.LAN"]},{"name":"LEFT","description":"io.github.aplcornell.viaduct.syntax.Associativity.LEFT","location":"compiler/io.github.aplcornell.viaduct.syntax/-associativity/-l-e-f-t/index.html","searchKeys":["LEFT","LEFT","io.github.aplcornell.viaduct.syntax.Associativity.LEFT"]},{"name":"LOWER","description":"io.github.aplcornell.viaduct.syntax.Order.LOWER","location":"compiler/io.github.aplcornell.viaduct.syntax/-order/-l-o-w-e-r/index.html","searchKeys":["LOWER","LOWER","io.github.aplcornell.viaduct.syntax.Order.LOWER"]},{"name":"NON","description":"io.github.aplcornell.viaduct.syntax.Associativity.NON","location":"compiler/io.github.aplcornell.viaduct.syntax/-associativity/-n-o-n/index.html","searchKeys":["NON","NON","io.github.aplcornell.viaduct.syntax.Associativity.NON"]},{"name":"OUT","description":"io.github.aplcornell.viaduct.syntax.ParameterDirection.OUT","location":"compiler/io.github.aplcornell.viaduct.syntax/-parameter-direction/-o-u-t/index.html","searchKeys":["OUT","OUT","io.github.aplcornell.viaduct.syntax.ParameterDirection.OUT"]},{"name":"RIGHT","description":"io.github.aplcornell.viaduct.syntax.Associativity.RIGHT","location":"compiler/io.github.aplcornell.viaduct.syntax/-associativity/-r-i-g-h-t/index.html","searchKeys":["RIGHT","RIGHT","io.github.aplcornell.viaduct.syntax.Associativity.RIGHT"]},{"name":"UNDETERMINED","description":"io.github.aplcornell.viaduct.syntax.Order.UNDETERMINED","location":"compiler/io.github.aplcornell.viaduct.syntax/-order/-u-n-d-e-t-e-r-m-i-n-e-d/index.html","searchKeys":["UNDETERMINED","UNDETERMINED","io.github.aplcornell.viaduct.syntax.Order.UNDETERMINED"]},{"name":"WAN","description":"io.github.aplcornell.viaduct.selection.SimpleCostRegime.WAN","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-regime/-w-a-n/index.html","searchKeys":["WAN","WAN","io.github.aplcornell.viaduct.selection.SimpleCostRegime.WAN"]},{"name":"abstract class AbstractCodeGenerator(val context: CodeGeneratorContext) : CodeGenerator","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/index.html","searchKeys":["AbstractCodeGenerator","abstract class AbstractCodeGenerator(val context: CodeGeneratorContext) : CodeGenerator","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator"]},{"name":"abstract class AbstractProtocolComposer : ProtocolComposer","description":"io.github.aplcornell.viaduct.selection.AbstractProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.selection/-abstract-protocol-composer/index.html","searchKeys":["AbstractProtocolComposer","abstract class AbstractProtocolComposer : ProtocolComposer","io.github.aplcornell.viaduct.selection.AbstractProtocolComposer"]},{"name":"abstract class ArithmeticOperator : BinaryInfixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-arithmetic-operator/index.html","searchKeys":["ArithmeticOperator","abstract class ArithmeticOperator : BinaryInfixOperator","io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator"]},{"name":"abstract class Attribute<in Node, out T> : Function1<Node, T> , ReadOnlyProperty<Node, T> ","description":"io.github.aplcornell.viaduct.attributes.Attribute","location":"compiler/io.github.aplcornell.viaduct.attributes/-attribute/index.html","searchKeys":["Attribute","abstract class Attribute<in Node, out T> : Function1<Node, T> , ReadOnlyProperty<Node, T> ","io.github.aplcornell.viaduct.attributes.Attribute"]},{"name":"abstract class BinaryInfixOperator : BinaryOperator, InfixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.BinaryInfixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-binary-infix-operator/index.html","searchKeys":["BinaryInfixOperator","abstract class BinaryInfixOperator : BinaryOperator, InfixOperator","io.github.aplcornell.viaduct.syntax.operators.BinaryInfixOperator"]},{"name":"abstract class BinaryPrefixOperator : BinaryOperator, PrefixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.BinaryPrefixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-binary-prefix-operator/index.html","searchKeys":["BinaryPrefixOperator","abstract class BinaryPrefixOperator : BinaryOperator, PrefixOperator","io.github.aplcornell.viaduct.syntax.operators.BinaryPrefixOperator"]},{"name":"abstract class Cleartext : Protocol","description":"io.github.aplcornell.viaduct.backends.cleartext.Cleartext","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext/index.html","searchKeys":["Cleartext","abstract class Cleartext : Protocol","io.github.aplcornell.viaduct.backends.cleartext.Cleartext"]},{"name":"abstract class CodeGenerationException(message: String) : RuntimeException","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerationException","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generation-exception/index.html","searchKeys":["CodeGenerationException","abstract class CodeGenerationException(message: String) : RuntimeException","io.github.aplcornell.viaduct.codegeneration.CodeGenerationException"]},{"name":"abstract class CodeGeneratorDispatcher : CodeGenerator","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/index.html","searchKeys":["CodeGeneratorDispatcher","abstract class CodeGeneratorDispatcher : CodeGenerator","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher"]},{"name":"abstract class ComparisonOperator : BinaryInfixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator/index.html","searchKeys":["ComparisonOperator","abstract class ComparisonOperator : BinaryInfixOperator","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator"]},{"name":"abstract class CompilationError : Error, PrettyPrintable","description":"io.github.aplcornell.viaduct.errors.CompilationError","location":"compiler/io.github.aplcornell.viaduct.errors/-compilation-error/index.html","searchKeys":["CompilationError","abstract class CompilationError : Error, PrettyPrintable","io.github.aplcornell.viaduct.errors.CompilationError"]},{"name":"abstract class DelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/index.html","searchKeys":["DelegationDeclarationNode","abstract class DelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode"]},{"name":"abstract class DelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation, val comment: String?) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-delegation-declaration-node/index.html","searchKeys":["DelegationDeclarationNode","abstract class DelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation, val comment: String?) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode"]},{"name":"abstract class InformationFlowError : CompilationError","description":"io.github.aplcornell.viaduct.errors.InformationFlowError","location":"compiler/io.github.aplcornell.viaduct.errors/-information-flow-error/index.html","searchKeys":["InformationFlowError","abstract class InformationFlowError : CompilationError","io.github.aplcornell.viaduct.errors.InformationFlowError"]},{"name":"abstract class LogicalOperator : BinaryInfixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator/index.html","searchKeys":["LogicalOperator","abstract class LogicalOperator : BinaryInfixOperator","io.github.aplcornell.viaduct.syntax.operators.LogicalOperator"]},{"name":"abstract class Node : HasSourceLocation, PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.surface.Node","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-node/index.html","searchKeys":["Node","abstract class Node : HasSourceLocation, PrettyPrintable","io.github.aplcornell.viaduct.syntax.surface.Node"]},{"name":"abstract class Node : TreeNode<Node> , HasSourceLocation, PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.intermediate.Node","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-node/index.html","searchKeys":["Node","abstract class Node : TreeNode<Node> , HasSourceLocation, PrettyPrintable","io.github.aplcornell.viaduct.syntax.intermediate.Node"]},{"name":"abstract class ObjectType : Type","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/index.html","searchKeys":["ObjectType","abstract class ObjectType : Type","io.github.aplcornell.viaduct.syntax.types.ObjectType"]},{"name":"abstract class Protocol : Name, Comparable<Protocol> ","description":"io.github.aplcornell.viaduct.syntax.Protocol","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/index.html","searchKeys":["Protocol","abstract class Protocol : Name, Comparable<Protocol> ","io.github.aplcornell.viaduct.syntax.Protocol"]},{"name":"abstract class ProtocolComposer","description":"io.github.aplcornell.viaduct.selection.ProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-composer/index.html","searchKeys":["ProtocolComposer","abstract class ProtocolComposer","io.github.aplcornell.viaduct.selection.ProtocolComposer"]},{"name":"abstract class UnaryPrefixOperator : UnaryOperator, PrefixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-unary-prefix-operator/index.html","searchKeys":["UnaryPrefixOperator","abstract class UnaryPrefixOperator : UnaryOperator, PrefixOperator","io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator"]},{"name":"abstract fun apply(argument1: Value, argument2: Value): Value","description":"io.github.aplcornell.viaduct.syntax.BinaryOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax/-binary-operator/apply.html","searchKeys":["apply","abstract fun apply(argument1: Value, argument2: Value): Value","io.github.aplcornell.viaduct.syntax.BinaryOperator.apply"]},{"name":"abstract fun apply(argument: Value): Value","description":"io.github.aplcornell.viaduct.syntax.UnaryOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax/-unary-operator/apply.html","searchKeys":["apply","abstract fun apply(argument: Value): Value","io.github.aplcornell.viaduct.syntax.UnaryOperator.apply"]},{"name":"abstract fun apply(arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.syntax.Operator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax/-operator/apply.html","searchKeys":["apply","abstract fun apply(arguments: List<Value>): Value","io.github.aplcornell.viaduct.syntax.Operator.apply"]},{"name":"abstract fun apply(left: Boolean, right: Boolean): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator/apply.html","searchKeys":["apply","abstract fun apply(left: Boolean, right: Boolean): Boolean","io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.apply"]},{"name":"abstract fun apply(left: Int, right: Int): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator/apply.html","searchKeys":["apply","abstract fun apply(left: Int, right: Int): Boolean","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.apply"]},{"name":"abstract fun apply(left: Int, right: Int): Int","description":"io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-arithmetic-operator/apply.html","searchKeys":["apply","abstract fun apply(left: Int, right: Int): Int","io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.apply"]},{"name":"abstract fun authority(): Label","description":"io.github.aplcornell.viaduct.syntax.Protocol.authority","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/authority.html","searchKeys":["authority","abstract fun authority(): Label","io.github.aplcornell.viaduct.syntax.Protocol.authority"]},{"name":"abstract fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","description":"io.github.aplcornell.viaduct.backends.Backend.codeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends/-backend/code-generator.html","searchKeys":["codeGenerator","abstract fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","io.github.aplcornell.viaduct.backends.Backend.codeGenerator"]},{"name":"abstract fun codeOf(host: Host): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.codeOf","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/code-of.html","searchKeys":["codeOf","abstract fun codeOf(host: Host): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.codeOf"]},{"name":"abstract fun communicateOrNull(source: Protocol, destination: Protocol): ProtocolCommunication?","description":"io.github.aplcornell.viaduct.selection.ProtocolComposer.communicateOrNull","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-composer/communicate-or-null.html","searchKeys":["communicateOrNull","abstract fun communicateOrNull(source: Protocol, destination: Protocol): ProtocolCommunication?","io.github.aplcornell.viaduct.selection.ProtocolComposer.communicateOrNull"]},{"name":"abstract fun communicationCost(source: Protocol, destination: Protocol, host: Host? = null): Cost<C>","description":"io.github.aplcornell.viaduct.selection.CostEstimator.communicationCost","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-estimator/communication-cost.html","searchKeys":["communicationCost","abstract fun communicationCost(source: Protocol, destination: Protocol, host: Host? = null): Cost<C>","io.github.aplcornell.viaduct.selection.CostEstimator.communicationCost"]},{"name":"abstract fun concat(other: C): C","description":"io.github.aplcornell.viaduct.selection.CostMonoid.concat","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-monoid/concat.html","searchKeys":["concat","abstract fun concat(other: C): C","io.github.aplcornell.viaduct.selection.CostMonoid.concat"]},{"name":"abstract fun congruences(): List<FreeDistributiveLattice.LessThanOrEqualTo<PrincipalComponent>>","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.congruences","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/congruences.html","searchKeys":["congruences","abstract fun congruences(): List<FreeDistributiveLattice.LessThanOrEqualTo<PrincipalComponent>>","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.congruences"]},{"name":"abstract fun constructorCall(protocol: Protocol, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.constructorCall","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/constructor-call.html","searchKeys":["constructorCall","abstract fun constructorCall(protocol: Protocol, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.constructorCall"]},{"name":"abstract fun copy(children: List<Node> = this.children.toList()): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.Node.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-node/copy.html","searchKeys":["copy","abstract fun copy(children: List<Node> = this.children.toList()): Node","io.github.aplcornell.viaduct.syntax.intermediate.Node.copy"]},{"name":"abstract fun equals(first: A, second: A): Boolean","description":"io.github.aplcornell.viaduct.algebra.LatticeCongruence.equals","location":"compiler/io.github.aplcornell.viaduct.algebra/-lattice-congruence/equals.html","searchKeys":["equals","abstract fun equals(first: A, second: A): Boolean","io.github.aplcornell.viaduct.algebra.LatticeCongruence.equals"]},{"name":"abstract fun executionCost(stmt: SimpleStatementNode, protocol: Protocol): Cost<C>","description":"io.github.aplcornell.viaduct.selection.CostEstimator.executionCost","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-estimator/execution-cost.html","searchKeys":["executionCost","abstract fun executionCost(stmt: SimpleStatementNode, protocol: Protocol): Cost<C>","io.github.aplcornell.viaduct.selection.CostEstimator.executionCost"]},{"name":"abstract fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.exp","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/exp.html","searchKeys":["exp","abstract fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.exp"]},{"name":"abstract fun featureWeights(): Cost<C>","description":"io.github.aplcornell.viaduct.selection.CostEstimator.featureWeights","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-estimator/feature-weights.html","searchKeys":["featureWeights","abstract fun featureWeights(): Cost<C>","io.github.aplcornell.viaduct.selection.CostEstimator.featureWeights"]},{"name":"abstract fun get(program: ProgramNode): Analysis","description":"io.github.aplcornell.viaduct.analysis.AnalysisProvider.get","location":"compiler/io.github.aplcornell.viaduct.analysis/-analysis-provider/get.html","searchKeys":["get","abstract fun get(program: ProgramNode): Analysis","io.github.aplcornell.viaduct.analysis.AnalysisProvider.get"]},{"name":"abstract fun getType(query: QueryName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/get-type.html","searchKeys":["getType","abstract fun getType(query: QueryName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.ObjectType.getType"]},{"name":"abstract fun getType(update: UpdateName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/get-type.html","searchKeys":["getType","abstract fun getType(update: UpdateName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.ObjectType.getType"]},{"name":"abstract fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.guard","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/guard.html","searchKeys":["guard","abstract fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.guard"]},{"name":"abstract fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelExpression.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-expression/interpret.html","searchKeys":["interpret","abstract fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelExpression.interpret"]},{"name":"abstract fun kotlinName(sourceName: ObjectVariable): String","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.kotlinName","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/kotlin-name.html","searchKeys":["kotlinName","abstract fun kotlinName(sourceName: ObjectVariable): String","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.kotlinName"]},{"name":"abstract fun kotlinName(sourceName: Temporary, protocol: Protocol): String","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.kotlinName","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/kotlin-name.html","searchKeys":["kotlinName","abstract fun kotlinName(sourceName: Temporary, protocol: Protocol): String","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.kotlinName"]},{"name":"abstract fun kotlinType(protocol: Protocol, sourceType: ObjectType): TypeName","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.kotlinType","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/kotlin-type.html","searchKeys":["kotlinType","abstract fun kotlinType(protocol: Protocol, sourceType: ObjectType): TypeName","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.kotlinType"]},{"name":"abstract fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.kotlinType","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/kotlin-type.html","searchKeys":["kotlinType","abstract fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.kotlinType"]},{"name":"abstract fun lessThanOrEqualTo(first: A, second: A): Boolean","description":"io.github.aplcornell.viaduct.algebra.LatticeCongruence.lessThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.algebra/-lattice-congruence/less-than-or-equal-to.html","searchKeys":["lessThanOrEqualTo","abstract fun lessThanOrEqualTo(first: A, second: A): Boolean","io.github.aplcornell.viaduct.algebra.LatticeCongruence.lessThanOrEqualTo"]},{"name":"abstract fun lessThanOrEqualTo(that: T): Boolean","description":"io.github.aplcornell.viaduct.algebra.PartialOrder.lessThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.algebra/-partial-order/less-than-or-equal-to.html","searchKeys":["lessThanOrEqualTo","abstract fun lessThanOrEqualTo(that: T): Boolean","io.github.aplcornell.viaduct.algebra.PartialOrder.lessThanOrEqualTo"]},{"name":"abstract fun mandatoryParticipatingHosts(protocol: Protocol, statement: SimpleStatementNode): Set<Host>","description":"io.github.aplcornell.viaduct.selection.ProtocolComposer.mandatoryParticipatingHosts","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-composer/mandatory-participating-hosts.html","searchKeys":["mandatoryParticipatingHosts","abstract fun mandatoryParticipatingHosts(protocol: Protocol, statement: SimpleStatementNode): Set<Host>","io.github.aplcornell.viaduct.selection.ProtocolComposer.mandatoryParticipatingHosts"]},{"name":"abstract fun newTemporary(baseName: String): String","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.newTemporary","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/new-temporary.html","searchKeys":["newTemporary","abstract fun newTemporary(baseName: String): String","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.newTemporary"]},{"name":"abstract fun parse(arguments: ProtocolArguments): P","description":"io.github.aplcornell.viaduct.parsing.ProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.parsing/-protocol-parser/parse.html","searchKeys":["parse","abstract fun parse(arguments: ProtocolArguments): P","io.github.aplcornell.viaduct.parsing.ProtocolParser.parse"]},{"name":"abstract fun postprocess(program: ProgramNode): ProgramNode","description":"io.github.aplcornell.viaduct.passes.ProgramPostprocessor.postprocess","location":"compiler/io.github.aplcornell.viaduct.passes/-program-postprocessor/postprocess.html","searchKeys":["postprocess","abstract fun postprocess(program: ProgramNode): ProgramNode","io.github.aplcornell.viaduct.passes.ProgramPostprocessor.postprocess"]},{"name":"abstract fun propagate(input: A): A","description":"io.github.aplcornell.viaduct.util.dataflow.DataFlowEdge.propagate","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-data-flow-edge/propagate.html","searchKeys":["propagate","abstract fun propagate(input: A): A","io.github.aplcornell.viaduct.util.dataflow.DataFlowEdge.propagate"]},{"name":"abstract fun protocolFactory(program: ProgramNode): ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.Backend.protocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends/-backend/protocol-factory.html","searchKeys":["protocolFactory","abstract fun protocolFactory(program: ProgramNode): ProtocolFactory","io.github.aplcornell.viaduct.backends.Backend.protocolFactory"]},{"name":"abstract fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.receive","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/receive.html","searchKeys":["receive","abstract fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.receive"]},{"name":"abstract fun receive(type: TypeName, sender: Host): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.receive","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/receive.html","searchKeys":["receive","abstract fun receive(type: TypeName, sender: Host): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.receive"]},{"name":"abstract fun rename(renamer: (String) -> String = { x -> x }): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelExpression.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-expression/rename.html","searchKeys":["rename","abstract fun rename(renamer: (String) -> String = { x -> x }): LabelExpression","io.github.aplcornell.viaduct.security.LabelExpression.rename"]},{"name":"abstract fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.send","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/send.html","searchKeys":["send","abstract fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.send"]},{"name":"abstract fun send(value: CodeBlock, receiver: Host): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.send","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/send.html","searchKeys":["send","abstract fun send(value: CodeBlock, receiver: Host): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.send"]},{"name":"abstract fun setup(protocol: Protocol): Iterable<PropertySpec>","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.setup","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/setup.html","searchKeys":["setup","abstract fun setup(protocol: Protocol): Iterable<PropertySpec>","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.setup"]},{"name":"abstract fun solve(problem: SelectionProblem): ProtocolAssignment?","description":"io.github.aplcornell.viaduct.selection.SelectionProblemSolver.solve","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-problem-solver/solve.html","searchKeys":["solve","abstract fun solve(problem: SelectionProblem): ProtocolAssignment?","io.github.aplcornell.viaduct.selection.SelectionProblemSolver.solve"]},{"name":"abstract fun toDocument(argument1: PrettyPrintable, argument2: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.syntax.BinaryOperator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-binary-operator/to-document.html","searchKeys":["toDocument","abstract fun toDocument(argument1: PrettyPrintable, argument2: PrettyPrintable): Document","io.github.aplcornell.viaduct.syntax.BinaryOperator.toDocument"]},{"name":"abstract fun toDocument(argument: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.syntax.UnaryOperator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-unary-operator/to-document.html","searchKeys":["toDocument","abstract fun toDocument(argument: PrettyPrintable): Document","io.github.aplcornell.viaduct.syntax.UnaryOperator.toDocument"]},{"name":"abstract fun toDocument(arguments: List<PrettyPrintable>): Document","description":"io.github.aplcornell.viaduct.syntax.Operator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-operator/to-document.html","searchKeys":["toDocument","abstract fun toDocument(arguments: List<PrettyPrintable>): Document","io.github.aplcornell.viaduct.syntax.Operator.toDocument"]},{"name":"abstract fun toSurfaceNode(): ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract fun toSurfaceNode(): ExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.toSurfaceNode"]},{"name":"abstract fun toSurfaceNode(): ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializerNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initializer-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract fun toSurfaceNode(): ExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializerNode.toSurfaceNode"]},{"name":"abstract fun toSurfaceNode(): FunctionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionArgumentNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-argument-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract fun toSurfaceNode(): FunctionArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionArgumentNode.toSurfaceNode"]},{"name":"abstract fun toSurfaceNode(metadata: Metadata = mapOf()): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.Node.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract fun toSurfaceNode(metadata: Metadata = mapOf()): Node","io.github.aplcornell.viaduct.syntax.intermediate.Node.toSurfaceNode"]},{"name":"abstract fun transfer(input: A): A","description":"io.github.aplcornell.viaduct.util.dataflow.DataFlowNode.transfer","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-data-flow-node/transfer.html","searchKeys":["transfer","abstract fun transfer(input: A): A","io.github.aplcornell.viaduct.util.dataflow.DataFlowNode.transfer"]},{"name":"abstract fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator.update","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/update.html","searchKeys":["update","abstract fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGenerator.update"]},{"name":"abstract fun url(host: Host): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.url","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/url.html","searchKeys":["url","abstract fun url(host: Host): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.url"]},{"name":"abstract fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.selection.ProtocolFactory.viableProtocols","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-factory/viable-protocols.html","searchKeys":["viableProtocols","abstract fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.selection.ProtocolFactory.viableProtocols"]},{"name":"abstract fun visibleGuardHosts(protocol: Protocol): Set<Host>","description":"io.github.aplcornell.viaduct.selection.ProtocolComposer.visibleGuardHosts","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-composer/visible-guard-hosts.html","searchKeys":["visibleGuardHosts","abstract fun visibleGuardHosts(protocol: Protocol): Set<Host>","io.github.aplcornell.viaduct.selection.ProtocolComposer.visibleGuardHosts"]},{"name":"abstract fun zero(): C","description":"io.github.aplcornell.viaduct.selection.CostMonoid.zero","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-monoid/zero.html","searchKeys":["zero","abstract fun zero(): C","io.github.aplcornell.viaduct.selection.CostMonoid.zero"]},{"name":"abstract fun zeroCost(): Cost<C>","description":"io.github.aplcornell.viaduct.selection.CostEstimator.zeroCost","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-estimator/zero-cost.html","searchKeys":["zeroCost","abstract fun zeroCost(): Cost<C>","io.github.aplcornell.viaduct.selection.CostEstimator.zeroCost"]},{"name":"abstract infix fun and(that: T): T","description":"io.github.aplcornell.viaduct.security.TrustLattice.and","location":"compiler/io.github.aplcornell.viaduct.security/-trust-lattice/and.html","searchKeys":["and","abstract infix fun and(that: T): T","io.github.aplcornell.viaduct.security.TrustLattice.and"]},{"name":"abstract infix fun imply(that: T): T","description":"io.github.aplcornell.viaduct.algebra.HeytingAlgebra.imply","location":"compiler/io.github.aplcornell.viaduct.algebra/-heyting-algebra/imply.html","searchKeys":["imply","abstract infix fun imply(that: T): T","io.github.aplcornell.viaduct.algebra.HeytingAlgebra.imply"]},{"name":"abstract infix fun join(that: T): T","description":"io.github.aplcornell.viaduct.algebra.JoinSemiLattice.join","location":"compiler/io.github.aplcornell.viaduct.algebra/-join-semi-lattice/join.html","searchKeys":["join","abstract infix fun join(that: T): T","io.github.aplcornell.viaduct.algebra.JoinSemiLattice.join"]},{"name":"abstract infix fun meet(that: T): T","description":"io.github.aplcornell.viaduct.algebra.MeetSemiLattice.meet","location":"compiler/io.github.aplcornell.viaduct.algebra/-meet-semi-lattice/meet.html","searchKeys":["meet","abstract infix fun meet(that: T): T","io.github.aplcornell.viaduct.algebra.MeetSemiLattice.meet"]},{"name":"abstract infix fun or(that: T): T","description":"io.github.aplcornell.viaduct.security.TrustLattice.or","location":"compiler/io.github.aplcornell.viaduct.security/-trust-lattice/or.html","searchKeys":["or","abstract infix fun or(that: T): T","io.github.aplcornell.viaduct.security.TrustLattice.or"]},{"name":"abstract override fun copy(children: List<Node>): AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-atomic-expression-node/copy.html","searchKeys":["copy","abstract override fun copy(children: List<Node>): AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode.copy"]},{"name":"abstract override fun copy(children: List<Node>): ControlNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ControlNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-control-node/copy.html","searchKeys":["copy","abstract override fun copy(children: List<Node>): ControlNode","io.github.aplcornell.viaduct.syntax.intermediate.ControlNode.copy"]},{"name":"abstract override fun copy(children: List<Node>): DowngradeNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-downgrade-node/copy.html","searchKeys":["copy","abstract override fun copy(children: List<Node>): DowngradeNode","io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.copy"]},{"name":"abstract override fun copy(children: List<Node>): ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-node/copy.html","searchKeys":["copy","abstract override fun copy(children: List<Node>): ExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.copy"]},{"name":"abstract override fun copy(children: List<Node>): SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-simple-statement-node/copy.html","searchKeys":["copy","abstract override fun copy(children: List<Node>): SimpleStatementNode","io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode.copy"]},{"name":"abstract override fun copy(children: List<Node>): StatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.StatementNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-statement-node/copy.html","searchKeys":["copy","abstract override fun copy(children: List<Node>): StatementNode","io.github.aplcornell.viaduct.syntax.intermediate.StatementNode.copy"]},{"name":"abstract override fun toSurfaceNode(): AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-atomic-expression-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract override fun toSurfaceNode(): AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode.toSurfaceNode"]},{"name":"abstract override fun toSurfaceNode(metadata: Metadata): DelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract override fun toSurfaceNode(metadata: Metadata): DelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.toSurfaceNode"]},{"name":"abstract override fun toSurfaceNode(metadata: Metadata): SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-simple-statement-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract override fun toSurfaceNode(metadata: Metadata): SimpleStatementNode","io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode.toSurfaceNode"]},{"name":"abstract override fun toSurfaceNode(metadata: Metadata): StatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.StatementNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-statement-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract override fun toSurfaceNode(metadata: Metadata): StatementNode","io.github.aplcornell.viaduct.syntax.intermediate.StatementNode.toSurfaceNode"]},{"name":"abstract override fun toSurfaceNode(metadata: Metadata): TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.TopLevelDeclarationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-top-level-declaration-node/to-surface-node.html","searchKeys":["toSurfaceNode","abstract override fun toSurfaceNode(metadata: Metadata): TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.TopLevelDeclarationNode.toSurfaceNode"]},{"name":"abstract override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-node/children.html","searchKeys":["children","abstract override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.children"]},{"name":"abstract override val children: Iterable<Node>","description":"io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-simple-statement-node/children.html","searchKeys":["children","abstract override val children: Iterable<Node>","io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode.children"]},{"name":"abstract override val name: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectVariableDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-variable-declaration-node/name.html","searchKeys":["name","abstract override val name: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectVariableDeclarationNode.name"]},{"name":"abstract val arguments: Map<String, Value>","description":"io.github.aplcornell.viaduct.syntax.Protocol.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/arguments.html","searchKeys":["arguments","abstract val arguments: Map<String, Value>","io.github.aplcornell.viaduct.syntax.Protocol.arguments"]},{"name":"abstract val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.Operator.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax/-operator/associativity.html","searchKeys":["associativity","abstract val associativity: Associativity","io.github.aplcornell.viaduct.syntax.Operator.associativity"]},{"name":"abstract val body: BlockNode","description":"io.github.aplcornell.viaduct.syntax.surface.LoopNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-loop-node/body.html","searchKeys":["body","abstract val body: BlockNode","io.github.aplcornell.viaduct.syntax.surface.LoopNode.body"]},{"name":"abstract val bottom: T","description":"io.github.aplcornell.viaduct.algebra.BoundedJoinSemiLattice.bottom","location":"compiler/io.github.aplcornell.viaduct.algebra/-bounded-join-semi-lattice/bottom.html","searchKeys":["bottom","abstract val bottom: T","io.github.aplcornell.viaduct.algebra.BoundedJoinSemiLattice.bottom"]},{"name":"abstract val children: Iterable<Node>","description":"io.github.aplcornell.viaduct.attributes.TreeNode.children","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree-node/children.html","searchKeys":["children","abstract val children: Iterable<Node>","io.github.aplcornell.viaduct.attributes.TreeNode.children"]},{"name":"abstract val className: ClassName","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType.className","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/class-name.html","searchKeys":["className","abstract val className: ClassName","io.github.aplcornell.viaduct.syntax.types.ObjectType.className"]},{"name":"abstract val comment: String?","description":"io.github.aplcornell.viaduct.syntax.surface.Node.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-node/comment.html","searchKeys":["comment","abstract val comment: String?","io.github.aplcornell.viaduct.syntax.surface.Node.comment"]},{"name":"abstract val constructorArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType.constructorArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/constructor-arguments.html","searchKeys":["constructorArguments","abstract val constructorArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.ObjectType.constructorArguments"]},{"name":"abstract val expression: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-downgrade-node/expression.html","searchKeys":["expression","abstract val expression: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.expression"]},{"name":"abstract val expression: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.DowngradeNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-downgrade-node/expression.html","searchKeys":["expression","abstract val expression: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.DowngradeNode.expression"]},{"name":"abstract val fromLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.fromLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-downgrade-node/from-label.html","searchKeys":["fromLabel","abstract val fromLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.fromLabel"]},{"name":"abstract val fromLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.DowngradeNode.fromLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-downgrade-node/from-label.html","searchKeys":["fromLabel","abstract val fromLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.surface.DowngradeNode.fromLabel"]},{"name":"abstract val host: Host","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.host","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/host.html","searchKeys":["host","abstract val host: Host","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.host"]},{"name":"abstract val host: Host","description":"io.github.aplcornell.viaduct.syntax.ProtocolPort.host","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-port/host.html","searchKeys":["host","abstract val host: Host","io.github.aplcornell.viaduct.syntax.ProtocolPort.host"]},{"name":"abstract val host: HostNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.CommunicationNode.host","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-communication-node/host.html","searchKeys":["host","abstract val host: HostNode","io.github.aplcornell.viaduct.syntax.intermediate.CommunicationNode.host"]},{"name":"abstract val id: PortId","description":"io.github.aplcornell.viaduct.syntax.ProtocolPort.id","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-port/id.html","searchKeys":["id","abstract val id: PortId","io.github.aplcornell.viaduct.syntax.ProtocolPort.id"]},{"name":"abstract val jumpLabel: JumpLabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.LoopNode.jumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-loop-node/jump-label.html","searchKeys":["jumpLabel","abstract val jumpLabel: JumpLabelNode?","io.github.aplcornell.viaduct.syntax.surface.LoopNode.jumpLabel"]},{"name":"abstract val name: VariableNode","description":"io.github.aplcornell.viaduct.syntax.circuit.VariableDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-variable-declaration-node/name.html","searchKeys":["name","abstract val name: VariableNode","io.github.aplcornell.viaduct.syntax.circuit.VariableDeclarationNode.name"]},{"name":"abstract val name: VariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.VariableDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-variable-declaration-node/name.html","searchKeys":["name","abstract val name: VariableNode","io.github.aplcornell.viaduct.syntax.intermediate.VariableDeclarationNode.name"]},{"name":"abstract val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.Operator.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax/-operator/precedence.html","searchKeys":["precedence","abstract val precedence: Precedence","io.github.aplcornell.viaduct.syntax.Operator.precedence"]},{"name":"abstract val principal: A","description":"io.github.aplcornell.viaduct.security.Component.principal","location":"compiler/io.github.aplcornell.viaduct.security/-component/principal.html","searchKeys":["principal","abstract val principal: A","io.github.aplcornell.viaduct.security.Component.principal"]},{"name":"abstract val program: ProgramNode","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.program","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/program.html","searchKeys":["program","abstract val program: ProgramNode","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.program"]},{"name":"abstract val protocol: Protocol","description":"io.github.aplcornell.viaduct.syntax.ProtocolPort.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-port/protocol.html","searchKeys":["protocol","abstract val protocol: Protocol","io.github.aplcornell.viaduct.syntax.ProtocolPort.protocol"]},{"name":"abstract val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.VariableDeclarationNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-variable-declaration-node/protocol.html","searchKeys":["protocol","abstract val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.intermediate.VariableDeclarationNode.protocol"]},{"name":"abstract val protocolComposer: ProtocolComposer","description":"io.github.aplcornell.viaduct.backends.Backend.protocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends/-backend/protocol-composer.html","searchKeys":["protocolComposer","abstract val protocolComposer: ProtocolComposer","io.github.aplcornell.viaduct.backends.Backend.protocolComposer"]},{"name":"abstract val protocolComposer: ProtocolComposer","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.protocolComposer","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/protocol-composer.html","searchKeys":["protocolComposer","abstract val protocolComposer: ProtocolComposer","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext.protocolComposer"]},{"name":"abstract val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.syntax.Protocol.protocolName","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/protocol-name.html","searchKeys":["protocolName","abstract val protocolName: ProtocolName","io.github.aplcornell.viaduct.syntax.Protocol.protocolName"]},{"name":"abstract val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","description":"io.github.aplcornell.viaduct.backends.Backend.protocolParsers","location":"compiler/io.github.aplcornell.viaduct.backends/-backend/protocol-parsers.html","searchKeys":["protocolParsers","abstract val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","io.github.aplcornell.viaduct.backends.Backend.protocolParsers"]},{"name":"abstract val protocols: Set<ProtocolName>","description":"io.github.aplcornell.viaduct.backends.Backend.protocols","location":"compiler/io.github.aplcornell.viaduct.backends/-backend/protocols.html","searchKeys":["protocols","abstract val protocols: Set<ProtocolName>","io.github.aplcornell.viaduct.backends.Backend.protocols"]},{"name":"abstract val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.HasSourceLocation.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax/-has-source-location/source-location.html","searchKeys":["sourceLocation","abstract val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.HasSourceLocation.sourceLocation"]},{"name":"abstract val strongest: T","description":"io.github.aplcornell.viaduct.security.BoundedTrustLattice.strongest","location":"compiler/io.github.aplcornell.viaduct.security/-bounded-trust-lattice/strongest.html","searchKeys":["strongest","abstract val strongest: T","io.github.aplcornell.viaduct.security.BoundedTrustLattice.strongest"]},{"name":"abstract val toLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.toLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-downgrade-node/to-label.html","searchKeys":["toLabel","abstract val toLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.toLabel"]},{"name":"abstract val toLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.DowngradeNode.toLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-downgrade-node/to-label.html","searchKeys":["toLabel","abstract val toLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.surface.DowngradeNode.toLabel"]},{"name":"abstract val top: T","description":"io.github.aplcornell.viaduct.algebra.BoundedMeetSemiLattice.top","location":"compiler/io.github.aplcornell.viaduct.algebra/-bounded-meet-semi-lattice/top.html","searchKeys":["top","abstract val top: T","io.github.aplcornell.viaduct.algebra.BoundedMeetSemiLattice.top"]},{"name":"abstract val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.Operator.type","location":"compiler/io.github.aplcornell.viaduct.syntax/-operator/type.html","searchKeys":["type","abstract val type: FunctionType","io.github.aplcornell.viaduct.syntax.Operator.type"]},{"name":"abstract val typeArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType.typeArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/type-arguments.html","searchKeys":["typeArguments","abstract val typeArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.ObjectType.typeArguments"]},{"name":"abstract val weakest: T","description":"io.github.aplcornell.viaduct.security.BoundedTrustLattice.weakest","location":"compiler/io.github.aplcornell.viaduct.security/-bounded-trust-lattice/weakest.html","searchKeys":["weakest","abstract val weakest: T","io.github.aplcornell.viaduct.security.BoundedTrustLattice.weakest"]},{"name":"class ABYCodeGenerator(val context: CodeGeneratorContext) : AbstractCodeGenerator","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/index.html","searchKeys":["ABYCodeGenerator","class ABYCodeGenerator(val context: CodeGeneratorContext) : AbstractCodeGenerator","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator"]},{"name":"class ABYProtocolFactory(program: ProgramNode) : ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/index.html","searchKeys":["ABYProtocolFactory","class ABYProtocolFactory(program: ProgramNode) : ProtocolFactory","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory"]},{"name":"class Arguments<out T> : HasSourceLocation, List<T> ","description":"io.github.aplcornell.viaduct.syntax.Arguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-arguments/index.html","searchKeys":["Arguments","class Arguments<out T> : HasSourceLocation, List<T> ","io.github.aplcornell.viaduct.syntax.Arguments"]},{"name":"class ArithABY(val server: Host, val client: Host) : ABY","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/index.html","searchKeys":["ArithABY","class ArithABY(val server: Host, val client: Host) : ABY","io.github.aplcornell.viaduct.backends.aby.ArithABY"]},{"name":"class ArrayType(val elementType: ValueTypeNode, val shape: Arguments<IndexExpressionNode>) : Type","description":"io.github.aplcornell.viaduct.syntax.circuit.ArrayType","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-array-type/index.html","searchKeys":["ArrayType","class ArrayType(val elementType: ValueTypeNode, val shape: Arguments<IndexExpressionNode>) : Type","io.github.aplcornell.viaduct.syntax.circuit.ArrayType"]},{"name":"class AssertionNode(val condition: AtomicExpressionNode, val sourceLocation: SourceLocation) : StatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-assertion-node/index.html","searchKeys":["AssertionNode","class AssertionNode(val condition: AtomicExpressionNode, val sourceLocation: SourceLocation) : StatementNode","io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode"]},{"name":"class AssertionNode(val condition: ExpressionNode, val sourceLocation: SourceLocation, val comment: String? = null) : StatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.AssertionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-assertion-node/index.html","searchKeys":["AssertionNode","class AssertionNode(val condition: ExpressionNode, val sourceLocation: SourceLocation, val comment: String? = null) : StatementNode","io.github.aplcornell.viaduct.syntax.surface.AssertionNode"]},{"name":"class AuthorityDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation) : DelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/index.html","searchKeys":["AuthorityDelegationDeclarationNode","class AuthorityDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation) : DelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode"]},{"name":"class AuthorityDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation, val comment: String?) : DelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-authority-delegation-declaration-node/index.html","searchKeys":["AuthorityDelegationDeclarationNode","class AuthorityDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation, val comment: String?) : DelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode"]},{"name":"class BlockNode : StatementNode, List<StatementNode> ","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/index.html","searchKeys":["BlockNode","class BlockNode : StatementNode, List<StatementNode> ","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode"]},{"name":"class BlockNode : StatementNode, List<StatementNode> ","description":"io.github.aplcornell.viaduct.syntax.surface.BlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-block-node/index.html","searchKeys":["BlockNode","class BlockNode : StatementNode, List<StatementNode> ","io.github.aplcornell.viaduct.syntax.surface.BlockNode"]},{"name":"class BoolABY(val server: Host, val client: Host) : ABY","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/index.html","searchKeys":["BoolABY","class BoolABY(val server: Host, val client: Host) : ABY","io.github.aplcornell.viaduct.backends.aby.BoolABY"]},{"name":"class BoundParameterNode(val name: VariableNode, val sourceLocation: SourceLocation) : Node, VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-bound-parameter-node/index.html","searchKeys":["BoundParameterNode","class BoundParameterNode(val name: VariableNode, val sourceLocation: SourceLocation) : Node, VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode"]},{"name":"class Bounds<C : Lattice<C>, V>(bounds: BoundedLattice<C>) : BoundedLattice<Term<C, V>> ","description":"io.github.aplcornell.viaduct.algebra.solver.Term.Bounds","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/-bounds/index.html","searchKeys":["Bounds","class Bounds<C : Lattice<C>, V>(bounds: BoundedLattice<C>) : BoundedLattice<Term<C, V>> ","io.github.aplcornell.viaduct.algebra.solver.Term.Bounds"]},{"name":"class Bounds<T : Lattice<T>>(bounds: BoundedLattice<T>) : BoundedLattice<SecurityLattice<T>> , BoundedTrustLattice<SecurityLattice<T>> ","description":"io.github.aplcornell.viaduct.security.SecurityLattice.Bounds","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-bounds/index.html","searchKeys":["Bounds","class Bounds<T : Lattice<T>>(bounds: BoundedLattice<T>) : BoundedLattice<SecurityLattice<T>> , BoundedTrustLattice<SecurityLattice<T>> ","io.github.aplcornell.viaduct.security.SecurityLattice.Bounds"]},{"name":"class BreakNode(val jumpLabel: JumpLabelNode, val sourceLocation: SourceLocation) : ControlNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.BreakNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-break-node/index.html","searchKeys":["BreakNode","class BreakNode(val jumpLabel: JumpLabelNode, val sourceLocation: SourceLocation) : ControlNode","io.github.aplcornell.viaduct.syntax.intermediate.BreakNode"]},{"name":"class BreakNode(val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : StatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.BreakNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-break-node/index.html","searchKeys":["BreakNode","class BreakNode(val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : StatementNode","io.github.aplcornell.viaduct.syntax.surface.BreakNode"]},{"name":"class CircuitBlockNode : Node, List<CircuitStatementNode> ","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-block-node/index.html","searchKeys":["CircuitBlockNode","class CircuitBlockNode : Node, List<CircuitStatementNode> ","io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode"]},{"name":"class CircuitDeclarationNode(val name: FunctionNameNode, val protocol: ProtocolNode, val bounds: Arguments<BoundParameterNode>, val inputs: Arguments<ParameterNode>, val outputs: Arguments<ParameterNode>, val body: CircuitBlockNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/index.html","searchKeys":["CircuitDeclarationNode","class CircuitDeclarationNode(val name: FunctionNameNode, val protocol: ProtocolNode, val bounds: Arguments<BoundParameterNode>, val inputs: Arguments<ParameterNode>, val outputs: Arguments<ParameterNode>, val body: CircuitBlockNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode"]},{"name":"class CleartextCodeGenerator(val context: CodeGeneratorContext) : AbstractCodeGenerator","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-code-generator/index.html","searchKeys":["CleartextCodeGenerator","class CleartextCodeGenerator(val context: CodeGeneratorContext) : AbstractCodeGenerator","io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator"]},{"name":"class Commitment(val cleartextHost: Host, val hashHosts: Set<Host>) : Protocol","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/index.html","searchKeys":["Commitment","class Commitment(val cleartextHost: Host, val hashHosts: Set<Host>) : Protocol","io.github.aplcornell.viaduct.backends.commitment.Commitment"]},{"name":"class CommitmentDispatchCodeGenerator(context: CodeGeneratorContext) : CodeGeneratorDispatcher","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentDispatchCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-dispatch-code-generator/index.html","searchKeys":["CommitmentDispatchCodeGenerator","class CommitmentDispatchCodeGenerator(context: CodeGeneratorContext) : CodeGeneratorDispatcher","io.github.aplcornell.viaduct.backends.commitment.CommitmentDispatchCodeGenerator"]},{"name":"class CommitmentProtocolFactory(val program: ProgramNode) : ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-factory/index.html","searchKeys":["CommitmentProtocolFactory","class CommitmentProtocolFactory(val program: ProgramNode) : ProtocolFactory","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory"]},{"name":"class ConfidentialityChangingEndorsementError(node: EndorsementNode, from: Label, to: Label) : InformationFlowError","description":"io.github.aplcornell.viaduct.errors.ConfidentialityChangingEndorsementError","location":"compiler/io.github.aplcornell.viaduct.errors/-confidentiality-changing-endorsement-error/index.html","searchKeys":["ConfidentialityChangingEndorsementError","class ConfidentialityChangingEndorsementError(node: EndorsementNode, from: Label, to: Label) : InformationFlowError","io.github.aplcornell.viaduct.errors.ConfidentialityChangingEndorsementError"]},{"name":"class ConstraintSolution<C : Lattice<C>, V> : Function1<V, C> ","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSolution","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-solution/index.html","searchKeys":["ConstraintSolution","class ConstraintSolution<C : Lattice<C>, V> : Function1<V, C> ","io.github.aplcornell.viaduct.algebra.solver.ConstraintSolution"]},{"name":"class ConstraintSolution<C : Lattice<C>, V> : Function1<V, SecurityLattice<C>> ","description":"io.github.aplcornell.viaduct.security.solver.ConstraintSolution","location":"compiler/io.github.aplcornell.viaduct.security.solver/-constraint-solution/index.html","searchKeys":["ConstraintSolution","class ConstraintSolution<C : Lattice<C>, V> : Function1<V, SecurityLattice<C>> ","io.github.aplcornell.viaduct.security.solver.ConstraintSolution"]},{"name":"class ConstraintSystem<C : HeytingAlgebra<C>, V, T : Throwable>(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-system/index.html","searchKeys":["ConstraintSystem","class ConstraintSystem<C : HeytingAlgebra<C>, V, T : Throwable>(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem"]},{"name":"class ConstraintSystem<C : HeytingAlgebra<C>, V, T : Throwable>(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","description":"io.github.aplcornell.viaduct.security.solver.ConstraintSystem","location":"compiler/io.github.aplcornell.viaduct.security.solver/-constraint-system/index.html","searchKeys":["ConstraintSystem","class ConstraintSystem<C : HeytingAlgebra<C>, V, T : Throwable>(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","io.github.aplcornell.viaduct.security.solver.ConstraintSystem"]},{"name":"class ConstructorCallNode(val objectType: ObjectTypeNode, val protocol: ProtocolNode?, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation) : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-constructor-call-node/index.html","searchKeys":["ConstructorCallNode","class ConstructorCallNode(val objectType: ObjectTypeNode, val protocol: ProtocolNode?, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation) : ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode"]},{"name":"class CycleInAttributeDefinitionException : RuntimeException","description":"io.github.aplcornell.viaduct.attributes.CycleInAttributeDefinitionException","location":"compiler/io.github.aplcornell.viaduct.attributes/-cycle-in-attribute-definition-exception/index.html","searchKeys":["CycleInAttributeDefinitionException","class CycleInAttributeDefinitionException : RuntimeException","io.github.aplcornell.viaduct.attributes.CycleInAttributeDefinitionException"]},{"name":"class DeclarationNode(val name: ObjectVariableNode, val objectType: ObjectTypeNode, val arguments: Arguments<AtomicExpressionNode>, val protocol: ProtocolNode?, val sourceLocation: SourceLocation) : SimpleStatementNode, ObjectVariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/index.html","searchKeys":["DeclarationNode","class DeclarationNode(val name: ObjectVariableNode, val objectType: ObjectTypeNode, val arguments: Arguments<AtomicExpressionNode>, val protocol: ProtocolNode?, val sourceLocation: SourceLocation) : SimpleStatementNode, ObjectVariableDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode"]},{"name":"class DeclarationNode(val variable: ObjectVariableNode, val initializer: ExpressionNode, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.DeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declaration-node/index.html","searchKeys":["DeclarationNode","class DeclarationNode(val variable: ObjectVariableNode, val initializer: ExpressionNode, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.DeclarationNode"]},{"name":"class DeclassificationNode(val expression: AtomicExpressionNode, val fromLabel: LabelNode?, val toLabel: LabelNode, val sourceLocation: SourceLocation) : DowngradeNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/index.html","searchKeys":["DeclassificationNode","class DeclassificationNode(val expression: AtomicExpressionNode, val fromLabel: LabelNode?, val toLabel: LabelNode, val sourceLocation: SourceLocation) : DowngradeNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode"]},{"name":"class DeclassificationNode(val expression: ExpressionNode, val fromLabel: LabelNode?, val toLabel: LabelNode, val sourceLocation: SourceLocation) : DowngradeNode","description":"io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declassification-node/index.html","searchKeys":["DeclassificationNode","class DeclassificationNode(val expression: ExpressionNode, val fromLabel: LabelNode?, val toLabel: LabelNode, val sourceLocation: SourceLocation) : DowngradeNode","io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode"]},{"name":"class EndorsementNode(val expression: AtomicExpressionNode, val fromLabel: LabelNode, val toLabel: LabelNode?, val sourceLocation: SourceLocation) : DowngradeNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/index.html","searchKeys":["EndorsementNode","class EndorsementNode(val expression: AtomicExpressionNode, val fromLabel: LabelNode, val toLabel: LabelNode?, val sourceLocation: SourceLocation) : DowngradeNode","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode"]},{"name":"class EndorsementNode(val expression: ExpressionNode, val fromLabel: LabelNode, val toLabel: LabelNode?, val sourceLocation: SourceLocation) : DowngradeNode","description":"io.github.aplcornell.viaduct.syntax.surface.EndorsementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-endorsement-node/index.html","searchKeys":["EndorsementNode","class EndorsementNode(val expression: ExpressionNode, val fromLabel: LabelNode, val toLabel: LabelNode?, val sourceLocation: SourceLocation) : DowngradeNode","io.github.aplcornell.viaduct.syntax.surface.EndorsementNode"]},{"name":"class ExpressionArgumentNode(val expression: AtomicExpressionNode, val sourceLocation: SourceLocation) : FunctionInputArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-argument-node/index.html","searchKeys":["ExpressionArgumentNode","class ExpressionArgumentNode(val expression: AtomicExpressionNode, val sourceLocation: SourceLocation) : FunctionInputArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode"]},{"name":"class ExpressionArgumentNode(val expression: ExpressionNode, val sourceLocation: SourceLocation) : FunctionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-expression-argument-node/index.html","searchKeys":["ExpressionArgumentNode","class ExpressionArgumentNode(val expression: ExpressionNode, val sourceLocation: SourceLocation) : FunctionArgumentNode","io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode"]},{"name":"class ForLoopNode(val initialize: SimpleStatementNode, val guard: ExpressionNode, val update: SimpleStatementNode, val body: BlockNode, val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : LoopNode","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/index.html","searchKeys":["ForLoopNode","class ForLoopNode(val initialize: SimpleStatementNode, val guard: ExpressionNode, val update: SimpleStatementNode, val body: BlockNode, val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : LoopNode","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode"]},{"name":"class FreeDistributiveLattice<A> : HeytingAlgebra<FreeDistributiveLattice<A>> ","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/index.html","searchKeys":["FreeDistributiveLattice","class FreeDistributiveLattice<A> : HeytingAlgebra<FreeDistributiveLattice<A>> ","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice"]},{"name":"class FreeDistributiveLatticeCongruence<A>(congruence: List<FreeDistributiveLattice.LessThanOrEqualTo<A>>) : LatticeCongruence<FreeDistributiveLattice<A>> ","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice-congruence/index.html","searchKeys":["FreeDistributiveLatticeCongruence","class FreeDistributiveLatticeCongruence<A>(congruence: List<FreeDistributiveLattice.LessThanOrEqualTo<A>>) : LatticeCongruence<FreeDistributiveLattice<A>> ","io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence"]},{"name":"class FreshNameGenerator(initialNames: Set<String>)","description":"io.github.aplcornell.viaduct.util.FreshNameGenerator","location":"compiler/io.github.aplcornell.viaduct.util/-fresh-name-generator/index.html","searchKeys":["FreshNameGenerator","class FreshNameGenerator(initialNames: Set<String>)","io.github.aplcornell.viaduct.util.FreshNameGenerator"]},{"name":"class FunctionCallNode(val name: FunctionNameNode, val arguments: Arguments<FunctionArgumentNode>, val sourceLocation: SourceLocation) : ControlNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/index.html","searchKeys":["FunctionCallNode","class FunctionCallNode(val name: FunctionNameNode, val arguments: Arguments<FunctionArgumentNode>, val sourceLocation: SourceLocation) : ControlNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode"]},{"name":"class FunctionCallNode(val name: FunctionNameNode, val arguments: Arguments<FunctionArgumentNode>, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-call-node/index.html","searchKeys":["FunctionCallNode","class FunctionCallNode(val name: FunctionNameNode, val arguments: Arguments<FunctionArgumentNode>, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode"]},{"name":"class FunctionDeclarationNode(val name: FunctionNameNode, val labelParameters: Arguments<LabelVariableNode>, val parameters: Arguments<ParameterNode>, val labelConstraints: Arguments<IFCDelegationDeclarationNode>, val pcLabel: LabelNode, val body: BlockNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/index.html","searchKeys":["FunctionDeclarationNode","class FunctionDeclarationNode(val name: FunctionNameNode, val labelParameters: Arguments<LabelVariableNode>, val parameters: Arguments<ParameterNode>, val labelConstraints: Arguments<IFCDelegationDeclarationNode>, val pcLabel: LabelNode, val body: BlockNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode"]},{"name":"class FunctionDeclarationNode(val name: FunctionNameNode, val labelParameters: Arguments<LabelVariableNode>?, val parameters: Arguments<ParameterNode>, val labelConstraints: Arguments<IFCDelegationDeclarationNode>?, val pcLabel: LabelNode?, val body: BlockNode, val sourceLocation: SourceLocation, val comment: String? = null) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/index.html","searchKeys":["FunctionDeclarationNode","class FunctionDeclarationNode(val name: FunctionNameNode, val labelParameters: Arguments<LabelVariableNode>?, val parameters: Arguments<ParameterNode>, val labelConstraints: Arguments<IFCDelegationDeclarationNode>?, val pcLabel: LabelNode?, val body: BlockNode, val sourceLocation: SourceLocation, val comment: String? = null) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode"]},{"name":"class FunctionType : Type","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/index.html","searchKeys":["FunctionType","class FunctionType : Type","io.github.aplcornell.viaduct.syntax.types.FunctionType"]},{"name":"class HostDeclarationNode(val name: HostNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-host-declaration-node/index.html","searchKeys":["HostDeclarationNode","class HostDeclarationNode(val name: HostNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode"]},{"name":"class HostDeclarationNode(val name: HostNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-host-declaration-node/index.html","searchKeys":["HostDeclarationNode","class HostDeclarationNode(val name: HostNode, val sourceLocation: SourceLocation) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode"]},{"name":"class HostDeclarationNode(val name: HostNode, val sourceLocation: SourceLocation, val comment: String? = null) : TopLevelDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-host-declaration-node/index.html","searchKeys":["HostDeclarationNode","class HostDeclarationNode(val name: HostNode, val sourceLocation: SourceLocation, val comment: String? = null) : TopLevelDeclarationNode","io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode"]},{"name":"class HostSetValue : Value, PersistentSet<Host> ","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/index.html","searchKeys":["HostSetValue","class HostSetValue : Value, PersistentSet<Host> ","io.github.aplcornell.viaduct.syntax.values.HostSetValue"]},{"name":"class HostTrustConfiguration","description":"io.github.aplcornell.viaduct.syntax.HostTrustConfiguration","location":"compiler/io.github.aplcornell.viaduct.syntax/-host-trust-configuration/index.html","searchKeys":["HostTrustConfiguration","class HostTrustConfiguration","io.github.aplcornell.viaduct.syntax.HostTrustConfiguration"]},{"name":"class IFCDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation) : DelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/index.html","searchKeys":["IFCDelegationDeclarationNode","class IFCDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation) : DelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode"]},{"name":"class IFCDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation, val comment: String?) : DelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-i-f-c-delegation-declaration-node/index.html","searchKeys":["IFCDelegationDeclarationNode","class IFCDelegationDeclarationNode(val from: LabelNode, val to: LabelNode, val delegationProjection: DelegationProjection, val sourceLocation: SourceLocation, val comment: String?) : DelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode"]},{"name":"class IdentityEdge<A> : DefaultEdge, DataFlowEdge<A> ","description":"io.github.aplcornell.viaduct.util.dataflow.IdentityEdge","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-identity-edge/index.html","searchKeys":["IdentityEdge","class IdentityEdge<A> : DefaultEdge, DataFlowEdge<A> ","io.github.aplcornell.viaduct.util.dataflow.IdentityEdge"]},{"name":"class IfNode(val guard: AtomicExpressionNode, val thenBranch: BlockNode, val elseBranch: BlockNode, val sourceLocation: SourceLocation) : ControlNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/index.html","searchKeys":["IfNode","class IfNode(val guard: AtomicExpressionNode, val thenBranch: BlockNode, val elseBranch: BlockNode, val sourceLocation: SourceLocation) : ControlNode","io.github.aplcornell.viaduct.syntax.intermediate.IfNode"]},{"name":"class IfNode(val guard: ExpressionNode, val thenBranch: BlockNode, val elseBranch: BlockNode, val sourceLocation: SourceLocation, val comment: String? = null) : StatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.IfNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-if-node/index.html","searchKeys":["IfNode","class IfNode(val guard: ExpressionNode, val thenBranch: BlockNode, val elseBranch: BlockNode, val sourceLocation: SourceLocation, val comment: String? = null) : StatementNode","io.github.aplcornell.viaduct.syntax.surface.IfNode"]},{"name":"class IllegalCharacterError(location: SourceLocation) : CompilationError","description":"io.github.aplcornell.viaduct.errors.IllegalCharacterError","location":"compiler/io.github.aplcornell.viaduct.errors/-illegal-character-error/index.html","searchKeys":["IllegalCharacterError","class IllegalCharacterError(location: SourceLocation) : CompilationError","io.github.aplcornell.viaduct.errors.IllegalCharacterError"]},{"name":"class IllegalTermException(term: Term<*, *>) : IllegalArgumentException","description":"io.github.aplcornell.viaduct.algebra.solver.IllegalTermException","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-illegal-term-exception/index.html","searchKeys":["IllegalTermException","class IllegalTermException(term: Term<*, *>) : IllegalArgumentException","io.github.aplcornell.viaduct.algebra.solver.IllegalTermException"]},{"name":"class IncorrectNumberOfArgumentsError(method: Located<Name>, expected: Int, actual: Arguments<*>) : CompilationError","description":"io.github.aplcornell.viaduct.errors.IncorrectNumberOfArgumentsError","location":"compiler/io.github.aplcornell.viaduct.errors/-incorrect-number-of-arguments-error/index.html","searchKeys":["IncorrectNumberOfArgumentsError","class IncorrectNumberOfArgumentsError(method: Located<Name>, expected: Int, actual: Arguments<*>) : CompilationError","io.github.aplcornell.viaduct.errors.IncorrectNumberOfArgumentsError"]},{"name":"class IndexParameterNode(val name: VariableNode, val bound: IndexExpressionNode, val sourceLocation: SourceLocation) : Node, VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-index-parameter-node/index.html","searchKeys":["IndexParameterNode","class IndexParameterNode(val name: VariableNode, val bound: IndexExpressionNode, val sourceLocation: SourceLocation) : Node, VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode"]},{"name":"class InfiniteLoopNode(val body: BlockNode, val jumpLabel: JumpLabelNode, val sourceLocation: SourceLocation) : ControlNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/index.html","searchKeys":["InfiniteLoopNode","class InfiniteLoopNode(val body: BlockNode, val jumpLabel: JumpLabelNode, val sourceLocation: SourceLocation) : ControlNode","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode"]},{"name":"class InfiniteLoopNode(val body: BlockNode, val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : LoopNode","description":"io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-infinite-loop-node/index.html","searchKeys":["InfiniteLoopNode","class InfiniteLoopNode(val body: BlockNode, val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : LoopNode","io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode"]},{"name":"class InformationFlowAnalysis","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/index.html","searchKeys":["InformationFlowAnalysis","class InformationFlowAnalysis","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis"]},{"name":"class InputNode(val type: ValueTypeNode, val host: HostNode, val sourceLocation: SourceLocation) : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.InputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-input-node/index.html","searchKeys":["InputNode","class InputNode(val type: ValueTypeNode, val host: HostNode, val sourceLocation: SourceLocation) : ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.InputNode"]},{"name":"class InputNode(val type: ValueTypeNode, val host: HostNode, val sourceLocation: SourceLocation) : ExpressionNode, CommunicationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/index.html","searchKeys":["InputNode","class InputNode(val type: ValueTypeNode, val host: HostNode, val sourceLocation: SourceLocation) : ExpressionNode, CommunicationNode","io.github.aplcornell.viaduct.syntax.intermediate.InputNode"]},{"name":"class InsecureControlFlowError(node: HasSourceLocation, nodeLabel: Label, pc: Label, context: FreeDistributiveLatticeCongruence<PrincipalComponent>) : InformationFlowError","description":"io.github.aplcornell.viaduct.errors.InsecureControlFlowError","location":"compiler/io.github.aplcornell.viaduct.errors/-insecure-control-flow-error/index.html","searchKeys":["InsecureControlFlowError","class InsecureControlFlowError(node: HasSourceLocation, nodeLabel: Label, pc: Label, context: FreeDistributiveLatticeCongruence<PrincipalComponent>) : InformationFlowError","io.github.aplcornell.viaduct.errors.InsecureControlFlowError"]},{"name":"class InsecureDataFlowError(node: HasSourceLocation, nodeLabel: Label, to: Label, context: FreeDistributiveLatticeCongruence<Component<Principal>>) : InformationFlowError","description":"io.github.aplcornell.viaduct.errors.InsecureDataFlowError","location":"compiler/io.github.aplcornell.viaduct.errors/-insecure-data-flow-error/index.html","searchKeys":["InsecureDataFlowError","class InsecureDataFlowError(node: HasSourceLocation, nodeLabel: Label, to: Label, context: FreeDistributiveLatticeCongruence<Component<Principal>>) : InformationFlowError","io.github.aplcornell.viaduct.errors.InsecureDataFlowError"]},{"name":"class IntegerCost(val cost: Int) : CostMonoid<IntegerCost> ","description":"io.github.aplcornell.viaduct.selection.IntegerCost","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/index.html","searchKeys":["IntegerCost","class IntegerCost(val cost: Int) : CostMonoid<IntegerCost> ","io.github.aplcornell.viaduct.selection.IntegerCost"]},{"name":"class IntegrityChangingDeclassificationError(node: DeclassificationNode, from: Label, to: Label) : InformationFlowError","description":"io.github.aplcornell.viaduct.errors.IntegrityChangingDeclassificationError","location":"compiler/io.github.aplcornell.viaduct.errors/-integrity-changing-declassification-error/index.html","searchKeys":["IntegrityChangingDeclassificationError","class IntegrityChangingDeclassificationError(node: DeclassificationNode, from: Label, to: Label) : InformationFlowError","io.github.aplcornell.viaduct.errors.IntegrityChangingDeclassificationError"]},{"name":"class InvalidConstructorCallError(node: Node, constructorNeeded: Boolean = false) : CompilationError","description":"io.github.aplcornell.viaduct.errors.InvalidConstructorCallError","location":"compiler/io.github.aplcornell.viaduct.errors/-invalid-constructor-call-error/index.html","searchKeys":["InvalidConstructorCallError","class InvalidConstructorCallError(node: Node, constructorNeeded: Boolean = false) : CompilationError","io.github.aplcornell.viaduct.errors.InvalidConstructorCallError"]},{"name":"class InvalidProtocolAnnotationError(node: Node) : CompilationError","description":"io.github.aplcornell.viaduct.errors.InvalidProtocolAnnotationError","location":"compiler/io.github.aplcornell.viaduct.errors/-invalid-protocol-annotation-error/index.html","searchKeys":["InvalidProtocolAnnotationError","class InvalidProtocolAnnotationError(node: Node) : CompilationError","io.github.aplcornell.viaduct.errors.InvalidProtocolAnnotationError"]},{"name":"class InvalidProtocolAssignmentException(node: Node, protocol: Protocol) : RuntimeException","description":"io.github.aplcornell.viaduct.selection.InvalidProtocolAssignmentException","location":"compiler/io.github.aplcornell.viaduct.selection/-invalid-protocol-assignment-exception/index.html","searchKeys":["InvalidProtocolAssignmentException","class InvalidProtocolAssignmentException(node: Node, protocol: Protocol) : RuntimeException","io.github.aplcornell.viaduct.selection.InvalidProtocolAssignmentException"]},{"name":"class JumpOutsideLoopScopeError(val node: HasSourceLocation) : CompilationError","description":"io.github.aplcornell.viaduct.errors.JumpOutsideLoopScopeError","location":"compiler/io.github.aplcornell.viaduct.errors/-jump-outside-loop-scope-error/index.html","searchKeys":["JumpOutsideLoopScopeError","class JumpOutsideLoopScopeError(val node: HasSourceLocation) : CompilationError","io.github.aplcornell.viaduct.errors.JumpOutsideLoopScopeError"]},{"name":"class LabelMismatchError(node: HasSourceLocation, actualLabel: Label, expectedLabel: Label) : InformationFlowError","description":"io.github.aplcornell.viaduct.errors.LabelMismatchError","location":"compiler/io.github.aplcornell.viaduct.errors/-label-mismatch-error/index.html","searchKeys":["LabelMismatchError","class LabelMismatchError(node: HasSourceLocation, actualLabel: Label, expectedLabel: Label) : InformationFlowError","io.github.aplcornell.viaduct.errors.LabelMismatchError"]},{"name":"class LetNode(val name: TemporaryNode, val value: ExpressionNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation) : SimpleStatementNode, VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/index.html","searchKeys":["LetNode","class LetNode(val name: TemporaryNode, val value: ExpressionNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation) : SimpleStatementNode, VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.LetNode"]},{"name":"class LetNode(val name: VariableNode, val indices: Arguments<IndexParameterNode>, val value: ExpressionNode, val sourceLocation: SourceLocation) : CircuitStatementNode, VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.circuit.LetNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-let-node/index.html","searchKeys":["LetNode","class LetNode(val name: VariableNode, val indices: Arguments<IndexParameterNode>, val value: ExpressionNode, val sourceLocation: SourceLocation) : CircuitStatementNode, VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.circuit.LetNode"]},{"name":"class LetNode(val temporary: TemporaryNode, val value: ExpressionNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.LetNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-let-node/index.html","searchKeys":["LetNode","class LetNode(val temporary: TemporaryNode, val value: ExpressionNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.LetNode"]},{"name":"class LiteralNode(val value: Value, val sourceLocation: SourceLocation) : AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-literal-node/index.html","searchKeys":["LiteralNode","class LiteralNode(val value: Value, val sourceLocation: SourceLocation) : AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode"]},{"name":"class LiteralNode(val value: Value, val sourceLocation: SourceLocation) : AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.LiteralNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-literal-node/index.html","searchKeys":["LiteralNode","class LiteralNode(val value: Value, val sourceLocation: SourceLocation) : AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.surface.LiteralNode"]},{"name":"class LiteralNode(val value: Value, val sourceLocation: SourceLocation) : IndexExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.LiteralNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-literal-node/index.html","searchKeys":["LiteralNode","class LiteralNode(val value: Value, val sourceLocation: SourceLocation) : IndexExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.LiteralNode"]},{"name":"class Local(val host: Host) : Cleartext","description":"io.github.aplcornell.viaduct.backends.cleartext.Local","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/index.html","searchKeys":["Local","class Local(val host: Host) : Cleartext","io.github.aplcornell.viaduct.backends.cleartext.Local"]},{"name":"class LocalProtocolFactory(val program: ProgramNode) : ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local-protocol-factory/index.html","searchKeys":["LocalProtocolFactory","class LocalProtocolFactory(val program: ProgramNode) : ProtocolFactory","io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory"]},{"name":"class LookupNode(variable: VariableNode, indices: Arguments<IndexExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.LookupNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-lookup-node/index.html","searchKeys":["LookupNode","class LookupNode(variable: VariableNode, indices: Arguments<IndexExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.LookupNode"]},{"name":"class MalleableDowngradeError(node: DowngradeNode) : InformationFlowError","description":"io.github.aplcornell.viaduct.errors.MalleableDowngradeError","location":"compiler/io.github.aplcornell.viaduct.errors/-malleable-downgrade-error/index.html","searchKeys":["MalleableDowngradeError","class MalleableDowngradeError(node: DowngradeNode) : InformationFlowError","io.github.aplcornell.viaduct.errors.MalleableDowngradeError"]},{"name":"class MuxPostprocessor(val containedProtocolCheck: (Protocol) -> Boolean, val selection: ProtocolAssignment) : ProgramPostprocessor","description":"io.github.aplcornell.viaduct.passes.MuxPostprocessor","location":"compiler/io.github.aplcornell.viaduct.passes/-mux-postprocessor/index.html","searchKeys":["MuxPostprocessor","class MuxPostprocessor(val containedProtocolCheck: (Protocol) -> Boolean, val selection: ProtocolAssignment) : ProgramPostprocessor","io.github.aplcornell.viaduct.passes.MuxPostprocessor"]},{"name":"class NameAnalysis","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/index.html","searchKeys":["NameAnalysis","class NameAnalysis","io.github.aplcornell.viaduct.analysis.NameAnalysis"]},{"name":"class NameClashError(name: Name, firstDeclaration: SourceLocation, secondDeclaration: SourceLocation) : CompilationError","description":"io.github.aplcornell.viaduct.errors.NameClashError","location":"compiler/io.github.aplcornell.viaduct.errors/-name-clash-error/index.html","searchKeys":["NameClashError","class NameClashError(name: Name, firstDeclaration: SourceLocation, secondDeclaration: SourceLocation) : CompilationError","io.github.aplcornell.viaduct.errors.NameClashError"]},{"name":"class NamedArguments<out T> : HasSourceLocation","description":"io.github.aplcornell.viaduct.syntax.NamedArguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-named-arguments/index.html","searchKeys":["NamedArguments","class NamedArguments<out T> : HasSourceLocation","io.github.aplcornell.viaduct.syntax.NamedArguments"]},{"name":"class NoApplicableProtocolError(node: HasSourceLocation) : CompilationError","description":"io.github.aplcornell.viaduct.errors.NoApplicableProtocolError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-applicable-protocol-error/index.html","searchKeys":["NoApplicableProtocolError","class NoApplicableProtocolError(node: HasSourceLocation) : CompilationError","io.github.aplcornell.viaduct.errors.NoApplicableProtocolError"]},{"name":"class NoHostDeclarationsError(source: String) : CompilationError","description":"io.github.aplcornell.viaduct.errors.NoHostDeclarationsError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-host-declarations-error/index.html","searchKeys":["NoHostDeclarationsError","class NoHostDeclarationsError(source: String) : CompilationError","io.github.aplcornell.viaduct.errors.NoHostDeclarationsError"]},{"name":"class NoMainError(source: String) : CompilationError","description":"io.github.aplcornell.viaduct.errors.NoMainError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-main-error/index.html","searchKeys":["NoMainError","class NoMainError(source: String) : CompilationError","io.github.aplcornell.viaduct.errors.NoMainError"]},{"name":"class NoProtocolAnnotationError(node: Node) : CompilationError","description":"io.github.aplcornell.viaduct.errors.NoProtocolAnnotationError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-protocol-annotation-error/index.html","searchKeys":["NoProtocolAnnotationError","class NoProtocolAnnotationError(node: Node) : CompilationError","io.github.aplcornell.viaduct.errors.NoProtocolAnnotationError"]},{"name":"class NoSelectionSolutionError(program: ProgramNode) : CompilationError","description":"io.github.aplcornell.viaduct.errors.NoSelectionSolutionError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-selection-solution-error/index.html","searchKeys":["NoSelectionSolutionError","class NoSelectionSolutionError(program: ProgramNode) : CompilationError","io.github.aplcornell.viaduct.errors.NoSelectionSolutionError"]},{"name":"class ObjectDeclarationArgumentNode(val name: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionOutputArgumentNode, ObjectVariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/index.html","searchKeys":["ObjectDeclarationArgumentNode","class ObjectDeclarationArgumentNode(val name: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionOutputArgumentNode, ObjectVariableDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode"]},{"name":"class ObjectDeclarationArgumentNode(val variable: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionReturnArgumentNode","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-declaration-argument-node/index.html","searchKeys":["ObjectDeclarationArgumentNode","class ObjectDeclarationArgumentNode(val variable: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionReturnArgumentNode","io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode"]},{"name":"class ObjectReferenceArgumentNode(val variable: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-reference-argument-node/index.html","searchKeys":["ObjectReferenceArgumentNode","class ObjectReferenceArgumentNode(val variable: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionArgumentNode","io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode"]},{"name":"class ObjectReferenceArgumentNode(val variable: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionInputArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-reference-argument-node/index.html","searchKeys":["ObjectReferenceArgumentNode","class ObjectReferenceArgumentNode(val variable: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionInputArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode"]},{"name":"class ObjectTypeNode(val className: ClassNameNode, val typeArguments: Arguments<ValueTypeNode>, val labelArguments: Arguments<LabelNode>?) : HasSourceLocation, PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/index.html","searchKeys":["ObjectTypeNode","class ObjectTypeNode(val className: ClassNameNode, val typeArguments: Arguments<ValueTypeNode>, val labelArguments: Arguments<LabelNode>?) : HasSourceLocation, PrettyPrintable","io.github.aplcornell.viaduct.syntax.ObjectTypeNode"]},{"name":"class OperatorApplicationNode(val operator: Operator, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/index.html","searchKeys":["OperatorApplicationNode","class OperatorApplicationNode(val operator: Operator, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode"]},{"name":"class OperatorApplicationNode(val operator: Operator, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation) : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-operator-application-node/index.html","searchKeys":["OperatorApplicationNode","class OperatorApplicationNode(val operator: Operator, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation) : ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode"]},{"name":"class OperatorApplicationNode(val operator: Operator, val arguments: Arguments<PureExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-application-node/index.html","searchKeys":["OperatorApplicationNode","class OperatorApplicationNode(val operator: Operator, val arguments: Arguments<PureExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode"]},{"name":"class OperatorNode(val operator: Operator, val sourceLocation: SourceLocation) : Node","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-node/index.html","searchKeys":["OperatorNode","class OperatorNode(val operator: Operator, val sourceLocation: SourceLocation) : Node","io.github.aplcornell.viaduct.syntax.circuit.OperatorNode"]},{"name":"class OutParameterArgumentNode(val parameter: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionOutputArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-argument-node/index.html","searchKeys":["OutParameterArgumentNode","class OutParameterArgumentNode(val parameter: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionOutputArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode"]},{"name":"class OutParameterArgumentNode(val parameter: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionReturnArgumentNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-argument-node/index.html","searchKeys":["OutParameterArgumentNode","class OutParameterArgumentNode(val parameter: ObjectVariableNode, val sourceLocation: SourceLocation) : FunctionReturnArgumentNode","io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode"]},{"name":"class OutParameterConstructorInitializerNode(val objectType: ObjectTypeNode, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : OutParameterInitializerNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/index.html","searchKeys":["OutParameterConstructorInitializerNode","class OutParameterConstructorInitializerNode(val objectType: ObjectTypeNode, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : OutParameterInitializerNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode"]},{"name":"class OutParameterExpressionInitializerNode(val expression: AtomicExpressionNode, val sourceLocation: SourceLocation) : OutParameterInitializerNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/index.html","searchKeys":["OutParameterExpressionInitializerNode","class OutParameterExpressionInitializerNode(val expression: AtomicExpressionNode, val sourceLocation: SourceLocation) : OutParameterInitializerNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode"]},{"name":"class OutParameterInitializationAnalysis","description":"io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis","location":"compiler/io.github.aplcornell.viaduct.analysis/-out-parameter-initialization-analysis/index.html","searchKeys":["OutParameterInitializationAnalysis","class OutParameterInitializationAnalysis","io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis"]},{"name":"class OutParameterInitializationError(parameter: ParameterNode, useSite: Node? = null) : CompilationError","description":"io.github.aplcornell.viaduct.errors.OutParameterInitializationError","location":"compiler/io.github.aplcornell.viaduct.errors/-out-parameter-initialization-error/index.html","searchKeys":["OutParameterInitializationError","class OutParameterInitializationError(parameter: ParameterNode, useSite: Node? = null) : CompilationError","io.github.aplcornell.viaduct.errors.OutParameterInitializationError"]},{"name":"class OutParameterInitializationNode(val name: ObjectVariableNode, val initializer: OutParameterInitializerNode, val sourceLocation: SourceLocation) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/index.html","searchKeys":["OutParameterInitializationNode","class OutParameterInitializationNode(val name: ObjectVariableNode, val initializer: OutParameterInitializerNode, val sourceLocation: SourceLocation) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode"]},{"name":"class OutParameterInitializationNode(val name: ObjectVariableNode, val rhs: ExpressionNode, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-initialization-node/index.html","searchKeys":["OutParameterInitializationNode","class OutParameterInitializationNode(val name: ObjectVariableNode, val rhs: ExpressionNode, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode"]},{"name":"class OutputNode(val message: AtomicExpressionNode, val host: HostNode, val sourceLocation: SourceLocation) : SimpleStatementNode, CommunicationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/index.html","searchKeys":["OutputNode","class OutputNode(val message: AtomicExpressionNode, val host: HostNode, val sourceLocation: SourceLocation) : SimpleStatementNode, CommunicationNode","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode"]},{"name":"class OutputNode(val message: ExpressionNode, val host: HostNode, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-output-node/index.html","searchKeys":["OutputNode","class OutputNode(val message: ExpressionNode, val host: HostNode, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.OutputNode"]},{"name":"class ParameterDirectionMismatchError(parameter: ParameterNode, argument: FunctionArgumentNode) : CompilationError","description":"io.github.aplcornell.viaduct.errors.ParameterDirectionMismatchError","location":"compiler/io.github.aplcornell.viaduct.errors/-parameter-direction-mismatch-error/index.html","searchKeys":["ParameterDirectionMismatchError","class ParameterDirectionMismatchError(parameter: ParameterNode, argument: FunctionArgumentNode) : CompilationError","io.github.aplcornell.viaduct.errors.ParameterDirectionMismatchError"]},{"name":"class ParameterNode(val name: ObjectVariableNode, val parameterDirection: ParameterDirection, val objectType: ObjectTypeNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation) : Node, ObjectVariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/index.html","searchKeys":["ParameterNode","class ParameterNode(val name: ObjectVariableNode, val parameterDirection: ParameterDirection, val objectType: ObjectTypeNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation) : Node, ObjectVariableDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode"]},{"name":"class ParameterNode(val name: ObjectVariableNode, val parameterDirection: ParameterDirection, val objectType: ObjectTypeNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation, val comment: String? = null) : Node","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/index.html","searchKeys":["ParameterNode","class ParameterNode(val name: ObjectVariableNode, val parameterDirection: ParameterDirection, val objectType: ObjectTypeNode, val protocol: ProtocolNode?, val sourceLocation: SourceLocation, val comment: String? = null) : Node","io.github.aplcornell.viaduct.syntax.surface.ParameterNode"]},{"name":"class ParameterNode(val name: VariableNode, val type: ArrayTypeNode, val protocol: ProtocolNode, val sourceLocation: SourceLocation) : Node, VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-parameter-node/index.html","searchKeys":["ParameterNode","class ParameterNode(val name: VariableNode, val type: ArrayTypeNode, val protocol: ProtocolNode, val sourceLocation: SourceLocation) : Node, VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.circuit.ParameterNode"]},{"name":"class ParsingError(location: SourceLocation, actualToken: String, expectedTokens: List<String>) : CompilationError","description":"io.github.aplcornell.viaduct.errors.ParsingError","location":"compiler/io.github.aplcornell.viaduct.errors/-parsing-error/index.html","searchKeys":["ParsingError","class ParsingError(location: SourceLocation, actualToken: String, expectedTokens: List<String>) : CompilationError","io.github.aplcornell.viaduct.errors.ParsingError"]},{"name":"class ProgramNode : Node, List<TopLevelDeclarationNode> ","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/index.html","searchKeys":["ProgramNode","class ProgramNode : Node, List<TopLevelDeclarationNode> ","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode"]},{"name":"class ProgramNode : Node, List<TopLevelDeclarationNode> ","description":"io.github.aplcornell.viaduct.syntax.surface.ProgramNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-program-node/index.html","searchKeys":["ProgramNode","class ProgramNode : Node, List<TopLevelDeclarationNode> ","io.github.aplcornell.viaduct.syntax.surface.ProgramNode"]},{"name":"class ProgramNode(val declarations: PersistentList<TopLevelDeclarationNode>, val sourceLocation: SourceLocation) : Node, List<TopLevelDeclarationNode> ","description":"io.github.aplcornell.viaduct.syntax.circuit.ProgramNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-program-node/index.html","searchKeys":["ProgramNode","class ProgramNode(val declarations: PersistentList<TopLevelDeclarationNode>, val sourceLocation: SourceLocation) : Node, List<TopLevelDeclarationNode> ","io.github.aplcornell.viaduct.syntax.circuit.ProgramNode"]},{"name":"class ProgramPostprocessorRegistry(postprocessors: List<ProgramPostprocessor>) : ProgramPostprocessor","description":"io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry","location":"compiler/io.github.aplcornell.viaduct.passes/-program-postprocessor-registry/index.html","searchKeys":["ProgramPostprocessorRegistry","class ProgramPostprocessorRegistry(postprocessors: List<ProgramPostprocessor>) : ProgramPostprocessor","io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry"]},{"name":"class ProtocolAnalysis(val program: ProgramNode, protocolComposer: ProtocolComposer)","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/index.html","searchKeys":["ProtocolAnalysis","class ProtocolAnalysis(val program: ProgramNode, protocolComposer: ProtocolComposer)","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis"]},{"name":"class ProtocolArguments","description":"io.github.aplcornell.viaduct.parsing.ProtocolArguments","location":"compiler/io.github.aplcornell.viaduct.parsing/-protocol-arguments/index.html","searchKeys":["ProtocolArguments","class ProtocolArguments","io.github.aplcornell.viaduct.parsing.ProtocolArguments"]},{"name":"class ProtocolSelection(solver: SelectionProblemSolver, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","description":"io.github.aplcornell.viaduct.selection.ProtocolSelection","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-selection/index.html","searchKeys":["ProtocolSelection","class ProtocolSelection(solver: SelectionProblemSolver, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","io.github.aplcornell.viaduct.selection.ProtocolSelection"]},{"name":"class QueryNode(val variable: ObjectVariableNode, val query: QueryNameNode, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/index.html","searchKeys":["QueryNode","class QueryNode(val variable: ObjectVariableNode, val query: QueryNameNode, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : PureExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode"]},{"name":"class QueryNode(val variable: ObjectVariableNode, val query: QueryNameNode, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation) : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.QueryNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-query-node/index.html","searchKeys":["QueryNode","class QueryNode(val variable: ObjectVariableNode, val query: QueryNameNode, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation) : ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.QueryNode"]},{"name":"class ReadNode(val temporary: TemporaryNode) : AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ReadNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-read-node/index.html","searchKeys":["ReadNode","class ReadNode(val temporary: TemporaryNode) : AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.ReadNode"]},{"name":"class ReadNode(val temporary: TemporaryNode) : AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.ReadNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-read-node/index.html","searchKeys":["ReadNode","class ReadNode(val temporary: TemporaryNode) : AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.surface.ReadNode"]},{"name":"class ReduceNode(val operator: OperatorNode, val defaultValue: PureExpressionNode, val indices: Arguments<IndexParameterNode>, val body: PureExpressionNode, val sourceLocation: SourceLocation) : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/index.html","searchKeys":["ReduceNode","class ReduceNode(val operator: OperatorNode, val defaultValue: PureExpressionNode, val indices: Arguments<IndexParameterNode>, val body: PureExpressionNode, val sourceLocation: SourceLocation) : PureExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode"]},{"name":"class ReferenceNode(val name: VariableNode, val sourceLocation: SourceLocation) : IndexExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reference-node/index.html","searchKeys":["ReferenceNode","class ReferenceNode(val name: VariableNode, val sourceLocation: SourceLocation) : IndexExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode"]},{"name":"class Replication(hosts: Set<Host>) : Cleartext","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/index.html","searchKeys":["Replication","class Replication(hosts: Set<Host>) : Cleartext","io.github.aplcornell.viaduct.backends.cleartext.Replication"]},{"name":"class ReplicationProtocolFactory(val program: ProgramNode) : ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication-protocol-factory/index.html","searchKeys":["ReplicationProtocolFactory","class ReplicationProtocolFactory(val program: ProgramNode) : ProtocolFactory","io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory"]},{"name":"class ReturnNode(val values: Arguments<PureExpressionNode>, val sourceLocation: SourceLocation) : StatementNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ReturnNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-return-node/index.html","searchKeys":["ReturnNode","class ReturnNode(val values: Arguments<PureExpressionNode>, val sourceLocation: SourceLocation) : StatementNode","io.github.aplcornell.viaduct.syntax.circuit.ReturnNode"]},{"name":"class Rewrite(rewrites: Map<PrincipalComponent, LabelConstant>, hostTrustConfiguration: HostTrustConfiguration)","description":"io.github.aplcornell.viaduct.passes.Rewrite","location":"compiler/io.github.aplcornell.viaduct.passes/-rewrite/index.html","searchKeys":["Rewrite","class Rewrite(rewrites: Map<PrincipalComponent, LabelConstant>, hostTrustConfiguration: HostTrustConfiguration)","io.github.aplcornell.viaduct.passes.Rewrite"]},{"name":"class RuntimeError(val information: String, val node: HasSourceLocation? = null) : CompilationError","description":"io.github.aplcornell.viaduct.errors.RuntimeError","location":"compiler/io.github.aplcornell.viaduct.errors/-runtime-error/index.html","searchKeys":["RuntimeError","class RuntimeError(val information: String, val node: HasSourceLocation? = null) : CompilationError","io.github.aplcornell.viaduct.errors.RuntimeError"]},{"name":"class SecurityLattice<T : Lattice<T>>(val confidentialityComponent: T, val integrityComponent: T) : Lattice<SecurityLattice<T>> , TrustLattice<SecurityLattice<T>> , PrettyPrintable","description":"io.github.aplcornell.viaduct.security.SecurityLattice","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/index.html","searchKeys":["SecurityLattice","class SecurityLattice<T : Lattice<T>>(val confidentialityComponent: T, val integrityComponent: T) : Lattice<SecurityLattice<T>> , TrustLattice<SecurityLattice<T>> , PrettyPrintable","io.github.aplcornell.viaduct.security.SecurityLattice"]},{"name":"class SelectionConstraintGenerator(program: ProgramNode, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","description":"io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-constraint-generator/index.html","searchKeys":["SelectionConstraintGenerator","class SelectionConstraintGenerator(program: ProgramNode, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator"]},{"name":"class SimpleCostEstimator(protocolComposer: ProtocolComposer, costRegime: SimpleCostRegime) : CostEstimator<IntegerCost> ","description":"io.github.aplcornell.viaduct.selection.SimpleCostEstimator","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-estimator/index.html","searchKeys":["SimpleCostEstimator","class SimpleCostEstimator(protocolComposer: ProtocolComposer, costRegime: SimpleCostRegime) : CostEstimator<IntegerCost> ","io.github.aplcornell.viaduct.selection.SimpleCostEstimator"]},{"name":"class SkipNode(val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.SkipNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-skip-node/index.html","searchKeys":["SkipNode","class SkipNode(val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.SkipNode"]},{"name":"class SourceFile","description":"io.github.aplcornell.viaduct.parsing.SourceFile","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/index.html","searchKeys":["SourceFile","class SourceFile","io.github.aplcornell.viaduct.parsing.SourceFile"]},{"name":"class Tree<Node : TreeNode<Node>, out RootNode : Node>(val root: RootNode)","description":"io.github.aplcornell.viaduct.attributes.Tree","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree/index.html","searchKeys":["Tree","class Tree<Node : TreeNode<Node>, out RootNode : Node>(val root: RootNode)","io.github.aplcornell.viaduct.attributes.Tree"]},{"name":"class TypeAnalysis","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/index.html","searchKeys":["TypeAnalysis","class TypeAnalysis","io.github.aplcornell.viaduct.analysis.TypeAnalysis"]},{"name":"class TypeMismatchError(node: HasSourceLocation, actualType: Type, expectedType: Type) : CompilationError","description":"io.github.aplcornell.viaduct.errors.TypeMismatchError","location":"compiler/io.github.aplcornell.viaduct.errors/-type-mismatch-error/index.html","searchKeys":["TypeMismatchError","class TypeMismatchError(node: HasSourceLocation, actualType: Type, expectedType: Type) : CompilationError","io.github.aplcornell.viaduct.errors.TypeMismatchError"]},{"name":"class UndefinedNameError(name: Located<Name>) : CompilationError","description":"io.github.aplcornell.viaduct.errors.UndefinedNameError","location":"compiler/io.github.aplcornell.viaduct.errors/-undefined-name-error/index.html","searchKeys":["UndefinedNameError","class UndefinedNameError(name: Located<Name>) : CompilationError","io.github.aplcornell.viaduct.errors.UndefinedNameError"]},{"name":"class UnexpectedArgumentError(name: Located<ArgumentLabel>) : CompilationError","description":"io.github.aplcornell.viaduct.errors.UnexpectedArgumentError","location":"compiler/io.github.aplcornell.viaduct.errors/-unexpected-argument-error/index.html","searchKeys":["UnexpectedArgumentError","class UnexpectedArgumentError(name: Located<ArgumentLabel>) : CompilationError","io.github.aplcornell.viaduct.errors.UnexpectedArgumentError"]},{"name":"class UniqueQueue<E> : AbstractQueue<E> ","description":"io.github.aplcornell.viaduct.util.UniqueQueue","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/index.html","searchKeys":["UniqueQueue","class UniqueQueue<E> : AbstractQueue<E> ","io.github.aplcornell.viaduct.util.UniqueQueue"]},{"name":"class UnknownDatatypeError(objectName: ObjectVariableNode, className: ClassName) : CompilationError","description":"io.github.aplcornell.viaduct.errors.UnknownDatatypeError","location":"compiler/io.github.aplcornell.viaduct.errors/-unknown-datatype-error/index.html","searchKeys":["UnknownDatatypeError","class UnknownDatatypeError(objectName: ObjectVariableNode, className: ClassName) : CompilationError","io.github.aplcornell.viaduct.errors.UnknownDatatypeError"]},{"name":"class UnknownMethodError(objectName: ObjectVariableNode, methodName: MethodNameNode, objectType: ObjectType? = null, argumentTypes: List<ValueType>? = null) : CompilationError","description":"io.github.aplcornell.viaduct.errors.UnknownMethodError","location":"compiler/io.github.aplcornell.viaduct.errors/-unknown-method-error/index.html","searchKeys":["UnknownMethodError","class UnknownMethodError(objectName: ObjectVariableNode, methodName: MethodNameNode, objectType: ObjectType? = null, argumentTypes: List<ValueType>? = null) : CompilationError","io.github.aplcornell.viaduct.errors.UnknownMethodError"]},{"name":"class UnsupportedOperatorException(protocol: Protocol, node: Node) : CodeGenerationException","description":"io.github.aplcornell.viaduct.codegeneration.UnsupportedOperatorException","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-unsupported-operator-exception/index.html","searchKeys":["UnsupportedOperatorException","class UnsupportedOperatorException(protocol: Protocol, node: Node) : CodeGenerationException","io.github.aplcornell.viaduct.codegeneration.UnsupportedOperatorException"]},{"name":"class UpdateNode(val variable: ObjectVariableNode, val update: UpdateNameNode, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/index.html","searchKeys":["UpdateNode","class UpdateNode(val variable: ObjectVariableNode, val update: UpdateNameNode, val arguments: Arguments<AtomicExpressionNode>, val sourceLocation: SourceLocation) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode"]},{"name":"class UpdateNode(val variable: ObjectVariableNode, val update: UpdateNameNode, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.UpdateNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-update-node/index.html","searchKeys":["UpdateNode","class UpdateNode(val variable: ObjectVariableNode, val update: UpdateNameNode, val arguments: Arguments<ExpressionNode>, val sourceLocation: SourceLocation, val comment: String? = null) : SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.UpdateNode"]},{"name":"class ViaductInterpreterError(val information: String, val node: HasSourceLocation? = null) : CompilationError","description":"io.github.aplcornell.viaduct.errors.ViaductInterpreterError","location":"compiler/io.github.aplcornell.viaduct.errors/-viaduct-interpreter-error/index.html","searchKeys":["ViaductInterpreterError","class ViaductInterpreterError(val information: String, val node: HasSourceLocation? = null) : CompilationError","io.github.aplcornell.viaduct.errors.ViaductInterpreterError"]},{"name":"class WhileLoopNode(val guard: ExpressionNode, val body: BlockNode, val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : LoopNode","description":"io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-while-loop-node/index.html","searchKeys":["WhileLoopNode","class WhileLoopNode(val guard: ExpressionNode, val body: BlockNode, val jumpLabel: JumpLabelNode?, val sourceLocation: SourceLocation, val comment: String? = null) : LoopNode","io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode"]},{"name":"class YaoABY(val server: Host, val client: Host) : ABY","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/index.html","searchKeys":["YaoABY","class YaoABY(val server: Host, val client: Host) : ABY","io.github.aplcornell.viaduct.backends.aby.YaoABY"]},{"name":"class ZKP(val prover: Host, val verifiers: Set<Host>) : Protocol","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/index.html","searchKeys":["ZKP","class ZKP(val prover: Host, val verifiers: Set<Host>) : Protocol","io.github.aplcornell.viaduct.backends.zkp.ZKP"]},{"name":"class ZKPProtocolFactory(val program: ProgramNode) : ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-factory/index.html","searchKeys":["ZKPProtocolFactory","class ZKPProtocolFactory(val program: ProgramNode) : ProtocolFactory","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory"]},{"name":"const val A2B_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.A2B_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-companion/-a2-b_-i-n-p-u-t.html","searchKeys":["A2B_INPUT","const val A2B_INPUT: String","io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.A2B_INPUT"]},{"name":"const val A2B_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.A2B_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-companion/-a2-b_-o-u-t-p-u-t.html","searchKeys":["A2B_OUTPUT","const val A2B_OUTPUT: String","io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.A2B_OUTPUT"]},{"name":"const val A2Y_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.A2Y_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-companion/-a2-y_-i-n-p-u-t.html","searchKeys":["A2Y_INPUT","const val A2Y_INPUT: String","io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.A2Y_INPUT"]},{"name":"const val A2Y_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.A2Y_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-companion/-a2-y_-o-u-t-p-u-t.html","searchKeys":["A2Y_OUTPUT","const val A2Y_OUTPUT: String","io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.A2Y_OUTPUT"]},{"name":"const val AQUA: String","description":"io.github.aplcornell.viaduct.util.Colors.AQUA","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-a-q-u-a.html","searchKeys":["AQUA","const val AQUA: String","io.github.aplcornell.viaduct.util.Colors.AQUA"]},{"name":"const val B2A_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.B2A_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-companion/-b2-a_-i-n-p-u-t.html","searchKeys":["B2A_INPUT","const val B2A_INPUT: String","io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.B2A_INPUT"]},{"name":"const val B2A_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.B2A_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-companion/-b2-a_-o-u-t-p-u-t.html","searchKeys":["B2A_OUTPUT","const val B2A_OUTPUT: String","io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.B2A_OUTPUT"]},{"name":"const val B2Y_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.B2Y_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-companion/-b2-y_-i-n-p-u-t.html","searchKeys":["B2Y_INPUT","const val B2Y_INPUT: String","io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.B2Y_INPUT"]},{"name":"const val B2Y_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.B2Y_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-companion/-b2-y_-o-u-t-p-u-t.html","searchKeys":["B2Y_OUTPUT","const val B2Y_OUTPUT: String","io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.B2Y_OUTPUT"]},{"name":"const val BIT_LENGTH: Int = 32","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.Companion.BIT_LENGTH","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/-companion/-b-i-t_-l-e-n-g-t-h.html","searchKeys":["BIT_LENGTH","const val BIT_LENGTH: Int = 32","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.Companion.BIT_LENGTH"]},{"name":"const val BLACK: String","description":"io.github.aplcornell.viaduct.util.Colors.BLACK","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-b-l-a-c-k.html","searchKeys":["BLACK","const val BLACK: String","io.github.aplcornell.viaduct.util.Colors.BLACK"]},{"name":"const val BLUE: String","description":"io.github.aplcornell.viaduct.util.Colors.BLUE","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-b-l-u-e.html","searchKeys":["BLUE","const val BLUE: String","io.github.aplcornell.viaduct.util.Colors.BLUE"]},{"name":"const val CLEARTEXT_COMMITMENT_INPUT: String","description":"io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.CLEARTEXT_COMMITMENT_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext/-companion/-c-l-e-a-r-t-e-x-t_-c-o-m-m-i-t-m-e-n-t_-i-n-p-u-t.html","searchKeys":["CLEARTEXT_COMMITMENT_INPUT","const val CLEARTEXT_COMMITMENT_INPUT: String","io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.CLEARTEXT_COMMITMENT_INPUT"]},{"name":"const val CLEARTEXT_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.ABY.Companion.CLEARTEXT_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/-companion/-c-l-e-a-r-t-e-x-t_-i-n-p-u-t.html","searchKeys":["CLEARTEXT_INPUT","const val CLEARTEXT_INPUT: String","io.github.aplcornell.viaduct.backends.aby.ABY.Companion.CLEARTEXT_INPUT"]},{"name":"const val CLEARTEXT_INPUT: String","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.CLEARTEXT_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/-companion/-c-l-e-a-r-t-e-x-t_-i-n-p-u-t.html","searchKeys":["CLEARTEXT_INPUT","const val CLEARTEXT_INPUT: String","io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.CLEARTEXT_INPUT"]},{"name":"const val CLEARTEXT_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.ABY.Companion.CLEARTEXT_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/-companion/-c-l-e-a-r-t-e-x-t_-o-u-t-p-u-t.html","searchKeys":["CLEARTEXT_OUTPUT","const val CLEARTEXT_OUTPUT: String","io.github.aplcornell.viaduct.backends.aby.ABY.Companion.CLEARTEXT_OUTPUT"]},{"name":"const val FUCHSIA: String","description":"io.github.aplcornell.viaduct.util.Colors.FUCHSIA","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-f-u-c-h-s-i-a.html","searchKeys":["FUCHSIA","const val FUCHSIA: String","io.github.aplcornell.viaduct.util.Colors.FUCHSIA"]},{"name":"const val GRAY: String","description":"io.github.aplcornell.viaduct.util.Colors.GRAY","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-g-r-a-y.html","searchKeys":["GRAY","const val GRAY: String","io.github.aplcornell.viaduct.util.Colors.GRAY"]},{"name":"const val GREEN: String","description":"io.github.aplcornell.viaduct.util.Colors.GREEN","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-g-r-e-e-n.html","searchKeys":["GREEN","const val GREEN: String","io.github.aplcornell.viaduct.util.Colors.GREEN"]},{"name":"const val HASH_COMMITMENT_INPUT: String","description":"io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.HASH_COMMITMENT_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext/-companion/-h-a-s-h_-c-o-m-m-i-t-m-e-n-t_-i-n-p-u-t.html","searchKeys":["HASH_COMMITMENT_INPUT","const val HASH_COMMITMENT_INPUT: String","io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.HASH_COMMITMENT_INPUT"]},{"name":"const val INPUT: String","description":"io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext/-companion/-i-n-p-u-t.html","searchKeys":["INPUT","const val INPUT: String","io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.INPUT"]},{"name":"const val INPUT: String","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/-companion/-i-n-p-u-t.html","searchKeys":["INPUT","const val INPUT: String","io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.INPUT"]},{"name":"const val INTERNAL_INPUT: String","description":"io.github.aplcornell.viaduct.syntax.Protocol.Companion.INTERNAL_INPUT","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/-companion/-i-n-t-e-r-n-a-l_-i-n-p-u-t.html","searchKeys":["INTERNAL_INPUT","const val INTERNAL_INPUT: String","io.github.aplcornell.viaduct.syntax.Protocol.Companion.INTERNAL_INPUT"]},{"name":"const val INTERNAL_OUTPUT: String","description":"io.github.aplcornell.viaduct.syntax.Protocol.Companion.INTERNAL_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/-companion/-i-n-t-e-r-n-a-l_-o-u-t-p-u-t.html","searchKeys":["INTERNAL_OUTPUT","const val INTERNAL_OUTPUT: String","io.github.aplcornell.viaduct.syntax.Protocol.Companion.INTERNAL_OUTPUT"]},{"name":"const val LIME: String","description":"io.github.aplcornell.viaduct.util.Colors.LIME","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-l-i-m-e.html","searchKeys":["LIME","const val LIME: String","io.github.aplcornell.viaduct.util.Colors.LIME"]},{"name":"const val MAROON: String","description":"io.github.aplcornell.viaduct.util.Colors.MAROON","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-m-a-r-o-o-n.html","searchKeys":["MAROON","const val MAROON: String","io.github.aplcornell.viaduct.util.Colors.MAROON"]},{"name":"const val NAVY: String","description":"io.github.aplcornell.viaduct.util.Colors.NAVY","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-n-a-v-y.html","searchKeys":["NAVY","const val NAVY: String","io.github.aplcornell.viaduct.util.Colors.NAVY"]},{"name":"const val OLIVE: String","description":"io.github.aplcornell.viaduct.util.Colors.OLIVE","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-o-l-i-v-e.html","searchKeys":["OLIVE","const val OLIVE: String","io.github.aplcornell.viaduct.util.Colors.OLIVE"]},{"name":"const val OPEN_CLEARTEXT_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.OPEN_CLEARTEXT_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/-companion/-o-p-e-n_-c-l-e-a-r-t-e-x-t_-o-u-t-p-u-t.html","searchKeys":["OPEN_CLEARTEXT_OUTPUT","const val OPEN_CLEARTEXT_OUTPUT: String","io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.OPEN_CLEARTEXT_OUTPUT"]},{"name":"const val OPEN_COMMITMENT_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.OPEN_COMMITMENT_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/-companion/-o-p-e-n_-c-o-m-m-i-t-m-e-n-t_-o-u-t-p-u-t.html","searchKeys":["OPEN_COMMITMENT_OUTPUT","const val OPEN_COMMITMENT_OUTPUT: String","io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.OPEN_COMMITMENT_OUTPUT"]},{"name":"const val ORANGE: String","description":"io.github.aplcornell.viaduct.util.Colors.ORANGE","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-o-r-a-n-g-e.html","searchKeys":["ORANGE","const val ORANGE: String","io.github.aplcornell.viaduct.util.Colors.ORANGE"]},{"name":"const val OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext/-companion/-o-u-t-p-u-t.html","searchKeys":["OUTPUT","const val OUTPUT: String","io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion.OUTPUT"]},{"name":"const val PURPLE: String","description":"io.github.aplcornell.viaduct.util.Colors.PURPLE","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-p-u-r-p-l-e.html","searchKeys":["PURPLE","const val PURPLE: String","io.github.aplcornell.viaduct.util.Colors.PURPLE"]},{"name":"const val RED: String","description":"io.github.aplcornell.viaduct.util.Colors.RED","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-r-e-d.html","searchKeys":["RED","const val RED: String","io.github.aplcornell.viaduct.util.Colors.RED"]},{"name":"const val SECRET_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.ABY.Companion.SECRET_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/-companion/-s-e-c-r-e-t_-i-n-p-u-t.html","searchKeys":["SECRET_INPUT","const val SECRET_INPUT: String","io.github.aplcornell.viaduct.backends.aby.ABY.Companion.SECRET_INPUT"]},{"name":"const val SILVER: String","description":"io.github.aplcornell.viaduct.util.Colors.SILVER","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-s-i-l-v-e-r.html","searchKeys":["SILVER","const val SILVER: String","io.github.aplcornell.viaduct.util.Colors.SILVER"]},{"name":"const val TEAL: String","description":"io.github.aplcornell.viaduct.util.Colors.TEAL","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-t-e-a-l.html","searchKeys":["TEAL","const val TEAL: String","io.github.aplcornell.viaduct.util.Colors.TEAL"]},{"name":"const val WHITE: String","description":"io.github.aplcornell.viaduct.util.Colors.WHITE","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-w-h-i-t-e.html","searchKeys":["WHITE","const val WHITE: String","io.github.aplcornell.viaduct.util.Colors.WHITE"]},{"name":"const val Y2A_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.Y2A_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-companion/-y2-a_-i-n-p-u-t.html","searchKeys":["Y2A_INPUT","const val Y2A_INPUT: String","io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.Y2A_INPUT"]},{"name":"const val Y2A_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.Y2A_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-companion/-y2-a_-o-u-t-p-u-t.html","searchKeys":["Y2A_OUTPUT","const val Y2A_OUTPUT: String","io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.Y2A_OUTPUT"]},{"name":"const val Y2B_INPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.Y2B_INPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-companion/-y2-b_-i-n-p-u-t.html","searchKeys":["Y2B_INPUT","const val Y2B_INPUT: String","io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.Y2B_INPUT"]},{"name":"const val Y2B_OUTPUT: String","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.Y2B_OUTPUT","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-companion/-y2-b_-o-u-t-p-u-t.html","searchKeys":["Y2B_OUTPUT","const val Y2B_OUTPUT: String","io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.Y2B_OUTPUT"]},{"name":"const val YELLOW: String","description":"io.github.aplcornell.viaduct.util.Colors.YELLOW","location":"compiler/io.github.aplcornell.viaduct.util/-colors/-y-e-l-l-o-w.html","searchKeys":["YELLOW","const val YELLOW: String","io.github.aplcornell.viaduct.util.Colors.YELLOW"]},{"name":"data class And(val props: List<SelectionConstraint>) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.And","location":"compiler/io.github.aplcornell.viaduct.selection/-and/index.html","searchKeys":["And","data class And(val props: List<SelectionConstraint>) : SelectionConstraint","io.github.aplcornell.viaduct.selection.And"]},{"name":"data class ArgumentLabel(val name: String) : Name, Comparable<ArgumentLabel> ","description":"io.github.aplcornell.viaduct.syntax.ArgumentLabel","location":"compiler/io.github.aplcornell.viaduct.syntax/-argument-label/index.html","searchKeys":["ArgumentLabel","data class ArgumentLabel(val name: String) : Name, Comparable<ArgumentLabel> ","io.github.aplcornell.viaduct.syntax.ArgumentLabel"]},{"name":"data class ByteVecValue(val value: List<Byte>) : Value","description":"io.github.aplcornell.viaduct.syntax.values.ByteVecValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-byte-vec-value/index.html","searchKeys":["ByteVecValue","data class ByteVecValue(val value: List<Byte>) : Value","io.github.aplcornell.viaduct.syntax.values.ByteVecValue"]},{"name":"data class ClassName(val name: String) : Name","description":"io.github.aplcornell.viaduct.syntax.datatypes.ClassName","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-class-name/index.html","searchKeys":["ClassName","data class ClassName(val name: String) : Name","io.github.aplcornell.viaduct.syntax.datatypes.ClassName"]},{"name":"data class CommunicationEvent(val send: OutputPort, val recv: InputPort)","description":"io.github.aplcornell.viaduct.selection.CommunicationEvent","location":"compiler/io.github.aplcornell.viaduct.selection/-communication-event/index.html","searchKeys":["CommunicationEvent","data class CommunicationEvent(val send: OutputPort, val recv: InputPort)","io.github.aplcornell.viaduct.selection.CommunicationEvent"]},{"name":"data class ConfidentialityComponent<A>(val principal: A) : Component<A> ","description":"io.github.aplcornell.viaduct.security.ConfidentialityComponent","location":"compiler/io.github.aplcornell.viaduct.security/-confidentiality-component/index.html","searchKeys":["ConfidentialityComponent","data class ConfidentialityComponent<A>(val principal: A) : Component<A> ","io.github.aplcornell.viaduct.security.ConfidentialityComponent"]},{"name":"data class Cost<C : CostMonoid<C>>(val features: PersistentMap<CostFeature, C>) : CostMonoid<Cost<C>> , Map<CostFeature, C> , PrettyPrintable","description":"io.github.aplcornell.viaduct.selection.Cost","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/index.html","searchKeys":["Cost","data class Cost<C : CostMonoid<C>>(val features: PersistentMap<CostFeature, C>) : CostMonoid<Cost<C>> , Map<CostFeature, C> , PrettyPrintable","io.github.aplcornell.viaduct.selection.Cost"]},{"name":"data class CostAdd(val lhs: SymbolicCost, val rhs: SymbolicCost) : SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostAdd","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-add/index.html","searchKeys":["CostAdd","data class CostAdd(val lhs: SymbolicCost, val rhs: SymbolicCost) : SymbolicCost","io.github.aplcornell.viaduct.selection.CostAdd"]},{"name":"data class CostChoice(val choices: List<Pair<SelectionConstraint, SymbolicCost>>) : SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostChoice","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-choice/index.html","searchKeys":["CostChoice","data class CostChoice(val choices: List<Pair<SelectionConstraint, SymbolicCost>>) : SymbolicCost","io.github.aplcornell.viaduct.selection.CostChoice"]},{"name":"data class CostLiteral(val cost: Int) : SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostLiteral","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-literal/index.html","searchKeys":["CostLiteral","data class CostLiteral(val cost: Int) : SymbolicCost","io.github.aplcornell.viaduct.selection.CostLiteral"]},{"name":"data class CostMax(val lhs: SymbolicCost, val rhs: SymbolicCost) : SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostMax","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-max/index.html","searchKeys":["CostMax","data class CostMax(val lhs: SymbolicCost, val rhs: SymbolicCost) : SymbolicCost","io.github.aplcornell.viaduct.selection.CostMax"]},{"name":"data class CostMul(val lhs: Int, val rhs: SymbolicCost) : SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostMul","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-mul/index.html","searchKeys":["CostMul","data class CostMul(val lhs: Int, val rhs: SymbolicCost) : SymbolicCost","io.github.aplcornell.viaduct.selection.CostMul"]},{"name":"data class FunctionName(val name: String) : Name","description":"io.github.aplcornell.viaduct.syntax.FunctionName","location":"compiler/io.github.aplcornell.viaduct.syntax/-function-name/index.html","searchKeys":["FunctionName","data class FunctionName(val name: String) : Name","io.github.aplcornell.viaduct.syntax.FunctionName"]},{"name":"data class FunctionVariable(val function: FunctionName, val variable: Variable) : PrettyPrintable","description":"io.github.aplcornell.viaduct.selection.FunctionVariable","location":"compiler/io.github.aplcornell.viaduct.selection/-function-variable/index.html","searchKeys":["FunctionVariable","data class FunctionVariable(val function: FunctionName, val variable: Variable) : PrettyPrintable","io.github.aplcornell.viaduct.selection.FunctionVariable"]},{"name":"data class GuardVisibilityFlag(val variable: String) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.GuardVisibilityFlag","location":"compiler/io.github.aplcornell.viaduct.selection/-guard-visibility-flag/index.html","searchKeys":["GuardVisibilityFlag","data class GuardVisibilityFlag(val variable: String) : SelectionConstraint","io.github.aplcornell.viaduct.selection.GuardVisibilityFlag"]},{"name":"data class HostPrincipal(val host: Host) : Principal","description":"io.github.aplcornell.viaduct.security.HostPrincipal","location":"compiler/io.github.aplcornell.viaduct.security/-host-principal/index.html","searchKeys":["HostPrincipal","data class HostPrincipal(val host: Host) : Principal","io.github.aplcornell.viaduct.security.HostPrincipal"]},{"name":"data class HostValue(val value: Host) : Value","description":"io.github.aplcornell.viaduct.syntax.values.HostValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-value/index.html","searchKeys":["HostValue","data class HostValue(val value: Host) : Value","io.github.aplcornell.viaduct.syntax.values.HostValue"]},{"name":"data class HostVariable(val variable: String) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.HostVariable","location":"compiler/io.github.aplcornell.viaduct.selection/-host-variable/index.html","searchKeys":["HostVariable","data class HostVariable(val variable: String) : SelectionConstraint","io.github.aplcornell.viaduct.selection.HostVariable"]},{"name":"data class ImmutableCellType(val elementType: ValueType) : ObjectType","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/index.html","searchKeys":["ImmutableCellType","data class ImmutableCellType(val elementType: ValueType) : ObjectType","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType"]},{"name":"data class Implies(val lhs: SelectionConstraint, val rhs: SelectionConstraint) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.Implies","location":"compiler/io.github.aplcornell.viaduct.selection/-implies/index.html","searchKeys":["Implies","data class Implies(val lhs: SelectionConstraint, val rhs: SelectionConstraint) : SelectionConstraint","io.github.aplcornell.viaduct.selection.Implies"]},{"name":"data class InputPort(val protocol: Protocol, val host: Host, val id: PortId) : ProtocolPort","description":"io.github.aplcornell.viaduct.syntax.InputPort","location":"compiler/io.github.aplcornell.viaduct.syntax/-input-port/index.html","searchKeys":["InputPort","data class InputPort(val protocol: Protocol, val host: Host, val id: PortId) : ProtocolPort","io.github.aplcornell.viaduct.syntax.InputPort"]},{"name":"data class IntegrityComponent<A>(val principal: A) : Component<A> ","description":"io.github.aplcornell.viaduct.security.IntegrityComponent","location":"compiler/io.github.aplcornell.viaduct.security/-integrity-component/index.html","searchKeys":["IntegrityComponent","data class IntegrityComponent<A>(val principal: A) : Component<A> ","io.github.aplcornell.viaduct.security.IntegrityComponent"]},{"name":"data class JumpLabel(val name: String) : Name","description":"io.github.aplcornell.viaduct.syntax.JumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax/-jump-label/index.html","searchKeys":["JumpLabel","data class JumpLabel(val name: String) : Name","io.github.aplcornell.viaduct.syntax.JumpLabel"]},{"name":"data class LabelAnd(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelAnd","location":"compiler/io.github.aplcornell.viaduct.security/-label-and/index.html","searchKeys":["LabelAnd","data class LabelAnd(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","io.github.aplcornell.viaduct.security.LabelAnd"]},{"name":"data class LabelConfidentiality(val value: LabelExpression) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelConfidentiality","location":"compiler/io.github.aplcornell.viaduct.security/-label-confidentiality/index.html","searchKeys":["LabelConfidentiality","data class LabelConfidentiality(val value: LabelExpression) : LabelExpression","io.github.aplcornell.viaduct.security.LabelConfidentiality"]},{"name":"data class LabelIntegrity(val value: LabelExpression) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelIntegrity","location":"compiler/io.github.aplcornell.viaduct.security/-label-integrity/index.html","searchKeys":["LabelIntegrity","data class LabelIntegrity(val value: LabelExpression) : LabelExpression","io.github.aplcornell.viaduct.security.LabelIntegrity"]},{"name":"data class LabelJoin(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelJoin","location":"compiler/io.github.aplcornell.viaduct.security/-label-join/index.html","searchKeys":["LabelJoin","data class LabelJoin(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","io.github.aplcornell.viaduct.security.LabelJoin"]},{"name":"data class LabelLiteral(val name: Host) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelLiteral","location":"compiler/io.github.aplcornell.viaduct.security/-label-literal/index.html","searchKeys":["LabelLiteral","data class LabelLiteral(val name: Host) : LabelExpression","io.github.aplcornell.viaduct.security.LabelLiteral"]},{"name":"data class LabelMeet(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelMeet","location":"compiler/io.github.aplcornell.viaduct.security/-label-meet/index.html","searchKeys":["LabelMeet","data class LabelMeet(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","io.github.aplcornell.viaduct.security.LabelMeet"]},{"name":"data class LabelOr(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelOr","location":"compiler/io.github.aplcornell.viaduct.security/-label-or/index.html","searchKeys":["LabelOr","data class LabelOr(val lhs: LabelExpression, val rhs: LabelExpression) : LabelExpression","io.github.aplcornell.viaduct.security.LabelOr"]},{"name":"data class LabelParameter(val name: LabelVariable) : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelParameter","location":"compiler/io.github.aplcornell.viaduct.security/-label-parameter/index.html","searchKeys":["LabelParameter","data class LabelParameter(val name: LabelVariable) : LabelExpression","io.github.aplcornell.viaduct.security.LabelParameter"]},{"name":"data class LabelVariable(val name: String) : Variable","description":"io.github.aplcornell.viaduct.syntax.LabelVariable","location":"compiler/io.github.aplcornell.viaduct.syntax/-label-variable/index.html","searchKeys":["LabelVariable","data class LabelVariable(val name: String) : Variable","io.github.aplcornell.viaduct.syntax.LabelVariable"]},{"name":"data class LessThanOrEqualTo<A>(val from: FreeDistributiveLattice<A>, val to: FreeDistributiveLattice<A>)","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/-less-than-or-equal-to/index.html","searchKeys":["LessThanOrEqualTo","data class LessThanOrEqualTo<A>(val from: FreeDistributiveLattice<A>, val to: FreeDistributiveLattice<A>)","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo"]},{"name":"data class Literal(val literalValue: Boolean) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.Literal","location":"compiler/io.github.aplcornell.viaduct.selection/-literal/index.html","searchKeys":["Literal","data class Literal(val literalValue: Boolean) : SelectionConstraint","io.github.aplcornell.viaduct.selection.Literal"]},{"name":"data class Located<out T : PrettyPrintable>(val value: T, val sourceLocation: SourceLocation) : HasSourceLocation, PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.Located","location":"compiler/io.github.aplcornell.viaduct.syntax/-located/index.html","searchKeys":["Located","data class Located<out T : PrettyPrintable>(val value: T, val sourceLocation: SourceLocation) : HasSourceLocation, PrettyPrintable","io.github.aplcornell.viaduct.syntax.Located"]},{"name":"data class Modify(val operator: BinaryOperator) : UpdateName","description":"io.github.aplcornell.viaduct.syntax.datatypes.Modify","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-modify/index.html","searchKeys":["Modify","data class Modify(val operator: BinaryOperator) : UpdateName","io.github.aplcornell.viaduct.syntax.datatypes.Modify"]},{"name":"data class MutableCellType(val elementType: ValueType) : ObjectType","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/index.html","searchKeys":["MutableCellType","data class MutableCellType(val elementType: ValueType) : ObjectType","io.github.aplcornell.viaduct.syntax.types.MutableCellType"]},{"name":"data class Not(val rhs: SelectionConstraint) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.Not","location":"compiler/io.github.aplcornell.viaduct.selection/-not/index.html","searchKeys":["Not","data class Not(val rhs: SelectionConstraint) : SelectionConstraint","io.github.aplcornell.viaduct.selection.Not"]},{"name":"data class ObjectVariable(val name: String) : Variable","description":"io.github.aplcornell.viaduct.syntax.ObjectVariable","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-variable/index.html","searchKeys":["ObjectVariable","data class ObjectVariable(val name: String) : Variable","io.github.aplcornell.viaduct.syntax.ObjectVariable"]},{"name":"data class Or(val props: List<SelectionConstraint>) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.Or","location":"compiler/io.github.aplcornell.viaduct.selection/-or/index.html","searchKeys":["Or","data class Or(val props: List<SelectionConstraint>) : SelectionConstraint","io.github.aplcornell.viaduct.selection.Or"]},{"name":"data class OutputPort(val protocol: Protocol, val host: Host, val id: PortId) : ProtocolPort","description":"io.github.aplcornell.viaduct.syntax.OutputPort","location":"compiler/io.github.aplcornell.viaduct.syntax/-output-port/index.html","searchKeys":["OutputPort","data class OutputPort(val protocol: Protocol, val host: Host, val id: PortId) : ProtocolPort","io.github.aplcornell.viaduct.syntax.OutputPort"]},{"name":"data class PolymorphicPrincipal(val labelVariable: LabelVariable) : Principal","description":"io.github.aplcornell.viaduct.security.PolymorphicPrincipal","location":"compiler/io.github.aplcornell.viaduct.security/-polymorphic-principal/index.html","searchKeys":["PolymorphicPrincipal","data class PolymorphicPrincipal(val labelVariable: LabelVariable) : Principal","io.github.aplcornell.viaduct.security.PolymorphicPrincipal"]},{"name":"data class ProtocolAssignment(val assignment: Map<FunctionVariable, Protocol>, val propModel: Map<String, Boolean>, val problem: SelectionProblem)","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/index.html","searchKeys":["ProtocolAssignment","data class ProtocolAssignment(val assignment: Map<FunctionVariable, Protocol>, val propModel: Map<String, Boolean>, val problem: SelectionProblem)","io.github.aplcornell.viaduct.selection.ProtocolAssignment"]},{"name":"data class ProtocolCommunication(val events: Set<CommunicationEvent>) : Set<CommunicationEvent> ","description":"io.github.aplcornell.viaduct.selection.ProtocolCommunication","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-communication/index.html","searchKeys":["ProtocolCommunication","data class ProtocolCommunication(val events: Set<CommunicationEvent>) : Set<CommunicationEvent> ","io.github.aplcornell.viaduct.selection.ProtocolCommunication"]},{"name":"data class ProtocolName(val name: String) : Name, Comparable<ProtocolName> ","description":"io.github.aplcornell.viaduct.syntax.ProtocolName","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-name/index.html","searchKeys":["ProtocolName","data class ProtocolName(val name: String) : Name, Comparable<ProtocolName> ","io.github.aplcornell.viaduct.syntax.ProtocolName"]},{"name":"data class ProtocolProjection(val protocol: Protocol, val host: Host) : Name, Comparable<ProtocolProjection> ","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/index.html","searchKeys":["ProtocolProjection","data class ProtocolProjection(val protocol: Protocol, val host: Host) : Name, Comparable<ProtocolProjection> ","io.github.aplcornell.viaduct.syntax.ProtocolProjection"]},{"name":"data class SelectionProblem(val constraints: Set<SelectionConstraint>, val cost: SymbolicCost, val costMap: Map<Node, SymbolicCost> = mapOf())","description":"io.github.aplcornell.viaduct.selection.SelectionProblem","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-problem/index.html","searchKeys":["SelectionProblem","data class SelectionProblem(val constraints: Set<SelectionConstraint>, val cost: SymbolicCost, val costMap: Map<Node, SymbolicCost> = mapOf())","io.github.aplcornell.viaduct.selection.SelectionProblem"]},{"name":"data class SourcePosition(sourceFile: SourceFile, val offset: Int) : Comparable<SourcePosition> ","description":"io.github.aplcornell.viaduct.parsing.SourcePosition","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/index.html","searchKeys":["SourcePosition","data class SourcePosition(sourceFile: SourceFile, val offset: Int) : Comparable<SourcePosition> ","io.github.aplcornell.viaduct.parsing.SourcePosition"]},{"name":"data class SourceRange(val start: SourcePosition, val end: SourcePosition)","description":"io.github.aplcornell.viaduct.parsing.SourceRange","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/index.html","searchKeys":["SourceRange","data class SourceRange(val start: SourcePosition, val end: SourcePosition)","io.github.aplcornell.viaduct.parsing.SourceRange"]},{"name":"data class StringValue(val value: String) : Value","description":"io.github.aplcornell.viaduct.syntax.values.StringValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-string-value/index.html","searchKeys":["StringValue","data class StringValue(val value: String) : Value","io.github.aplcornell.viaduct.syntax.values.StringValue"]},{"name":"data class Temporary(val name: String) : Variable","description":"io.github.aplcornell.viaduct.syntax.Temporary","location":"compiler/io.github.aplcornell.viaduct.syntax/-temporary/index.html","searchKeys":["Temporary","data class Temporary(val name: String) : Variable","io.github.aplcornell.viaduct.syntax.Temporary"]},{"name":"data class Variable(val name: String) : Name","description":"io.github.aplcornell.viaduct.syntax.circuit.Variable","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-variable/index.html","searchKeys":["Variable","data class Variable(val name: String) : Name","io.github.aplcornell.viaduct.syntax.circuit.Variable"]},{"name":"data class VariableEquals(val var1: FunctionVariable, val var2: FunctionVariable) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.VariableEquals","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-equals/index.html","searchKeys":["VariableEquals","data class VariableEquals(val var1: FunctionVariable, val var2: FunctionVariable) : SelectionConstraint","io.github.aplcornell.viaduct.selection.VariableEquals"]},{"name":"data class VariableIn(val variable: FunctionVariable, val protocol: Protocol) : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.VariableIn","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-in/index.html","searchKeys":["VariableIn","data class VariableIn(val variable: FunctionVariable, val protocol: Protocol) : SelectionConstraint","io.github.aplcornell.viaduct.selection.VariableIn"]},{"name":"data class VectorType(val elementType: ValueType) : ObjectType","description":"io.github.aplcornell.viaduct.syntax.types.VectorType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/index.html","searchKeys":["VectorType","data class VectorType(val elementType: ValueType) : ObjectType","io.github.aplcornell.viaduct.syntax.types.VectorType"]},{"name":"enum Associativity : Enum<Associativity> ","description":"io.github.aplcornell.viaduct.syntax.Associativity","location":"compiler/io.github.aplcornell.viaduct.syntax/-associativity/index.html","searchKeys":["Associativity","enum Associativity : Enum<Associativity> ","io.github.aplcornell.viaduct.syntax.Associativity"]},{"name":"enum DelegationKind : Enum<DelegationKind> , PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.DelegationKind","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-kind/index.html","searchKeys":["DelegationKind","enum DelegationKind : Enum<DelegationKind> , PrettyPrintable","io.github.aplcornell.viaduct.syntax.DelegationKind"]},{"name":"enum DelegationProjection : Enum<DelegationProjection> , PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/index.html","searchKeys":["DelegationProjection","enum DelegationProjection : Enum<DelegationProjection> , PrettyPrintable","io.github.aplcornell.viaduct.syntax.DelegationProjection"]},{"name":"enum Order : Enum<Order> ","description":"io.github.aplcornell.viaduct.syntax.Order","location":"compiler/io.github.aplcornell.viaduct.syntax/-order/index.html","searchKeys":["Order","enum Order : Enum<Order> ","io.github.aplcornell.viaduct.syntax.Order"]},{"name":"enum ParameterDirection : Enum<ParameterDirection> , PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.ParameterDirection","location":"compiler/io.github.aplcornell.viaduct.syntax/-parameter-direction/index.html","searchKeys":["ParameterDirection","enum ParameterDirection : Enum<ParameterDirection> , PrettyPrintable","io.github.aplcornell.viaduct.syntax.ParameterDirection"]},{"name":"enum SimpleCostRegime : Enum<SimpleCostRegime> ","description":"io.github.aplcornell.viaduct.selection.SimpleCostRegime","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-regime/index.html","searchKeys":["SimpleCostRegime","enum SimpleCostRegime : Enum<SimpleCostRegime> ","io.github.aplcornell.viaduct.selection.SimpleCostRegime"]},{"name":"fun <A : MeetSemiLattice<A>, NodeT : DataFlowNode<A>, EdgeT : DataFlowEdge<A>> solveDataFlow(top: A, graph: Graph<NodeT, EdgeT>): Map<NodeT, A>","description":"io.github.aplcornell.viaduct.util.dataflow.solveDataFlow","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/solve-data-flow.html","searchKeys":["solveDataFlow","fun <A : MeetSemiLattice<A>, NodeT : DataFlowNode<A>, EdgeT : DataFlowEdge<A>> solveDataFlow(top: A, graph: Graph<NodeT, EdgeT>): Map<NodeT, A>","io.github.aplcornell.viaduct.util.dataflow.solveDataFlow"]},{"name":"fun <A> ConfidentialityComponent(principal: A)","description":"io.github.aplcornell.viaduct.security.ConfidentialityComponent.ConfidentialityComponent","location":"compiler/io.github.aplcornell.viaduct.security/-confidentiality-component/-confidentiality-component.html","searchKeys":["ConfidentialityComponent","fun <A> ConfidentialityComponent(principal: A)","io.github.aplcornell.viaduct.security.ConfidentialityComponent.ConfidentialityComponent"]},{"name":"fun <A> FreeDistributiveLattice(element: A)","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.FreeDistributiveLattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/-free-distributive-lattice.html","searchKeys":["FreeDistributiveLattice","fun <A> FreeDistributiveLattice(element: A)","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.FreeDistributiveLattice"]},{"name":"fun <A> FreeDistributiveLatticeCongruence(congruence: List<FreeDistributiveLattice.LessThanOrEqualTo<A>>)","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.FreeDistributiveLatticeCongruence","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice-congruence/-free-distributive-lattice-congruence.html","searchKeys":["FreeDistributiveLatticeCongruence","fun <A> FreeDistributiveLatticeCongruence(congruence: List<FreeDistributiveLattice.LessThanOrEqualTo<A>>)","io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.FreeDistributiveLatticeCongruence"]},{"name":"fun <A> IntegrityComponent(principal: A)","description":"io.github.aplcornell.viaduct.security.IntegrityComponent.IntegrityComponent","location":"compiler/io.github.aplcornell.viaduct.security/-integrity-component/-integrity-component.html","searchKeys":["IntegrityComponent","fun <A> IntegrityComponent(principal: A)","io.github.aplcornell.viaduct.security.IntegrityComponent.IntegrityComponent"]},{"name":"fun <A> LessThanOrEqualTo(from: FreeDistributiveLattice<A>, to: FreeDistributiveLattice<A>)","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo.LessThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/-less-than-or-equal-to/-less-than-or-equal-to.html","searchKeys":["LessThanOrEqualTo","fun <A> LessThanOrEqualTo(from: FreeDistributiveLattice<A>, to: FreeDistributiveLattice<A>)","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo.LessThanOrEqualTo"]},{"name":"fun <A> bounds(): BoundedLattice<FreeDistributiveLattice<A>>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.Companion.bounds","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/-companion/bounds.html","searchKeys":["bounds","fun <A> bounds(): BoundedLattice<FreeDistributiveLattice<A>>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.Companion.bounds"]},{"name":"fun <A> empty(): FreeDistributiveLatticeCongruence<A>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.Companion.empty","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice-congruence/-companion/empty.html","searchKeys":["empty","fun <A> empty(): FreeDistributiveLatticeCongruence<A>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.Companion.empty"]},{"name":"fun <C : CostMonoid<C>> Cost(features: PersistentMap<CostFeature, C>)","description":"io.github.aplcornell.viaduct.selection.Cost.Cost","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/-cost.html","searchKeys":["Cost","fun <C : CostMonoid<C>> Cost(features: PersistentMap<CostFeature, C>)","io.github.aplcornell.viaduct.selection.Cost.Cost"]},{"name":"fun <C : HeytingAlgebra<C>, V, T : Throwable> ConstraintSystem(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.ConstraintSystem","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-system/-constraint-system.html","searchKeys":["ConstraintSystem","fun <C : HeytingAlgebra<C>, V, T : Throwable> ConstraintSystem(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.ConstraintSystem"]},{"name":"fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.confidentialityFlowsTo(that: Term<C, V>, bounds: BoundedLattice<C>, failWith: (SecurityLattice<C>, SecurityLattice<C>) -> T): Iterable<Constraint<C, V, T>>","description":"io.github.aplcornell.viaduct.security.solver.confidentialityFlowsTo","location":"compiler/io.github.aplcornell.viaduct.security.solver/confidentiality-flows-to.html","searchKeys":["confidentialityFlowsTo","fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.confidentialityFlowsTo(that: Term<C, V>, bounds: BoundedLattice<C>, failWith: (SecurityLattice<C>, SecurityLattice<C>) -> T): Iterable<Constraint<C, V, T>>","io.github.aplcornell.viaduct.security.solver.confidentialityFlowsTo"]},{"name":"fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.flowsTo(that: Term<C, V>, bounds: BoundedLattice<C>, failWith: (SecurityLattice<C>, SecurityLattice<C>) -> T): Iterable<Constraint<C, V, T>>","description":"io.github.aplcornell.viaduct.security.solver.flowsTo","location":"compiler/io.github.aplcornell.viaduct.security.solver/flows-to.html","searchKeys":["flowsTo","fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.flowsTo(that: Term<C, V>, bounds: BoundedLattice<C>, failWith: (SecurityLattice<C>, SecurityLattice<C>) -> T): Iterable<Constraint<C, V, T>>","io.github.aplcornell.viaduct.security.solver.flowsTo"]},{"name":"fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.flowsTo(that: Term<C, V>, failWith: (C, C) -> T): Constraint<C, V, T>","description":"io.github.aplcornell.viaduct.algebra.solver.flowsTo","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/flows-to.html","searchKeys":["flowsTo","fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.flowsTo(that: Term<C, V>, failWith: (C, C) -> T): Constraint<C, V, T>","io.github.aplcornell.viaduct.algebra.solver.flowsTo"]},{"name":"fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.integrityFlowsTo(that: Term<C, V>, bounds: BoundedLattice<C>, failWith: (SecurityLattice<C>, SecurityLattice<C>) -> T): Iterable<Constraint<C, V, T>>","description":"io.github.aplcornell.viaduct.security.solver.integrityFlowsTo","location":"compiler/io.github.aplcornell.viaduct.security.solver/integrity-flows-to.html","searchKeys":["integrityFlowsTo","fun <C : HeytingAlgebra<C>, V, T> Term<C, V>.integrityFlowsTo(that: Term<C, V>, bounds: BoundedLattice<C>, failWith: (SecurityLattice<C>, SecurityLattice<C>) -> T): Iterable<Constraint<C, V, T>>","io.github.aplcornell.viaduct.security.solver.integrityFlowsTo"]},{"name":"fun <C : HeytingAlgebra<C>> ConstraintSystem(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","description":"io.github.aplcornell.viaduct.security.solver.ConstraintSystem.ConstraintSystem","location":"compiler/io.github.aplcornell.viaduct.security.solver/-constraint-system/-constraint-system.html","searchKeys":["ConstraintSystem","fun <C : HeytingAlgebra<C>> ConstraintSystem(constraints: Iterable<Constraint<C, V, T>>, bounds: BoundedLattice<C>, delegationContext: LatticeCongruence<C>)","io.github.aplcornell.viaduct.security.solver.ConstraintSystem.ConstraintSystem"]},{"name":"fun <C : Lattice<C>, V> term(constant: SecurityLattice<C>): Term<C, V>","description":"io.github.aplcornell.viaduct.security.solver.term","location":"compiler/io.github.aplcornell.viaduct.security.solver/term.html","searchKeys":["term","fun <C : Lattice<C>, V> term(constant: SecurityLattice<C>): Term<C, V>","io.github.aplcornell.viaduct.security.solver.term"]},{"name":"fun <C : Lattice<C>, V> term(variable: V): Term<C, V>","description":"io.github.aplcornell.viaduct.security.solver.term","location":"compiler/io.github.aplcornell.viaduct.security.solver/term.html","searchKeys":["term","fun <C : Lattice<C>, V> term(variable: V): Term<C, V>","io.github.aplcornell.viaduct.security.solver.term"]},{"name":"fun <C : Lattice<C>> Bounds(bounds: BoundedLattice<C>)","description":"io.github.aplcornell.viaduct.algebra.solver.Term.Bounds.Bounds","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/-bounds/-bounds.html","searchKeys":["Bounds","fun <C : Lattice<C>> Bounds(bounds: BoundedLattice<C>)","io.github.aplcornell.viaduct.algebra.solver.Term.Bounds.Bounds"]},{"name":"fun <C, V> constant(value: C): Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.Companion.constant","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/-companion/constant.html","searchKeys":["constant","fun <C, V> constant(value: C): Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.Companion.constant"]},{"name":"fun <C, V> variable(value: V): Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.Companion.variable","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/-companion/variable.html","searchKeys":["variable","fun <C, V> variable(value: V): Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.Companion.variable"]},{"name":"fun <D : CostMonoid<D>> featureMap(f: (CostFeature, C) -> D): Cost<D>","description":"io.github.aplcornell.viaduct.selection.Cost.featureMap","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/feature-map.html","searchKeys":["featureMap","fun <D : CostMonoid<D>> featureMap(f: (CostFeature, C) -> D): Cost<D>","io.github.aplcornell.viaduct.selection.Cost.featureMap"]},{"name":"fun <D : CostMonoid<D>> map(f: (C) -> D): Cost<D>","description":"io.github.aplcornell.viaduct.selection.Cost.map","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/map.html","searchKeys":["map","fun <D : CostMonoid<D>> map(f: (C) -> D): Cost<D>","io.github.aplcornell.viaduct.selection.Cost.map"]},{"name":"fun <E> UniqueQueue(collection: Collection<E>)","description":"io.github.aplcornell.viaduct.util.UniqueQueue.UniqueQueue","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/-unique-queue.html","searchKeys":["UniqueQueue","fun <E> UniqueQueue(collection: Collection<E>)","io.github.aplcornell.viaduct.util.UniqueQueue.UniqueQueue"]},{"name":"fun <K, V> Iterable<Map<K, V>>.unions(): Map<K, V>","description":"io.github.aplcornell.viaduct.util.unions","location":"compiler/io.github.aplcornell.viaduct.util/unions.html","searchKeys":["unions","fun <K, V> Iterable<Map<K, V>>.unions(): Map<K, V>","io.github.aplcornell.viaduct.util.unions"]},{"name":"fun <Node : TreeNode<Node>, T> collectedAttribute(tree: Tree<Node, Node>, f: (Node) -> Iterable<Pair<Node, T>>): Attribute<Node, Set<T>>","description":"io.github.aplcornell.viaduct.attributes.collectedAttribute","location":"compiler/io.github.aplcornell.viaduct.attributes/collected-attribute.html","searchKeys":["collectedAttribute","fun <Node : TreeNode<Node>, T> collectedAttribute(tree: Tree<Node, Node>, f: (Node) -> Iterable<Pair<Node, T>>): Attribute<Node, Set<T>>","io.github.aplcornell.viaduct.attributes.collectedAttribute"]},{"name":"fun <Node, T> attribute(f: Node.() -> T): Attribute<Node, T>","description":"io.github.aplcornell.viaduct.attributes.attribute","location":"compiler/io.github.aplcornell.viaduct.attributes/attribute.html","searchKeys":["attribute","fun <Node, T> attribute(f: Node.() -> T): Attribute<Node, T>","io.github.aplcornell.viaduct.attributes.attribute"]},{"name":"fun <Node, T> circularAttribute(initial: T, f: Node.() -> T): Attribute<Node, T>","description":"io.github.aplcornell.viaduct.attributes.circularAttribute","location":"compiler/io.github.aplcornell.viaduct.attributes/circular-attribute.html","searchKeys":["circularAttribute","fun <Node, T> circularAttribute(initial: T, f: Node.() -> T): Attribute<Node, T>","io.github.aplcornell.viaduct.attributes.circularAttribute"]},{"name":"fun <R> KLogger.duration(operationName: String, operation: () -> R): R","description":"io.github.aplcornell.viaduct.util.duration","location":"compiler/io.github.aplcornell.viaduct.util/duration.html","searchKeys":["duration","fun <R> KLogger.duration(operationName: String, operation: () -> R): R","io.github.aplcornell.viaduct.util.duration"]},{"name":"fun <T : Comparable<T>> Set<T>.asComparable(): Comparable<Set<T>>","description":"io.github.aplcornell.viaduct.util.asComparable","location":"compiler/io.github.aplcornell.viaduct.util/as-comparable.html","searchKeys":["asComparable","fun <T : Comparable<T>> Set<T>.asComparable(): Comparable<Set<T>>","io.github.aplcornell.viaduct.util.asComparable"]},{"name":"fun <T : HasSourceLocation> from(vararg arguments: T): Arguments<T>","description":"io.github.aplcornell.viaduct.syntax.Arguments.Companion.from","location":"compiler/io.github.aplcornell.viaduct.syntax/-arguments/-companion/from.html","searchKeys":["from","fun <T : HasSourceLocation> from(vararg arguments: T): Arguments<T>","io.github.aplcornell.viaduct.syntax.Arguments.Companion.from"]},{"name":"fun <T : Lattice<T>> Bounds(bounds: BoundedLattice<T>)","description":"io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.Bounds","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-bounds/-bounds.html","searchKeys":["Bounds","fun <T : Lattice<T>> Bounds(bounds: BoundedLattice<T>)","io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.Bounds"]},{"name":"fun <T : Lattice<T>> SecurityLattice(confidentialityComponent: T, integrityComponent: T)","description":"io.github.aplcornell.viaduct.security.SecurityLattice.SecurityLattice","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-security-lattice.html","searchKeys":["SecurityLattice","fun <T : Lattice<T>> SecurityLattice(confidentialityComponent: T, integrityComponent: T)","io.github.aplcornell.viaduct.security.SecurityLattice.SecurityLattice"]},{"name":"fun <T : Lattice<T>> SecurityLattice(principal: T)","description":"io.github.aplcornell.viaduct.security.SecurityLattice.SecurityLattice","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-security-lattice.html","searchKeys":["SecurityLattice","fun <T : Lattice<T>> SecurityLattice(principal: T)","io.github.aplcornell.viaduct.security.SecurityLattice.SecurityLattice"]},{"name":"fun <T> Iterable<Set<T>>.unions(): Set<T>","description":"io.github.aplcornell.viaduct.util.unions","location":"compiler/io.github.aplcornell.viaduct.util/unions.html","searchKeys":["unions","fun <T> Iterable<Set<T>>.unions(): Set<T>","io.github.aplcornell.viaduct.util.unions"]},{"name":"fun <T> cached(function: (ProgramNode) -> T): T","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.cached","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/cached.html","searchKeys":["cached","fun <T> cached(function: (ProgramNode) -> T): T","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.cached"]},{"name":"fun <out RootNode : Node> Tree(root: RootNode)","description":"io.github.aplcornell.viaduct.attributes.Tree.Tree","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree/-tree.html","searchKeys":["Tree","fun <out RootNode : Node> Tree(root: RootNode)","io.github.aplcornell.viaduct.attributes.Tree.Tree"]},{"name":"fun <out T : PrettyPrintable> Located(value: T, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.Located.Located","location":"compiler/io.github.aplcornell.viaduct.syntax/-located/-located.html","searchKeys":["Located","fun <out T : PrettyPrintable> Located(value: T, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.Located.Located"]},{"name":"fun <out T> Arguments(arguments: List<T>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.Arguments.Arguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-arguments/-arguments.html","searchKeys":["Arguments","fun <out T> Arguments(arguments: List<T>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.Arguments.Arguments"]},{"name":"fun ABYCodeGenerator(context: CodeGeneratorContext)","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.ABYCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/-a-b-y-code-generator.html","searchKeys":["ABYCodeGenerator","fun ABYCodeGenerator(context: CodeGeneratorContext)","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.ABYCodeGenerator"]},{"name":"fun ABYProtocolFactory(program: ProgramNode)","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.ABYProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/-a-b-y-protocol-factory.html","searchKeys":["ABYProtocolFactory","fun ABYProtocolFactory(program: ProgramNode)","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.ABYProtocolFactory"]},{"name":"fun AbstractCodeGenerator(context: CodeGeneratorContext)","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.AbstractCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/-abstract-code-generator.html","searchKeys":["AbstractCodeGenerator","fun AbstractCodeGenerator(context: CodeGeneratorContext)","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.AbstractCodeGenerator"]},{"name":"fun AbstractProtocolComposer()","description":"io.github.aplcornell.viaduct.selection.AbstractProtocolComposer.AbstractProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.selection/-abstract-protocol-composer/-abstract-protocol-composer.html","searchKeys":["AbstractProtocolComposer","fun AbstractProtocolComposer()","io.github.aplcornell.viaduct.selection.AbstractProtocolComposer.AbstractProtocolComposer"]},{"name":"fun And(props: List<SelectionConstraint>)","description":"io.github.aplcornell.viaduct.selection.And.And","location":"compiler/io.github.aplcornell.viaduct.selection/-and/-and.html","searchKeys":["And","fun And(props: List<SelectionConstraint>)","io.github.aplcornell.viaduct.selection.And.And"]},{"name":"fun And(vararg props: SelectionConstraint)","description":"io.github.aplcornell.viaduct.selection.And.And","location":"compiler/io.github.aplcornell.viaduct.selection/-and/-and.html","searchKeys":["And","fun And(vararg props: SelectionConstraint)","io.github.aplcornell.viaduct.selection.And.And"]},{"name":"fun ArgumentLabel(name: String)","description":"io.github.aplcornell.viaduct.syntax.ArgumentLabel.ArgumentLabel","location":"compiler/io.github.aplcornell.viaduct.syntax/-argument-label/-argument-label.html","searchKeys":["ArgumentLabel","fun ArgumentLabel(name: String)","io.github.aplcornell.viaduct.syntax.ArgumentLabel.ArgumentLabel"]},{"name":"fun Arguments(sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.Arguments.Arguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-arguments/-arguments.html","searchKeys":["Arguments","fun Arguments(sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.Arguments.Arguments"]},{"name":"fun ArithABY(server: Host, client: Host)","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.ArithABY","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-arith-a-b-y.html","searchKeys":["ArithABY","fun ArithABY(server: Host, client: Host)","io.github.aplcornell.viaduct.backends.aby.ArithABY.ArithABY"]},{"name":"fun ArithmeticOperator()","description":"io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.ArithmeticOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-arithmetic-operator/-arithmetic-operator.html","searchKeys":["ArithmeticOperator","fun ArithmeticOperator()","io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.ArithmeticOperator"]},{"name":"fun ArrayType(elementType: ValueTypeNode, shape: Arguments<IndexExpressionNode>)","description":"io.github.aplcornell.viaduct.syntax.circuit.ArrayType.ArrayType","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-array-type/-array-type.html","searchKeys":["ArrayType","fun ArrayType(elementType: ValueTypeNode, shape: Arguments<IndexExpressionNode>)","io.github.aplcornell.viaduct.syntax.circuit.ArrayType.ArrayType"]},{"name":"fun AssertionNode(condition: AtomicExpressionNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.AssertionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-assertion-node/-assertion-node.html","searchKeys":["AssertionNode","fun AssertionNode(condition: AtomicExpressionNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.AssertionNode"]},{"name":"fun AssertionNode(condition: ExpressionNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.AssertionNode.AssertionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-assertion-node/-assertion-node.html","searchKeys":["AssertionNode","fun AssertionNode(condition: ExpressionNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.AssertionNode.AssertionNode"]},{"name":"fun Attribute()","description":"io.github.aplcornell.viaduct.attributes.Attribute.Attribute","location":"compiler/io.github.aplcornell.viaduct.attributes/-attribute/-attribute.html","searchKeys":["Attribute","fun Attribute()","io.github.aplcornell.viaduct.attributes.Attribute.Attribute"]},{"name":"fun AuthorityDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.AuthorityDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/-authority-delegation-declaration-node.html","searchKeys":["AuthorityDelegationDeclarationNode","fun AuthorityDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.AuthorityDelegationDeclarationNode"]},{"name":"fun AuthorityDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation, comment: String?)","description":"io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.AuthorityDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-authority-delegation-declaration-node/-authority-delegation-declaration-node.html","searchKeys":["AuthorityDelegationDeclarationNode","fun AuthorityDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation, comment: String?)","io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.AuthorityDelegationDeclarationNode"]},{"name":"fun Backend.filter(predicate: (ProtocolName) -> Boolean): Backend","description":"io.github.aplcornell.viaduct.backends.filter","location":"compiler/io.github.aplcornell.viaduct.backends/filter.html","searchKeys":["filter","fun Backend.filter(predicate: (ProtocolName) -> Boolean): Backend","io.github.aplcornell.viaduct.backends.filter"]},{"name":"fun BinaryInfixOperator()","description":"io.github.aplcornell.viaduct.syntax.operators.BinaryInfixOperator.BinaryInfixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-binary-infix-operator/-binary-infix-operator.html","searchKeys":["BinaryInfixOperator","fun BinaryInfixOperator()","io.github.aplcornell.viaduct.syntax.operators.BinaryInfixOperator.BinaryInfixOperator"]},{"name":"fun BinaryPrefixOperator()","description":"io.github.aplcornell.viaduct.syntax.operators.BinaryPrefixOperator.BinaryPrefixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-binary-prefix-operator/-binary-prefix-operator.html","searchKeys":["BinaryPrefixOperator","fun BinaryPrefixOperator()","io.github.aplcornell.viaduct.syntax.operators.BinaryPrefixOperator.BinaryPrefixOperator"]},{"name":"fun BlockNode(statements: List<StatementNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.BlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/-block-node.html","searchKeys":["BlockNode","fun BlockNode(statements: List<StatementNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.BlockNode"]},{"name":"fun BlockNode(statements: List<StatementNode>, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.BlockNode.BlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-block-node/-block-node.html","searchKeys":["BlockNode","fun BlockNode(statements: List<StatementNode>, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.BlockNode.BlockNode"]},{"name":"fun BlockNode(vararg statements: StatementNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.BlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/-block-node.html","searchKeys":["BlockNode","fun BlockNode(vararg statements: StatementNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.BlockNode"]},{"name":"fun BlockNode(vararg statements: StatementNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.BlockNode.BlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-block-node/-block-node.html","searchKeys":["BlockNode","fun BlockNode(vararg statements: StatementNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.BlockNode.BlockNode"]},{"name":"fun BoolABY(server: Host, client: Host)","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.BoolABY","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-bool-a-b-y.html","searchKeys":["BoolABY","fun BoolABY(server: Host, client: Host)","io.github.aplcornell.viaduct.backends.aby.BoolABY.BoolABY"]},{"name":"fun BoundParameterNode(name: VariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.BoundParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-bound-parameter-node/-bound-parameter-node.html","searchKeys":["BoundParameterNode","fun BoundParameterNode(name: VariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.BoundParameterNode"]},{"name":"fun BreakNode(jumpLabel: JumpLabelNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.BreakNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-break-node/-break-node.html","searchKeys":["BreakNode","fun BreakNode(jumpLabel: JumpLabelNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.BreakNode"]},{"name":"fun BreakNode(jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.BreakNode.BreakNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-break-node/-break-node.html","searchKeys":["BreakNode","fun BreakNode(jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.BreakNode.BreakNode"]},{"name":"fun ByteVecValue(value: List<Byte>)","description":"io.github.aplcornell.viaduct.syntax.values.ByteVecValue.ByteVecValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-byte-vec-value/-byte-vec-value.html","searchKeys":["ByteVecValue","fun ByteVecValue(value: List<Byte>)","io.github.aplcornell.viaduct.syntax.values.ByteVecValue.ByteVecValue"]},{"name":"fun CharSequence.graphemeClusterCount(): Int","description":"io.github.aplcornell.viaduct.util.graphemeClusterCount","location":"compiler/io.github.aplcornell.viaduct.util/grapheme-cluster-count.html","searchKeys":["graphemeClusterCount","fun CharSequence.graphemeClusterCount(): Int","io.github.aplcornell.viaduct.util.graphemeClusterCount"]},{"name":"fun CircuitBlockNode(statements: List<CircuitStatementNode>, returnStatement: ReturnNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.CircuitBlockNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-block-node/-circuit-block-node.html","searchKeys":["CircuitBlockNode","fun CircuitBlockNode(statements: List<CircuitStatementNode>, returnStatement: ReturnNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.CircuitBlockNode"]},{"name":"fun CircuitDeclarationNode(name: FunctionNameNode, protocol: ProtocolNode, bounds: Arguments<BoundParameterNode>, inputs: Arguments<ParameterNode>, outputs: Arguments<ParameterNode>, body: CircuitBlockNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.CircuitDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/-circuit-declaration-node.html","searchKeys":["CircuitDeclarationNode","fun CircuitDeclarationNode(name: FunctionNameNode, protocol: ProtocolNode, bounds: Arguments<BoundParameterNode>, inputs: Arguments<ParameterNode>, outputs: Arguments<ParameterNode>, body: CircuitBlockNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.CircuitDeclarationNode"]},{"name":"fun ClassName(name: String)","description":"io.github.aplcornell.viaduct.syntax.datatypes.ClassName.ClassName","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-class-name/-class-name.html","searchKeys":["ClassName","fun ClassName(name: String)","io.github.aplcornell.viaduct.syntax.datatypes.ClassName.ClassName"]},{"name":"fun Cleartext()","description":"io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Cleartext","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext/-cleartext.html","searchKeys":["Cleartext","fun Cleartext()","io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Cleartext"]},{"name":"fun CleartextCodeGenerator(context: CodeGeneratorContext)","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.CleartextCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-code-generator/-cleartext-code-generator.html","searchKeys":["CleartextCodeGenerator","fun CleartextCodeGenerator(context: CodeGeneratorContext)","io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.CleartextCodeGenerator"]},{"name":"fun CodeGenerationException(message: String)","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerationException.CodeGenerationException","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generation-exception/-code-generation-exception.html","searchKeys":["CodeGenerationException","fun CodeGenerationException(message: String)","io.github.aplcornell.viaduct.codegeneration.CodeGenerationException.CodeGenerationException"]},{"name":"fun CodeGeneratorDispatcher()","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.CodeGeneratorDispatcher","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/-code-generator-dispatcher.html","searchKeys":["CodeGeneratorDispatcher","fun CodeGeneratorDispatcher()","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.CodeGeneratorDispatcher"]},{"name":"fun Commitment(cleartextHost: Host, hashHosts: Set<Host>)","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.Commitment","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/-commitment.html","searchKeys":["Commitment","fun Commitment(cleartextHost: Host, hashHosts: Set<Host>)","io.github.aplcornell.viaduct.backends.commitment.Commitment.Commitment"]},{"name":"fun CommitmentDispatchCodeGenerator(context: CodeGeneratorContext)","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentDispatchCodeGenerator.CommitmentDispatchCodeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-dispatch-code-generator/-commitment-dispatch-code-generator.html","searchKeys":["CommitmentDispatchCodeGenerator","fun CommitmentDispatchCodeGenerator(context: CodeGeneratorContext)","io.github.aplcornell.viaduct.backends.commitment.CommitmentDispatchCodeGenerator.CommitmentDispatchCodeGenerator"]},{"name":"fun CommitmentProtocolFactory(program: ProgramNode)","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory.CommitmentProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-factory/-commitment-protocol-factory.html","searchKeys":["CommitmentProtocolFactory","fun CommitmentProtocolFactory(program: ProgramNode)","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory.CommitmentProtocolFactory"]},{"name":"fun CommunicationEvent(send: OutputPort, recv: InputPort)","description":"io.github.aplcornell.viaduct.selection.CommunicationEvent.CommunicationEvent","location":"compiler/io.github.aplcornell.viaduct.selection/-communication-event/-communication-event.html","searchKeys":["CommunicationEvent","fun CommunicationEvent(send: OutputPort, recv: InputPort)","io.github.aplcornell.viaduct.selection.CommunicationEvent.CommunicationEvent"]},{"name":"fun ComparisonOperator()","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.ComparisonOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator/-comparison-operator.html","searchKeys":["ComparisonOperator","fun ComparisonOperator()","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.ComparisonOperator"]},{"name":"fun CompilationError()","description":"io.github.aplcornell.viaduct.errors.CompilationError.CompilationError","location":"compiler/io.github.aplcornell.viaduct.errors/-compilation-error/-compilation-error.html","searchKeys":["CompilationError","fun CompilationError()","io.github.aplcornell.viaduct.errors.CompilationError.CompilationError"]},{"name":"fun ConfidentialityChangingEndorsementError(node: EndorsementNode, from: Label, to: Label)","description":"io.github.aplcornell.viaduct.errors.ConfidentialityChangingEndorsementError.ConfidentialityChangingEndorsementError","location":"compiler/io.github.aplcornell.viaduct.errors/-confidentiality-changing-endorsement-error/-confidentiality-changing-endorsement-error.html","searchKeys":["ConfidentialityChangingEndorsementError","fun ConfidentialityChangingEndorsementError(node: EndorsementNode, from: Label, to: Label)","io.github.aplcornell.viaduct.errors.ConfidentialityChangingEndorsementError.ConfidentialityChangingEndorsementError"]},{"name":"fun ConstructorCallNode(objectType: ObjectTypeNode, protocol: ProtocolNode?, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.ConstructorCallNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-constructor-call-node/-constructor-call-node.html","searchKeys":["ConstructorCallNode","fun ConstructorCallNode(objectType: ObjectTypeNode, protocol: ProtocolNode?, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.ConstructorCallNode"]},{"name":"fun CostAdd(lhs: SymbolicCost, rhs: SymbolicCost)","description":"io.github.aplcornell.viaduct.selection.CostAdd.CostAdd","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-add/-cost-add.html","searchKeys":["CostAdd","fun CostAdd(lhs: SymbolicCost, rhs: SymbolicCost)","io.github.aplcornell.viaduct.selection.CostAdd.CostAdd"]},{"name":"fun CostChoice(choices: List<Pair<SelectionConstraint, SymbolicCost>>)","description":"io.github.aplcornell.viaduct.selection.CostChoice.CostChoice","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-choice/-cost-choice.html","searchKeys":["CostChoice","fun CostChoice(choices: List<Pair<SelectionConstraint, SymbolicCost>>)","io.github.aplcornell.viaduct.selection.CostChoice.CostChoice"]},{"name":"fun CostLiteral(cost: Int)","description":"io.github.aplcornell.viaduct.selection.CostLiteral.CostLiteral","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-literal/-cost-literal.html","searchKeys":["CostLiteral","fun CostLiteral(cost: Int)","io.github.aplcornell.viaduct.selection.CostLiteral.CostLiteral"]},{"name":"fun CostMax(lhs: SymbolicCost, rhs: SymbolicCost)","description":"io.github.aplcornell.viaduct.selection.CostMax.CostMax","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-max/-cost-max.html","searchKeys":["CostMax","fun CostMax(lhs: SymbolicCost, rhs: SymbolicCost)","io.github.aplcornell.viaduct.selection.CostMax.CostMax"]},{"name":"fun CostMul(lhs: Int, rhs: SymbolicCost)","description":"io.github.aplcornell.viaduct.selection.CostMul.CostMul","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-mul/-cost-mul.html","searchKeys":["CostMul","fun CostMul(lhs: Int, rhs: SymbolicCost)","io.github.aplcornell.viaduct.selection.CostMul.CostMul"]},{"name":"fun CycleInAttributeDefinitionException()","description":"io.github.aplcornell.viaduct.attributes.CycleInAttributeDefinitionException.CycleInAttributeDefinitionException","location":"compiler/io.github.aplcornell.viaduct.attributes/-cycle-in-attribute-definition-exception/-cycle-in-attribute-definition-exception.html","searchKeys":["CycleInAttributeDefinitionException","fun CycleInAttributeDefinitionException()","io.github.aplcornell.viaduct.attributes.CycleInAttributeDefinitionException.CycleInAttributeDefinitionException"]},{"name":"fun DeclarationNode(name: ObjectVariableNode, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>, protocol: ProtocolNode?, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.DeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/-declaration-node.html","searchKeys":["DeclarationNode","fun DeclarationNode(name: ObjectVariableNode, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>, protocol: ProtocolNode?, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.DeclarationNode"]},{"name":"fun DeclarationNode(variable: ObjectVariableNode, initializer: ExpressionNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.DeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declaration-node/-declaration-node.html","searchKeys":["DeclarationNode","fun DeclarationNode(variable: ObjectVariableNode, initializer: ExpressionNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.DeclarationNode"]},{"name":"fun DeclarationNode.readsFrom(nameAnalysis: NameAnalysis, to: Set<Protocol>, from: Set<Protocol>): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.readsFrom","location":"compiler/io.github.aplcornell.viaduct.selection/reads-from.html","searchKeys":["readsFrom","fun DeclarationNode.readsFrom(nameAnalysis: NameAnalysis, to: Set<Protocol>, from: Set<Protocol>): SelectionConstraint","io.github.aplcornell.viaduct.selection.readsFrom"]},{"name":"fun DeclarationNode.sendsTo(nameAnalysis: NameAnalysis, from: Set<Protocol>, to: Set<Protocol>): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.sendsTo","location":"compiler/io.github.aplcornell.viaduct.selection/sends-to.html","searchKeys":["sendsTo","fun DeclarationNode.sendsTo(nameAnalysis: NameAnalysis, from: Set<Protocol>, to: Set<Protocol>): SelectionConstraint","io.github.aplcornell.viaduct.selection.sendsTo"]},{"name":"fun DeclassificationNode(expression: AtomicExpressionNode, fromLabel: LabelNode?, toLabel: LabelNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.DeclassificationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/-declassification-node.html","searchKeys":["DeclassificationNode","fun DeclassificationNode(expression: AtomicExpressionNode, fromLabel: LabelNode?, toLabel: LabelNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.DeclassificationNode"]},{"name":"fun DeclassificationNode(expression: ExpressionNode, fromLabel: LabelNode?, toLabel: LabelNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.DeclassificationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declassification-node/-declassification-node.html","searchKeys":["DeclassificationNode","fun DeclassificationNode(expression: ExpressionNode, fromLabel: LabelNode?, toLabel: LabelNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.DeclassificationNode"]},{"name":"fun DelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.DelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/-delegation-declaration-node.html","searchKeys":["DelegationDeclarationNode","fun DelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.DelegationDeclarationNode"]},{"name":"fun DelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation, comment: String?)","description":"io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.DelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-delegation-declaration-node/-delegation-declaration-node.html","searchKeys":["DelegationDeclarationNode","fun DelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation, comment: String?)","io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.DelegationDeclarationNode"]},{"name":"fun EndorsementNode(expression: AtomicExpressionNode, fromLabel: LabelNode, toLabel: LabelNode?, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.EndorsementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/-endorsement-node.html","searchKeys":["EndorsementNode","fun EndorsementNode(expression: AtomicExpressionNode, fromLabel: LabelNode, toLabel: LabelNode?, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.EndorsementNode"]},{"name":"fun EndorsementNode(expression: ExpressionNode, fromLabel: LabelNode, toLabel: LabelNode?, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.EndorsementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-endorsement-node/-endorsement-node.html","searchKeys":["EndorsementNode","fun EndorsementNode(expression: ExpressionNode, fromLabel: LabelNode, toLabel: LabelNode?, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.EndorsementNode"]},{"name":"fun ExpressionArgumentNode(expression: AtomicExpressionNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.ExpressionArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-argument-node/-expression-argument-node.html","searchKeys":["ExpressionArgumentNode","fun ExpressionArgumentNode(expression: AtomicExpressionNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.ExpressionArgumentNode"]},{"name":"fun ExpressionArgumentNode(expression: ExpressionNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode.ExpressionArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-expression-argument-node/-expression-argument-node.html","searchKeys":["ExpressionArgumentNode","fun ExpressionArgumentNode(expression: ExpressionNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode.ExpressionArgumentNode"]},{"name":"fun ExpressionNode.involvedVariables(): List<Variable>","description":"io.github.aplcornell.viaduct.analysis.involvedVariables","location":"compiler/io.github.aplcornell.viaduct.analysis/involved-variables.html","searchKeys":["involvedVariables","fun ExpressionNode.involvedVariables(): List<Variable>","io.github.aplcornell.viaduct.analysis.involvedVariables"]},{"name":"fun ExpressionNode.readsFrom(nameAnalysis: NameAnalysis, protocols: Set<Protocol>): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.readsFrom","location":"compiler/io.github.aplcornell.viaduct.selection/reads-from.html","searchKeys":["readsFrom","fun ExpressionNode.readsFrom(nameAnalysis: NameAnalysis, protocols: Set<Protocol>): SelectionConstraint","io.github.aplcornell.viaduct.selection.readsFrom"]},{"name":"fun ForLoopNode(initialize: SimpleStatementNode, guard: ExpressionNode, update: SimpleStatementNode, body: BlockNode, jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.ForLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/-for-loop-node.html","searchKeys":["ForLoopNode","fun ForLoopNode(initialize: SimpleStatementNode, guard: ExpressionNode, update: SimpleStatementNode, body: BlockNode, jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.ForLoopNode"]},{"name":"fun FreshNameGenerator()","description":"io.github.aplcornell.viaduct.util.FreshNameGenerator.FreshNameGenerator","location":"compiler/io.github.aplcornell.viaduct.util/-fresh-name-generator/-fresh-name-generator.html","searchKeys":["FreshNameGenerator","fun FreshNameGenerator()","io.github.aplcornell.viaduct.util.FreshNameGenerator.FreshNameGenerator"]},{"name":"fun FreshNameGenerator(initialNames: Set<String>)","description":"io.github.aplcornell.viaduct.util.FreshNameGenerator.FreshNameGenerator","location":"compiler/io.github.aplcornell.viaduct.util/-fresh-name-generator/-fresh-name-generator.html","searchKeys":["FreshNameGenerator","fun FreshNameGenerator(initialNames: Set<String>)","io.github.aplcornell.viaduct.util.FreshNameGenerator.FreshNameGenerator"]},{"name":"fun FunctionCallNode(name: FunctionNameNode, arguments: Arguments<FunctionArgumentNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.FunctionCallNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/-function-call-node.html","searchKeys":["FunctionCallNode","fun FunctionCallNode(name: FunctionNameNode, arguments: Arguments<FunctionArgumentNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.FunctionCallNode"]},{"name":"fun FunctionCallNode(name: FunctionNameNode, arguments: Arguments<FunctionArgumentNode>, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.FunctionCallNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-call-node/-function-call-node.html","searchKeys":["FunctionCallNode","fun FunctionCallNode(name: FunctionNameNode, arguments: Arguments<FunctionArgumentNode>, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.FunctionCallNode"]},{"name":"fun FunctionDeclarationNode(name: FunctionNameNode, labelParameters: Arguments<LabelVariableNode>, parameters: Arguments<ParameterNode>, labelConstraints: Arguments<IFCDelegationDeclarationNode>, pcLabel: LabelNode, body: BlockNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.FunctionDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/-function-declaration-node.html","searchKeys":["FunctionDeclarationNode","fun FunctionDeclarationNode(name: FunctionNameNode, labelParameters: Arguments<LabelVariableNode>, parameters: Arguments<ParameterNode>, labelConstraints: Arguments<IFCDelegationDeclarationNode>, pcLabel: LabelNode, body: BlockNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.FunctionDeclarationNode"]},{"name":"fun FunctionDeclarationNode(name: FunctionNameNode, labelParameters: Arguments<LabelVariableNode>?, parameters: Arguments<ParameterNode>, labelConstraints: Arguments<IFCDelegationDeclarationNode>?, pcLabel: LabelNode?, body: BlockNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.FunctionDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/-function-declaration-node.html","searchKeys":["FunctionDeclarationNode","fun FunctionDeclarationNode(name: FunctionNameNode, labelParameters: Arguments<LabelVariableNode>?, parameters: Arguments<ParameterNode>, labelConstraints: Arguments<IFCDelegationDeclarationNode>?, pcLabel: LabelNode?, body: BlockNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.FunctionDeclarationNode"]},{"name":"fun FunctionName(name: String)","description":"io.github.aplcornell.viaduct.syntax.FunctionName.FunctionName","location":"compiler/io.github.aplcornell.viaduct.syntax/-function-name/-function-name.html","searchKeys":["FunctionName","fun FunctionName(name: String)","io.github.aplcornell.viaduct.syntax.FunctionName.FunctionName"]},{"name":"fun FunctionType(arguments: List<ValueType>, result: ValueType)","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType.FunctionType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/-function-type.html","searchKeys":["FunctionType","fun FunctionType(arguments: List<ValueType>, result: ValueType)","io.github.aplcornell.viaduct.syntax.types.FunctionType.FunctionType"]},{"name":"fun FunctionType(vararg arguments: ValueType, result: ValueType)","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType.FunctionType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/-function-type.html","searchKeys":["FunctionType","fun FunctionType(vararg arguments: ValueType, result: ValueType)","io.github.aplcornell.viaduct.syntax.types.FunctionType.FunctionType"]},{"name":"fun FunctionVariable(function: FunctionName, variable: Variable)","description":"io.github.aplcornell.viaduct.selection.FunctionVariable.FunctionVariable","location":"compiler/io.github.aplcornell.viaduct.selection/-function-variable/-function-variable.html","searchKeys":["FunctionVariable","fun FunctionVariable(function: FunctionName, variable: Variable)","io.github.aplcornell.viaduct.selection.FunctionVariable.FunctionVariable"]},{"name":"fun GuardVisibilityFlag(variable: String)","description":"io.github.aplcornell.viaduct.selection.GuardVisibilityFlag.GuardVisibilityFlag","location":"compiler/io.github.aplcornell.viaduct.selection/-guard-visibility-flag/-guard-visibility-flag.html","searchKeys":["GuardVisibilityFlag","fun GuardVisibilityFlag(variable: String)","io.github.aplcornell.viaduct.selection.GuardVisibilityFlag.GuardVisibilityFlag"]},{"name":"fun HostDeclarationNode(name: HostNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.HostDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-host-declaration-node/-host-declaration-node.html","searchKeys":["HostDeclarationNode","fun HostDeclarationNode(name: HostNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.HostDeclarationNode"]},{"name":"fun HostDeclarationNode(name: HostNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.HostDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-host-declaration-node/-host-declaration-node.html","searchKeys":["HostDeclarationNode","fun HostDeclarationNode(name: HostNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.HostDeclarationNode"]},{"name":"fun HostDeclarationNode(name: HostNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.HostDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-host-declaration-node/-host-declaration-node.html","searchKeys":["HostDeclarationNode","fun HostDeclarationNode(name: HostNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.HostDeclarationNode"]},{"name":"fun HostPrincipal(host: Host)","description":"io.github.aplcornell.viaduct.security.HostPrincipal.HostPrincipal","location":"compiler/io.github.aplcornell.viaduct.security/-host-principal/-host-principal.html","searchKeys":["HostPrincipal","fun HostPrincipal(host: Host)","io.github.aplcornell.viaduct.security.HostPrincipal.HostPrincipal"]},{"name":"fun HostSetValue(hosts: Set<Host>)","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.HostSetValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/-host-set-value.html","searchKeys":["HostSetValue","fun HostSetValue(hosts: Set<Host>)","io.github.aplcornell.viaduct.syntax.values.HostSetValue.HostSetValue"]},{"name":"fun HostValue(value: Host)","description":"io.github.aplcornell.viaduct.syntax.values.HostValue.HostValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-value/-host-value.html","searchKeys":["HostValue","fun HostValue(value: Host)","io.github.aplcornell.viaduct.syntax.values.HostValue.HostValue"]},{"name":"fun HostVariable(variable: String)","description":"io.github.aplcornell.viaduct.selection.HostVariable.HostVariable","location":"compiler/io.github.aplcornell.viaduct.selection/-host-variable/-host-variable.html","searchKeys":["HostVariable","fun HostVariable(variable: String)","io.github.aplcornell.viaduct.selection.HostVariable.HostVariable"]},{"name":"fun IFCDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.IFCDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/-i-f-c-delegation-declaration-node.html","searchKeys":["IFCDelegationDeclarationNode","fun IFCDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.IFCDelegationDeclarationNode"]},{"name":"fun IFCDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation, comment: String?)","description":"io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.IFCDelegationDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-i-f-c-delegation-declaration-node/-i-f-c-delegation-declaration-node.html","searchKeys":["IFCDelegationDeclarationNode","fun IFCDelegationDeclarationNode(from: LabelNode, to: LabelNode, delegationProjection: DelegationProjection, sourceLocation: SourceLocation, comment: String?)","io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.IFCDelegationDeclarationNode"]},{"name":"fun IdentityEdge()","description":"io.github.aplcornell.viaduct.util.dataflow.IdentityEdge.IdentityEdge","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-identity-edge/-identity-edge.html","searchKeys":["IdentityEdge","fun IdentityEdge()","io.github.aplcornell.viaduct.util.dataflow.IdentityEdge.IdentityEdge"]},{"name":"fun IfNode(guard: AtomicExpressionNode, thenBranch: BlockNode, elseBranch: BlockNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.IfNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/-if-node.html","searchKeys":["IfNode","fun IfNode(guard: AtomicExpressionNode, thenBranch: BlockNode, elseBranch: BlockNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.IfNode"]},{"name":"fun IfNode(guard: ExpressionNode, thenBranch: BlockNode, elseBranch: BlockNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.IfNode.IfNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-if-node/-if-node.html","searchKeys":["IfNode","fun IfNode(guard: ExpressionNode, thenBranch: BlockNode, elseBranch: BlockNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.IfNode.IfNode"]},{"name":"fun IllegalCharacterError(location: SourceLocation)","description":"io.github.aplcornell.viaduct.errors.IllegalCharacterError.IllegalCharacterError","location":"compiler/io.github.aplcornell.viaduct.errors/-illegal-character-error/-illegal-character-error.html","searchKeys":["IllegalCharacterError","fun IllegalCharacterError(location: SourceLocation)","io.github.aplcornell.viaduct.errors.IllegalCharacterError.IllegalCharacterError"]},{"name":"fun IllegalTermException(term: Term<*, *>)","description":"io.github.aplcornell.viaduct.algebra.solver.IllegalTermException.IllegalTermException","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-illegal-term-exception/-illegal-term-exception.html","searchKeys":["IllegalTermException","fun IllegalTermException(term: Term<*, *>)","io.github.aplcornell.viaduct.algebra.solver.IllegalTermException.IllegalTermException"]},{"name":"fun ImmutableCellType(elementType: ValueType)","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.ImmutableCellType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/-immutable-cell-type.html","searchKeys":["ImmutableCellType","fun ImmutableCellType(elementType: ValueType)","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.ImmutableCellType"]},{"name":"fun Implies(lhs: SelectionConstraint, rhs: SelectionConstraint)","description":"io.github.aplcornell.viaduct.selection.Implies.Implies","location":"compiler/io.github.aplcornell.viaduct.selection/-implies/-implies.html","searchKeys":["Implies","fun Implies(lhs: SelectionConstraint, rhs: SelectionConstraint)","io.github.aplcornell.viaduct.selection.Implies.Implies"]},{"name":"fun IncorrectNumberOfArgumentsError(method: Located<Name>, expected: Int, actual: Arguments<*>)","description":"io.github.aplcornell.viaduct.errors.IncorrectNumberOfArgumentsError.IncorrectNumberOfArgumentsError","location":"compiler/io.github.aplcornell.viaduct.errors/-incorrect-number-of-arguments-error/-incorrect-number-of-arguments-error.html","searchKeys":["IncorrectNumberOfArgumentsError","fun IncorrectNumberOfArgumentsError(method: Located<Name>, expected: Int, actual: Arguments<*>)","io.github.aplcornell.viaduct.errors.IncorrectNumberOfArgumentsError.IncorrectNumberOfArgumentsError"]},{"name":"fun IndexParameterNode(name: VariableNode, bound: IndexExpressionNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.IndexParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-index-parameter-node/-index-parameter-node.html","searchKeys":["IndexParameterNode","fun IndexParameterNode(name: VariableNode, bound: IndexExpressionNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.IndexParameterNode"]},{"name":"fun InfiniteLoopNode(body: BlockNode, jumpLabel: JumpLabelNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.InfiniteLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/-infinite-loop-node.html","searchKeys":["InfiniteLoopNode","fun InfiniteLoopNode(body: BlockNode, jumpLabel: JumpLabelNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.InfiniteLoopNode"]},{"name":"fun InfiniteLoopNode(body: BlockNode, jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.InfiniteLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-infinite-loop-node/-infinite-loop-node.html","searchKeys":["InfiniteLoopNode","fun InfiniteLoopNode(body: BlockNode, jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.InfiniteLoopNode"]},{"name":"fun InformationFlowError()","description":"io.github.aplcornell.viaduct.errors.InformationFlowError.InformationFlowError","location":"compiler/io.github.aplcornell.viaduct.errors/-information-flow-error/-information-flow-error.html","searchKeys":["InformationFlowError","fun InformationFlowError()","io.github.aplcornell.viaduct.errors.InformationFlowError.InformationFlowError"]},{"name":"fun InputNode(type: ValueTypeNode, host: HostNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode.InputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/-input-node.html","searchKeys":["InputNode","fun InputNode(type: ValueTypeNode, host: HostNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.InputNode.InputNode"]},{"name":"fun InputNode(type: ValueTypeNode, host: HostNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.InputNode.InputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-input-node/-input-node.html","searchKeys":["InputNode","fun InputNode(type: ValueTypeNode, host: HostNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.InputNode.InputNode"]},{"name":"fun InputPort(protocol: Protocol, host: Host, id: PortId)","description":"io.github.aplcornell.viaduct.syntax.InputPort.InputPort","location":"compiler/io.github.aplcornell.viaduct.syntax/-input-port/-input-port.html","searchKeys":["InputPort","fun InputPort(protocol: Protocol, host: Host, id: PortId)","io.github.aplcornell.viaduct.syntax.InputPort.InputPort"]},{"name":"fun InsecureControlFlowError(node: HasSourceLocation, nodeLabel: Label, pc: Label, context: FreeDistributiveLatticeCongruence<PrincipalComponent>)","description":"io.github.aplcornell.viaduct.errors.InsecureControlFlowError.InsecureControlFlowError","location":"compiler/io.github.aplcornell.viaduct.errors/-insecure-control-flow-error/-insecure-control-flow-error.html","searchKeys":["InsecureControlFlowError","fun InsecureControlFlowError(node: HasSourceLocation, nodeLabel: Label, pc: Label, context: FreeDistributiveLatticeCongruence<PrincipalComponent>)","io.github.aplcornell.viaduct.errors.InsecureControlFlowError.InsecureControlFlowError"]},{"name":"fun InsecureDataFlowError(node: HasSourceLocation, nodeLabel: Label, to: Label, context: FreeDistributiveLatticeCongruence<Component<Principal>>)","description":"io.github.aplcornell.viaduct.errors.InsecureDataFlowError.InsecureDataFlowError","location":"compiler/io.github.aplcornell.viaduct.errors/-insecure-data-flow-error/-insecure-data-flow-error.html","searchKeys":["InsecureDataFlowError","fun InsecureDataFlowError(node: HasSourceLocation, nodeLabel: Label, to: Label, context: FreeDistributiveLatticeCongruence<Component<Principal>>)","io.github.aplcornell.viaduct.errors.InsecureDataFlowError.InsecureDataFlowError"]},{"name":"fun IntegerCost(cost: Int)","description":"io.github.aplcornell.viaduct.selection.IntegerCost.IntegerCost","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/-integer-cost.html","searchKeys":["IntegerCost","fun IntegerCost(cost: Int)","io.github.aplcornell.viaduct.selection.IntegerCost.IntegerCost"]},{"name":"fun IntegrityChangingDeclassificationError(node: DeclassificationNode, from: Label, to: Label)","description":"io.github.aplcornell.viaduct.errors.IntegrityChangingDeclassificationError.IntegrityChangingDeclassificationError","location":"compiler/io.github.aplcornell.viaduct.errors/-integrity-changing-declassification-error/-integrity-changing-declassification-error.html","searchKeys":["IntegrityChangingDeclassificationError","fun IntegrityChangingDeclassificationError(node: DeclassificationNode, from: Label, to: Label)","io.github.aplcornell.viaduct.errors.IntegrityChangingDeclassificationError.IntegrityChangingDeclassificationError"]},{"name":"fun InvalidConstructorCallError(node: Node, constructorNeeded: Boolean = false)","description":"io.github.aplcornell.viaduct.errors.InvalidConstructorCallError.InvalidConstructorCallError","location":"compiler/io.github.aplcornell.viaduct.errors/-invalid-constructor-call-error/-invalid-constructor-call-error.html","searchKeys":["InvalidConstructorCallError","fun InvalidConstructorCallError(node: Node, constructorNeeded: Boolean = false)","io.github.aplcornell.viaduct.errors.InvalidConstructorCallError.InvalidConstructorCallError"]},{"name":"fun InvalidProtocolAnnotationError(node: Node)","description":"io.github.aplcornell.viaduct.errors.InvalidProtocolAnnotationError.InvalidProtocolAnnotationError","location":"compiler/io.github.aplcornell.viaduct.errors/-invalid-protocol-annotation-error/-invalid-protocol-annotation-error.html","searchKeys":["InvalidProtocolAnnotationError","fun InvalidProtocolAnnotationError(node: Node)","io.github.aplcornell.viaduct.errors.InvalidProtocolAnnotationError.InvalidProtocolAnnotationError"]},{"name":"fun InvalidProtocolAssignmentException(node: Node, protocol: Protocol)","description":"io.github.aplcornell.viaduct.selection.InvalidProtocolAssignmentException.InvalidProtocolAssignmentException","location":"compiler/io.github.aplcornell.viaduct.selection/-invalid-protocol-assignment-exception/-invalid-protocol-assignment-exception.html","searchKeys":["InvalidProtocolAssignmentException","fun InvalidProtocolAssignmentException(node: Node, protocol: Protocol)","io.github.aplcornell.viaduct.selection.InvalidProtocolAssignmentException.InvalidProtocolAssignmentException"]},{"name":"fun Iterable<Backend>.unions(): Backend","description":"io.github.aplcornell.viaduct.backends.unions","location":"compiler/io.github.aplcornell.viaduct.backends/unions.html","searchKeys":["unions","fun Iterable<Backend>.unions(): Backend","io.github.aplcornell.viaduct.backends.unions"]},{"name":"fun Iterable<Pair<Set<ProtocolName>, CodeGenerator>>.unions(): CodeGenerator","description":"io.github.aplcornell.viaduct.codegeneration.unions","location":"compiler/io.github.aplcornell.viaduct.codegeneration/unions.html","searchKeys":["unions","fun Iterable<Pair<Set<ProtocolName>, CodeGenerator>>.unions(): CodeGenerator","io.github.aplcornell.viaduct.codegeneration.unions"]},{"name":"fun Iterable<Pair<Set<ProtocolName>, ProtocolComposer>>.unions(): ProtocolComposer","description":"io.github.aplcornell.viaduct.selection.unions","location":"compiler/io.github.aplcornell.viaduct.selection/unions.html","searchKeys":["unions","fun Iterable<Pair<Set<ProtocolName>, ProtocolComposer>>.unions(): ProtocolComposer","io.github.aplcornell.viaduct.selection.unions"]},{"name":"fun Iterable<ProtocolFactory>.unions(): ProtocolFactory","description":"io.github.aplcornell.viaduct.selection.unions","location":"compiler/io.github.aplcornell.viaduct.selection/unions.html","searchKeys":["unions","fun Iterable<ProtocolFactory>.unions(): ProtocolFactory","io.github.aplcornell.viaduct.selection.unions"]},{"name":"fun JumpLabel(name: String)","description":"io.github.aplcornell.viaduct.syntax.JumpLabel.JumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax/-jump-label/-jump-label.html","searchKeys":["JumpLabel","fun JumpLabel(name: String)","io.github.aplcornell.viaduct.syntax.JumpLabel.JumpLabel"]},{"name":"fun JumpOutsideLoopScopeError(node: HasSourceLocation)","description":"io.github.aplcornell.viaduct.errors.JumpOutsideLoopScopeError.JumpOutsideLoopScopeError","location":"compiler/io.github.aplcornell.viaduct.errors/-jump-outside-loop-scope-error/-jump-outside-loop-scope-error.html","searchKeys":["JumpOutsideLoopScopeError","fun JumpOutsideLoopScopeError(node: HasSourceLocation)","io.github.aplcornell.viaduct.errors.JumpOutsideLoopScopeError.JumpOutsideLoopScopeError"]},{"name":"fun Label.confidentiality(): Label","description":"io.github.aplcornell.viaduct.security.confidentiality","location":"compiler/io.github.aplcornell.viaduct.security/confidentiality.html","searchKeys":["confidentiality","fun Label.confidentiality(): Label","io.github.aplcornell.viaduct.security.confidentiality"]},{"name":"fun Label.integrity(): Label","description":"io.github.aplcornell.viaduct.security.integrity","location":"compiler/io.github.aplcornell.viaduct.security/integrity.html","searchKeys":["integrity","fun Label.integrity(): Label","io.github.aplcornell.viaduct.security.integrity"]},{"name":"fun LabelAnd(lhs: LabelExpression, rhs: LabelExpression)","description":"io.github.aplcornell.viaduct.security.LabelAnd.LabelAnd","location":"compiler/io.github.aplcornell.viaduct.security/-label-and/-label-and.html","searchKeys":["LabelAnd","fun LabelAnd(lhs: LabelExpression, rhs: LabelExpression)","io.github.aplcornell.viaduct.security.LabelAnd.LabelAnd"]},{"name":"fun LabelConfidentiality(value: LabelExpression)","description":"io.github.aplcornell.viaduct.security.LabelConfidentiality.LabelConfidentiality","location":"compiler/io.github.aplcornell.viaduct.security/-label-confidentiality/-label-confidentiality.html","searchKeys":["LabelConfidentiality","fun LabelConfidentiality(value: LabelExpression)","io.github.aplcornell.viaduct.security.LabelConfidentiality.LabelConfidentiality"]},{"name":"fun LabelIntegrity(value: LabelExpression)","description":"io.github.aplcornell.viaduct.security.LabelIntegrity.LabelIntegrity","location":"compiler/io.github.aplcornell.viaduct.security/-label-integrity/-label-integrity.html","searchKeys":["LabelIntegrity","fun LabelIntegrity(value: LabelExpression)","io.github.aplcornell.viaduct.security.LabelIntegrity.LabelIntegrity"]},{"name":"fun LabelJoin(lhs: LabelExpression, rhs: LabelExpression)","description":"io.github.aplcornell.viaduct.security.LabelJoin.LabelJoin","location":"compiler/io.github.aplcornell.viaduct.security/-label-join/-label-join.html","searchKeys":["LabelJoin","fun LabelJoin(lhs: LabelExpression, rhs: LabelExpression)","io.github.aplcornell.viaduct.security.LabelJoin.LabelJoin"]},{"name":"fun LabelLiteral(name: Host)","description":"io.github.aplcornell.viaduct.security.LabelLiteral.LabelLiteral","location":"compiler/io.github.aplcornell.viaduct.security/-label-literal/-label-literal.html","searchKeys":["LabelLiteral","fun LabelLiteral(name: Host)","io.github.aplcornell.viaduct.security.LabelLiteral.LabelLiteral"]},{"name":"fun LabelMeet(lhs: LabelExpression, rhs: LabelExpression)","description":"io.github.aplcornell.viaduct.security.LabelMeet.LabelMeet","location":"compiler/io.github.aplcornell.viaduct.security/-label-meet/-label-meet.html","searchKeys":["LabelMeet","fun LabelMeet(lhs: LabelExpression, rhs: LabelExpression)","io.github.aplcornell.viaduct.security.LabelMeet.LabelMeet"]},{"name":"fun LabelMismatchError(node: HasSourceLocation, actualLabel: Label, expectedLabel: Label)","description":"io.github.aplcornell.viaduct.errors.LabelMismatchError.LabelMismatchError","location":"compiler/io.github.aplcornell.viaduct.errors/-label-mismatch-error/-label-mismatch-error.html","searchKeys":["LabelMismatchError","fun LabelMismatchError(node: HasSourceLocation, actualLabel: Label, expectedLabel: Label)","io.github.aplcornell.viaduct.errors.LabelMismatchError.LabelMismatchError"]},{"name":"fun LabelOr(lhs: LabelExpression, rhs: LabelExpression)","description":"io.github.aplcornell.viaduct.security.LabelOr.LabelOr","location":"compiler/io.github.aplcornell.viaduct.security/-label-or/-label-or.html","searchKeys":["LabelOr","fun LabelOr(lhs: LabelExpression, rhs: LabelExpression)","io.github.aplcornell.viaduct.security.LabelOr.LabelOr"]},{"name":"fun LabelParameter(name: LabelVariable)","description":"io.github.aplcornell.viaduct.security.LabelParameter.LabelParameter","location":"compiler/io.github.aplcornell.viaduct.security/-label-parameter/-label-parameter.html","searchKeys":["LabelParameter","fun LabelParameter(name: LabelVariable)","io.github.aplcornell.viaduct.security.LabelParameter.LabelParameter"]},{"name":"fun LabelVariable(name: String)","description":"io.github.aplcornell.viaduct.syntax.LabelVariable.LabelVariable","location":"compiler/io.github.aplcornell.viaduct.syntax/-label-variable/-label-variable.html","searchKeys":["LabelVariable","fun LabelVariable(name: String)","io.github.aplcornell.viaduct.syntax.LabelVariable.LabelVariable"]},{"name":"fun LetNode(name: TemporaryNode, value: ExpressionNode, protocol: ProtocolNode?, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.LetNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/-let-node.html","searchKeys":["LetNode","fun LetNode(name: TemporaryNode, value: ExpressionNode, protocol: ProtocolNode?, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.LetNode"]},{"name":"fun LetNode(name: VariableNode, indices: Arguments<IndexParameterNode>, value: ExpressionNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.LetNode.LetNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-let-node/-let-node.html","searchKeys":["LetNode","fun LetNode(name: VariableNode, indices: Arguments<IndexParameterNode>, value: ExpressionNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.LetNode.LetNode"]},{"name":"fun LetNode(temporary: TemporaryNode, value: ExpressionNode, protocol: ProtocolNode?, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.LetNode.LetNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-let-node/-let-node.html","searchKeys":["LetNode","fun LetNode(temporary: TemporaryNode, value: ExpressionNode, protocol: ProtocolNode?, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.LetNode.LetNode"]},{"name":"fun LetNode.readsFrom(nameAnalysis: NameAnalysis, to: Set<Protocol>, from: Set<Protocol>): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.readsFrom","location":"compiler/io.github.aplcornell.viaduct.selection/reads-from.html","searchKeys":["readsFrom","fun LetNode.readsFrom(nameAnalysis: NameAnalysis, to: Set<Protocol>, from: Set<Protocol>): SelectionConstraint","io.github.aplcornell.viaduct.selection.readsFrom"]},{"name":"fun LetNode.sendsTo(nameAnalysis: NameAnalysis, from: Set<Protocol>, to: Set<Protocol>): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.sendsTo","location":"compiler/io.github.aplcornell.viaduct.selection/sends-to.html","searchKeys":["sendsTo","fun LetNode.sendsTo(nameAnalysis: NameAnalysis, from: Set<Protocol>, to: Set<Protocol>): SelectionConstraint","io.github.aplcornell.viaduct.selection.sendsTo"]},{"name":"fun Literal(literalValue: Boolean)","description":"io.github.aplcornell.viaduct.selection.Literal.Literal","location":"compiler/io.github.aplcornell.viaduct.selection/-literal/-literal.html","searchKeys":["Literal","fun Literal(literalValue: Boolean)","io.github.aplcornell.viaduct.selection.Literal.Literal"]},{"name":"fun LiteralNode(value: Value, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.LiteralNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-literal-node/-literal-node.html","searchKeys":["LiteralNode","fun LiteralNode(value: Value, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.LiteralNode"]},{"name":"fun LiteralNode(value: Value, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.LiteralNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-literal-node/-literal-node.html","searchKeys":["LiteralNode","fun LiteralNode(value: Value, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.LiteralNode"]},{"name":"fun LiteralNode(value: Value, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.LiteralNode.LiteralNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-literal-node/-literal-node.html","searchKeys":["LiteralNode","fun LiteralNode(value: Value, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.LiteralNode.LiteralNode"]},{"name":"fun Local(host: Host)","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.Local","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/-local.html","searchKeys":["Local","fun Local(host: Host)","io.github.aplcornell.viaduct.backends.cleartext.Local.Local"]},{"name":"fun LocalProtocolFactory(program: ProgramNode)","description":"io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.LocalProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local-protocol-factory/-local-protocol-factory.html","searchKeys":["LocalProtocolFactory","fun LocalProtocolFactory(program: ProgramNode)","io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.LocalProtocolFactory"]},{"name":"fun LogicalOperator()","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.LogicalOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator/-logical-operator.html","searchKeys":["LogicalOperator","fun LogicalOperator()","io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.LogicalOperator"]},{"name":"fun LookupNode(variable: VariableNode, indices: Arguments<IndexExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.LookupNode.LookupNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-lookup-node/-lookup-node.html","searchKeys":["LookupNode","fun LookupNode(variable: VariableNode, indices: Arguments<IndexExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.LookupNode.LookupNode"]},{"name":"fun MalleableDowngradeError(node: DowngradeNode)","description":"io.github.aplcornell.viaduct.errors.MalleableDowngradeError.MalleableDowngradeError","location":"compiler/io.github.aplcornell.viaduct.errors/-malleable-downgrade-error/-malleable-downgrade-error.html","searchKeys":["MalleableDowngradeError","fun MalleableDowngradeError(node: DowngradeNode)","io.github.aplcornell.viaduct.errors.MalleableDowngradeError.MalleableDowngradeError"]},{"name":"fun Modify(operator: BinaryOperator)","description":"io.github.aplcornell.viaduct.syntax.datatypes.Modify.Modify","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-modify/-modify.html","searchKeys":["Modify","fun Modify(operator: BinaryOperator)","io.github.aplcornell.viaduct.syntax.datatypes.Modify.Modify"]},{"name":"fun MutableCellType(elementType: ValueType)","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType.MutableCellType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/-mutable-cell-type.html","searchKeys":["MutableCellType","fun MutableCellType(elementType: ValueType)","io.github.aplcornell.viaduct.syntax.types.MutableCellType.MutableCellType"]},{"name":"fun MuxPostprocessor(containedProtocolCheck: (Protocol) -> Boolean, selection: ProtocolAssignment)","description":"io.github.aplcornell.viaduct.passes.MuxPostprocessor.MuxPostprocessor","location":"compiler/io.github.aplcornell.viaduct.passes/-mux-postprocessor/-mux-postprocessor.html","searchKeys":["MuxPostprocessor","fun MuxPostprocessor(containedProtocolCheck: (Protocol) -> Boolean, selection: ProtocolAssignment)","io.github.aplcornell.viaduct.passes.MuxPostprocessor.MuxPostprocessor"]},{"name":"fun NameClashError(name: Name, firstDeclaration: SourceLocation, secondDeclaration: SourceLocation)","description":"io.github.aplcornell.viaduct.errors.NameClashError.NameClashError","location":"compiler/io.github.aplcornell.viaduct.errors/-name-clash-error/-name-clash-error.html","searchKeys":["NameClashError","fun NameClashError(name: Name, firstDeclaration: SourceLocation, secondDeclaration: SourceLocation)","io.github.aplcornell.viaduct.errors.NameClashError.NameClashError"]},{"name":"fun NamedArguments(sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.NamedArguments.NamedArguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-named-arguments/-named-arguments.html","searchKeys":["NamedArguments","fun NamedArguments(sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.NamedArguments.NamedArguments"]},{"name":"fun NoApplicableProtocolError(node: HasSourceLocation)","description":"io.github.aplcornell.viaduct.errors.NoApplicableProtocolError.NoApplicableProtocolError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-applicable-protocol-error/-no-applicable-protocol-error.html","searchKeys":["NoApplicableProtocolError","fun NoApplicableProtocolError(node: HasSourceLocation)","io.github.aplcornell.viaduct.errors.NoApplicableProtocolError.NoApplicableProtocolError"]},{"name":"fun NoHostDeclarationsError(source: String)","description":"io.github.aplcornell.viaduct.errors.NoHostDeclarationsError.NoHostDeclarationsError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-host-declarations-error/-no-host-declarations-error.html","searchKeys":["NoHostDeclarationsError","fun NoHostDeclarationsError(source: String)","io.github.aplcornell.viaduct.errors.NoHostDeclarationsError.NoHostDeclarationsError"]},{"name":"fun NoMainError(source: String)","description":"io.github.aplcornell.viaduct.errors.NoMainError.NoMainError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-main-error/-no-main-error.html","searchKeys":["NoMainError","fun NoMainError(source: String)","io.github.aplcornell.viaduct.errors.NoMainError.NoMainError"]},{"name":"fun NoProtocolAnnotationError(node: Node)","description":"io.github.aplcornell.viaduct.errors.NoProtocolAnnotationError.NoProtocolAnnotationError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-protocol-annotation-error/-no-protocol-annotation-error.html","searchKeys":["NoProtocolAnnotationError","fun NoProtocolAnnotationError(node: Node)","io.github.aplcornell.viaduct.errors.NoProtocolAnnotationError.NoProtocolAnnotationError"]},{"name":"fun NoSelectionSolutionError(program: ProgramNode)","description":"io.github.aplcornell.viaduct.errors.NoSelectionSolutionError.NoSelectionSolutionError","location":"compiler/io.github.aplcornell.viaduct.errors/-no-selection-solution-error/-no-selection-solution-error.html","searchKeys":["NoSelectionSolutionError","fun NoSelectionSolutionError(program: ProgramNode)","io.github.aplcornell.viaduct.errors.NoSelectionSolutionError.NoSelectionSolutionError"]},{"name":"fun Node()","description":"io.github.aplcornell.viaduct.syntax.intermediate.Node.Node","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-node/-node.html","searchKeys":["Node","fun Node()","io.github.aplcornell.viaduct.syntax.intermediate.Node.Node"]},{"name":"fun Node()","description":"io.github.aplcornell.viaduct.syntax.surface.Node.Node","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-node/-node.html","searchKeys":["Node","fun Node()","io.github.aplcornell.viaduct.syntax.surface.Node.Node"]},{"name":"fun Node.deepCopy(): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.deepCopy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/deep-copy.html","searchKeys":["deepCopy","fun Node.deepCopy(): Node","io.github.aplcornell.viaduct.syntax.intermediate.deepCopy"]},{"name":"fun Node.descendants(): Sequence<Node>","description":"io.github.aplcornell.viaduct.analysis.descendants","location":"compiler/io.github.aplcornell.viaduct.analysis/descendants.html","searchKeys":["descendants","fun Node.descendants(): Sequence<Node>","io.github.aplcornell.viaduct.analysis.descendants"]},{"name":"fun Node.freshVariableNameGenerator(): FreshNameGenerator","description":"io.github.aplcornell.viaduct.analysis.freshVariableNameGenerator","location":"compiler/io.github.aplcornell.viaduct.analysis/fresh-variable-name-generator.html","searchKeys":["freshVariableNameGenerator","fun Node.freshVariableNameGenerator(): FreshNameGenerator","io.github.aplcornell.viaduct.analysis.freshVariableNameGenerator"]},{"name":"fun Not(rhs: SelectionConstraint)","description":"io.github.aplcornell.viaduct.selection.Not.Not","location":"compiler/io.github.aplcornell.viaduct.selection/-not/-not.html","searchKeys":["Not","fun Not(rhs: SelectionConstraint)","io.github.aplcornell.viaduct.selection.Not.Not"]},{"name":"fun ObjectDeclarationArgumentNode(name: ObjectVariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.ObjectDeclarationArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/-object-declaration-argument-node.html","searchKeys":["ObjectDeclarationArgumentNode","fun ObjectDeclarationArgumentNode(name: ObjectVariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.ObjectDeclarationArgumentNode"]},{"name":"fun ObjectDeclarationArgumentNode(variable: ObjectVariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode.ObjectDeclarationArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-declaration-argument-node/-object-declaration-argument-node.html","searchKeys":["ObjectDeclarationArgumentNode","fun ObjectDeclarationArgumentNode(variable: ObjectVariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode.ObjectDeclarationArgumentNode"]},{"name":"fun ObjectReferenceArgumentNode(variable: ObjectVariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.ObjectReferenceArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-reference-argument-node/-object-reference-argument-node.html","searchKeys":["ObjectReferenceArgumentNode","fun ObjectReferenceArgumentNode(variable: ObjectVariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.ObjectReferenceArgumentNode"]},{"name":"fun ObjectReferenceArgumentNode(variable: ObjectVariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode.ObjectReferenceArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-reference-argument-node/-object-reference-argument-node.html","searchKeys":["ObjectReferenceArgumentNode","fun ObjectReferenceArgumentNode(variable: ObjectVariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode.ObjectReferenceArgumentNode"]},{"name":"fun ObjectType()","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType.ObjectType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/-object-type.html","searchKeys":["ObjectType","fun ObjectType()","io.github.aplcornell.viaduct.syntax.types.ObjectType.ObjectType"]},{"name":"fun ObjectTypeNode(className: ClassNameNode, typeArguments: Arguments<ValueTypeNode>, labelArguments: Arguments<LabelNode>?)","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode.ObjectTypeNode","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/-object-type-node.html","searchKeys":["ObjectTypeNode","fun ObjectTypeNode(className: ClassNameNode, typeArguments: Arguments<ValueTypeNode>, labelArguments: Arguments<LabelNode>?)","io.github.aplcornell.viaduct.syntax.ObjectTypeNode.ObjectTypeNode"]},{"name":"fun ObjectVariable(name: String)","description":"io.github.aplcornell.viaduct.syntax.ObjectVariable.ObjectVariable","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-variable/-object-variable.html","searchKeys":["ObjectVariable","fun ObjectVariable(name: String)","io.github.aplcornell.viaduct.syntax.ObjectVariable.ObjectVariable"]},{"name":"fun Operator.bindsTighterThan(other: Operator): Boolean","description":"io.github.aplcornell.viaduct.syntax.bindsTighterThan","location":"compiler/io.github.aplcornell.viaduct.syntax/binds-tighter-than.html","searchKeys":["bindsTighterThan","fun Operator.bindsTighterThan(other: Operator): Boolean","io.github.aplcornell.viaduct.syntax.bindsTighterThan"]},{"name":"fun OperatorApplicationNode(operator: Operator, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.OperatorApplicationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/-operator-application-node.html","searchKeys":["OperatorApplicationNode","fun OperatorApplicationNode(operator: Operator, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.OperatorApplicationNode"]},{"name":"fun OperatorApplicationNode(operator: Operator, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.OperatorApplicationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-operator-application-node/-operator-application-node.html","searchKeys":["OperatorApplicationNode","fun OperatorApplicationNode(operator: Operator, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.OperatorApplicationNode"]},{"name":"fun OperatorApplicationNode(operator: Operator, arguments: Arguments<PureExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.OperatorApplicationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-application-node/-operator-application-node.html","searchKeys":["OperatorApplicationNode","fun OperatorApplicationNode(operator: Operator, arguments: Arguments<PureExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.OperatorApplicationNode"]},{"name":"fun OperatorNode(operator: Operator, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.OperatorNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-node/-operator-node.html","searchKeys":["OperatorNode","fun OperatorNode(operator: Operator, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.OperatorNode"]},{"name":"fun Or(props: List<SelectionConstraint>)","description":"io.github.aplcornell.viaduct.selection.Or.Or","location":"compiler/io.github.aplcornell.viaduct.selection/-or/-or.html","searchKeys":["Or","fun Or(props: List<SelectionConstraint>)","io.github.aplcornell.viaduct.selection.Or.Or"]},{"name":"fun Or(vararg props: SelectionConstraint)","description":"io.github.aplcornell.viaduct.selection.Or.Or","location":"compiler/io.github.aplcornell.viaduct.selection/-or/-or.html","searchKeys":["Or","fun Or(vararg props: SelectionConstraint)","io.github.aplcornell.viaduct.selection.Or.Or"]},{"name":"fun OutParameterArgumentNode(parameter: ObjectVariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.OutParameterArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-argument-node/-out-parameter-argument-node.html","searchKeys":["OutParameterArgumentNode","fun OutParameterArgumentNode(parameter: ObjectVariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.OutParameterArgumentNode"]},{"name":"fun OutParameterArgumentNode(parameter: ObjectVariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode.OutParameterArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-argument-node/-out-parameter-argument-node.html","searchKeys":["OutParameterArgumentNode","fun OutParameterArgumentNode(parameter: ObjectVariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode.OutParameterArgumentNode"]},{"name":"fun OutParameterConstructorInitializerNode(objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.OutParameterConstructorInitializerNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/-out-parameter-constructor-initializer-node.html","searchKeys":["OutParameterConstructorInitializerNode","fun OutParameterConstructorInitializerNode(objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.OutParameterConstructorInitializerNode"]},{"name":"fun OutParameterExpressionInitializerNode(expression: AtomicExpressionNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.OutParameterExpressionInitializerNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/-out-parameter-expression-initializer-node.html","searchKeys":["OutParameterExpressionInitializerNode","fun OutParameterExpressionInitializerNode(expression: AtomicExpressionNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.OutParameterExpressionInitializerNode"]},{"name":"fun OutParameterInitializationError(parameter: ParameterNode, useSite: Node? = null)","description":"io.github.aplcornell.viaduct.errors.OutParameterInitializationError.OutParameterInitializationError","location":"compiler/io.github.aplcornell.viaduct.errors/-out-parameter-initialization-error/-out-parameter-initialization-error.html","searchKeys":["OutParameterInitializationError","fun OutParameterInitializationError(parameter: ParameterNode, useSite: Node? = null)","io.github.aplcornell.viaduct.errors.OutParameterInitializationError.OutParameterInitializationError"]},{"name":"fun OutParameterInitializationNode(name: ObjectVariableNode, initializer: OutParameterInitializerNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.OutParameterInitializationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/-out-parameter-initialization-node.html","searchKeys":["OutParameterInitializationNode","fun OutParameterInitializationNode(name: ObjectVariableNode, initializer: OutParameterInitializerNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.OutParameterInitializationNode"]},{"name":"fun OutParameterInitializationNode(name: ObjectVariableNode, rhs: ExpressionNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.OutParameterInitializationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-initialization-node/-out-parameter-initialization-node.html","searchKeys":["OutParameterInitializationNode","fun OutParameterInitializationNode(name: ObjectVariableNode, rhs: ExpressionNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.OutParameterInitializationNode"]},{"name":"fun OutputNode(message: AtomicExpressionNode, host: HostNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.OutputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/-output-node.html","searchKeys":["OutputNode","fun OutputNode(message: AtomicExpressionNode, host: HostNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.OutputNode"]},{"name":"fun OutputNode(message: ExpressionNode, host: HostNode, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.OutputNode.OutputNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-output-node/-output-node.html","searchKeys":["OutputNode","fun OutputNode(message: ExpressionNode, host: HostNode, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.OutputNode.OutputNode"]},{"name":"fun OutputPort(protocol: Protocol, host: Host, id: PortId)","description":"io.github.aplcornell.viaduct.syntax.OutputPort.OutputPort","location":"compiler/io.github.aplcornell.viaduct.syntax/-output-port/-output-port.html","searchKeys":["OutputPort","fun OutputPort(protocol: Protocol, host: Host, id: PortId)","io.github.aplcornell.viaduct.syntax.OutputPort.OutputPort"]},{"name":"fun ParameterDirectionMismatchError(parameter: ParameterNode, argument: FunctionArgumentNode)","description":"io.github.aplcornell.viaduct.errors.ParameterDirectionMismatchError.ParameterDirectionMismatchError","location":"compiler/io.github.aplcornell.viaduct.errors/-parameter-direction-mismatch-error/-parameter-direction-mismatch-error.html","searchKeys":["ParameterDirectionMismatchError","fun ParameterDirectionMismatchError(parameter: ParameterNode, argument: FunctionArgumentNode)","io.github.aplcornell.viaduct.errors.ParameterDirectionMismatchError.ParameterDirectionMismatchError"]},{"name":"fun ParameterNode(name: ObjectVariableNode, parameterDirection: ParameterDirection, objectType: ObjectTypeNode, protocol: ProtocolNode?, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.ParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/-parameter-node.html","searchKeys":["ParameterNode","fun ParameterNode(name: ObjectVariableNode, parameterDirection: ParameterDirection, objectType: ObjectTypeNode, protocol: ProtocolNode?, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.ParameterNode"]},{"name":"fun ParameterNode(name: ObjectVariableNode, parameterDirection: ParameterDirection, objectType: ObjectTypeNode, protocol: ProtocolNode?, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode.ParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/-parameter-node.html","searchKeys":["ParameterNode","fun ParameterNode(name: ObjectVariableNode, parameterDirection: ParameterDirection, objectType: ObjectTypeNode, protocol: ProtocolNode?, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.ParameterNode.ParameterNode"]},{"name":"fun ParameterNode(name: VariableNode, type: ArrayTypeNode, protocol: ProtocolNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.ParameterNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-parameter-node/-parameter-node.html","searchKeys":["ParameterNode","fun ParameterNode(name: VariableNode, type: ArrayTypeNode, protocol: ProtocolNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.ParameterNode"]},{"name":"fun ParsingError(location: SourceLocation, actualToken: String, expectedTokens: List<String>)","description":"io.github.aplcornell.viaduct.errors.ParsingError.ParsingError","location":"compiler/io.github.aplcornell.viaduct.errors/-parsing-error/-parsing-error.html","searchKeys":["ParsingError","fun ParsingError(location: SourceLocation, actualToken: String, expectedTokens: List<String>)","io.github.aplcornell.viaduct.errors.ParsingError.ParsingError"]},{"name":"fun PolymorphicPrincipal(labelVariable: LabelVariable)","description":"io.github.aplcornell.viaduct.security.PolymorphicPrincipal.PolymorphicPrincipal","location":"compiler/io.github.aplcornell.viaduct.security/-polymorphic-principal/-polymorphic-principal.html","searchKeys":["PolymorphicPrincipal","fun PolymorphicPrincipal(labelVariable: LabelVariable)","io.github.aplcornell.viaduct.security.PolymorphicPrincipal.PolymorphicPrincipal"]},{"name":"fun ProgramNode(declarations: List<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.ProgramNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-program-node/-program-node.html","searchKeys":["ProgramNode","fun ProgramNode(declarations: List<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.ProgramNode"]},{"name":"fun ProgramNode(declarations: List<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.ProgramNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/-program-node.html","searchKeys":["ProgramNode","fun ProgramNode(declarations: List<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.ProgramNode"]},{"name":"fun ProgramNode(declarations: List<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.ProgramNode.ProgramNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-program-node/-program-node.html","searchKeys":["ProgramNode","fun ProgramNode(declarations: List<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.ProgramNode.ProgramNode"]},{"name":"fun ProgramNode(declarations: PersistentList<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.ProgramNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-program-node/-program-node.html","searchKeys":["ProgramNode","fun ProgramNode(declarations: PersistentList<TopLevelDeclarationNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.ProgramNode"]},{"name":"fun ProgramNode.annotateWithProtocols(assignment: ProtocolAssignment): ProgramNode","description":"io.github.aplcornell.viaduct.passes.annotateWithProtocols","location":"compiler/io.github.aplcornell.viaduct.passes/annotate-with-protocols.html","searchKeys":["annotateWithProtocols","fun ProgramNode.annotateWithProtocols(assignment: ProtocolAssignment): ProgramNode","io.github.aplcornell.viaduct.passes.annotateWithProtocols"]},{"name":"fun ProgramNode.check()","description":"io.github.aplcornell.viaduct.passes.check","location":"compiler/io.github.aplcornell.viaduct.passes/check.html","searchKeys":["check","fun ProgramNode.check()","io.github.aplcornell.viaduct.passes.check"]},{"name":"fun ProgramNode.compileToKotlin(fileName: String, packageName: String, codeGenerator: (context: CodeGeneratorContext) -> CodeGenerator, protocolComposer: ProtocolComposer): FileSpec","description":"io.github.aplcornell.viaduct.codegeneration.compileToKotlin","location":"compiler/io.github.aplcornell.viaduct.codegeneration/compile-to-kotlin.html","searchKeys":["compileToKotlin","fun ProgramNode.compileToKotlin(fileName: String, packageName: String, codeGenerator: (context: CodeGeneratorContext) -> CodeGenerator, protocolComposer: ProtocolComposer): FileSpec","io.github.aplcornell.viaduct.codegeneration.compileToKotlin"]},{"name":"fun ProgramNode.elaborated(): ProgramNode","description":"io.github.aplcornell.viaduct.passes.elaborated","location":"compiler/io.github.aplcornell.viaduct.passes/elaborated.html","searchKeys":["elaborated","fun ProgramNode.elaborated(): ProgramNode","io.github.aplcornell.viaduct.passes.elaborated"]},{"name":"fun ProgramNode.specialize(): ProgramNode","description":"io.github.aplcornell.viaduct.passes.specialize","location":"compiler/io.github.aplcornell.viaduct.passes/specialize.html","searchKeys":["specialize","fun ProgramNode.specialize(): ProgramNode","io.github.aplcornell.viaduct.passes.specialize"]},{"name":"fun ProgramPostprocessorRegistry(postprocessors: List<ProgramPostprocessor>)","description":"io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry.ProgramPostprocessorRegistry","location":"compiler/io.github.aplcornell.viaduct.passes/-program-postprocessor-registry/-program-postprocessor-registry.html","searchKeys":["ProgramPostprocessorRegistry","fun ProgramPostprocessorRegistry(postprocessors: List<ProgramPostprocessor>)","io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry.ProgramPostprocessorRegistry"]},{"name":"fun ProgramPostprocessorRegistry(vararg postprocessors: ProgramPostprocessor)","description":"io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry.ProgramPostprocessorRegistry","location":"compiler/io.github.aplcornell.viaduct.passes/-program-postprocessor-registry/-program-postprocessor-registry.html","searchKeys":["ProgramPostprocessorRegistry","fun ProgramPostprocessorRegistry(vararg postprocessors: ProgramPostprocessor)","io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry.ProgramPostprocessorRegistry"]},{"name":"fun Protocol()","description":"io.github.aplcornell.viaduct.syntax.Protocol.Protocol","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/-protocol.html","searchKeys":["Protocol","fun Protocol()","io.github.aplcornell.viaduct.syntax.Protocol.Protocol"]},{"name":"fun ProtocolAnalysis(program: ProgramNode, protocolComposer: ProtocolComposer)","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.ProtocolAnalysis","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/-protocol-analysis.html","searchKeys":["ProtocolAnalysis","fun ProtocolAnalysis(program: ProgramNode, protocolComposer: ProtocolComposer)","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.ProtocolAnalysis"]},{"name":"fun ProtocolAssignment(assignment: Map<FunctionVariable, Protocol>, propModel: Map<String, Boolean>, problem: SelectionProblem)","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.ProtocolAssignment","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/-protocol-assignment.html","searchKeys":["ProtocolAssignment","fun ProtocolAssignment(assignment: Map<FunctionVariable, Protocol>, propModel: Map<String, Boolean>, problem: SelectionProblem)","io.github.aplcornell.viaduct.selection.ProtocolAssignment.ProtocolAssignment"]},{"name":"fun ProtocolCommunication(events: Set<CommunicationEvent>)","description":"io.github.aplcornell.viaduct.selection.ProtocolCommunication.ProtocolCommunication","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-communication/-protocol-communication.html","searchKeys":["ProtocolCommunication","fun ProtocolCommunication(events: Set<CommunicationEvent>)","io.github.aplcornell.viaduct.selection.ProtocolCommunication.ProtocolCommunication"]},{"name":"fun ProtocolComposer()","description":"io.github.aplcornell.viaduct.selection.ProtocolComposer.ProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-composer/-protocol-composer.html","searchKeys":["ProtocolComposer","fun ProtocolComposer()","io.github.aplcornell.viaduct.selection.ProtocolComposer.ProtocolComposer"]},{"name":"fun ProtocolComposer.cached(): ProtocolComposer","description":"io.github.aplcornell.viaduct.selection.cached","location":"compiler/io.github.aplcornell.viaduct.selection/cached.html","searchKeys":["cached","fun ProtocolComposer.cached(): ProtocolComposer","io.github.aplcornell.viaduct.selection.cached"]},{"name":"fun ProtocolFactory.filter(predicate: (Protocol) -> Boolean): ProtocolFactory","description":"io.github.aplcornell.viaduct.selection.filter","location":"compiler/io.github.aplcornell.viaduct.selection/filter.html","searchKeys":["filter","fun ProtocolFactory.filter(predicate: (Protocol) -> Boolean): ProtocolFactory","io.github.aplcornell.viaduct.selection.filter"]},{"name":"fun ProtocolName(name: String)","description":"io.github.aplcornell.viaduct.syntax.ProtocolName.ProtocolName","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-name/-protocol-name.html","searchKeys":["ProtocolName","fun ProtocolName(name: String)","io.github.aplcornell.viaduct.syntax.ProtocolName.ProtocolName"]},{"name":"fun ProtocolProjection(protocol: Protocol, host: Host)","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.ProtocolProjection","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/-protocol-projection.html","searchKeys":["ProtocolProjection","fun ProtocolProjection(protocol: Protocol, host: Host)","io.github.aplcornell.viaduct.syntax.ProtocolProjection.ProtocolProjection"]},{"name":"fun ProtocolSelection(solver: SelectionProblemSolver, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","description":"io.github.aplcornell.viaduct.selection.ProtocolSelection.ProtocolSelection","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-selection/-protocol-selection.html","searchKeys":["ProtocolSelection","fun ProtocolSelection(solver: SelectionProblemSolver, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","io.github.aplcornell.viaduct.selection.ProtocolSelection.ProtocolSelection"]},{"name":"fun QueryNode(variable: ObjectVariableNode, query: QueryNameNode, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.QueryNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/-query-node.html","searchKeys":["QueryNode","fun QueryNode(variable: ObjectVariableNode, query: QueryNameNode, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.QueryNode"]},{"name":"fun QueryNode(variable: ObjectVariableNode, query: QueryNameNode, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.surface.QueryNode.QueryNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-query-node/-query-node.html","searchKeys":["QueryNode","fun QueryNode(variable: ObjectVariableNode, query: QueryNameNode, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.surface.QueryNode.QueryNode"]},{"name":"fun ReadNode(temporary: TemporaryNode)","description":"io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.ReadNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-read-node/-read-node.html","searchKeys":["ReadNode","fun ReadNode(temporary: TemporaryNode)","io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.ReadNode"]},{"name":"fun ReadNode(temporary: TemporaryNode)","description":"io.github.aplcornell.viaduct.syntax.surface.ReadNode.ReadNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-read-node/-read-node.html","searchKeys":["ReadNode","fun ReadNode(temporary: TemporaryNode)","io.github.aplcornell.viaduct.syntax.surface.ReadNode.ReadNode"]},{"name":"fun ReduceNode(operator: OperatorNode, defaultValue: PureExpressionNode, indices: Arguments<IndexParameterNode>, body: PureExpressionNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.ReduceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/-reduce-node.html","searchKeys":["ReduceNode","fun ReduceNode(operator: OperatorNode, defaultValue: PureExpressionNode, indices: Arguments<IndexParameterNode>, body: PureExpressionNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.ReduceNode"]},{"name":"fun ReferenceNode(name: VariableNode, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.ReferenceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reference-node/-reference-node.html","searchKeys":["ReferenceNode","fun ReferenceNode(name: VariableNode, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.ReferenceNode"]},{"name":"fun Replication(hosts: Set<Host>)","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.Replication","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/-replication.html","searchKeys":["Replication","fun Replication(hosts: Set<Host>)","io.github.aplcornell.viaduct.backends.cleartext.Replication.Replication"]},{"name":"fun ReplicationProtocolFactory(program: ProgramNode)","description":"io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.ReplicationProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication-protocol-factory/-replication-protocol-factory.html","searchKeys":["ReplicationProtocolFactory","fun ReplicationProtocolFactory(program: ProgramNode)","io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.ReplicationProtocolFactory"]},{"name":"fun ReturnNode(values: Arguments<PureExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.ReturnNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-return-node/-return-node.html","searchKeys":["ReturnNode","fun ReturnNode(values: Arguments<PureExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.ReturnNode"]},{"name":"fun Rewrite(rewrites: Map<PrincipalComponent, LabelConstant>, hostTrustConfiguration: HostTrustConfiguration)","description":"io.github.aplcornell.viaduct.passes.Rewrite.Rewrite","location":"compiler/io.github.aplcornell.viaduct.passes/-rewrite/-rewrite.html","searchKeys":["Rewrite","fun Rewrite(rewrites: Map<PrincipalComponent, LabelConstant>, hostTrustConfiguration: HostTrustConfiguration)","io.github.aplcornell.viaduct.passes.Rewrite.Rewrite"]},{"name":"fun RuntimeError(information: String, node: HasSourceLocation? = null)","description":"io.github.aplcornell.viaduct.errors.RuntimeError.RuntimeError","location":"compiler/io.github.aplcornell.viaduct.errors/-runtime-error/-runtime-error.html","searchKeys":["RuntimeError","fun RuntimeError(information: String, node: HasSourceLocation? = null)","io.github.aplcornell.viaduct.errors.RuntimeError.RuntimeError"]},{"name":"fun SelectionConstraint.functionVariables(): Set<FunctionVariable>","description":"io.github.aplcornell.viaduct.selection.functionVariables","location":"compiler/io.github.aplcornell.viaduct.selection/function-variables.html","searchKeys":["functionVariables","fun SelectionConstraint.functionVariables(): Set<FunctionVariable>","io.github.aplcornell.viaduct.selection.functionVariables"]},{"name":"fun SelectionConstraint.guardVisibilityVariables(): Set<GuardVisibilityFlag>","description":"io.github.aplcornell.viaduct.selection.guardVisibilityVariables","location":"compiler/io.github.aplcornell.viaduct.selection/guard-visibility-variables.html","searchKeys":["guardVisibilityVariables","fun SelectionConstraint.guardVisibilityVariables(): Set<GuardVisibilityFlag>","io.github.aplcornell.viaduct.selection.guardVisibilityVariables"]},{"name":"fun SelectionConstraint.hostVariables(): Set<HostVariable>","description":"io.github.aplcornell.viaduct.selection.hostVariables","location":"compiler/io.github.aplcornell.viaduct.selection/host-variables.html","searchKeys":["hostVariables","fun SelectionConstraint.hostVariables(): Set<HostVariable>","io.github.aplcornell.viaduct.selection.hostVariables"]},{"name":"fun SelectionConstraint.protocols(): Set<Protocol>","description":"io.github.aplcornell.viaduct.selection.protocols","location":"compiler/io.github.aplcornell.viaduct.selection/protocols.html","searchKeys":["protocols","fun SelectionConstraint.protocols(): Set<Protocol>","io.github.aplcornell.viaduct.selection.protocols"]},{"name":"fun SelectionConstraint.variableNames(): Set<String>","description":"io.github.aplcornell.viaduct.selection.variableNames","location":"compiler/io.github.aplcornell.viaduct.selection/variable-names.html","searchKeys":["variableNames","fun SelectionConstraint.variableNames(): Set<String>","io.github.aplcornell.viaduct.selection.variableNames"]},{"name":"fun SelectionConstraintGenerator(program: ProgramNode, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","description":"io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator.SelectionConstraintGenerator","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-constraint-generator/-selection-constraint-generator.html","searchKeys":["SelectionConstraintGenerator","fun SelectionConstraintGenerator(program: ProgramNode, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>)","io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator.SelectionConstraintGenerator"]},{"name":"fun SelectionProblem(constraints: Set<SelectionConstraint>, cost: SymbolicCost, costMap: Map<Node, SymbolicCost> = mapOf())","description":"io.github.aplcornell.viaduct.selection.SelectionProblem.SelectionProblem","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-problem/-selection-problem.html","searchKeys":["SelectionProblem","fun SelectionProblem(constraints: Set<SelectionConstraint>, cost: SymbolicCost, costMap: Map<Node, SymbolicCost> = mapOf())","io.github.aplcornell.viaduct.selection.SelectionProblem.SelectionProblem"]},{"name":"fun SimpleCostEstimator(protocolComposer: ProtocolComposer, costRegime: SimpleCostRegime)","description":"io.github.aplcornell.viaduct.selection.SimpleCostEstimator.SimpleCostEstimator","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-estimator/-simple-cost-estimator.html","searchKeys":["SimpleCostEstimator","fun SimpleCostEstimator(protocolComposer: ProtocolComposer, costRegime: SimpleCostRegime)","io.github.aplcornell.viaduct.selection.SimpleCostEstimator.SimpleCostEstimator"]},{"name":"fun SkipNode(sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.SkipNode.SkipNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-skip-node/-skip-node.html","searchKeys":["SkipNode","fun SkipNode(sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.SkipNode.SkipNode"]},{"name":"fun SourceFile.compile(backend: Backend, selectionSolver: SelectionProblemSolver = defaultSelectionProblemSolver, costRegime: SimpleCostRegime = SimpleCostRegime.WAN, saveLabelConstraintGraph: (graphWriter: (Writer) -> Unit) -> Unit? = null, saveInferredLabels: File? = null, saveEstimatedCost: File? = null, saveProtocolAssignment: File? = null): ProgramNode","description":"io.github.aplcornell.viaduct.passes.compile","location":"compiler/io.github.aplcornell.viaduct.passes/compile.html","searchKeys":["compile","fun SourceFile.compile(backend: Backend, selectionSolver: SelectionProblemSolver = defaultSelectionProblemSolver, costRegime: SimpleCostRegime = SimpleCostRegime.WAN, saveLabelConstraintGraph: (graphWriter: (Writer) -> Unit) -> Unit? = null, saveInferredLabels: File? = null, saveEstimatedCost: File? = null, saveProtocolAssignment: File? = null): ProgramNode","io.github.aplcornell.viaduct.passes.compile"]},{"name":"fun SourceFile.compileToKotlin(fileName: String, packageName: String, backend: Backend, selectionSolver: SelectionProblemSolver = defaultSelectionProblemSolver, costRegime: SimpleCostRegime = SimpleCostRegime.WAN, saveLabelConstraintGraph: (graphWriter: (Writer) -> Unit) -> Unit? = null, saveInferredLabels: File? = null, saveEstimatedCost: File? = null, saveProtocolAssignment: File? = null): FileSpec","description":"io.github.aplcornell.viaduct.passes.compileToKotlin","location":"compiler/io.github.aplcornell.viaduct.passes/compile-to-kotlin.html","searchKeys":["compileToKotlin","fun SourceFile.compileToKotlin(fileName: String, packageName: String, backend: Backend, selectionSolver: SelectionProblemSolver = defaultSelectionProblemSolver, costRegime: SimpleCostRegime = SimpleCostRegime.WAN, saveLabelConstraintGraph: (graphWriter: (Writer) -> Unit) -> Unit? = null, saveInferredLabels: File? = null, saveEstimatedCost: File? = null, saveProtocolAssignment: File? = null): FileSpec","io.github.aplcornell.viaduct.passes.compileToKotlin"]},{"name":"fun SourceFile.parse(protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","description":"io.github.aplcornell.viaduct.parsing.parse","location":"compiler/io.github.aplcornell.viaduct.parsing/parse.html","searchKeys":["parse","fun SourceFile.parse(protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","io.github.aplcornell.viaduct.parsing.parse"]},{"name":"fun SourceFile.parse(protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","description":"io.github.aplcornell.viaduct.syntax.circuit.parse","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/parse.html","searchKeys":["parse","fun SourceFile.parse(protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","io.github.aplcornell.viaduct.syntax.circuit.parse"]},{"name":"fun SourceFile.parseLabel(): LabelExpression","description":"io.github.aplcornell.viaduct.parsing.parseLabel","location":"compiler/io.github.aplcornell.viaduct.parsing/parse-label.html","searchKeys":["parseLabel","fun SourceFile.parseLabel(): LabelExpression","io.github.aplcornell.viaduct.parsing.parseLabel"]},{"name":"fun SourcePosition(sourceFile: SourceFile, offset: Int)","description":"io.github.aplcornell.viaduct.parsing.SourcePosition.SourcePosition","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/-source-position.html","searchKeys":["SourcePosition","fun SourcePosition(sourceFile: SourceFile, offset: Int)","io.github.aplcornell.viaduct.parsing.SourcePosition.SourcePosition"]},{"name":"fun SourceRange(start: SourcePosition, end: SourcePosition)","description":"io.github.aplcornell.viaduct.parsing.SourceRange.SourceRange","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/-source-range.html","searchKeys":["SourceRange","fun SourceRange(start: SourcePosition, end: SourcePosition)","io.github.aplcornell.viaduct.parsing.SourceRange.SourceRange"]},{"name":"fun StatementNode.canMux(): Boolean","description":"io.github.aplcornell.viaduct.passes.canMux","location":"compiler/io.github.aplcornell.viaduct.passes/can-mux.html","searchKeys":["canMux","fun StatementNode.canMux(): Boolean","io.github.aplcornell.viaduct.passes.canMux"]},{"name":"fun StatementNode.createdVariables(): List<Variable>","description":"io.github.aplcornell.viaduct.analysis.createdVariables","location":"compiler/io.github.aplcornell.viaduct.analysis/created-variables.html","searchKeys":["createdVariables","fun StatementNode.createdVariables(): List<Variable>","io.github.aplcornell.viaduct.analysis.createdVariables"]},{"name":"fun StatementNode.immediateRHS(): List<ExpressionNode>","description":"io.github.aplcornell.viaduct.analysis.immediateRHS","location":"compiler/io.github.aplcornell.viaduct.analysis/immediate-r-h-s.html","searchKeys":["immediateRHS","fun StatementNode.immediateRHS(): List<ExpressionNode>","io.github.aplcornell.viaduct.analysis.immediateRHS"]},{"name":"fun String.parse(path: String = \"<string>\", protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","description":"io.github.aplcornell.viaduct.parsing.parse","location":"compiler/io.github.aplcornell.viaduct.parsing/parse.html","searchKeys":["parse","fun String.parse(path: String = \"<string>\", protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","io.github.aplcornell.viaduct.parsing.parse"]},{"name":"fun String.parse(path: String = \"<string>\", protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","description":"io.github.aplcornell.viaduct.syntax.circuit.parse","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/parse.html","searchKeys":["parse","fun String.parse(path: String = \"<string>\", protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>> = defaultProtocolParsers): ProgramNode","io.github.aplcornell.viaduct.syntax.circuit.parse"]},{"name":"fun String.parseLabel(path: String = \"<string>\"): LabelExpression","description":"io.github.aplcornell.viaduct.parsing.parseLabel","location":"compiler/io.github.aplcornell.viaduct.parsing/parse-label.html","searchKeys":["parseLabel","fun String.parseLabel(path: String = \"<string>\"): LabelExpression","io.github.aplcornell.viaduct.parsing.parseLabel"]},{"name":"fun StringValue(value: String)","description":"io.github.aplcornell.viaduct.syntax.values.StringValue.StringValue","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-string-value/-string-value.html","searchKeys":["StringValue","fun StringValue(value: String)","io.github.aplcornell.viaduct.syntax.values.StringValue.StringValue"]},{"name":"fun Temporary(name: String)","description":"io.github.aplcornell.viaduct.syntax.Temporary.Temporary","location":"compiler/io.github.aplcornell.viaduct.syntax/-temporary/-temporary.html","searchKeys":["Temporary","fun Temporary(name: String)","io.github.aplcornell.viaduct.syntax.Temporary.Temporary"]},{"name":"fun TypeMismatchError(node: HasSourceLocation, actualType: Type, expectedType: Type)","description":"io.github.aplcornell.viaduct.errors.TypeMismatchError.TypeMismatchError","location":"compiler/io.github.aplcornell.viaduct.errors/-type-mismatch-error/-type-mismatch-error.html","searchKeys":["TypeMismatchError","fun TypeMismatchError(node: HasSourceLocation, actualType: Type, expectedType: Type)","io.github.aplcornell.viaduct.errors.TypeMismatchError.TypeMismatchError"]},{"name":"fun UnaryPrefixOperator()","description":"io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator.UnaryPrefixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-unary-prefix-operator/-unary-prefix-operator.html","searchKeys":["UnaryPrefixOperator","fun UnaryPrefixOperator()","io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator.UnaryPrefixOperator"]},{"name":"fun UndefinedNameError(name: Located<Name>)","description":"io.github.aplcornell.viaduct.errors.UndefinedNameError.UndefinedNameError","location":"compiler/io.github.aplcornell.viaduct.errors/-undefined-name-error/-undefined-name-error.html","searchKeys":["UndefinedNameError","fun UndefinedNameError(name: Located<Name>)","io.github.aplcornell.viaduct.errors.UndefinedNameError.UndefinedNameError"]},{"name":"fun UnexpectedArgumentError(name: Located<ArgumentLabel>)","description":"io.github.aplcornell.viaduct.errors.UnexpectedArgumentError.UnexpectedArgumentError","location":"compiler/io.github.aplcornell.viaduct.errors/-unexpected-argument-error/-unexpected-argument-error.html","searchKeys":["UnexpectedArgumentError","fun UnexpectedArgumentError(name: Located<ArgumentLabel>)","io.github.aplcornell.viaduct.errors.UnexpectedArgumentError.UnexpectedArgumentError"]},{"name":"fun UniqueQueue()","description":"io.github.aplcornell.viaduct.util.UniqueQueue.UniqueQueue","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/-unique-queue.html","searchKeys":["UniqueQueue","fun UniqueQueue()","io.github.aplcornell.viaduct.util.UniqueQueue.UniqueQueue"]},{"name":"fun UnknownDatatypeError(objectName: ObjectVariableNode, className: ClassName)","description":"io.github.aplcornell.viaduct.errors.UnknownDatatypeError.UnknownDatatypeError","location":"compiler/io.github.aplcornell.viaduct.errors/-unknown-datatype-error/-unknown-datatype-error.html","searchKeys":["UnknownDatatypeError","fun UnknownDatatypeError(objectName: ObjectVariableNode, className: ClassName)","io.github.aplcornell.viaduct.errors.UnknownDatatypeError.UnknownDatatypeError"]},{"name":"fun UnknownMethodError(objectName: ObjectVariableNode, methodName: MethodNameNode, objectType: ObjectType? = null, argumentTypes: List<ValueType>? = null)","description":"io.github.aplcornell.viaduct.errors.UnknownMethodError.UnknownMethodError","location":"compiler/io.github.aplcornell.viaduct.errors/-unknown-method-error/-unknown-method-error.html","searchKeys":["UnknownMethodError","fun UnknownMethodError(objectName: ObjectVariableNode, methodName: MethodNameNode, objectType: ObjectType? = null, argumentTypes: List<ValueType>? = null)","io.github.aplcornell.viaduct.errors.UnknownMethodError.UnknownMethodError"]},{"name":"fun UnsupportedOperatorException(protocol: Protocol, node: Node)","description":"io.github.aplcornell.viaduct.codegeneration.UnsupportedOperatorException.UnsupportedOperatorException","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-unsupported-operator-exception/-unsupported-operator-exception.html","searchKeys":["UnsupportedOperatorException","fun UnsupportedOperatorException(protocol: Protocol, node: Node)","io.github.aplcornell.viaduct.codegeneration.UnsupportedOperatorException.UnsupportedOperatorException"]},{"name":"fun UpdateNode(variable: ObjectVariableNode, update: UpdateNameNode, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.UpdateNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/-update-node.html","searchKeys":["UpdateNode","fun UpdateNode(variable: ObjectVariableNode, update: UpdateNameNode, arguments: Arguments<AtomicExpressionNode>, sourceLocation: SourceLocation)","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.UpdateNode"]},{"name":"fun UpdateNode(variable: ObjectVariableNode, update: UpdateNameNode, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.UpdateNode.UpdateNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-update-node/-update-node.html","searchKeys":["UpdateNode","fun UpdateNode(variable: ObjectVariableNode, update: UpdateNameNode, arguments: Arguments<ExpressionNode>, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.UpdateNode.UpdateNode"]},{"name":"fun Variable(name: String)","description":"io.github.aplcornell.viaduct.syntax.circuit.Variable.Variable","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-variable/-variable.html","searchKeys":["Variable","fun Variable(name: String)","io.github.aplcornell.viaduct.syntax.circuit.Variable.Variable"]},{"name":"fun VariableEquals(var1: FunctionVariable, var2: FunctionVariable)","description":"io.github.aplcornell.viaduct.selection.VariableEquals.VariableEquals","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-equals/-variable-equals.html","searchKeys":["VariableEquals","fun VariableEquals(var1: FunctionVariable, var2: FunctionVariable)","io.github.aplcornell.viaduct.selection.VariableEquals.VariableEquals"]},{"name":"fun VariableIn(variable: FunctionVariable, protocol: Protocol)","description":"io.github.aplcornell.viaduct.selection.VariableIn.VariableIn","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-in/-variable-in.html","searchKeys":["VariableIn","fun VariableIn(variable: FunctionVariable, protocol: Protocol)","io.github.aplcornell.viaduct.selection.VariableIn.VariableIn"]},{"name":"fun VectorType(elementType: ValueType)","description":"io.github.aplcornell.viaduct.syntax.types.VectorType.VectorType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/-vector-type.html","searchKeys":["VectorType","fun VectorType(elementType: ValueType)","io.github.aplcornell.viaduct.syntax.types.VectorType.VectorType"]},{"name":"fun ViaductInterpreterError(information: String, node: HasSourceLocation? = null)","description":"io.github.aplcornell.viaduct.errors.ViaductInterpreterError.ViaductInterpreterError","location":"compiler/io.github.aplcornell.viaduct.errors/-viaduct-interpreter-error/-viaduct-interpreter-error.html","searchKeys":["ViaductInterpreterError","fun ViaductInterpreterError(information: String, node: HasSourceLocation? = null)","io.github.aplcornell.viaduct.errors.ViaductInterpreterError.ViaductInterpreterError"]},{"name":"fun WhileLoopNode(guard: ExpressionNode, body: BlockNode, jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","description":"io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.WhileLoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-while-loop-node/-while-loop-node.html","searchKeys":["WhileLoopNode","fun WhileLoopNode(guard: ExpressionNode, body: BlockNode, jumpLabel: JumpLabelNode?, sourceLocation: SourceLocation, comment: String? = null)","io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.WhileLoopNode"]},{"name":"fun YaoABY(server: Host, client: Host)","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.YaoABY","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-yao-a-b-y.html","searchKeys":["YaoABY","fun YaoABY(server: Host, client: Host)","io.github.aplcornell.viaduct.backends.aby.YaoABY.YaoABY"]},{"name":"fun ZKP(prover: Host, verifiers: Set<Host>)","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.ZKP","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/-z-k-p.html","searchKeys":["ZKP","fun ZKP(prover: Host, verifiers: Set<Host>)","io.github.aplcornell.viaduct.backends.zkp.ZKP.ZKP"]},{"name":"fun ZKPProtocolFactory(program: ProgramNode)","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.ZKPProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-factory/-z-k-p-protocol-factory.html","searchKeys":["ZKPProtocolFactory","fun ZKPProtocolFactory(program: ProgramNode)","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.ZKPProtocolFactory"]},{"name":"fun abyMuxPostprocessor(protocolAssignment: ProtocolAssignment): ProgramPostprocessor","description":"io.github.aplcornell.viaduct.backends.aby.abyMuxPostprocessor","location":"compiler/io.github.aplcornell.viaduct.backends.aby/aby-mux-postprocessor.html","searchKeys":["abyMuxPostprocessor","fun abyMuxPostprocessor(protocolAssignment: ProtocolAssignment): ProgramPostprocessor","io.github.aplcornell.viaduct.backends.aby.abyMuxPostprocessor"]},{"name":"fun actsFor(from: Label, to: Label): Boolean","description":"io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.actsFor","location":"compiler/io.github.aplcornell.viaduct.syntax/-host-trust-configuration/acts-for.html","searchKeys":["actsFor","fun actsFor(from: Label, to: Label): Boolean","io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.actsFor"]},{"name":"fun actsFor(from: Label, to: Label, congruence: FreeDistributiveLatticeCongruence<PrincipalComponent>): Boolean","description":"io.github.aplcornell.viaduct.security.actsFor","location":"compiler/io.github.aplcornell.viaduct.security/acts-for.html","searchKeys":["actsFor","fun actsFor(from: Label, to: Label, congruence: FreeDistributiveLatticeCongruence<PrincipalComponent>): Boolean","io.github.aplcornell.viaduct.security.actsFor"]},{"name":"fun argumentUses(node: ObjectVariableDeclarationNode): Set<FunctionArgumentNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.argumentUses","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/argument-uses.html","searchKeys":["argumentUses","fun argumentUses(node: ObjectVariableDeclarationNode): Set<FunctionArgumentNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.argumentUses"]},{"name":"fun assertHasNoExtraArguments(expectedArguments: Set<ArgumentLabel>)","description":"io.github.aplcornell.viaduct.syntax.NamedArguments.assertHasNoExtraArguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-named-arguments/assert-has-no-extra-arguments.html","searchKeys":["assertHasNoExtraArguments","fun assertHasNoExtraArguments(expectedArguments: Set<ArgumentLabel>)","io.github.aplcornell.viaduct.syntax.NamedArguments.assertHasNoExtraArguments"]},{"name":"fun calls(function: FunctionDeclarationNode): Set<FunctionCallNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.calls","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/calls.html","searchKeys":["calls","fun calls(function: FunctionDeclarationNode): Set<FunctionCallNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.calls"]},{"name":"fun canCommunicate(source: Protocol, destination: Protocol): Boolean","description":"io.github.aplcornell.viaduct.selection.ProtocolComposer.canCommunicate","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-composer/can-communicate.html","searchKeys":["canCommunicate","fun canCommunicate(source: Protocol, destination: Protocol): Boolean","io.github.aplcornell.viaduct.selection.ProtocolComposer.canCommunicate"]},{"name":"fun check()","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.check","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/check.html","searchKeys":["check","fun check()","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.check"]},{"name":"fun check()","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.check","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/check.html","searchKeys":["check","fun check()","io.github.aplcornell.viaduct.analysis.NameAnalysis.check"]},{"name":"fun check()","description":"io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis.check","location":"compiler/io.github.aplcornell.viaduct.analysis/-out-parameter-initialization-analysis/check.html","searchKeys":["check","fun check()","io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis.check"]},{"name":"fun check()","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis.check","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/check.html","searchKeys":["check","fun check()","io.github.aplcornell.viaduct.analysis.TypeAnalysis.check"]},{"name":"fun childIndex(node: Node): Int","description":"io.github.aplcornell.viaduct.attributes.Tree.childIndex","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree/child-index.html","searchKeys":["childIndex","fun childIndex(node: Node): Int","io.github.aplcornell.viaduct.attributes.Tree.childIndex"]},{"name":"fun cleartextExp(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.cleartextExp","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/cleartext-exp.html","searchKeys":["cleartextExp","fun cleartextExp(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.cleartextExp"]},{"name":"fun communicate(source: Protocol, destination: Protocol): ProtocolCommunication","description":"io.github.aplcornell.viaduct.selection.ProtocolComposer.communicate","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-composer/communicate.html","searchKeys":["communicate","fun communicate(source: Protocol, destination: Protocol): ProtocolCommunication","io.github.aplcornell.viaduct.selection.ProtocolComposer.communicate"]},{"name":"fun confidentiality(bounds: BoundedLattice<T>): SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.confidentiality","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/confidentiality.html","searchKeys":["confidentiality","fun confidentiality(bounds: BoundedLattice<T>): SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.confidentiality"]},{"name":"fun correspondingBreaks(node: InfiniteLoopNode): Set<BreakNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.correspondingBreaks","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/corresponding-breaks.html","searchKeys":["correspondingBreaks","fun correspondingBreaks(node: InfiniteLoopNode): Set<BreakNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.correspondingBreaks"]},{"name":"fun correspondingLet(query: QueryNode): LetNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.correspondingLet","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/corresponding-let.html","searchKeys":["correspondingLet","fun correspondingLet(query: QueryNode): LetNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.correspondingLet"]},{"name":"fun correspondingLoop(node: BreakNode): InfiniteLoopNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.correspondingLoop","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/corresponding-loop.html","searchKeys":["correspondingLoop","fun correspondingLoop(node: BreakNode): InfiniteLoopNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.correspondingLoop"]},{"name":"fun createReader(): Reader","description":"io.github.aplcornell.viaduct.parsing.SourceFile.createReader","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/create-reader.html","searchKeys":["createReader","fun createReader(): Reader","io.github.aplcornell.viaduct.parsing.SourceFile.createReader"]},{"name":"fun declaration(node: CommunicationNode): HostDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: CommunicationNode): HostDeclarationNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun declaration(node: FunctionCallNode): FunctionDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: FunctionCallNode): FunctionDeclarationNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun declaration(node: ObjectReferenceArgumentNode): ObjectVariableDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: ObjectReferenceArgumentNode): ObjectVariableDeclarationNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun declaration(node: OutParameterArgumentNode): ParameterNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: OutParameterArgumentNode): ParameterNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun declaration(node: OutParameterInitializationNode): ParameterNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: OutParameterInitializationNode): ParameterNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun declaration(node: QueryNode): ObjectVariableDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: QueryNode): ObjectVariableDeclarationNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun declaration(node: ReadNode): LetNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: ReadNode): LetNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun declaration(node: UpdateNode): ObjectVariableDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/declaration.html","searchKeys":["declaration","fun declaration(node: UpdateNode): ObjectVariableDeclarationNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.declaration"]},{"name":"fun directReaderProtocols(letNode: LetNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.directReaderProtocols","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/direct-reader-protocols.html","searchKeys":["directReaderProtocols","fun directReaderProtocols(letNode: LetNode): Set<Protocol>","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.directReaderProtocols"]},{"name":"fun directRemoteReaders(letNode: LetNode): Set<SimpleStatementNode>","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.directRemoteReaders","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/direct-remote-readers.html","searchKeys":["directRemoteReaders","fun directRemoteReaders(letNode: LetNode): Set<SimpleStatementNode>","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.directRemoteReaders"]},{"name":"fun enclosingBlock(stmt: StatementNode): BlockNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingBlock","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/enclosing-block.html","searchKeys":["enclosingBlock","fun enclosingBlock(stmt: StatementNode): BlockNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingBlock"]},{"name":"fun enclosingFunction(node: Node): FunctionDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingFunction","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/enclosing-function.html","searchKeys":["enclosingFunction","fun enclosingFunction(node: Node): FunctionDeclarationNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingFunction"]},{"name":"fun enclosingFunctionName(node: Node): FunctionName","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingFunctionName","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/enclosing-function-name.html","searchKeys":["enclosingFunctionName","fun enclosingFunctionName(node: Node): FunctionName","io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingFunctionName"]},{"name":"fun enclosingStatement(read: ReadNode): StatementNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingStatement","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/enclosing-statement.html","searchKeys":["enclosingStatement","fun enclosingStatement(read: ReadNode): StatementNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.enclosingStatement"]},{"name":"fun equals(from: Label, to: Label): Boolean","description":"io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.equals","location":"compiler/io.github.aplcornell.viaduct.syntax/-host-trust-configuration/equals.html","searchKeys":["equals","fun equals(from: Label, to: Label): Boolean","io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.equals"]},{"name":"fun evaluate(c: SelectionConstraint): Boolean","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.evaluate","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/evaluate.html","searchKeys":["evaluate","fun evaluate(c: SelectionConstraint): Boolean","io.github.aplcornell.viaduct.selection.ProtocolAssignment.evaluate"]},{"name":"fun evaluate(cost: SymbolicCost): Int","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.evaluate","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/evaluate.html","searchKeys":["evaluate","fun evaluate(cost: SymbolicCost): Int","io.github.aplcornell.viaduct.selection.ProtocolAssignment.evaluate"]},{"name":"fun evaluate(term: Term<C, V>): C","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSolution.evaluate","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-solution/evaluate.html","searchKeys":["evaluate","fun evaluate(term: Term<C, V>): C","io.github.aplcornell.viaduct.algebra.solver.ConstraintSolution.evaluate"]},{"name":"fun evaluate(term: Term<C, V>): SecurityLattice<C>","description":"io.github.aplcornell.viaduct.security.solver.ConstraintSolution.evaluate","location":"compiler/io.github.aplcornell.viaduct.security.solver/-constraint-solution/evaluate.html","searchKeys":["evaluate","fun evaluate(term: Term<C, V>): SecurityLattice<C>","io.github.aplcornell.viaduct.security.solver.ConstraintSolution.evaluate"]},{"name":"fun exportConstraintGraph(output: Writer)","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.exportConstraintGraph","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/export-constraint-graph.html","searchKeys":["exportConstraintGraph","fun exportConstraintGraph(output: Writer)","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.exportConstraintGraph"]},{"name":"fun exportDotGraph(writer: Writer)","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.exportDotGraph","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-system/export-dot-graph.html","searchKeys":["exportDotGraph","fun exportDotGraph(writer: Writer)","io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.exportDotGraph"]},{"name":"fun exportDotGraph(writer: Writer)","description":"io.github.aplcornell.viaduct.security.solver.ConstraintSystem.exportDotGraph","location":"compiler/io.github.aplcornell.viaduct.security.solver/-constraint-system/export-dot-graph.html","searchKeys":["exportDotGraph","fun exportDotGraph(writer: Writer)","io.github.aplcornell.viaduct.security.solver.ConstraintSystem.exportDotGraph"]},{"name":"fun flowsTo(from: Label, to: Label, congruence: FreeDistributiveLatticeCongruence<PrincipalComponent>): Boolean","description":"io.github.aplcornell.viaduct.security.flowsTo","location":"compiler/io.github.aplcornell.viaduct.security/flows-to.html","searchKeys":["flowsTo","fun flowsTo(from: Label, to: Label, congruence: FreeDistributiveLatticeCongruence<PrincipalComponent>): Boolean","io.github.aplcornell.viaduct.security.flowsTo"]},{"name":"fun from(path: String, contents: String): SourceFile","description":"io.github.aplcornell.viaduct.parsing.SourceFile.Companion.from","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/-companion/from.html","searchKeys":["from","fun from(path: String, contents: String): SourceFile","io.github.aplcornell.viaduct.parsing.SourceFile.Companion.from"]},{"name":"fun from(path: String, reader: Reader): SourceFile","description":"io.github.aplcornell.viaduct.parsing.SourceFile.Companion.from","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/-companion/from.html","searchKeys":["from","fun from(path: String, reader: Reader): SourceFile","io.github.aplcornell.viaduct.parsing.SourceFile.Companion.from"]},{"name":"fun from(source: File): SourceFile","description":"io.github.aplcornell.viaduct.parsing.SourceFile.Companion.from","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/-companion/from.html","searchKeys":["from","fun from(source: File): SourceFile","io.github.aplcornell.viaduct.parsing.SourceFile.Companion.from"]},{"name":"fun functionCall(argument: FunctionArgumentNode): FunctionCallNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.functionCall","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/function-call.html","searchKeys":["functionCall","fun functionCall(argument: FunctionArgumentNode): FunctionCallNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.functionCall"]},{"name":"fun functionDeclaration(parameter: ParameterNode): FunctionDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.functionDeclaration","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/function-declaration.html","searchKeys":["functionDeclaration","fun functionDeclaration(parameter: ParameterNode): FunctionDeclarationNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.functionDeclaration"]},{"name":"fun getArgument(label: String): ValueNode","description":"io.github.aplcornell.viaduct.parsing.ProtocolArguments.getArgument","location":"compiler/io.github.aplcornell.viaduct.parsing/-protocol-arguments/get-argument.html","searchKeys":["getArgument","fun getArgument(label: String): ValueNode","io.github.aplcornell.viaduct.parsing.ProtocolArguments.getArgument"]},{"name":"fun getAssignment(f: FunctionName, v: Variable): Protocol","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.getAssignment","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/get-assignment.html","searchKeys":["getAssignment","fun getAssignment(f: FunctionName, v: Variable): Protocol","io.github.aplcornell.viaduct.selection.ProtocolAssignment.getAssignment"]},{"name":"fun getAssignment(fv: FunctionVariable): Protocol","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.getAssignment","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/get-assignment.html","searchKeys":["getAssignment","fun getAssignment(fv: FunctionVariable): Protocol","io.github.aplcornell.viaduct.selection.ProtocolAssignment.getAssignment"]},{"name":"fun getFreshName(base: String): String","description":"io.github.aplcornell.viaduct.util.FreshNameGenerator.getFreshName","location":"compiler/io.github.aplcornell.viaduct.util/-fresh-name-generator/get-fresh-name.html","searchKeys":["getFreshName","fun getFreshName(base: String): String","io.github.aplcornell.viaduct.util.FreshNameGenerator.getFreshName"]},{"name":"fun getHostReceives(h: Host, portId: PortId? = null): Set<CommunicationEvent>","description":"io.github.aplcornell.viaduct.selection.ProtocolCommunication.getHostReceives","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-communication/get-host-receives.html","searchKeys":["getHostReceives","fun getHostReceives(h: Host, portId: PortId? = null): Set<CommunicationEvent>","io.github.aplcornell.viaduct.selection.ProtocolCommunication.getHostReceives"]},{"name":"fun getHostSends(h: Host, portId: PortId? = null): Set<CommunicationEvent>","description":"io.github.aplcornell.viaduct.selection.ProtocolCommunication.getHostSends","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-communication/get-host-sends.html","searchKeys":["getHostSends","fun getHostSends(h: Host, portId: PortId? = null): Set<CommunicationEvent>","io.github.aplcornell.viaduct.selection.ProtocolCommunication.getHostSends"]},{"name":"fun getParameter(name: ObjectVariable): ParameterNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.getParameter","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/get-parameter.html","searchKeys":["getParameter","fun getParameter(name: ObjectVariable): ParameterNode?","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.getParameter"]},{"name":"fun getParameterAtIndex(i: Int): ParameterNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.getParameterAtIndex","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/get-parameter-at-index.html","searchKeys":["getParameterAtIndex","fun getParameterAtIndex(i: Int): ParameterNode?","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.getParameterAtIndex"]},{"name":"fun getProjectionReceives(projection: ProtocolProjection, portId: PortId? = null): Set<CommunicationEvent>","description":"io.github.aplcornell.viaduct.selection.ProtocolCommunication.getProjectionReceives","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-communication/get-projection-receives.html","searchKeys":["getProjectionReceives","fun getProjectionReceives(projection: ProtocolProjection, portId: PortId? = null): Set<CommunicationEvent>","io.github.aplcornell.viaduct.selection.ProtocolCommunication.getProjectionReceives"]},{"name":"fun getProjectionSends(projection: ProtocolProjection, portId: PortId? = null): Set<CommunicationEvent>","description":"io.github.aplcornell.viaduct.selection.ProtocolCommunication.getProjectionSends","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-communication/get-projection-sends.html","searchKeys":["getProjectionSends","fun getProjectionSends(projection: ProtocolProjection, portId: PortId? = null): Set<CommunicationEvent>","io.github.aplcornell.viaduct.selection.ProtocolCommunication.getProjectionSends"]},{"name":"fun getSelectionProblem(): SelectionProblem","description":"io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator.getSelectionProblem","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-constraint-generator/get-selection-problem.html","searchKeys":["getSelectionProblem","fun getSelectionProblem(): SelectionProblem","io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator.getSelectionProblem"]},{"name":"fun hostsToSync(statement: StatementNode): Set<Host>","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.hostsToSync","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/hosts-to-sync.html","searchKeys":["hostsToSync","fun hostsToSync(statement: StatementNode): Set<Host>","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.hostsToSync"]},{"name":"fun integrity(bounds: BoundedLattice<T>): SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.integrity","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/integrity.html","searchKeys":["integrity","fun integrity(bounds: BoundedLattice<T>): SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.integrity"]},{"name":"fun interpret(label: Label, trustConfiguration: HostTrustConfiguration): LabelExpression","description":"io.github.aplcornell.viaduct.security.interpret","location":"compiler/io.github.aplcornell.viaduct.security/interpret.html","searchKeys":["interpret","fun interpret(label: Label, trustConfiguration: HostTrustConfiguration): LabelExpression","io.github.aplcornell.viaduct.security.interpret"]},{"name":"fun involvedLoops(node: Node): List<InfiniteLoopNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.involvedLoops","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/involved-loops.html","searchKeys":["involvedLoops","fun involvedLoops(node: Node): List<InfiniteLoopNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.involvedLoops"]},{"name":"fun join(that: C): Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.join","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/join.html","searchKeys":["join","fun join(that: C): Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.join"]},{"name":"fun label(functionCall: FunctionCallNode, labelParameter: LabelVariable): Label","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.label","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/label.html","searchKeys":["label","fun label(functionCall: FunctionCallNode, labelParameter: LabelVariable): Label","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.label"]},{"name":"fun label(node: FunctionArgumentNode): Label","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.label","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/label.html","searchKeys":["label","fun label(node: FunctionArgumentNode): Label","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.label"]},{"name":"fun label(node: VariableDeclarationNode): Label","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.label","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/label.html","searchKeys":["label","fun label(node: VariableDeclarationNode): Label","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.label"]},{"name":"fun lessThanOrEqualTo(that: FreeDistributiveLattice<A>, assumptions: List<FreeDistributiveLattice.LessThanOrEqualTo<A>>): Boolean","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.lessThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/less-than-or-equal-to.html","searchKeys":["lessThanOrEqualTo","fun lessThanOrEqualTo(that: FreeDistributiveLattice<A>, assumptions: List<FreeDistributiveLattice.LessThanOrEqualTo<A>>): Boolean","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.lessThanOrEqualTo"]},{"name":"fun meet(that: C): Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.meet","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/meet.html","searchKeys":["meet","fun meet(that: C): Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.meet"]},{"name":"fun merge(that: SourceRange): SourceRange","description":"io.github.aplcornell.viaduct.parsing.SourceRange.merge","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/merge.html","searchKeys":["merge","fun merge(that: SourceRange): SourceRange","io.github.aplcornell.viaduct.parsing.SourceRange.merge"]},{"name":"fun mux(block: BlockNode, nameAnalysis: NameAnalysis, nameGenerator: FreshNameGenerator = block.freshVariableNameGenerator()): BlockNode","description":"io.github.aplcornell.viaduct.passes.MuxPostprocessor.mux","location":"compiler/io.github.aplcornell.viaduct.passes/-mux-postprocessor/mux.html","searchKeys":["mux","fun mux(block: BlockNode, nameAnalysis: NameAnalysis, nameGenerator: FreshNameGenerator = block.freshVariableNameGenerator()): BlockNode","io.github.aplcornell.viaduct.passes.MuxPostprocessor.mux"]},{"name":"fun nextSibling(node: Node): Node?","description":"io.github.aplcornell.viaduct.attributes.Tree.nextSibling","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree/next-sibling.html","searchKeys":["nextSibling","fun nextSibling(node: Node): Node?","io.github.aplcornell.viaduct.attributes.Tree.nextSibling"]},{"name":"fun objectType(node: ObjectVariableDeclarationNode): ObjectTypeNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.objectType","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/object-type.html","searchKeys":["objectType","fun objectType(node: ObjectVariableDeclarationNode): ObjectTypeNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.objectType"]},{"name":"fun parameter(node: FunctionArgumentNode): ParameterNode","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.parameter","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/parameter.html","searchKeys":["parameter","fun parameter(node: FunctionArgumentNode): ParameterNode","io.github.aplcornell.viaduct.analysis.NameAnalysis.parameter"]},{"name":"fun parameterUsers(parameter: ParameterNode): Set<FunctionArgumentNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.parameterUsers","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/parameter-users.html","searchKeys":["parameterUsers","fun parameterUsers(parameter: ParameterNode): Set<FunctionArgumentNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.parameterUsers"]},{"name":"fun parameterUses(node: ObjectVariableDeclarationNode): Set<ParameterNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.parameterUses","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/parameter-uses.html","searchKeys":["parameterUses","fun parameterUses(node: ObjectVariableDeclarationNode): Set<ParameterNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.parameterUses"]},{"name":"fun parent(node: Node): Node?","description":"io.github.aplcornell.viaduct.attributes.Tree.parent","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree/parent.html","searchKeys":["parent","fun parent(node: Node): Node?","io.github.aplcornell.viaduct.attributes.Tree.parent"]},{"name":"fun participatingHosts(statement: StatementNode): Set<Host>","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.participatingHosts","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/participating-hosts.html","searchKeys":["participatingHosts","fun participatingHosts(statement: StatementNode): Set<Host>","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.participatingHosts"]},{"name":"fun participatingProtocols(node: Node): Set<Protocol>","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.participatingProtocols","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/participating-protocols.html","searchKeys":["participatingProtocols","fun participatingProtocols(node: Node): Set<Protocol>","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.participatingProtocols"]},{"name":"fun previousSibling(node: Node): Node?","description":"io.github.aplcornell.viaduct.attributes.Tree.previousSibling","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree/previous-sibling.html","searchKeys":["previousSibling","fun previousSibling(node: Node): Node?","io.github.aplcornell.viaduct.attributes.Tree.previousSibling"]},{"name":"fun primaryProtocol(argument: FunctionArgumentNode): Protocol","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/primary-protocol.html","searchKeys":["primaryProtocol","fun primaryProtocol(argument: FunctionArgumentNode): Protocol","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol"]},{"name":"fun primaryProtocol(parameter: ParameterNode): Protocol","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/primary-protocol.html","searchKeys":["primaryProtocol","fun primaryProtocol(parameter: ParameterNode): Protocol","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol"]},{"name":"fun primaryProtocol(read: ReadNode): Protocol","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/primary-protocol.html","searchKeys":["primaryProtocol","fun primaryProtocol(read: ReadNode): Protocol","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol"]},{"name":"fun primaryProtocol(statement: SimpleStatementNode): Protocol","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/primary-protocol.html","searchKeys":["primaryProtocol","fun primaryProtocol(statement: SimpleStatementNode): Protocol","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.primaryProtocol"]},{"name":"fun protocols(function: FunctionDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.protocols","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/protocols.html","searchKeys":["protocols","fun protocols(function: FunctionDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.protocols"]},{"name":"fun protocols(statement: StatementNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.protocols","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/protocols.html","searchKeys":["protocols","fun protocols(statement: StatementNode): Set<Protocol>","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.protocols"]},{"name":"fun queriers(node: ObjectVariableDeclarationNode): Set<QueryNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.queriers","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/queriers.html","searchKeys":["queriers","fun queriers(node: ObjectVariableDeclarationNode): Set<QueryNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.queriers"]},{"name":"fun reachableFunctions(node: Node): PersistentSet<FunctionName>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.reachableFunctions","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/reachable-functions.html","searchKeys":["reachableFunctions","fun reachableFunctions(node: Node): PersistentSet<FunctionName>","io.github.aplcornell.viaduct.analysis.NameAnalysis.reachableFunctions"]},{"name":"fun readers(node: LetNode): Set<StatementNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.readers","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/readers.html","searchKeys":["readers","fun readers(node: LetNode): Set<StatementNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.readers"]},{"name":"fun reads(node: Node): Set<ReadNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.reads","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/reads.html","searchKeys":["reads","fun reads(node: Node): Set<ReadNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.reads"]},{"name":"fun receiveReplicated(sender: LetNode, events: Set<CommunicationEvent>, context: CodeGeneratorContext, typeAnalysis: TypeAnalysis): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.receiveReplicated","location":"compiler/io.github.aplcornell.viaduct.codegeneration/receive-replicated.html","searchKeys":["receiveReplicated","fun receiveReplicated(sender: LetNode, events: Set<CommunicationEvent>, context: CodeGeneratorContext, typeAnalysis: TypeAnalysis): CodeBlock","io.github.aplcornell.viaduct.codegeneration.receiveReplicated"]},{"name":"fun relevantCommunicationEvents(letNode: LetNode, reader: SimpleStatementNode): ProtocolCommunication","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.relevantCommunicationEvents","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/relevant-communication-events.html","searchKeys":["relevantCommunicationEvents","fun relevantCommunicationEvents(letNode: LetNode, reader: SimpleStatementNode): ProtocolCommunication","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.relevantCommunicationEvents"]},{"name":"fun relevantCommunicationEvents(read: ReadNode): ProtocolCommunication","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.relevantCommunicationEvents","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/relevant-communication-events.html","searchKeys":["relevantCommunicationEvents","fun relevantCommunicationEvents(read: ReadNode): ProtocolCommunication","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.relevantCommunicationEvents"]},{"name":"fun rewrite(l: LabelExpression): LabelExpression","description":"io.github.aplcornell.viaduct.passes.Rewrite.rewrite","location":"compiler/io.github.aplcornell.viaduct.passes/-rewrite/rewrite.html","searchKeys":["rewrite","fun rewrite(l: LabelExpression): LabelExpression","io.github.aplcornell.viaduct.passes.Rewrite.rewrite"]},{"name":"fun rewrite(label: Label): Label","description":"io.github.aplcornell.viaduct.passes.Rewrite.rewrite","location":"compiler/io.github.aplcornell.viaduct.passes/-rewrite/rewrite.html","searchKeys":["rewrite","fun rewrite(label: Label): Label","io.github.aplcornell.viaduct.passes.Rewrite.rewrite"]},{"name":"fun rewrite(labelConstant: LabelConstant): LabelConstant","description":"io.github.aplcornell.viaduct.passes.Rewrite.rewrite","location":"compiler/io.github.aplcornell.viaduct.passes/-rewrite/rewrite.html","searchKeys":["rewrite","fun rewrite(labelConstant: LabelConstant): LabelConstant","io.github.aplcornell.viaduct.passes.Rewrite.rewrite"]},{"name":"fun selectAssignment(program: ProgramNode): ProtocolAssignment","description":"io.github.aplcornell.viaduct.selection.ProtocolSelection.selectAssignment","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-selection/select-assignment.html","searchKeys":["selectAssignment","fun selectAssignment(program: ProgramNode): ProtocolAssignment","io.github.aplcornell.viaduct.selection.ProtocolSelection.selectAssignment"]},{"name":"fun showInSource(highlightStyle: Style, contextLines: Int = if (start.line == end.line) 0 else 1): Document","description":"io.github.aplcornell.viaduct.parsing.SourceRange.showInSource","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/show-in-source.html","searchKeys":["showInSource","fun showInSource(highlightStyle: Style, contextLines: Int = if (start.line == end.line) 0 else 1): Document","io.github.aplcornell.viaduct.parsing.SourceRange.showInSource"]},{"name":"fun solution(): ConstraintSolution<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.solution","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-system/solution.html","searchKeys":["solution","fun solution(): ConstraintSolution<C, V>","io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.solution"]},{"name":"fun solution(): ConstraintSolution<C, V>","description":"io.github.aplcornell.viaduct.security.solver.ConstraintSystem.solution","location":"compiler/io.github.aplcornell.viaduct.security.solver/-constraint-system/solution.html","searchKeys":["solution","fun solution(): ConstraintSolution<C, V>","io.github.aplcornell.viaduct.security.solver.ConstraintSystem.solution"]},{"name":"fun swap(): SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.swap","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/swap.html","searchKeys":["swap","fun swap(): SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.swap"]},{"name":"fun toDocument(protocol: ProtocolNode?): Document","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/to-document.html","searchKeys":["toDocument","fun toDocument(protocol: ProtocolNode?): Document","io.github.aplcornell.viaduct.syntax.ObjectTypeNode.toDocument"]},{"name":"fun toDocumentWithMetadata(metadata: Metadata): Document","description":"io.github.aplcornell.viaduct.syntax.intermediate.Node.toDocumentWithMetadata","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-node/to-document-with-metadata.html","searchKeys":["toDocumentWithMetadata","fun toDocumentWithMetadata(metadata: Metadata): Document","io.github.aplcornell.viaduct.syntax.intermediate.Node.toDocumentWithMetadata"]},{"name":"fun type(node: ExpressionNode): ValueType","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis.type","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/type.html","searchKeys":["type","fun type(node: ExpressionNode): ValueType","io.github.aplcornell.viaduct.analysis.TypeAnalysis.type"]},{"name":"fun type(node: LetNode): ValueType","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis.type","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/type.html","searchKeys":["type","fun type(node: LetNode): ValueType","io.github.aplcornell.viaduct.analysis.TypeAnalysis.type"]},{"name":"fun type(node: ObjectVariableDeclarationNode): ObjectType","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis.type","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/type.html","searchKeys":["type","fun type(node: ObjectVariableDeclarationNode): ObjectType","io.github.aplcornell.viaduct.analysis.TypeAnalysis.type"]},{"name":"fun type(node: OutParameterInitializationNode): ObjectType","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis.type","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/type.html","searchKeys":["type","fun type(node: OutParameterInitializationNode): ObjectType","io.github.aplcornell.viaduct.analysis.TypeAnalysis.type"]},{"name":"fun typeTranslator(viaductType: ValueType): TypeName","description":"io.github.aplcornell.viaduct.codegeneration.typeTranslator","location":"compiler/io.github.aplcornell.viaduct.codegeneration/type-translator.html","searchKeys":["typeTranslator","fun typeTranslator(viaductType: ValueType): TypeName","io.github.aplcornell.viaduct.codegeneration.typeTranslator"]},{"name":"fun update(feature: CostFeature, cost: C): Cost<C>","description":"io.github.aplcornell.viaduct.selection.Cost.update","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/update.html","searchKeys":["update","fun update(feature: CostFeature, cost: C): Cost<C>","io.github.aplcornell.viaduct.selection.Cost.update"]},{"name":"fun updaters(node: ObjectVariableDeclarationNode): Set<UpdateNode>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.updaters","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/updaters.html","searchKeys":["updaters","fun updaters(node: ObjectVariableDeclarationNode): Set<UpdateNode>","io.github.aplcornell.viaduct.analysis.NameAnalysis.updaters"]},{"name":"fun validateProtocolAssignment(program: ProgramNode, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>, protocolAssignment: ProtocolAssignment)","description":"io.github.aplcornell.viaduct.selection.validateProtocolAssignment","location":"compiler/io.github.aplcornell.viaduct.selection/validate-protocol-assignment.html","searchKeys":["validateProtocolAssignment","fun validateProtocolAssignment(program: ProgramNode, protocolFactory: ProtocolFactory, protocolComposer: ProtocolComposer, costEstimator: CostEstimator<IntegerCost>, protocolAssignment: ProtocolAssignment)","io.github.aplcornell.viaduct.selection.validateProtocolAssignment"]},{"name":"fun value(value: Value): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.value","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/value.html","searchKeys":["value","fun value(value: Value): CodeBlock","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.value"]},{"name":"fun valueOf(value: String): Associativity","description":"io.github.aplcornell.viaduct.syntax.Associativity.valueOf","location":"compiler/io.github.aplcornell.viaduct.syntax/-associativity/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Associativity","io.github.aplcornell.viaduct.syntax.Associativity.valueOf"]},{"name":"fun valueOf(value: String): DelegationKind","description":"io.github.aplcornell.viaduct.syntax.DelegationKind.valueOf","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-kind/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DelegationKind","io.github.aplcornell.viaduct.syntax.DelegationKind.valueOf"]},{"name":"fun valueOf(value: String): DelegationProjection","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.valueOf","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DelegationProjection","io.github.aplcornell.viaduct.syntax.DelegationProjection.valueOf"]},{"name":"fun valueOf(value: String): Order","description":"io.github.aplcornell.viaduct.syntax.Order.valueOf","location":"compiler/io.github.aplcornell.viaduct.syntax/-order/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Order","io.github.aplcornell.viaduct.syntax.Order.valueOf"]},{"name":"fun valueOf(value: String): ParameterDirection","description":"io.github.aplcornell.viaduct.syntax.ParameterDirection.valueOf","location":"compiler/io.github.aplcornell.viaduct.syntax/-parameter-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ParameterDirection","io.github.aplcornell.viaduct.syntax.ParameterDirection.valueOf"]},{"name":"fun valueOf(value: String): SimpleCostRegime","description":"io.github.aplcornell.viaduct.selection.SimpleCostRegime.valueOf","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-regime/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SimpleCostRegime","io.github.aplcornell.viaduct.selection.SimpleCostRegime.valueOf"]},{"name":"fun values(): Array<Associativity>","description":"io.github.aplcornell.viaduct.syntax.Associativity.values","location":"compiler/io.github.aplcornell.viaduct.syntax/-associativity/values.html","searchKeys":["values","fun values(): Array<Associativity>","io.github.aplcornell.viaduct.syntax.Associativity.values"]},{"name":"fun values(): Array<DelegationKind>","description":"io.github.aplcornell.viaduct.syntax.DelegationKind.values","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-kind/values.html","searchKeys":["values","fun values(): Array<DelegationKind>","io.github.aplcornell.viaduct.syntax.DelegationKind.values"]},{"name":"fun values(): Array<DelegationProjection>","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.values","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/values.html","searchKeys":["values","fun values(): Array<DelegationProjection>","io.github.aplcornell.viaduct.syntax.DelegationProjection.values"]},{"name":"fun values(): Array<Order>","description":"io.github.aplcornell.viaduct.syntax.Order.values","location":"compiler/io.github.aplcornell.viaduct.syntax/-order/values.html","searchKeys":["values","fun values(): Array<Order>","io.github.aplcornell.viaduct.syntax.Order.values"]},{"name":"fun values(): Array<ParameterDirection>","description":"io.github.aplcornell.viaduct.syntax.ParameterDirection.values","location":"compiler/io.github.aplcornell.viaduct.syntax/-parameter-direction/values.html","searchKeys":["values","fun values(): Array<ParameterDirection>","io.github.aplcornell.viaduct.syntax.ParameterDirection.values"]},{"name":"fun values(): Array<SimpleCostRegime>","description":"io.github.aplcornell.viaduct.selection.SimpleCostRegime.values","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-regime/values.html","searchKeys":["values","fun values(): Array<SimpleCostRegime>","io.github.aplcornell.viaduct.selection.SimpleCostRegime.values"]},{"name":"fun variables(node: StatementNode): Set<FunctionVariable>","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.variables","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/variables.html","searchKeys":["variables","fun variables(node: StatementNode): Set<FunctionVariable>","io.github.aplcornell.viaduct.analysis.NameAnalysis.variables"]},{"name":"fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator.viableProtocols","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-constraint-generator/viable-protocols.html","searchKeys":["viableProtocols","fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.selection.SelectionConstraintGenerator.viableProtocols"]},{"name":"fun zero(): IntegerCost","description":"io.github.aplcornell.viaduct.selection.IntegerCost.Companion.zero","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/-companion/zero.html","searchKeys":["zero","fun zero(): IntegerCost","io.github.aplcornell.viaduct.selection.IntegerCost.Companion.zero"]},{"name":"fun zero(): SymbolicCost","description":"io.github.aplcornell.viaduct.selection.SymbolicCost.Companion.zero","location":"compiler/io.github.aplcornell.viaduct.selection/-symbolic-cost/-companion/zero.html","searchKeys":["zero","fun zero(): SymbolicCost","io.github.aplcornell.viaduct.selection.SymbolicCost.Companion.zero"]},{"name":"fun zkpMuxPostprocessor(protocolAssignment: ProtocolAssignment): ProgramPostprocessor","description":"io.github.aplcornell.viaduct.backends.zkp.zkpMuxPostprocessor","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/zkp-mux-postprocessor.html","searchKeys":["zkpMuxPostprocessor","fun zkpMuxPostprocessor(protocolAssignment: ProtocolAssignment): ProgramPostprocessor","io.github.aplcornell.viaduct.backends.zkp.zkpMuxPostprocessor"]},{"name":"inline fun <T : Node> Node.descendantsIsInstance(): Sequence<T>","description":"io.github.aplcornell.viaduct.analysis.descendantsIsInstance","location":"compiler/io.github.aplcornell.viaduct.analysis/descendants-is-instance.html","searchKeys":["descendantsIsInstance","inline fun <T : Node> Node.descendantsIsInstance(): Sequence<T>","io.github.aplcornell.viaduct.analysis.descendantsIsInstance"]},{"name":"inline fun <V : Value> get(label: String): V","description":"io.github.aplcornell.viaduct.parsing.ProtocolArguments.get","location":"compiler/io.github.aplcornell.viaduct.parsing/-protocol-arguments/get.html","searchKeys":["get","inline fun <V : Value> get(label: String): V","io.github.aplcornell.viaduct.parsing.ProtocolArguments.get"]},{"name":"interface AnalysisProvider<Analysis>","description":"io.github.aplcornell.viaduct.analysis.AnalysisProvider","location":"compiler/io.github.aplcornell.viaduct.analysis/-analysis-provider/index.html","searchKeys":["AnalysisProvider","interface AnalysisProvider<Analysis>","io.github.aplcornell.viaduct.analysis.AnalysisProvider"]},{"name":"interface Backend","description":"io.github.aplcornell.viaduct.backends.Backend","location":"compiler/io.github.aplcornell.viaduct.backends/-backend/index.html","searchKeys":["Backend","interface Backend","io.github.aplcornell.viaduct.backends.Backend"]},{"name":"interface BinaryOperator : Operator","description":"io.github.aplcornell.viaduct.syntax.BinaryOperator","location":"compiler/io.github.aplcornell.viaduct.syntax/-binary-operator/index.html","searchKeys":["BinaryOperator","interface BinaryOperator : Operator","io.github.aplcornell.viaduct.syntax.BinaryOperator"]},{"name":"interface BoundedJoinSemiLattice<T : JoinSemiLattice<T>>","description":"io.github.aplcornell.viaduct.algebra.BoundedJoinSemiLattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-bounded-join-semi-lattice/index.html","searchKeys":["BoundedJoinSemiLattice","interface BoundedJoinSemiLattice<T : JoinSemiLattice<T>>","io.github.aplcornell.viaduct.algebra.BoundedJoinSemiLattice"]},{"name":"interface BoundedLattice<T : Lattice<T>> : BoundedJoinSemiLattice<T> , BoundedMeetSemiLattice<T> ","description":"io.github.aplcornell.viaduct.algebra.BoundedLattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-bounded-lattice/index.html","searchKeys":["BoundedLattice","interface BoundedLattice<T : Lattice<T>> : BoundedJoinSemiLattice<T> , BoundedMeetSemiLattice<T> ","io.github.aplcornell.viaduct.algebra.BoundedLattice"]},{"name":"interface BoundedMeetSemiLattice<T : MeetSemiLattice<T>>","description":"io.github.aplcornell.viaduct.algebra.BoundedMeetSemiLattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-bounded-meet-semi-lattice/index.html","searchKeys":["BoundedMeetSemiLattice","interface BoundedMeetSemiLattice<T : MeetSemiLattice<T>>","io.github.aplcornell.viaduct.algebra.BoundedMeetSemiLattice"]},{"name":"interface BoundedTrustLattice<T : TrustLattice<T>>","description":"io.github.aplcornell.viaduct.security.BoundedTrustLattice","location":"compiler/io.github.aplcornell.viaduct.security/-bounded-trust-lattice/index.html","searchKeys":["BoundedTrustLattice","interface BoundedTrustLattice<T : TrustLattice<T>>","io.github.aplcornell.viaduct.security.BoundedTrustLattice"]},{"name":"interface ClosedOperator : Operator","description":"io.github.aplcornell.viaduct.syntax.ClosedOperator","location":"compiler/io.github.aplcornell.viaduct.syntax/-closed-operator/index.html","searchKeys":["ClosedOperator","interface ClosedOperator : Operator","io.github.aplcornell.viaduct.syntax.ClosedOperator"]},{"name":"interface CodeGenerator","description":"io.github.aplcornell.viaduct.codegeneration.CodeGenerator","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator/index.html","searchKeys":["CodeGenerator","interface CodeGenerator","io.github.aplcornell.viaduct.codegeneration.CodeGenerator"]},{"name":"interface CodeGeneratorContext","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-context/index.html","searchKeys":["CodeGeneratorContext","interface CodeGeneratorContext","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorContext"]},{"name":"interface CommunicationNode : HasSourceLocation, PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.intermediate.CommunicationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-communication-node/index.html","searchKeys":["CommunicationNode","interface CommunicationNode : HasSourceLocation, PrettyPrintable","io.github.aplcornell.viaduct.syntax.intermediate.CommunicationNode"]},{"name":"interface CostEstimator<C : CostMonoid<C>>","description":"io.github.aplcornell.viaduct.selection.CostEstimator","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-estimator/index.html","searchKeys":["CostEstimator","interface CostEstimator<C : CostMonoid<C>>","io.github.aplcornell.viaduct.selection.CostEstimator"]},{"name":"interface CostMonoid<C : CostMonoid<C>> : PrettyPrintable","description":"io.github.aplcornell.viaduct.selection.CostMonoid","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-monoid/index.html","searchKeys":["CostMonoid","interface CostMonoid<C : CostMonoid<C>> : PrettyPrintable","io.github.aplcornell.viaduct.selection.CostMonoid"]},{"name":"interface DataFlowEdge<A>","description":"io.github.aplcornell.viaduct.util.dataflow.DataFlowEdge","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-data-flow-edge/index.html","searchKeys":["DataFlowEdge","interface DataFlowEdge<A>","io.github.aplcornell.viaduct.util.dataflow.DataFlowEdge"]},{"name":"interface DataFlowNode<A>","description":"io.github.aplcornell.viaduct.util.dataflow.DataFlowNode","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-data-flow-node/index.html","searchKeys":["DataFlowNode","interface DataFlowNode<A>","io.github.aplcornell.viaduct.util.dataflow.DataFlowNode"]},{"name":"interface HasSourceLocation","description":"io.github.aplcornell.viaduct.syntax.HasSourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax/-has-source-location/index.html","searchKeys":["HasSourceLocation","interface HasSourceLocation","io.github.aplcornell.viaduct.syntax.HasSourceLocation"]},{"name":"interface HeytingAlgebra<T : HeytingAlgebra<T>> : Lattice<T> ","description":"io.github.aplcornell.viaduct.algebra.HeytingAlgebra","location":"compiler/io.github.aplcornell.viaduct.algebra/-heyting-algebra/index.html","searchKeys":["HeytingAlgebra","interface HeytingAlgebra<T : HeytingAlgebra<T>> : Lattice<T> ","io.github.aplcornell.viaduct.algebra.HeytingAlgebra"]},{"name":"interface InfixOperator : Operator","description":"io.github.aplcornell.viaduct.syntax.InfixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax/-infix-operator/index.html","searchKeys":["InfixOperator","interface InfixOperator : Operator","io.github.aplcornell.viaduct.syntax.InfixOperator"]},{"name":"interface JoinSemiLattice<T : JoinSemiLattice<T>>","description":"io.github.aplcornell.viaduct.algebra.JoinSemiLattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-join-semi-lattice/index.html","searchKeys":["JoinSemiLattice","interface JoinSemiLattice<T : JoinSemiLattice<T>>","io.github.aplcornell.viaduct.algebra.JoinSemiLattice"]},{"name":"interface Lattice<T : Lattice<T>> : JoinSemiLattice<T> , MeetSemiLattice<T> ","description":"io.github.aplcornell.viaduct.algebra.Lattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-lattice/index.html","searchKeys":["Lattice","interface Lattice<T : Lattice<T>> : JoinSemiLattice<T> , MeetSemiLattice<T> ","io.github.aplcornell.viaduct.algebra.Lattice"]},{"name":"interface LatticeCongruence<A : Lattice<A>>","description":"io.github.aplcornell.viaduct.algebra.LatticeCongruence","location":"compiler/io.github.aplcornell.viaduct.algebra/-lattice-congruence/index.html","searchKeys":["LatticeCongruence","interface LatticeCongruence<A : Lattice<A>>","io.github.aplcornell.viaduct.algebra.LatticeCongruence"]},{"name":"interface MeetSemiLattice<T : MeetSemiLattice<T>>","description":"io.github.aplcornell.viaduct.algebra.MeetSemiLattice","location":"compiler/io.github.aplcornell.viaduct.algebra/-meet-semi-lattice/index.html","searchKeys":["MeetSemiLattice","interface MeetSemiLattice<T : MeetSemiLattice<T>>","io.github.aplcornell.viaduct.algebra.MeetSemiLattice"]},{"name":"interface MethodName : Name","description":"io.github.aplcornell.viaduct.syntax.datatypes.MethodName","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-method-name/index.html","searchKeys":["MethodName","interface MethodName : Name","io.github.aplcornell.viaduct.syntax.datatypes.MethodName"]},{"name":"interface ObjectVariableDeclarationNode : VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectVariableDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-variable-declaration-node/index.html","searchKeys":["ObjectVariableDeclarationNode","interface ObjectVariableDeclarationNode : VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectVariableDeclarationNode"]},{"name":"interface Operator","description":"io.github.aplcornell.viaduct.syntax.Operator","location":"compiler/io.github.aplcornell.viaduct.syntax/-operator/index.html","searchKeys":["Operator","interface Operator","io.github.aplcornell.viaduct.syntax.Operator"]},{"name":"interface PartialOrder<T>","description":"io.github.aplcornell.viaduct.algebra.PartialOrder","location":"compiler/io.github.aplcornell.viaduct.algebra/-partial-order/index.html","searchKeys":["PartialOrder","interface PartialOrder<T>","io.github.aplcornell.viaduct.algebra.PartialOrder"]},{"name":"interface PostfixOperator : Operator","description":"io.github.aplcornell.viaduct.syntax.PostfixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax/-postfix-operator/index.html","searchKeys":["PostfixOperator","interface PostfixOperator : Operator","io.github.aplcornell.viaduct.syntax.PostfixOperator"]},{"name":"interface Precedence","description":"io.github.aplcornell.viaduct.syntax.Precedence","location":"compiler/io.github.aplcornell.viaduct.syntax/-precedence/index.html","searchKeys":["Precedence","interface Precedence","io.github.aplcornell.viaduct.syntax.Precedence"]},{"name":"interface PrefixOperator : Operator","description":"io.github.aplcornell.viaduct.syntax.PrefixOperator","location":"compiler/io.github.aplcornell.viaduct.syntax/-prefix-operator/index.html","searchKeys":["PrefixOperator","interface PrefixOperator : Operator","io.github.aplcornell.viaduct.syntax.PrefixOperator"]},{"name":"interface ProgramPostprocessor","description":"io.github.aplcornell.viaduct.passes.ProgramPostprocessor","location":"compiler/io.github.aplcornell.viaduct.passes/-program-postprocessor/index.html","searchKeys":["ProgramPostprocessor","interface ProgramPostprocessor","io.github.aplcornell.viaduct.passes.ProgramPostprocessor"]},{"name":"interface ProtocolFactory","description":"io.github.aplcornell.viaduct.selection.ProtocolFactory","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-factory/index.html","searchKeys":["ProtocolFactory","interface ProtocolFactory","io.github.aplcornell.viaduct.selection.ProtocolFactory"]},{"name":"interface ProtocolParser<out P : Protocol>","description":"io.github.aplcornell.viaduct.parsing.ProtocolParser","location":"compiler/io.github.aplcornell.viaduct.parsing/-protocol-parser/index.html","searchKeys":["ProtocolParser","interface ProtocolParser<out P : Protocol>","io.github.aplcornell.viaduct.parsing.ProtocolParser"]},{"name":"interface ProtocolPort","description":"io.github.aplcornell.viaduct.syntax.ProtocolPort","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-port/index.html","searchKeys":["ProtocolPort","interface ProtocolPort","io.github.aplcornell.viaduct.syntax.ProtocolPort"]},{"name":"interface QueryName : MethodName","description":"io.github.aplcornell.viaduct.syntax.datatypes.QueryName","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-query-name/index.html","searchKeys":["QueryName","interface QueryName : MethodName","io.github.aplcornell.viaduct.syntax.datatypes.QueryName"]},{"name":"interface SelectionProblemSolver","description":"io.github.aplcornell.viaduct.selection.SelectionProblemSolver","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-problem-solver/index.html","searchKeys":["SelectionProblemSolver","interface SelectionProblemSolver","io.github.aplcornell.viaduct.selection.SelectionProblemSolver"]},{"name":"interface TreeNode<out Node>","description":"io.github.aplcornell.viaduct.attributes.TreeNode","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree-node/index.html","searchKeys":["TreeNode","interface TreeNode<out Node>","io.github.aplcornell.viaduct.attributes.TreeNode"]},{"name":"interface TrustLattice<T : TrustLattice<T>>","description":"io.github.aplcornell.viaduct.security.TrustLattice","location":"compiler/io.github.aplcornell.viaduct.security/-trust-lattice/index.html","searchKeys":["TrustLattice","interface TrustLattice<T : TrustLattice<T>>","io.github.aplcornell.viaduct.security.TrustLattice"]},{"name":"interface UnaryOperator : Operator","description":"io.github.aplcornell.viaduct.syntax.UnaryOperator","location":"compiler/io.github.aplcornell.viaduct.syntax/-unary-operator/index.html","searchKeys":["UnaryOperator","interface UnaryOperator : Operator","io.github.aplcornell.viaduct.syntax.UnaryOperator"]},{"name":"interface UpdateName : MethodName","description":"io.github.aplcornell.viaduct.syntax.datatypes.UpdateName","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-update-name/index.html","searchKeys":["UpdateName","interface UpdateName : MethodName","io.github.aplcornell.viaduct.syntax.datatypes.UpdateName"]},{"name":"interface VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.circuit.VariableDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-variable-declaration-node/index.html","searchKeys":["VariableDeclarationNode","interface VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.circuit.VariableDeclarationNode"]},{"name":"interface VariableDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.VariableDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-variable-declaration-node/index.html","searchKeys":["VariableDeclarationNode","interface VariableDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.VariableDeclarationNode"]},{"name":"object ABYBackend : Backend","description":"io.github.aplcornell.viaduct.backends.aby.ABYBackend","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-backend/index.html","searchKeys":["ABYBackend","object ABYBackend : Backend","io.github.aplcornell.viaduct.backends.aby.ABYBackend"]},{"name":"object ABYProtocolComposer : AbstractProtocolComposer","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-composer/index.html","searchKeys":["ABYProtocolComposer","object ABYProtocolComposer : AbstractProtocolComposer","io.github.aplcornell.viaduct.backends.aby.ABYProtocolComposer"]},{"name":"object Addition : ArithmeticOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Addition","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-addition/index.html","searchKeys":["Addition","object Addition : ArithmeticOperator","io.github.aplcornell.viaduct.syntax.operators.Addition"]},{"name":"object AdditiveOperatorPrecedence : Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.AdditiveOperatorPrecedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-additive-operator-precedence/index.html","searchKeys":["AdditiveOperatorPrecedence","object AdditiveOperatorPrecedence : Precedence","io.github.aplcornell.viaduct.syntax.operators.AdditiveOperatorPrecedence"]},{"name":"object And : LogicalOperator","description":"io.github.aplcornell.viaduct.syntax.operators.And","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-and/index.html","searchKeys":["And","object And : LogicalOperator","io.github.aplcornell.viaduct.syntax.operators.And"]},{"name":"object ArgumentLabelStyle : Style","description":"io.github.aplcornell.viaduct.syntax.ArgumentLabelStyle","location":"compiler/io.github.aplcornell.viaduct.syntax/-argument-label-style/index.html","searchKeys":["ArgumentLabelStyle","object ArgumentLabelStyle : Style","io.github.aplcornell.viaduct.syntax.ArgumentLabelStyle"]},{"name":"object ArithABYProtocolParser : ProtocolParser<ArithABY> ","description":"io.github.aplcornell.viaduct.backends.aby.ArithABYProtocolParser","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y-protocol-parser/index.html","searchKeys":["ArithABYProtocolParser","object ArithABYProtocolParser : ProtocolParser<ArithABY> ","io.github.aplcornell.viaduct.backends.aby.ArithABYProtocolParser"]},{"name":"object BoolABYProtocolParser : ProtocolParser<BoolABY> ","description":"io.github.aplcornell.viaduct.backends.aby.BoolABYProtocolParser","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y-protocol-parser/index.html","searchKeys":["BoolABYProtocolParser","object BoolABYProtocolParser : ProtocolParser<BoolABY> ","io.github.aplcornell.viaduct.backends.aby.BoolABYProtocolParser"]},{"name":"object ByteVecType : ValueType","description":"io.github.aplcornell.viaduct.syntax.types.ByteVecType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-byte-vec-type/index.html","searchKeys":["ByteVecType","object ByteVecType : ValueType","io.github.aplcornell.viaduct.syntax.types.ByteVecType"]},{"name":"object ClassNameStyle : Style","description":"io.github.aplcornell.viaduct.syntax.datatypes.ClassNameStyle","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-class-name-style/index.html","searchKeys":["ClassNameStyle","object ClassNameStyle : Style","io.github.aplcornell.viaduct.syntax.datatypes.ClassNameStyle"]},{"name":"object CleartextBackend : Backend","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-backend/index.html","searchKeys":["CleartextBackend","object CleartextBackend : Backend","io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend"]},{"name":"object CleartextProtocolComposer : AbstractProtocolComposer","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-protocol-composer/index.html","searchKeys":["CleartextProtocolComposer","object CleartextProtocolComposer : AbstractProtocolComposer","io.github.aplcornell.viaduct.backends.cleartext.CleartextProtocolComposer"]},{"name":"object CodeGenerationBackend : Backend","description":"io.github.aplcornell.viaduct.backends.CodeGenerationBackend","location":"compiler/io.github.aplcornell.viaduct.backends/-code-generation-backend/index.html","searchKeys":["CodeGenerationBackend","object CodeGenerationBackend : Backend","io.github.aplcornell.viaduct.backends.CodeGenerationBackend"]},{"name":"object Colors","description":"io.github.aplcornell.viaduct.util.Colors","location":"compiler/io.github.aplcornell.viaduct.util/-colors/index.html","searchKeys":["Colors","object Colors","io.github.aplcornell.viaduct.util.Colors"]},{"name":"object CommitmentBackend : Backend","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-backend/index.html","searchKeys":["CommitmentBackend","object CommitmentBackend : Backend","io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend"]},{"name":"object CommitmentProtocolComposer : AbstractProtocolComposer","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-composer/index.html","searchKeys":["CommitmentProtocolComposer","object CommitmentProtocolComposer : AbstractProtocolComposer","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolComposer"]},{"name":"object CommitmentProtocolParser : ProtocolParser<Commitment> ","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolParser","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-parser/index.html","searchKeys":["CommitmentProtocolParser","object CommitmentProtocolParser : ProtocolParser<Commitment> ","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolParser"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.Companion","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.Companion","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice-congruence/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.Companion","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-system/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.algebra.solver.ConstraintSystem.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.algebra.solver.Term.Companion","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.algebra.solver.Term.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.aby.ABY.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.aby.ABY.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.cleartext.Cleartext.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.cleartext.Local.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.cleartext.Replication.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.Companion","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.backends.zkp.ZKP.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.parsing.SourceFile.Companion","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.parsing.SourceFile.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.passes.MuxPostprocessor.Companion","location":"compiler/io.github.aplcornell.viaduct.passes/-mux-postprocessor/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.passes.MuxPostprocessor.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.selection.IntegerCost.Companion","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.selection.IntegerCost.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.selection.SimpleCostEstimator.Companion","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-estimator/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.selection.SimpleCostEstimator.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.selection.SymbolicCost.Companion","location":"compiler/io.github.aplcornell.viaduct.selection/-symbolic-cost/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.selection.SymbolicCost.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.syntax.Arguments.Companion","location":"compiler/io.github.aplcornell.viaduct.syntax/-arguments/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.syntax.Arguments.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.syntax.NamedArguments.Companion","location":"compiler/io.github.aplcornell.viaduct.syntax/-named-arguments/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.syntax.NamedArguments.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.syntax.Protocol.Companion","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.syntax.Protocol.Companion"]},{"name":"object Companion","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.Companion","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/-companion/index.html","searchKeys":["Companion","object Companion","io.github.aplcornell.viaduct.syntax.values.HostSetValue.Companion"]},{"name":"object Companion : AnalysisProvider<HostTrustConfiguration> ","description":"io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.Companion","location":"compiler/io.github.aplcornell.viaduct.syntax/-host-trust-configuration/-companion/index.html","searchKeys":["Companion","object Companion : AnalysisProvider<HostTrustConfiguration> ","io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.Companion"]},{"name":"object Companion : AnalysisProvider<InformationFlowAnalysis> ","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.Companion","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/-companion/index.html","searchKeys":["Companion","object Companion : AnalysisProvider<InformationFlowAnalysis> ","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.Companion"]},{"name":"object Companion : AnalysisProvider<NameAnalysis> ","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.Companion","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/-companion/index.html","searchKeys":["Companion","object Companion : AnalysisProvider<NameAnalysis> ","io.github.aplcornell.viaduct.analysis.NameAnalysis.Companion"]},{"name":"object Companion : AnalysisProvider<OutParameterInitializationAnalysis> ","description":"io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis.Companion","location":"compiler/io.github.aplcornell.viaduct.analysis/-out-parameter-initialization-analysis/-companion/index.html","searchKeys":["Companion","object Companion : AnalysisProvider<OutParameterInitializationAnalysis> ","io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis.Companion"]},{"name":"object Companion : AnalysisProvider<TypeAnalysis> ","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis.Companion","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/-companion/index.html","searchKeys":["Companion","object Companion : AnalysisProvider<TypeAnalysis> ","io.github.aplcornell.viaduct.analysis.TypeAnalysis.Companion"]},{"name":"object ComparisonOperatorPrecedence : Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperatorPrecedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator-precedence/index.html","searchKeys":["ComparisonOperatorPrecedence","object ComparisonOperatorPrecedence : Precedence","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperatorPrecedence"]},{"name":"object DefaultCombinedBackend : Backend","description":"io.github.aplcornell.viaduct.backends.DefaultCombinedBackend","location":"compiler/io.github.aplcornell.viaduct.backends/-default-combined-backend/index.html","searchKeys":["DefaultCombinedBackend","object DefaultCombinedBackend : Backend","io.github.aplcornell.viaduct.backends.DefaultCombinedBackend"]},{"name":"object Division : ArithmeticOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Division","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-division/index.html","searchKeys":["Division","object Division : ArithmeticOperator","io.github.aplcornell.viaduct.syntax.operators.Division"]},{"name":"object EqualTo : ComparisonOperator","description":"io.github.aplcornell.viaduct.syntax.operators.EqualTo","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-equal-to/index.html","searchKeys":["EqualTo","object EqualTo : ComparisonOperator","io.github.aplcornell.viaduct.syntax.operators.EqualTo"]},{"name":"object ExclusiveOr : ComparisonOperator","description":"io.github.aplcornell.viaduct.syntax.operators.ExclusiveOr","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-exclusive-or/index.html","searchKeys":["ExclusiveOr","object ExclusiveOr : ComparisonOperator","io.github.aplcornell.viaduct.syntax.operators.ExclusiveOr"]},{"name":"object False : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.False","location":"compiler/io.github.aplcornell.viaduct.selection/-false/index.html","searchKeys":["False","object False : SelectionConstraint","io.github.aplcornell.viaduct.selection.False"]},{"name":"object FunctionNameStyle : Style","description":"io.github.aplcornell.viaduct.syntax.FunctionNameStyle","location":"compiler/io.github.aplcornell.viaduct.syntax/-function-name-style/index.html","searchKeys":["FunctionNameStyle","object FunctionNameStyle : Style","io.github.aplcornell.viaduct.syntax.FunctionNameStyle"]},{"name":"object Get : QueryName","description":"io.github.aplcornell.viaduct.syntax.datatypes.Get","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-get/index.html","searchKeys":["Get","object Get : QueryName","io.github.aplcornell.viaduct.syntax.datatypes.Get"]},{"name":"object GreaterThan : ComparisonOperator","description":"io.github.aplcornell.viaduct.syntax.operators.GreaterThan","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-greater-than/index.html","searchKeys":["GreaterThan","object GreaterThan : ComparisonOperator","io.github.aplcornell.viaduct.syntax.operators.GreaterThan"]},{"name":"object GreaterThanOrEqualTo : ComparisonOperator","description":"io.github.aplcornell.viaduct.syntax.operators.GreaterThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-greater-than-or-equal-to/index.html","searchKeys":["GreaterThanOrEqualTo","object GreaterThanOrEqualTo : ComparisonOperator","io.github.aplcornell.viaduct.syntax.operators.GreaterThanOrEqualTo"]},{"name":"object HighestPrecedence : Precedence","description":"io.github.aplcornell.viaduct.syntax.HighestPrecedence","location":"compiler/io.github.aplcornell.viaduct.syntax/-highest-precedence/index.html","searchKeys":["HighestPrecedence","object HighestPrecedence : Precedence","io.github.aplcornell.viaduct.syntax.HighestPrecedence"]},{"name":"object HostSetType : ValueType","description":"io.github.aplcornell.viaduct.syntax.types.HostSetType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-host-set-type/index.html","searchKeys":["HostSetType","object HostSetType : ValueType","io.github.aplcornell.viaduct.syntax.types.HostSetType"]},{"name":"object HostType : ValueType","description":"io.github.aplcornell.viaduct.syntax.types.HostType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-host-type/index.html","searchKeys":["HostType","object HostType : ValueType","io.github.aplcornell.viaduct.syntax.types.HostType"]},{"name":"object JumpLabelStyle : Style","description":"io.github.aplcornell.viaduct.syntax.JumpLabelStyle","location":"compiler/io.github.aplcornell.viaduct.syntax/-jump-label-style/index.html","searchKeys":["JumpLabelStyle","object JumpLabelStyle : Style","io.github.aplcornell.viaduct.syntax.JumpLabelStyle"]},{"name":"object KeywordStyle : Style","description":"io.github.aplcornell.viaduct.syntax.surface.KeywordStyle","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-keyword-style/index.html","searchKeys":["KeywordStyle","object KeywordStyle : Style","io.github.aplcornell.viaduct.syntax.surface.KeywordStyle"]},{"name":"object LabelBottom : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelBottom","location":"compiler/io.github.aplcornell.viaduct.security/-label-bottom/index.html","searchKeys":["LabelBottom","object LabelBottom : LabelExpression","io.github.aplcornell.viaduct.security.LabelBottom"]},{"name":"object LabelTop : LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelTop","location":"compiler/io.github.aplcornell.viaduct.security/-label-top/index.html","searchKeys":["LabelTop","object LabelTop : LabelExpression","io.github.aplcornell.viaduct.security.LabelTop"]},{"name":"object LessThan : ComparisonOperator","description":"io.github.aplcornell.viaduct.syntax.operators.LessThan","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-less-than/index.html","searchKeys":["LessThan","object LessThan : ComparisonOperator","io.github.aplcornell.viaduct.syntax.operators.LessThan"]},{"name":"object LessThanOrEqualTo : ComparisonOperator","description":"io.github.aplcornell.viaduct.syntax.operators.LessThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-less-than-or-equal-to/index.html","searchKeys":["LessThanOrEqualTo","object LessThanOrEqualTo : ComparisonOperator","io.github.aplcornell.viaduct.syntax.operators.LessThanOrEqualTo"]},{"name":"object LocalProtocolParser : ProtocolParser<Local> ","description":"io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolParser","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local-protocol-parser/index.html","searchKeys":["LocalProtocolParser","object LocalProtocolParser : ProtocolParser<Local> ","io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolParser"]},{"name":"object LogicalOperatorPrecedence : Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperatorPrecedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator-precedence/index.html","searchKeys":["LogicalOperatorPrecedence","object LogicalOperatorPrecedence : Precedence","io.github.aplcornell.viaduct.syntax.operators.LogicalOperatorPrecedence"]},{"name":"object LowestPrecedence : Precedence","description":"io.github.aplcornell.viaduct.syntax.LowestPrecedence","location":"compiler/io.github.aplcornell.viaduct.syntax/-lowest-precedence/index.html","searchKeys":["LowestPrecedence","object LowestPrecedence : Precedence","io.github.aplcornell.viaduct.syntax.LowestPrecedence"]},{"name":"object Maximum : BinaryPrefixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Maximum","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-maximum/index.html","searchKeys":["Maximum","object Maximum : BinaryPrefixOperator","io.github.aplcornell.viaduct.syntax.operators.Maximum"]},{"name":"object MethodNameStyle : Style","description":"io.github.aplcornell.viaduct.syntax.datatypes.MethodNameStyle","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-method-name-style/index.html","searchKeys":["MethodNameStyle","object MethodNameStyle : Style","io.github.aplcornell.viaduct.syntax.datatypes.MethodNameStyle"]},{"name":"object Minimum : BinaryPrefixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Minimum","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-minimum/index.html","searchKeys":["Minimum","object Minimum : BinaryPrefixOperator","io.github.aplcornell.viaduct.syntax.operators.Minimum"]},{"name":"object Multiplication : ArithmeticOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Multiplication","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-multiplication/index.html","searchKeys":["Multiplication","object Multiplication : ArithmeticOperator","io.github.aplcornell.viaduct.syntax.operators.Multiplication"]},{"name":"object MultiplicativeOperatorPrecedence : Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.MultiplicativeOperatorPrecedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-multiplicative-operator-precedence/index.html","searchKeys":["MultiplicativeOperatorPrecedence","object MultiplicativeOperatorPrecedence : Precedence","io.github.aplcornell.viaduct.syntax.operators.MultiplicativeOperatorPrecedence"]},{"name":"object Mux : InfixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Mux","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-mux/index.html","searchKeys":["Mux","object Mux : InfixOperator","io.github.aplcornell.viaduct.syntax.operators.Mux"]},{"name":"object Negation : UnaryPrefixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Negation","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-negation/index.html","searchKeys":["Negation","object Negation : UnaryPrefixOperator","io.github.aplcornell.viaduct.syntax.operators.Negation"]},{"name":"object Not : UnaryPrefixOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Not","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-not/index.html","searchKeys":["Not","object Not : UnaryPrefixOperator","io.github.aplcornell.viaduct.syntax.operators.Not"]},{"name":"object Or : LogicalOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Or","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-or/index.html","searchKeys":["Or","object Or : LogicalOperator","io.github.aplcornell.viaduct.syntax.operators.Or"]},{"name":"object ProtocolNameStyle : Style","description":"io.github.aplcornell.viaduct.syntax.ProtocolNameStyle","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-name-style/index.html","searchKeys":["ProtocolNameStyle","object ProtocolNameStyle : Style","io.github.aplcornell.viaduct.syntax.ProtocolNameStyle"]},{"name":"object ReplicationProtocolParser : ProtocolParser<Replication> ","description":"io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolParser","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication-protocol-parser/index.html","searchKeys":["ReplicationProtocolParser","object ReplicationProtocolParser : ProtocolParser<Replication> ","io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolParser"]},{"name":"object Set : UpdateName","description":"io.github.aplcornell.viaduct.syntax.datatypes.Set","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-set/index.html","searchKeys":["Set","object Set : UpdateName","io.github.aplcornell.viaduct.syntax.datatypes.Set"]},{"name":"object StringType : ValueType","description":"io.github.aplcornell.viaduct.syntax.types.StringType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-string-type/index.html","searchKeys":["StringType","object StringType : ValueType","io.github.aplcornell.viaduct.syntax.types.StringType"]},{"name":"object Subtraction : ArithmeticOperator","description":"io.github.aplcornell.viaduct.syntax.operators.Subtraction","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-subtraction/index.html","searchKeys":["Subtraction","object Subtraction : ArithmeticOperator","io.github.aplcornell.viaduct.syntax.operators.Subtraction"]},{"name":"object True : SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.True","location":"compiler/io.github.aplcornell.viaduct.selection/-true/index.html","searchKeys":["True","object True : SelectionConstraint","io.github.aplcornell.viaduct.selection.True"]},{"name":"object VariableStyle : Style","description":"io.github.aplcornell.viaduct.syntax.VariableStyle","location":"compiler/io.github.aplcornell.viaduct.syntax/-variable-style/index.html","searchKeys":["VariableStyle","object VariableStyle : Style","io.github.aplcornell.viaduct.syntax.VariableStyle"]},{"name":"object YaoABYProtocolParser : ProtocolParser<YaoABY> ","description":"io.github.aplcornell.viaduct.backends.aby.YaoABYProtocolParser","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y-protocol-parser/index.html","searchKeys":["YaoABYProtocolParser","object YaoABYProtocolParser : ProtocolParser<YaoABY> ","io.github.aplcornell.viaduct.backends.aby.YaoABYProtocolParser"]},{"name":"object Z3SelectionProblemSolver : SelectionProblemSolver","description":"io.github.aplcornell.viaduct.selection.Z3SelectionProblemSolver","location":"compiler/io.github.aplcornell.viaduct.selection/-z3-selection-problem-solver/index.html","searchKeys":["Z3SelectionProblemSolver","object Z3SelectionProblemSolver : SelectionProblemSolver","io.github.aplcornell.viaduct.selection.Z3SelectionProblemSolver"]},{"name":"object ZKPBackend : Backend","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPBackend","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-backend/index.html","searchKeys":["ZKPBackend","object ZKPBackend : Backend","io.github.aplcornell.viaduct.backends.zkp.ZKPBackend"]},{"name":"object ZKPProtocolComposer : AbstractProtocolComposer","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-composer/index.html","searchKeys":["ZKPProtocolComposer","object ZKPProtocolComposer : AbstractProtocolComposer","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolComposer"]},{"name":"object ZKPProtocolParser : ProtocolParser<ZKP> ","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolParser","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-parser/index.html","searchKeys":["ZKPProtocolParser","object ZKPProtocolParser : ProtocolParser<ZKP> ","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolParser"]},{"name":"open fun alternativeTypes(): List<FunctionType>","description":"io.github.aplcornell.viaduct.syntax.Operator.alternativeTypes","location":"compiler/io.github.aplcornell.viaduct.syntax/-operator/alternative-types.html","searchKeys":["alternativeTypes","open fun alternativeTypes(): List<FunctionType>","io.github.aplcornell.viaduct.syntax.Operator.alternativeTypes"]},{"name":"open fun asProjection(): ProtocolProjection","description":"io.github.aplcornell.viaduct.syntax.ProtocolPort.asProjection","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-port/as-projection.html","searchKeys":["asProjection","open fun asProjection(): ProtocolProjection","io.github.aplcornell.viaduct.syntax.ProtocolPort.asProjection"]},{"name":"open fun compareTo(other: Precedence): Order","description":"io.github.aplcornell.viaduct.syntax.Precedence.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax/-precedence/compare-to.html","searchKeys":["compareTo","open fun compareTo(other: Precedence): Order","io.github.aplcornell.viaduct.syntax.Precedence.compareTo"]},{"name":"open fun constraint(node: UpdateNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.ProtocolFactory.constraint","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-factory/constraint.html","searchKeys":["constraint","open fun constraint(node: UpdateNode): SelectionConstraint","io.github.aplcornell.viaduct.selection.ProtocolFactory.constraint"]},{"name":"open fun constraint(node: VariableDeclarationNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.ProtocolFactory.constraint","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-factory/constraint.html","searchKeys":["constraint","open fun constraint(node: VariableDeclarationNode): SelectionConstraint","io.github.aplcornell.viaduct.selection.ProtocolFactory.constraint"]},{"name":"open fun guardVisibilityConstraint(protocol: Protocol, node: IfNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.ProtocolFactory.guardVisibilityConstraint","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-factory/guard-visibility-constraint.html","searchKeys":["guardVisibilityConstraint","open fun guardVisibilityConstraint(protocol: Protocol, node: IfNode): SelectionConstraint","io.github.aplcornell.viaduct.selection.ProtocolFactory.guardVisibilityConstraint"]},{"name":"open infix override fun and(that: SecurityLattice<T>): SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.and","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/and.html","searchKeys":["and","open infix override fun and(that: SecurityLattice<T>): SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.and"]},{"name":"open infix override fun imply(that: FreeDistributiveLattice<A>): FreeDistributiveLattice<A>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.imply","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/imply.html","searchKeys":["imply","open infix override fun imply(that: FreeDistributiveLattice<A>): FreeDistributiveLattice<A>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.imply"]},{"name":"open infix override fun join(that: FreeDistributiveLattice<A>): FreeDistributiveLattice<A>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.join","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/join.html","searchKeys":["join","open infix override fun join(that: FreeDistributiveLattice<A>): FreeDistributiveLattice<A>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.join"]},{"name":"open infix override fun join(that: SecurityLattice<T>): SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.join","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/join.html","searchKeys":["join","open infix override fun join(that: SecurityLattice<T>): SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.join"]},{"name":"open infix override fun join(that: Term<C, V>): Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.join","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/join.html","searchKeys":["join","open infix override fun join(that: Term<C, V>): Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.join"]},{"name":"open infix override fun meet(that: FreeDistributiveLattice<A>): FreeDistributiveLattice<A>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.meet","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/meet.html","searchKeys":["meet","open infix override fun meet(that: FreeDistributiveLattice<A>): FreeDistributiveLattice<A>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.meet"]},{"name":"open infix override fun meet(that: SecurityLattice<T>): SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.meet","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/meet.html","searchKeys":["meet","open infix override fun meet(that: SecurityLattice<T>): SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.meet"]},{"name":"open infix override fun meet(that: Term<C, V>): Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.meet","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/meet.html","searchKeys":["meet","open infix override fun meet(that: Term<C, V>): Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.meet"]},{"name":"open infix override fun or(that: SecurityLattice<T>): SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.or","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/or.html","searchKeys":["or","open infix override fun or(that: SecurityLattice<T>): SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.or"]},{"name":"open operator override fun compareTo(other: ArgumentLabel): Int","description":"io.github.aplcornell.viaduct.syntax.ArgumentLabel.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax/-argument-label/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: ArgumentLabel): Int","io.github.aplcornell.viaduct.syntax.ArgumentLabel.compareTo"]},{"name":"open operator override fun compareTo(other: ProtocolName): Int","description":"io.github.aplcornell.viaduct.syntax.ProtocolName.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-name/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: ProtocolName): Int","io.github.aplcornell.viaduct.syntax.ProtocolName.compareTo"]},{"name":"open operator override fun compareTo(other: ProtocolProjection): Int","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: ProtocolProjection): Int","io.github.aplcornell.viaduct.syntax.ProtocolProjection.compareTo"]},{"name":"open operator override fun compareTo(other: SourcePosition): Int","description":"io.github.aplcornell.viaduct.parsing.SourcePosition.compareTo","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: SourcePosition): Int","io.github.aplcornell.viaduct.parsing.SourcePosition.compareTo"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.equals","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType.equals","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.aplcornell.viaduct.syntax.types.FunctionType.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.equals","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.aplcornell.viaduct.syntax.values.HostSetValue.equals"]},{"name":"open operator override fun invoke(variable: V): C","description":"io.github.aplcornell.viaduct.algebra.solver.ConstraintSolution.invoke","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint-solution/invoke.html","searchKeys":["invoke","open operator override fun invoke(variable: V): C","io.github.aplcornell.viaduct.algebra.solver.ConstraintSolution.invoke"]},{"name":"open operator override fun invoke(variable: V): SecurityLattice<C>","description":"io.github.aplcornell.viaduct.security.solver.ConstraintSolution.invoke","location":"compiler/io.github.aplcornell.viaduct.security.solver/-constraint-solution/invoke.html","searchKeys":["invoke","open operator override fun invoke(variable: V): SecurityLattice<C>","io.github.aplcornell.viaduct.security.solver.ConstraintSolution.invoke"]},{"name":"open operator override fun iterator(): MutableIterator<E>","description":"io.github.aplcornell.viaduct.util.UniqueQueue.iterator","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/iterator.html","searchKeys":["iterator","open operator override fun iterator(): MutableIterator<E>","io.github.aplcornell.viaduct.util.UniqueQueue.iterator"]},{"name":"open override fun alternativeTypes(): List<FunctionType>","description":"io.github.aplcornell.viaduct.syntax.operators.Mux.alternativeTypes","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-mux/alternative-types.html","searchKeys":["alternativeTypes","open override fun alternativeTypes(): List<FunctionType>","io.github.aplcornell.viaduct.syntax.operators.Mux.alternativeTypes"]},{"name":"open override fun apply(argument1: Value, argument2: Value): Value","description":"io.github.aplcornell.viaduct.syntax.operators.Maximum.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-maximum/apply.html","searchKeys":["apply","open override fun apply(argument1: Value, argument2: Value): Value","io.github.aplcornell.viaduct.syntax.operators.Maximum.apply"]},{"name":"open override fun apply(argument1: Value, argument2: Value): Value","description":"io.github.aplcornell.viaduct.syntax.operators.Minimum.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-minimum/apply.html","searchKeys":["apply","open override fun apply(argument1: Value, argument2: Value): Value","io.github.aplcornell.viaduct.syntax.operators.Minimum.apply"]},{"name":"open override fun apply(argument: Value): Value","description":"io.github.aplcornell.viaduct.syntax.operators.Negation.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-negation/apply.html","searchKeys":["apply","open override fun apply(argument: Value): Value","io.github.aplcornell.viaduct.syntax.operators.Negation.apply"]},{"name":"open override fun apply(argument: Value): Value","description":"io.github.aplcornell.viaduct.syntax.operators.Not.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-not/apply.html","searchKeys":["apply","open override fun apply(argument: Value): Value","io.github.aplcornell.viaduct.syntax.operators.Not.apply"]},{"name":"open override fun apply(arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.syntax.BinaryOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax/-binary-operator/apply.html","searchKeys":["apply","open override fun apply(arguments: List<Value>): Value","io.github.aplcornell.viaduct.syntax.BinaryOperator.apply"]},{"name":"open override fun apply(arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.syntax.UnaryOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax/-unary-operator/apply.html","searchKeys":["apply","open override fun apply(arguments: List<Value>): Value","io.github.aplcornell.viaduct.syntax.UnaryOperator.apply"]},{"name":"open override fun apply(arguments: List<Value>): Value","description":"io.github.aplcornell.viaduct.syntax.operators.Mux.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-mux/apply.html","searchKeys":["apply","open override fun apply(arguments: List<Value>): Value","io.github.aplcornell.viaduct.syntax.operators.Mux.apply"]},{"name":"open override fun apply(left: Boolean, right: Boolean): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.And.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-and/apply.html","searchKeys":["apply","open override fun apply(left: Boolean, right: Boolean): Boolean","io.github.aplcornell.viaduct.syntax.operators.And.apply"]},{"name":"open override fun apply(left: Boolean, right: Boolean): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.Or.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-or/apply.html","searchKeys":["apply","open override fun apply(left: Boolean, right: Boolean): Boolean","io.github.aplcornell.viaduct.syntax.operators.Or.apply"]},{"name":"open override fun apply(left: Int, right: Int): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.EqualTo.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-equal-to/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Boolean","io.github.aplcornell.viaduct.syntax.operators.EqualTo.apply"]},{"name":"open override fun apply(left: Int, right: Int): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.ExclusiveOr.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-exclusive-or/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Boolean","io.github.aplcornell.viaduct.syntax.operators.ExclusiveOr.apply"]},{"name":"open override fun apply(left: Int, right: Int): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.GreaterThan.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-greater-than/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Boolean","io.github.aplcornell.viaduct.syntax.operators.GreaterThan.apply"]},{"name":"open override fun apply(left: Int, right: Int): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.GreaterThanOrEqualTo.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-greater-than-or-equal-to/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Boolean","io.github.aplcornell.viaduct.syntax.operators.GreaterThanOrEqualTo.apply"]},{"name":"open override fun apply(left: Int, right: Int): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.LessThan.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-less-than/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Boolean","io.github.aplcornell.viaduct.syntax.operators.LessThan.apply"]},{"name":"open override fun apply(left: Int, right: Int): Boolean","description":"io.github.aplcornell.viaduct.syntax.operators.LessThanOrEqualTo.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-less-than-or-equal-to/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Boolean","io.github.aplcornell.viaduct.syntax.operators.LessThanOrEqualTo.apply"]},{"name":"open override fun apply(left: Int, right: Int): Int","description":"io.github.aplcornell.viaduct.syntax.operators.Addition.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-addition/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Int","io.github.aplcornell.viaduct.syntax.operators.Addition.apply"]},{"name":"open override fun apply(left: Int, right: Int): Int","description":"io.github.aplcornell.viaduct.syntax.operators.Division.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-division/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Int","io.github.aplcornell.viaduct.syntax.operators.Division.apply"]},{"name":"open override fun apply(left: Int, right: Int): Int","description":"io.github.aplcornell.viaduct.syntax.operators.Multiplication.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-multiplication/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Int","io.github.aplcornell.viaduct.syntax.operators.Multiplication.apply"]},{"name":"open override fun apply(left: Int, right: Int): Int","description":"io.github.aplcornell.viaduct.syntax.operators.Subtraction.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-subtraction/apply.html","searchKeys":["apply","open override fun apply(left: Int, right: Int): Int","io.github.aplcornell.viaduct.syntax.operators.Subtraction.apply"]},{"name":"open override fun authority(): Label","description":"io.github.aplcornell.viaduct.backends.aby.ABY.authority","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/authority.html","searchKeys":["authority","open override fun authority(): Label","io.github.aplcornell.viaduct.backends.aby.ABY.authority"]},{"name":"open override fun authority(): Label","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.authority","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/authority.html","searchKeys":["authority","open override fun authority(): Label","io.github.aplcornell.viaduct.backends.cleartext.Local.authority"]},{"name":"open override fun authority(): Label","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.authority","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/authority.html","searchKeys":["authority","open override fun authority(): Label","io.github.aplcornell.viaduct.backends.cleartext.Replication.authority"]},{"name":"open override fun authority(): Label","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.authority","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/authority.html","searchKeys":["authority","open override fun authority(): Label","io.github.aplcornell.viaduct.backends.commitment.Commitment.authority"]},{"name":"open override fun authority(): Label","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.authority","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/authority.html","searchKeys":["authority","open override fun authority(): Label","io.github.aplcornell.viaduct.backends.zkp.ZKP.authority"]},{"name":"open override fun clear()","description":"io.github.aplcornell.viaduct.util.UniqueQueue.clear","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/clear.html","searchKeys":["clear","open override fun clear()","io.github.aplcornell.viaduct.util.UniqueQueue.clear"]},{"name":"open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","description":"io.github.aplcornell.viaduct.backends.aby.ABYBackend.codeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-backend/code-generator.html","searchKeys":["codeGenerator","open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","io.github.aplcornell.viaduct.backends.aby.ABYBackend.codeGenerator"]},{"name":"open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.codeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-backend/code-generator.html","searchKeys":["codeGenerator","open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.codeGenerator"]},{"name":"open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.codeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-backend/code-generator.html","searchKeys":["codeGenerator","open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.codeGenerator"]},{"name":"open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.codeGenerator","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-backend/code-generator.html","searchKeys":["codeGenerator","open override fun codeGenerator(context: CodeGeneratorContext): CodeGenerator","io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.codeGenerator"]},{"name":"open override fun communicationCost(source: Protocol, destination: Protocol, host: Host?): Cost<IntegerCost>","description":"io.github.aplcornell.viaduct.selection.SimpleCostEstimator.communicationCost","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-estimator/communication-cost.html","searchKeys":["communicationCost","open override fun communicationCost(source: Protocol, destination: Protocol, host: Host?): Cost<IntegerCost>","io.github.aplcornell.viaduct.selection.SimpleCostEstimator.communicationCost"]},{"name":"open override fun compareTo(other: Precedence): Order","description":"io.github.aplcornell.viaduct.syntax.HighestPrecedence.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax/-highest-precedence/compare-to.html","searchKeys":["compareTo","open override fun compareTo(other: Precedence): Order","io.github.aplcornell.viaduct.syntax.HighestPrecedence.compareTo"]},{"name":"open override fun compareTo(other: Precedence): Order","description":"io.github.aplcornell.viaduct.syntax.LowestPrecedence.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax/-lowest-precedence/compare-to.html","searchKeys":["compareTo","open override fun compareTo(other: Precedence): Order","io.github.aplcornell.viaduct.syntax.LowestPrecedence.compareTo"]},{"name":"open override fun compareTo(other: Precedence): Order","description":"io.github.aplcornell.viaduct.syntax.operators.AdditiveOperatorPrecedence.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-additive-operator-precedence/compare-to.html","searchKeys":["compareTo","open override fun compareTo(other: Precedence): Order","io.github.aplcornell.viaduct.syntax.operators.AdditiveOperatorPrecedence.compareTo"]},{"name":"open override fun compareTo(other: Precedence): Order","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperatorPrecedence.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator-precedence/compare-to.html","searchKeys":["compareTo","open override fun compareTo(other: Precedence): Order","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperatorPrecedence.compareTo"]},{"name":"open override fun compareTo(other: Precedence): Order","description":"io.github.aplcornell.viaduct.syntax.operators.MultiplicativeOperatorPrecedence.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-multiplicative-operator-precedence/compare-to.html","searchKeys":["compareTo","open override fun compareTo(other: Precedence): Order","io.github.aplcornell.viaduct.syntax.operators.MultiplicativeOperatorPrecedence.compareTo"]},{"name":"open override fun concat(other: Cost<C>): Cost<C>","description":"io.github.aplcornell.viaduct.selection.Cost.concat","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/concat.html","searchKeys":["concat","open override fun concat(other: Cost<C>): Cost<C>","io.github.aplcornell.viaduct.selection.Cost.concat"]},{"name":"open override fun concat(other: IntegerCost): IntegerCost","description":"io.github.aplcornell.viaduct.selection.IntegerCost.concat","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/concat.html","searchKeys":["concat","open override fun concat(other: IntegerCost): IntegerCost","io.github.aplcornell.viaduct.selection.IntegerCost.concat"]},{"name":"open override fun concat(other: SymbolicCost): SymbolicCost","description":"io.github.aplcornell.viaduct.selection.SymbolicCost.concat","location":"compiler/io.github.aplcornell.viaduct.selection/-symbolic-cost/concat.html","searchKeys":["concat","open override fun concat(other: SymbolicCost): SymbolicCost","io.github.aplcornell.viaduct.selection.SymbolicCost.concat"]},{"name":"open override fun congruences(): List<FreeDistributiveLattice.LessThanOrEqualTo<PrincipalComponent>>","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.congruences","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/congruences.html","searchKeys":["congruences","open override fun congruences(): List<FreeDistributiveLattice.LessThanOrEqualTo<PrincipalComponent>>","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.congruences"]},{"name":"open override fun congruences(): List<FreeDistributiveLattice.LessThanOrEqualTo<PrincipalComponent>>","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.congruences","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/congruences.html","searchKeys":["congruences","open override fun congruences(): List<FreeDistributiveLattice.LessThanOrEqualTo<PrincipalComponent>>","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.congruences"]},{"name":"open override fun constraint(node: UpdateNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.constraint","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/constraint.html","searchKeys":["constraint","open override fun constraint(node: UpdateNode): SelectionConstraint","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.constraint"]},{"name":"open override fun constraint(node: VariableDeclarationNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.constraint","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/constraint.html","searchKeys":["constraint","open override fun constraint(node: VariableDeclarationNode): SelectionConstraint","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.constraint"]},{"name":"open override fun constraint(node: VariableDeclarationNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.constraint","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-factory/constraint.html","searchKeys":["constraint","open override fun constraint(node: VariableDeclarationNode): SelectionConstraint","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.constraint"]},{"name":"open override fun constructorCall(protocol: Protocol, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.constructorCall","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/constructor-call.html","searchKeys":["constructorCall","open override fun constructorCall(protocol: Protocol, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>): CodeBlock","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.constructorCall"]},{"name":"open override fun copy(children: List<Node>): AssertionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-assertion-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): AssertionNode","io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.copy"]},{"name":"open override fun copy(children: List<Node>): AuthorityDelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): AuthorityDelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.copy"]},{"name":"open override fun copy(children: List<Node>): BlockNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): BlockNode","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.copy"]},{"name":"open override fun copy(children: List<Node>): BreakNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-break-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): BreakNode","io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.copy"]},{"name":"open override fun copy(children: List<Node>): DeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): DeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.copy"]},{"name":"open override fun copy(children: List<Node>): DeclassificationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): DeclassificationNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.copy"]},{"name":"open override fun copy(children: List<Node>): EndorsementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): EndorsementNode","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.copy"]},{"name":"open override fun copy(children: List<Node>): FunctionCallNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): FunctionCallNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.copy"]},{"name":"open override fun copy(children: List<Node>): HostDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-host-declaration-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): HostDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.copy"]},{"name":"open override fun copy(children: List<Node>): IFCDelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): IFCDelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.copy"]},{"name":"open override fun copy(children: List<Node>): IfNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): IfNode","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.copy"]},{"name":"open override fun copy(children: List<Node>): InfiniteLoopNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): InfiniteLoopNode","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.copy"]},{"name":"open override fun copy(children: List<Node>): InputNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): InputNode","io.github.aplcornell.viaduct.syntax.intermediate.InputNode.copy"]},{"name":"open override fun copy(children: List<Node>): LetNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): LetNode","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.copy"]},{"name":"open override fun copy(children: List<Node>): LiteralNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-literal-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): LiteralNode","io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.copy"]},{"name":"open override fun copy(children: List<Node>): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-argument-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): Node","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.copy"]},{"name":"open override fun copy(children: List<Node>): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): Node","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.copy"]},{"name":"open override fun copy(children: List<Node>): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): Node","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.copy"]},{"name":"open override fun copy(children: List<Node>): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-reference-argument-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): Node","io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.copy"]},{"name":"open override fun copy(children: List<Node>): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-argument-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): Node","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.copy"]},{"name":"open override fun copy(children: List<Node>): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): Node","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.copy"]},{"name":"open override fun copy(children: List<Node>): Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): Node","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.copy"]},{"name":"open override fun copy(children: List<Node>): OperatorApplicationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): OperatorApplicationNode","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.copy"]},{"name":"open override fun copy(children: List<Node>): OutParameterConstructorInitializerNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): OutParameterConstructorInitializerNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.copy"]},{"name":"open override fun copy(children: List<Node>): OutParameterInitializationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): OutParameterInitializationNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.copy"]},{"name":"open override fun copy(children: List<Node>): OutputNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): OutputNode","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.copy"]},{"name":"open override fun copy(children: List<Node>): ProgramNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): ProgramNode","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.copy"]},{"name":"open override fun copy(children: List<Node>): QueryNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): QueryNode","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.copy"]},{"name":"open override fun copy(children: List<Node>): ReadNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-read-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): ReadNode","io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.copy"]},{"name":"open override fun copy(children: List<Node>): UpdateNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.copy","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/copy.html","searchKeys":["copy","open override fun copy(children: List<Node>): UpdateNode","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.copy"]},{"name":"open override fun equals(first: FreeDistributiveLattice<A>, second: FreeDistributiveLattice<A>): Boolean","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.equals","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice-congruence/equals.html","searchKeys":["equals","open override fun equals(first: FreeDistributiveLattice<A>, second: FreeDistributiveLattice<A>): Boolean","io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.equals"]},{"name":"open override fun executionCost(stmt: SimpleStatementNode, protocol: Protocol): Cost<IntegerCost>","description":"io.github.aplcornell.viaduct.selection.SimpleCostEstimator.executionCost","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-estimator/execution-cost.html","searchKeys":["executionCost","open override fun executionCost(stmt: SimpleStatementNode, protocol: Protocol): Cost<IntegerCost>","io.github.aplcornell.viaduct.selection.SimpleCostEstimator.executionCost"]},{"name":"open override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.exp","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/exp.html","searchKeys":["exp","open override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.exp"]},{"name":"open override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.exp","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-code-generator/exp.html","searchKeys":["exp","open override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.exp"]},{"name":"open override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.exp","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/exp.html","searchKeys":["exp","open override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.exp"]},{"name":"open override fun featureWeights(): Cost<IntegerCost>","description":"io.github.aplcornell.viaduct.selection.SimpleCostEstimator.featureWeights","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-estimator/feature-weights.html","searchKeys":["featureWeights","open override fun featureWeights(): Cost<IntegerCost>","io.github.aplcornell.viaduct.selection.SimpleCostEstimator.featureWeights"]},{"name":"open override fun get(program: ProgramNode): HostTrustConfiguration","description":"io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.Companion.get","location":"compiler/io.github.aplcornell.viaduct.syntax/-host-trust-configuration/-companion/get.html","searchKeys":["get","open override fun get(program: ProgramNode): HostTrustConfiguration","io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.Companion.get"]},{"name":"open override fun get(program: ProgramNode): InformationFlowAnalysis","description":"io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.Companion.get","location":"compiler/io.github.aplcornell.viaduct.analysis/-information-flow-analysis/-companion/get.html","searchKeys":["get","open override fun get(program: ProgramNode): InformationFlowAnalysis","io.github.aplcornell.viaduct.analysis.InformationFlowAnalysis.Companion.get"]},{"name":"open override fun get(program: ProgramNode): NameAnalysis","description":"io.github.aplcornell.viaduct.analysis.NameAnalysis.Companion.get","location":"compiler/io.github.aplcornell.viaduct.analysis/-name-analysis/-companion/get.html","searchKeys":["get","open override fun get(program: ProgramNode): NameAnalysis","io.github.aplcornell.viaduct.analysis.NameAnalysis.Companion.get"]},{"name":"open override fun get(program: ProgramNode): OutParameterInitializationAnalysis","description":"io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis.Companion.get","location":"compiler/io.github.aplcornell.viaduct.analysis/-out-parameter-initialization-analysis/-companion/get.html","searchKeys":["get","open override fun get(program: ProgramNode): OutParameterInitializationAnalysis","io.github.aplcornell.viaduct.analysis.OutParameterInitializationAnalysis.Companion.get"]},{"name":"open override fun get(program: ProgramNode): TypeAnalysis","description":"io.github.aplcornell.viaduct.analysis.TypeAnalysis.Companion.get","location":"compiler/io.github.aplcornell.viaduct.analysis/-type-analysis/-companion/get.html","searchKeys":["get","open override fun get(program: ProgramNode): TypeAnalysis","io.github.aplcornell.viaduct.analysis.TypeAnalysis.Companion.get"]},{"name":"open override fun getType(query: QueryName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/get-type.html","searchKeys":["getType","open override fun getType(query: QueryName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.getType"]},{"name":"open override fun getType(query: QueryName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/get-type.html","searchKeys":["getType","open override fun getType(query: QueryName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.MutableCellType.getType"]},{"name":"open override fun getType(query: QueryName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.VectorType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/get-type.html","searchKeys":["getType","open override fun getType(query: QueryName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.VectorType.getType"]},{"name":"open override fun getType(update: UpdateName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/get-type.html","searchKeys":["getType","open override fun getType(update: UpdateName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.getType"]},{"name":"open override fun getType(update: UpdateName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/get-type.html","searchKeys":["getType","open override fun getType(update: UpdateName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.MutableCellType.getType"]},{"name":"open override fun getType(update: UpdateName): FunctionType?","description":"io.github.aplcornell.viaduct.syntax.types.VectorType.getType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/get-type.html","searchKeys":["getType","open override fun getType(update: UpdateName): FunctionType?","io.github.aplcornell.viaduct.syntax.types.VectorType.getType"]},{"name":"open override fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.guard","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-code-generator/guard.html","searchKeys":["guard","open override fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.guard"]},{"name":"open override fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.guard","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/guard.html","searchKeys":["guard","open override fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.guard"]},{"name":"open override fun guardVisibilityConstraint(protocol: Protocol, node: IfNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.guardVisibilityConstraint","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/guard-visibility-constraint.html","searchKeys":["guardVisibilityConstraint","open override fun guardVisibilityConstraint(protocol: Protocol, node: IfNode): SelectionConstraint","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.guardVisibilityConstraint"]},{"name":"open override fun guardVisibilityConstraint(protocol: Protocol, node: IfNode): SelectionConstraint","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.guardVisibilityConstraint","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-factory/guard-visibility-constraint.html","searchKeys":["guardVisibilityConstraint","open override fun guardVisibilityConstraint(protocol: Protocol, node: IfNode): SelectionConstraint","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.guardVisibilityConstraint"]},{"name":"open override fun hashCode(): Int","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.hashCode","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType.hashCode","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.aplcornell.viaduct.syntax.types.FunctionType.hashCode"]},{"name":"open override fun hashCode(): Int","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.hashCode","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.aplcornell.viaduct.syntax.values.HostSetValue.hashCode"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelAnd.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-and/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelAnd.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelBottom.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-bottom/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelBottom.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelConfidentiality.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-confidentiality/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelConfidentiality.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelIntegrity.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-integrity/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelIntegrity.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelJoin.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-join/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelJoin.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelLiteral.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-literal/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelLiteral.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelMeet.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-meet/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelMeet.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelOr.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-or/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelOr.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelParameter.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-parameter/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelParameter.interpret"]},{"name":"open override fun interpret(): Label","description":"io.github.aplcornell.viaduct.security.LabelTop.interpret","location":"compiler/io.github.aplcornell.viaduct.security/-label-top/interpret.html","searchKeys":["interpret","open override fun interpret(): Label","io.github.aplcornell.viaduct.security.LabelTop.interpret"]},{"name":"open override fun kotlinType(protocol: Protocol, sourceType: ObjectType): TypeName","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.kotlinType","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/kotlin-type.html","searchKeys":["kotlinType","open override fun kotlinType(protocol: Protocol, sourceType: ObjectType): TypeName","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.kotlinType"]},{"name":"open override fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.kotlinType","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/kotlin-type.html","searchKeys":["kotlinType","open override fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.kotlinType"]},{"name":"open override fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.kotlinType","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/kotlin-type.html","searchKeys":["kotlinType","open override fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.kotlinType"]},{"name":"open override fun lessThanOrEqualTo(first: FreeDistributiveLattice<A>, second: FreeDistributiveLattice<A>): Boolean","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.lessThanOrEqualTo","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice-congruence/less-than-or-equal-to.html","searchKeys":["lessThanOrEqualTo","open override fun lessThanOrEqualTo(first: FreeDistributiveLattice<A>, second: FreeDistributiveLattice<A>): Boolean","io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.lessThanOrEqualTo"]},{"name":"open override fun offer(e: E): Boolean","description":"io.github.aplcornell.viaduct.util.UniqueQueue.offer","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/offer.html","searchKeys":["offer","open override fun offer(e: E): Boolean","io.github.aplcornell.viaduct.util.UniqueQueue.offer"]},{"name":"open override fun parse(arguments: ProtocolArguments): ArithABY","description":"io.github.aplcornell.viaduct.backends.aby.ArithABYProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y-protocol-parser/parse.html","searchKeys":["parse","open override fun parse(arguments: ProtocolArguments): ArithABY","io.github.aplcornell.viaduct.backends.aby.ArithABYProtocolParser.parse"]},{"name":"open override fun parse(arguments: ProtocolArguments): BoolABY","description":"io.github.aplcornell.viaduct.backends.aby.BoolABYProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y-protocol-parser/parse.html","searchKeys":["parse","open override fun parse(arguments: ProtocolArguments): BoolABY","io.github.aplcornell.viaduct.backends.aby.BoolABYProtocolParser.parse"]},{"name":"open override fun parse(arguments: ProtocolArguments): Commitment","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-parser/parse.html","searchKeys":["parse","open override fun parse(arguments: ProtocolArguments): Commitment","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolParser.parse"]},{"name":"open override fun parse(arguments: ProtocolArguments): Local","description":"io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local-protocol-parser/parse.html","searchKeys":["parse","open override fun parse(arguments: ProtocolArguments): Local","io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolParser.parse"]},{"name":"open override fun parse(arguments: ProtocolArguments): Replication","description":"io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication-protocol-parser/parse.html","searchKeys":["parse","open override fun parse(arguments: ProtocolArguments): Replication","io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolParser.parse"]},{"name":"open override fun parse(arguments: ProtocolArguments): YaoABY","description":"io.github.aplcornell.viaduct.backends.aby.YaoABYProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y-protocol-parser/parse.html","searchKeys":["parse","open override fun parse(arguments: ProtocolArguments): YaoABY","io.github.aplcornell.viaduct.backends.aby.YaoABYProtocolParser.parse"]},{"name":"open override fun parse(arguments: ProtocolArguments): ZKP","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolParser.parse","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-parser/parse.html","searchKeys":["parse","open override fun parse(arguments: ProtocolArguments): ZKP","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolParser.parse"]},{"name":"open override fun peek(): E?","description":"io.github.aplcornell.viaduct.util.UniqueQueue.peek","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/peek.html","searchKeys":["peek","open override fun peek(): E?","io.github.aplcornell.viaduct.util.UniqueQueue.peek"]},{"name":"open override fun poll(): E?","description":"io.github.aplcornell.viaduct.util.UniqueQueue.poll","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/poll.html","searchKeys":["poll","open override fun poll(): E?","io.github.aplcornell.viaduct.util.UniqueQueue.poll"]},{"name":"open override fun postprocess(program: ProgramNode): ProgramNode","description":"io.github.aplcornell.viaduct.passes.MuxPostprocessor.postprocess","location":"compiler/io.github.aplcornell.viaduct.passes/-mux-postprocessor/postprocess.html","searchKeys":["postprocess","open override fun postprocess(program: ProgramNode): ProgramNode","io.github.aplcornell.viaduct.passes.MuxPostprocessor.postprocess"]},{"name":"open override fun postprocess(program: ProgramNode): ProgramNode","description":"io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry.postprocess","location":"compiler/io.github.aplcornell.viaduct.passes/-program-postprocessor-registry/postprocess.html","searchKeys":["postprocess","open override fun postprocess(program: ProgramNode): ProgramNode","io.github.aplcornell.viaduct.passes.ProgramPostprocessorRegistry.postprocess"]},{"name":"open override fun propagate(input: A): A","description":"io.github.aplcornell.viaduct.util.dataflow.IdentityEdge.propagate","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-identity-edge/propagate.html","searchKeys":["propagate","open override fun propagate(input: A): A","io.github.aplcornell.viaduct.util.dataflow.IdentityEdge.propagate"]},{"name":"open override fun protocolFactory(program: ProgramNode): ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.CodeGenerationBackend.protocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends/-code-generation-backend/protocol-factory.html","searchKeys":["protocolFactory","open override fun protocolFactory(program: ProgramNode): ProtocolFactory","io.github.aplcornell.viaduct.backends.CodeGenerationBackend.protocolFactory"]},{"name":"open override fun protocolFactory(program: ProgramNode): ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.DefaultCombinedBackend.protocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends/-default-combined-backend/protocol-factory.html","searchKeys":["protocolFactory","open override fun protocolFactory(program: ProgramNode): ProtocolFactory","io.github.aplcornell.viaduct.backends.DefaultCombinedBackend.protocolFactory"]},{"name":"open override fun protocolFactory(program: ProgramNode): ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-backend/protocol-factory.html","searchKeys":["protocolFactory","open override fun protocolFactory(program: ProgramNode): ProtocolFactory","io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocolFactory"]},{"name":"open override fun protocolFactory(program: ProgramNode): ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-backend/protocol-factory.html","searchKeys":["protocolFactory","open override fun protocolFactory(program: ProgramNode): ProtocolFactory","io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocolFactory"]},{"name":"open override fun protocolFactory(program: ProgramNode): ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-backend/protocol-factory.html","searchKeys":["protocolFactory","open override fun protocolFactory(program: ProgramNode): ProtocolFactory","io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocolFactory"]},{"name":"open override fun protocolFactory(program: ProgramNode): ProtocolFactory","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocolFactory","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-backend/protocol-factory.html","searchKeys":["protocolFactory","open override fun protocolFactory(program: ProgramNode): ProtocolFactory","io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocolFactory"]},{"name":"open override fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.receive","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/receive.html","searchKeys":["receive","open override fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.receive"]},{"name":"open override fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.receive","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-code-generator/receive.html","searchKeys":["receive","open override fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.receive"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelAnd.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-and/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelAnd.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelBottom.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-bottom/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelBottom.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelConfidentiality.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-confidentiality/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelConfidentiality.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelIntegrity.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-integrity/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelIntegrity.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelJoin.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-join/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelJoin.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelLiteral.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-literal/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelLiteral.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelMeet.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-meet/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelMeet.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelOr.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-or/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelOr.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelParameter.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-parameter/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelParameter.rename"]},{"name":"open override fun rename(renamer: (String) -> String): LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelTop.rename","location":"compiler/io.github.aplcornell.viaduct.security/-label-top/rename.html","searchKeys":["rename","open override fun rename(renamer: (String) -> String): LabelExpression","io.github.aplcornell.viaduct.security.LabelTop.rename"]},{"name":"open override fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.send","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/send.html","searchKeys":["send","open override fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.send"]},{"name":"open override fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.send","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-code-generator/send.html","searchKeys":["send","open override fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.send"]},{"name":"open override fun setup(protocol: Protocol): Iterable<PropertySpec>","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.setup","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/setup.html","searchKeys":["setup","open override fun setup(protocol: Protocol): Iterable<PropertySpec>","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.setup"]},{"name":"open override fun setup(protocol: Protocol): List<PropertySpec>","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.setup","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/setup.html","searchKeys":["setup","open override fun setup(protocol: Protocol): List<PropertySpec>","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.setup"]},{"name":"open override fun solve(problem: SelectionProblem): ProtocolAssignment?","description":"io.github.aplcornell.viaduct.selection.Z3SelectionProblemSolver.solve","location":"compiler/io.github.aplcornell.viaduct.selection/-z3-selection-problem-solver/solve.html","searchKeys":["solve","open override fun solve(problem: SelectionProblem): ProtocolAssignment?","io.github.aplcornell.viaduct.selection.Z3SelectionProblemSolver.solve"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.HostPrincipal.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-host-principal/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.HostPrincipal.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelAnd.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-and/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelAnd.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelBottom.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-bottom/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelBottom.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelConfidentiality.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-confidentiality/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelConfidentiality.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelIntegrity.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-integrity/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelIntegrity.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelJoin.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-join/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelJoin.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelLiteral.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-literal/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelLiteral.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelMeet.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-meet/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelMeet.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelOr.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-or/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelOr.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelParameter.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-parameter/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelParameter.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.LabelTop.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-label-top/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.LabelTop.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.PolymorphicPrincipal.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-polymorphic-principal/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.PolymorphicPrincipal.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.security.SecurityLattice.toDocument","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.security.SecurityLattice.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.And.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-and/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.And.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.Cost.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.Cost.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.CostAdd.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-add/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.CostAdd.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.CostChoice.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-choice/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.CostChoice.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.CostLiteral.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-literal/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.CostLiteral.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.CostMax.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-max/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.CostMax.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.CostMul.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-mul/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.CostMul.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.False.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-false/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.False.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.FunctionVariable.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-function-variable/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.FunctionVariable.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.GuardVisibilityFlag.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-guard-visibility-flag/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.GuardVisibilityFlag.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.HostVariable.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-host-variable/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.HostVariable.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.Implies.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-implies/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.Implies.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.IntegerCost.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.IntegerCost.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.Literal.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-literal/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.Literal.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.Not.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-not/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.Not.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.Or.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-or/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.Or.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.True.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-true/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.True.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.VariableEquals.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-equals/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.VariableEquals.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.selection.VariableIn.toDocument","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-in/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.selection.VariableIn.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.ArgumentLabel.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-argument-label/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.ArgumentLabel.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.DelegationKind.AUTHORITY.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-kind/-a-u-t-h-o-r-i-t-y/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.DelegationKind.AUTHORITY.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.DelegationKind.IFC.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-kind/-i-f-c/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.DelegationKind.IFC.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.BOTH.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/-b-o-t-h/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.DelegationProjection.BOTH.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.CONFIDENTIALITY.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/-c-o-n-f-i-d-e-n-t-i-a-l-i-t-y/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.DelegationProjection.CONFIDENTIALITY.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.DelegationProjection.INTEGRITY.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-delegation-projection/-i-n-t-e-g-r-i-t-y/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.DelegationProjection.INTEGRITY.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.FunctionName.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-function-name/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.FunctionName.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.JumpLabel.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-jump-label/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.JumpLabel.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.Located.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-located/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.Located.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.ObjectTypeNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.ParameterDirection.IN.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-parameter-direction/-i-n/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.ParameterDirection.IN.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.ParameterDirection.OUT.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-parameter-direction/-o-u-t/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.ParameterDirection.OUT.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.Protocol.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.Protocol.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.ProtocolName.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-name/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.ProtocolName.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.ProtocolProjection.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.Variable.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-variable/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.Variable.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.ArrayType.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-array-type/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.ArrayType.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-bound-parameter-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-block-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-host-declaration-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-index-parameter-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.LetNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-let-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.LetNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-literal-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.LookupNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-lookup-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.LookupNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-application-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-parameter-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-program-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reference-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-return-node/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.circuit.Variable.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-variable/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.circuit.Variable.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.datatypes.ClassName.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-class-name/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.datatypes.ClassName.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.datatypes.MethodName.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-method-name/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.datatypes.MethodName.toDocument"]},{"name":"open override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/to-document.html","searchKeys":["toDocument","open override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.types.FunctionType.toDocument"]},{"name":"open override fun toDocument(argument: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-unary-prefix-operator/to-document.html","searchKeys":["toDocument","open override fun toDocument(argument: PrettyPrintable): Document","io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator.toDocument"]},{"name":"open override fun toDocument(arguments: List<PrettyPrintable>): Document","description":"io.github.aplcornell.viaduct.syntax.BinaryOperator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-binary-operator/to-document.html","searchKeys":["toDocument","open override fun toDocument(arguments: List<PrettyPrintable>): Document","io.github.aplcornell.viaduct.syntax.BinaryOperator.toDocument"]},{"name":"open override fun toDocument(arguments: List<PrettyPrintable>): Document","description":"io.github.aplcornell.viaduct.syntax.UnaryOperator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax/-unary-operator/to-document.html","searchKeys":["toDocument","open override fun toDocument(arguments: List<PrettyPrintable>): Document","io.github.aplcornell.viaduct.syntax.UnaryOperator.toDocument"]},{"name":"open override fun toDocument(arguments: List<PrettyPrintable>): Document","description":"io.github.aplcornell.viaduct.syntax.operators.Mux.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-mux/to-document.html","searchKeys":["toDocument","open override fun toDocument(arguments: List<PrettyPrintable>): Document","io.github.aplcornell.viaduct.syntax.operators.Mux.toDocument"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.toString","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.parsing.SourcePosition.toString","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.parsing.SourcePosition.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.parsing.SourceRange.toString","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.parsing.SourceRange.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.security.ConfidentialityComponent.toString","location":"compiler/io.github.aplcornell.viaduct.security/-confidentiality-component/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.security.ConfidentialityComponent.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.security.HostPrincipal.toString","location":"compiler/io.github.aplcornell.viaduct.security/-host-principal/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.security.HostPrincipal.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.security.IntegrityComponent.toString","location":"compiler/io.github.aplcornell.viaduct.security/-integrity-component/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.security.IntegrityComponent.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.security.PolymorphicPrincipal.toString","location":"compiler/io.github.aplcornell.viaduct.security/-polymorphic-principal/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.security.PolymorphicPrincipal.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.security.SecurityLattice.toString","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.security.SecurityLattice.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.selection.IntegerCost.toString","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.selection.IntegerCost.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.toString","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.ProtocolProjection.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Addition.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-addition/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Addition.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.And.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-and/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.And.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Division.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-division/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Division.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.EqualTo.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-equal-to/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.EqualTo.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.ExclusiveOr.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-exclusive-or/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.ExclusiveOr.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.GreaterThan.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-greater-than/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.GreaterThan.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.GreaterThanOrEqualTo.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-greater-than-or-equal-to/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.GreaterThanOrEqualTo.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.LessThan.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-less-than/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.LessThan.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.LessThanOrEqualTo.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-less-than-or-equal-to/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.LessThanOrEqualTo.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Maximum.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-maximum/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Maximum.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Minimum.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-minimum/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Minimum.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Multiplication.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-multiplication/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Multiplication.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Negation.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-negation/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Negation.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Not.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-not/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Not.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Or.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-or/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Or.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.operators.Subtraction.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-subtraction/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.operators.Subtraction.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.surface.ProgramNode.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-program-node/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.surface.ProgramNode.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.types.ByteVecType.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-byte-vec-type/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.types.ByteVecType.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.types.HostSetType.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-host-set-type/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.types.HostSetType.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.types.HostType.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-host-type/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.types.HostType.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.types.StringType.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-string-type/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.types.StringType.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.values.HostSetValue.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.values.HostValue.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-value/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.values.HostValue.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.syntax.values.StringValue.toString","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-string-value/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.syntax.values.StringValue.toString"]},{"name":"open override fun toString(): String","description":"io.github.aplcornell.viaduct.util.dataflow.IdentityEdge.toString","location":"compiler/io.github.aplcornell.viaduct.util.dataflow/-identity-edge/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.aplcornell.viaduct.util.dataflow.IdentityEdge.toString"]},{"name":"open override fun toSurfaceNode(): AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): ConstructorCallNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): ConstructorCallNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): DeclassificationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): DeclassificationNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): EndorsementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): EndorsementNode","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): ExpressionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-argument-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): ExpressionArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): InputNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): InputNode","io.github.aplcornell.viaduct.syntax.intermediate.InputNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): LiteralNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-literal-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): LiteralNode","io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): ObjectDeclarationArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): ObjectDeclarationArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): ObjectReferenceArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-reference-argument-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): ObjectReferenceArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): OperatorApplicationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): OperatorApplicationNode","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): OutParameterArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-argument-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): OutParameterArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): QueryNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): QueryNode","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(): ReadNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-read-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(): ReadNode","io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): AssertionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-assertion-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): AssertionNode","io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): AuthorityDelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): AuthorityDelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): BlockNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): BlockNode","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): BreakNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-break-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): BreakNode","io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): DeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): DeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): FunctionCallNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): FunctionCallNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): FunctionDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): FunctionDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): HostDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-host-declaration-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): HostDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): IFCDelegationDeclarationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): IFCDelegationDeclarationNode","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): IfNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): IfNode","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): InfiniteLoopNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): InfiniteLoopNode","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): LetNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): LetNode","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): OutParameterInitializationNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): OutParameterInitializationNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): OutputNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): OutputNode","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): ParameterNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): ParameterNode","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): ProgramNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): ProgramNode","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.toSurfaceNode"]},{"name":"open override fun toSurfaceNode(metadata: Metadata): UpdateNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/to-surface-node.html","searchKeys":["toSurfaceNode","open override fun toSurfaceNode(metadata: Metadata): UpdateNode","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.toSurfaceNode"]},{"name":"open override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","description":"io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.update","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-code-generator/update.html","searchKeys":["update","open override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","io.github.aplcornell.viaduct.backends.aby.ABYCodeGenerator.update"]},{"name":"open override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.update","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-code-generator/update.html","searchKeys":["update","open override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","io.github.aplcornell.viaduct.backends.cleartext.CleartextCodeGenerator.update"]},{"name":"open override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.update","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/update.html","searchKeys":["update","open override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.update"]},{"name":"open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.viableProtocols","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/viable-protocols.html","searchKeys":["viableProtocols","open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.viableProtocols"]},{"name":"open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.viableProtocols","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local-protocol-factory/viable-protocols.html","searchKeys":["viableProtocols","open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.viableProtocols"]},{"name":"open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.viableProtocols","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication-protocol-factory/viable-protocols.html","searchKeys":["viableProtocols","open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.viableProtocols"]},{"name":"open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory.viableProtocols","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-factory/viable-protocols.html","searchKeys":["viableProtocols","open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory.viableProtocols"]},{"name":"open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.viableProtocols","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-factory/viable-protocols.html","searchKeys":["viableProtocols","open override fun viableProtocols(node: VariableDeclarationNode): Set<Protocol>","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.viableProtocols"]},{"name":"open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolComposer.visibleGuardHosts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-composer/visible-guard-hosts.html","searchKeys":["visibleGuardHosts","open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","io.github.aplcornell.viaduct.backends.aby.ABYProtocolComposer.visibleGuardHosts"]},{"name":"open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextProtocolComposer.visibleGuardHosts","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-protocol-composer/visible-guard-hosts.html","searchKeys":["visibleGuardHosts","open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","io.github.aplcornell.viaduct.backends.cleartext.CleartextProtocolComposer.visibleGuardHosts"]},{"name":"open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolComposer.visibleGuardHosts","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-composer/visible-guard-hosts.html","searchKeys":["visibleGuardHosts","open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolComposer.visibleGuardHosts"]},{"name":"open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolComposer.visibleGuardHosts","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-composer/visible-guard-hosts.html","searchKeys":["visibleGuardHosts","open override fun visibleGuardHosts(protocol: Protocol): Set<Host>","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolComposer.visibleGuardHosts"]},{"name":"open override fun zero(): Cost<C>","description":"io.github.aplcornell.viaduct.selection.Cost.zero","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/zero.html","searchKeys":["zero","open override fun zero(): Cost<C>","io.github.aplcornell.viaduct.selection.Cost.zero"]},{"name":"open override fun zero(): IntegerCost","description":"io.github.aplcornell.viaduct.selection.IntegerCost.zero","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/zero.html","searchKeys":["zero","open override fun zero(): IntegerCost","io.github.aplcornell.viaduct.selection.IntegerCost.zero"]},{"name":"open override fun zero(): SymbolicCost","description":"io.github.aplcornell.viaduct.selection.SymbolicCost.zero","location":"compiler/io.github.aplcornell.viaduct.selection/-symbolic-cost/zero.html","searchKeys":["zero","open override fun zero(): SymbolicCost","io.github.aplcornell.viaduct.selection.SymbolicCost.zero"]},{"name":"open override fun zeroCost(): Cost<IntegerCost>","description":"io.github.aplcornell.viaduct.selection.SimpleCostEstimator.zeroCost","location":"compiler/io.github.aplcornell.viaduct.selection/-simple-cost-estimator/zero-cost.html","searchKeys":["zeroCost","open override fun zeroCost(): Cost<IntegerCost>","io.github.aplcornell.viaduct.selection.SimpleCostEstimator.zeroCost"]},{"name":"open override val arguments: Map<String, Value>","description":"io.github.aplcornell.viaduct.backends.aby.ABY.arguments","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/arguments.html","searchKeys":["arguments","open override val arguments: Map<String, Value>","io.github.aplcornell.viaduct.backends.aby.ABY.arguments"]},{"name":"open override val arguments: Map<String, Value>","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.arguments","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/arguments.html","searchKeys":["arguments","open override val arguments: Map<String, Value>","io.github.aplcornell.viaduct.backends.cleartext.Local.arguments"]},{"name":"open override val arguments: Map<String, Value>","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.arguments","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/arguments.html","searchKeys":["arguments","open override val arguments: Map<String, Value>","io.github.aplcornell.viaduct.backends.cleartext.Replication.arguments"]},{"name":"open override val arguments: Map<String, Value>","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.arguments","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/arguments.html","searchKeys":["arguments","open override val arguments: Map<String, Value>","io.github.aplcornell.viaduct.backends.commitment.Commitment.arguments"]},{"name":"open override val arguments: Map<String, Value>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.arguments","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/arguments.html","searchKeys":["arguments","open override val arguments: Map<String, Value>","io.github.aplcornell.viaduct.backends.zkp.ZKP.arguments"]},{"name":"open override val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.ClosedOperator.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax/-closed-operator/associativity.html","searchKeys":["associativity","open override val associativity: Associativity","io.github.aplcornell.viaduct.syntax.ClosedOperator.associativity"]},{"name":"open override val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.PostfixOperator.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax/-postfix-operator/associativity.html","searchKeys":["associativity","open override val associativity: Associativity","io.github.aplcornell.viaduct.syntax.PostfixOperator.associativity"]},{"name":"open override val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.PrefixOperator.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax/-prefix-operator/associativity.html","searchKeys":["associativity","open override val associativity: Associativity","io.github.aplcornell.viaduct.syntax.PrefixOperator.associativity"]},{"name":"open override val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.operators.Mux.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-mux/associativity.html","searchKeys":["associativity","open override val associativity: Associativity","io.github.aplcornell.viaduct.syntax.operators.Mux.associativity"]},{"name":"open override val body: BlockNode","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/body.html","searchKeys":["body","open override val body: BlockNode","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.body"]},{"name":"open override val body: BlockNode","description":"io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-infinite-loop-node/body.html","searchKeys":["body","open override val body: BlockNode","io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.body"]},{"name":"open override val body: BlockNode","description":"io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-while-loop-node/body.html","searchKeys":["body","open override val body: BlockNode","io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.body"]},{"name":"open override val bottom: SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.bottom","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-bounds/bottom.html","searchKeys":["bottom","open override val bottom: SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.bottom"]},{"name":"open override val bottom: Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.Bounds.bottom","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/-bounds/bottom.html","searchKeys":["bottom","open override val bottom: Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.Bounds.bottom"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-assertion-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.children"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.children"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.children"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.children"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.children"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.children"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.children"]},{"name":"open override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/children.html","searchKeys":["children","open override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.children"]},{"name":"open override val children: Iterable<BlockNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/children.html","searchKeys":["children","open override val children: Iterable<BlockNode>","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.children"]},{"name":"open override val children: Iterable<BlockNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/children.html","searchKeys":["children","open override val children: Iterable<BlockNode>","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.children"]},{"name":"open override val children: Iterable<BlockNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/children.html","searchKeys":["children","open override val children: Iterable<BlockNode>","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.children"]},{"name":"open override val children: Iterable<BlockNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/children.html","searchKeys":["children","open override val children: Iterable<BlockNode>","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.children"]},{"name":"open override val children: Iterable<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-argument-node/children.html","searchKeys":["children","open override val children: Iterable<ExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.children"]},{"name":"open override val children: Iterable<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/children.html","searchKeys":["children","open override val children: Iterable<ExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.children"]},{"name":"open override val children: Iterable<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/children.html","searchKeys":["children","open override val children: Iterable<ExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.children"]},{"name":"open override val children: Iterable<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-reference-argument-node/children.html","searchKeys":["children","open override val children: Iterable<ExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.children"]},{"name":"open override val children: Iterable<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-argument-node/children.html","searchKeys":["children","open override val children: Iterable<ExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.children"]},{"name":"open override val children: Iterable<Node>","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/children.html","searchKeys":["children","open override val children: Iterable<Node>","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.children"]},{"name":"open override val children: Iterable<Node>","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/children.html","searchKeys":["children","open override val children: Iterable<Node>","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.children"]},{"name":"open override val children: Iterable<Node>","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/children.html","searchKeys":["children","open override val children: Iterable<Node>","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.children"]},{"name":"open override val children: Iterable<Nothing>","description":"io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-break-node/children.html","searchKeys":["children","open override val children: Iterable<Nothing>","io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.children"]},{"name":"open override val children: Iterable<Nothing>","description":"io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-host-declaration-node/children.html","searchKeys":["children","open override val children: Iterable<Nothing>","io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.children"]},{"name":"open override val children: Iterable<Nothing>","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/children.html","searchKeys":["children","open override val children: Iterable<Nothing>","io.github.aplcornell.viaduct.syntax.intermediate.InputNode.children"]},{"name":"open override val children: Iterable<OutParameterInitializerNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/children.html","searchKeys":["children","open override val children: Iterable<OutParameterInitializerNode>","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.children"]},{"name":"open override val children: Iterable<StatementNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/children.html","searchKeys":["children","open override val children: Iterable<StatementNode>","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.children"]},{"name":"open override val children: Iterable<TopLevelDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/children.html","searchKeys":["children","open override val children: Iterable<TopLevelDeclarationNode>","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.children"]},{"name":"open override val className: ClassName","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.className","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/class-name.html","searchKeys":["className","open override val className: ClassName","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.className"]},{"name":"open override val className: ClassName","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType.className","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/class-name.html","searchKeys":["className","open override val className: ClassName","io.github.aplcornell.viaduct.syntax.types.MutableCellType.className"]},{"name":"open override val className: ClassName","description":"io.github.aplcornell.viaduct.syntax.types.VectorType.className","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/class-name.html","searchKeys":["className","open override val className: ClassName","io.github.aplcornell.viaduct.syntax.types.VectorType.className"]},{"name":"open override val comment: String?","description":"io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-authority-delegation-declaration-node/comment.html","searchKeys":["comment","open override val comment: String?","io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.comment"]},{"name":"open override val comment: String?","description":"io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-delegation-declaration-node/comment.html","searchKeys":["comment","open override val comment: String?","io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.comment"]},{"name":"open override val comment: String?","description":"io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-i-f-c-delegation-declaration-node/comment.html","searchKeys":["comment","open override val comment: String?","io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.comment"]},{"name":"open override val comment: String?","description":"io.github.aplcornell.viaduct.syntax.surface.ProgramNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-program-node/comment.html","searchKeys":["comment","open override val comment: String?","io.github.aplcornell.viaduct.syntax.surface.ProgramNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.AssertionNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-assertion-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.AssertionNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.BlockNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-block-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.BlockNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.BreakNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-break-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.BreakNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declaration-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-call-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-host-declaration-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.IfNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-if-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.IfNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-infinite-loop-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.LetNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-let-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.LetNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-initialization-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.OutputNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-output-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.OutputNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.ParameterNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.SkipNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-skip-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.SkipNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.UpdateNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-update-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.UpdateNode.comment"]},{"name":"open override val comment: String? = null","description":"io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-while-loop-node/comment.html","searchKeys":["comment","open override val comment: String? = null","io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.comment"]},{"name":"open override val constructorArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.constructorArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/constructor-arguments.html","searchKeys":["constructorArguments","open override val constructorArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.constructorArguments"]},{"name":"open override val constructorArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType.constructorArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/constructor-arguments.html","searchKeys":["constructorArguments","open override val constructorArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.MutableCellType.constructorArguments"]},{"name":"open override val constructorArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.VectorType.constructorArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/constructor-arguments.html","searchKeys":["constructorArguments","open override val constructorArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.VectorType.constructorArguments"]},{"name":"open override val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.ByteVecType.defaultValue","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-byte-vec-type/default-value.html","searchKeys":["defaultValue","open override val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.ByteVecType.defaultValue"]},{"name":"open override val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.HostSetType.defaultValue","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-host-set-type/default-value.html","searchKeys":["defaultValue","open override val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.HostSetType.defaultValue"]},{"name":"open override val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.HostType.defaultValue","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-host-type/default-value.html","searchKeys":["defaultValue","open override val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.HostType.defaultValue"]},{"name":"open override val defaultValue: Value","description":"io.github.aplcornell.viaduct.syntax.types.StringType.defaultValue","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-string-type/default-value.html","searchKeys":["defaultValue","open override val defaultValue: Value","io.github.aplcornell.viaduct.syntax.types.StringType.defaultValue"]},{"name":"open override val delegationProjection: DelegationProjection","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.delegationProjection","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/delegation-projection.html","searchKeys":["delegationProjection","open override val delegationProjection: DelegationProjection","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.delegationProjection"]},{"name":"open override val delegationProjection: DelegationProjection","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.delegationProjection","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/delegation-projection.html","searchKeys":["delegationProjection","open override val delegationProjection: DelegationProjection","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.delegationProjection"]},{"name":"open override val delegationProjection: DelegationProjection","description":"io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.delegationProjection","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-authority-delegation-declaration-node/delegation-projection.html","searchKeys":["delegationProjection","open override val delegationProjection: DelegationProjection","io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.delegationProjection"]},{"name":"open override val delegationProjection: DelegationProjection","description":"io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.delegationProjection","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-i-f-c-delegation-declaration-node/delegation-projection.html","searchKeys":["delegationProjection","open override val delegationProjection: DelegationProjection","io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.delegationProjection"]},{"name":"open override val expression: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/expression.html","searchKeys":["expression","open override val expression: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.expression"]},{"name":"open override val expression: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/expression.html","searchKeys":["expression","open override val expression: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.expression"]},{"name":"open override val expression: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declassification-node/expression.html","searchKeys":["expression","open override val expression: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.expression"]},{"name":"open override val expression: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-endorsement-node/expression.html","searchKeys":["expression","open override val expression: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.expression"]},{"name":"open override val foregroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.syntax.JumpLabelStyle.foregroundColor","location":"compiler/io.github.aplcornell.viaduct.syntax/-jump-label-style/foreground-color.html","searchKeys":["foregroundColor","open override val foregroundColor: AnsiColor","io.github.aplcornell.viaduct.syntax.JumpLabelStyle.foregroundColor"]},{"name":"open override val foregroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.syntax.VariableStyle.foregroundColor","location":"compiler/io.github.aplcornell.viaduct.syntax/-variable-style/foreground-color.html","searchKeys":["foregroundColor","open override val foregroundColor: AnsiColor","io.github.aplcornell.viaduct.syntax.VariableStyle.foregroundColor"]},{"name":"open override val foregroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.syntax.datatypes.MethodNameStyle.foregroundColor","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-method-name-style/foreground-color.html","searchKeys":["foregroundColor","open override val foregroundColor: AnsiColor","io.github.aplcornell.viaduct.syntax.datatypes.MethodNameStyle.foregroundColor"]},{"name":"open override val foregroundColor: AnsiColor","description":"io.github.aplcornell.viaduct.syntax.surface.KeywordStyle.foregroundColor","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-keyword-style/foreground-color.html","searchKeys":["foregroundColor","open override val foregroundColor: AnsiColor","io.github.aplcornell.viaduct.syntax.surface.KeywordStyle.foregroundColor"]},{"name":"open override val from: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.from","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/from.html","searchKeys":["from","open override val from: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.from"]},{"name":"open override val from: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.from","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/from.html","searchKeys":["from","open override val from: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.from"]},{"name":"open override val from: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.from","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-authority-delegation-declaration-node/from.html","searchKeys":["from","open override val from: LabelNode","io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.from"]},{"name":"open override val from: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.from","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-i-f-c-delegation-declaration-node/from.html","searchKeys":["from","open override val from: LabelNode","io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.from"]},{"name":"open override val fromLabel: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.fromLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/from-label.html","searchKeys":["fromLabel","open override val fromLabel: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.fromLabel"]},{"name":"open override val fromLabel: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.fromLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-endorsement-node/from-label.html","searchKeys":["fromLabel","open override val fromLabel: LabelNode","io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.fromLabel"]},{"name":"open override val fromLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.fromLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/from-label.html","searchKeys":["fromLabel","open override val fromLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.fromLabel"]},{"name":"open override val fromLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.fromLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declassification-node/from-label.html","searchKeys":["fromLabel","open override val fromLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.fromLabel"]},{"name":"open override val host: Host","description":"io.github.aplcornell.viaduct.syntax.InputPort.host","location":"compiler/io.github.aplcornell.viaduct.syntax/-input-port/host.html","searchKeys":["host","open override val host: Host","io.github.aplcornell.viaduct.syntax.InputPort.host"]},{"name":"open override val host: Host","description":"io.github.aplcornell.viaduct.syntax.OutputPort.host","location":"compiler/io.github.aplcornell.viaduct.syntax/-output-port/host.html","searchKeys":["host","open override val host: Host","io.github.aplcornell.viaduct.syntax.OutputPort.host"]},{"name":"open override val host: HostNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode.host","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/host.html","searchKeys":["host","open override val host: HostNode","io.github.aplcornell.viaduct.syntax.intermediate.InputNode.host"]},{"name":"open override val host: HostNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.host","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/host.html","searchKeys":["host","open override val host: HostNode","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.host"]},{"name":"open override val id: PortId","description":"io.github.aplcornell.viaduct.syntax.InputPort.id","location":"compiler/io.github.aplcornell.viaduct.syntax/-input-port/id.html","searchKeys":["id","open override val id: PortId","io.github.aplcornell.viaduct.syntax.InputPort.id"]},{"name":"open override val id: PortId","description":"io.github.aplcornell.viaduct.syntax.OutputPort.id","location":"compiler/io.github.aplcornell.viaduct.syntax/-output-port/id.html","searchKeys":["id","open override val id: PortId","io.github.aplcornell.viaduct.syntax.OutputPort.id"]},{"name":"open override val jumpLabel: JumpLabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.jumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/jump-label.html","searchKeys":["jumpLabel","open override val jumpLabel: JumpLabelNode?","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.jumpLabel"]},{"name":"open override val jumpLabel: JumpLabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.jumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-infinite-loop-node/jump-label.html","searchKeys":["jumpLabel","open override val jumpLabel: JumpLabelNode?","io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.jumpLabel"]},{"name":"open override val jumpLabel: JumpLabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.jumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-while-loop-node/jump-label.html","searchKeys":["jumpLabel","open override val jumpLabel: JumpLabelNode?","io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.jumpLabel"]},{"name":"open override val name: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/name.html","searchKeys":["name","open override val name: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.name"]},{"name":"open override val name: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/name.html","searchKeys":["name","open override val name: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.name"]},{"name":"open override val name: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/name.html","searchKeys":["name","open override val name: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.ArgumentLabel.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-argument-label/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.ArgumentLabel.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.FunctionName.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-function-name/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.FunctionName.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.JumpLabel.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-jump-label/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.JumpLabel.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.LabelVariable.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-label-variable/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.LabelVariable.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.ObjectVariable.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-variable/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.ObjectVariable.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.ProtocolName.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-name/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.ProtocolName.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.ProtocolProjection.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.Temporary.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-temporary/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.Temporary.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.circuit.Variable.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-variable/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.circuit.Variable.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.ClassName.name","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-class-name/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.datatypes.ClassName.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.Get.name","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-get/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.datatypes.Get.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.Modify.name","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-modify/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.datatypes.Modify.name"]},{"name":"open override val name: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.Set.name","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-set/name.html","searchKeys":["name","open override val name: String","io.github.aplcornell.viaduct.syntax.datatypes.Set.name"]},{"name":"open override val name: TemporaryNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/name.html","searchKeys":["name","open override val name: TemporaryNode","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.name"]},{"name":"open override val name: VariableNode","description":"io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-bound-parameter-node/name.html","searchKeys":["name","open override val name: VariableNode","io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.name"]},{"name":"open override val name: VariableNode","description":"io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-index-parameter-node/name.html","searchKeys":["name","open override val name: VariableNode","io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.name"]},{"name":"open override val name: VariableNode","description":"io.github.aplcornell.viaduct.syntax.circuit.LetNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-let-node/name.html","searchKeys":["name","open override val name: VariableNode","io.github.aplcornell.viaduct.syntax.circuit.LetNode.name"]},{"name":"open override val name: VariableNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-parameter-node/name.html","searchKeys":["name","open override val name: VariableNode","io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.name"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.ArgumentLabel.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-argument-label/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.ArgumentLabel.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.FunctionName.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-function-name/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.FunctionName.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.JumpLabel.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-jump-label/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.JumpLabel.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.LabelVariable.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-label-variable/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.LabelVariable.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.ObjectVariable.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-variable/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.ObjectVariable.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.ProtocolName.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-name/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.ProtocolName.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.ProtocolProjection.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.Temporary.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-temporary/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.Temporary.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.circuit.Variable.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-variable/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.circuit.Variable.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.ClassName.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-class-name/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.datatypes.ClassName.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.MethodName.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-method-name/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.datatypes.MethodName.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.QueryName.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-query-name/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.datatypes.QueryName.nameCategory"]},{"name":"open override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.datatypes.UpdateName.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-update-name/name-category.html","searchKeys":["nameCategory","open override val nameCategory: String","io.github.aplcornell.viaduct.syntax.datatypes.UpdateName.nameCategory"]},{"name":"open override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.Addition.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-addition/precedence.html","searchKeys":["precedence","open override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.Addition.precedence"]},{"name":"open override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.Division.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-division/precedence.html","searchKeys":["precedence","open override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.Division.precedence"]},{"name":"open override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.Maximum.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-maximum/precedence.html","searchKeys":["precedence","open override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.Maximum.precedence"]},{"name":"open override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.Minimum.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-minimum/precedence.html","searchKeys":["precedence","open override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.Minimum.precedence"]},{"name":"open override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.Multiplication.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-multiplication/precedence.html","searchKeys":["precedence","open override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.Multiplication.precedence"]},{"name":"open override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.Mux.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-mux/precedence.html","searchKeys":["precedence","open override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.Mux.precedence"]},{"name":"open override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.Subtraction.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-subtraction/precedence.html","searchKeys":["precedence","open override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.Subtraction.precedence"]},{"name":"open override val principal: A","description":"io.github.aplcornell.viaduct.security.ConfidentialityComponent.principal","location":"compiler/io.github.aplcornell.viaduct.security/-confidentiality-component/principal.html","searchKeys":["principal","open override val principal: A","io.github.aplcornell.viaduct.security.ConfidentialityComponent.principal"]},{"name":"open override val principal: A","description":"io.github.aplcornell.viaduct.security.IntegrityComponent.principal","location":"compiler/io.github.aplcornell.viaduct.security/-integrity-component/principal.html","searchKeys":["principal","open override val principal: A","io.github.aplcornell.viaduct.security.IntegrityComponent.principal"]},{"name":"open override val protocol: Protocol","description":"io.github.aplcornell.viaduct.syntax.InputPort.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax/-input-port/protocol.html","searchKeys":["protocol","open override val protocol: Protocol","io.github.aplcornell.viaduct.syntax.InputPort.protocol"]},{"name":"open override val protocol: Protocol","description":"io.github.aplcornell.viaduct.syntax.OutputPort.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax/-output-port/protocol.html","searchKeys":["protocol","open override val protocol: Protocol","io.github.aplcornell.viaduct.syntax.OutputPort.protocol"]},{"name":"open override val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/protocol.html","searchKeys":["protocol","open override val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.protocol"]},{"name":"open override val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/protocol.html","searchKeys":["protocol","open override val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.protocol"]},{"name":"open override val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/protocol.html","searchKeys":["protocol","open override val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.protocol"]},{"name":"open override val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/protocol.html","searchKeys":["protocol","open override val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.protocol"]},{"name":"open override val protocolComposer: ProtocolComposer","description":"io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-backend/protocol-composer.html","searchKeys":["protocolComposer","open override val protocolComposer: ProtocolComposer","io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocolComposer"]},{"name":"open override val protocolComposer: ProtocolComposer","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-backend/protocol-composer.html","searchKeys":["protocolComposer","open override val protocolComposer: ProtocolComposer","io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocolComposer"]},{"name":"open override val protocolComposer: ProtocolComposer","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-backend/protocol-composer.html","searchKeys":["protocolComposer","open override val protocolComposer: ProtocolComposer","io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocolComposer"]},{"name":"open override val protocolComposer: ProtocolComposer","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-backend/protocol-composer.html","searchKeys":["protocolComposer","open override val protocolComposer: ProtocolComposer","io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocolComposer"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.aby.ArithABY.protocolName"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.aby.BoolABY.protocolName"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.aby.YaoABY.protocolName"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.cleartext.Local.protocolName"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.cleartext.Replication.protocolName"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.commitment.Commitment.protocolName"]},{"name":"open override val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/protocol-name.html","searchKeys":["protocolName","open override val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.zkp.ZKP.protocolName"]},{"name":"open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","description":"io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocolParsers","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-backend/protocol-parsers.html","searchKeys":["protocolParsers","open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocolParsers"]},{"name":"open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocolParsers","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-backend/protocol-parsers.html","searchKeys":["protocolParsers","open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocolParsers"]},{"name":"open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocolParsers","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-backend/protocol-parsers.html","searchKeys":["protocolParsers","open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocolParsers"]},{"name":"open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocolParsers","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-backend/protocol-parsers.html","searchKeys":["protocolParsers","open override val protocolParsers: Map<ProtocolName, ProtocolParser<Protocol>>","io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocolParsers"]},{"name":"open override val protocols: Set<ProtocolName>","description":"io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocols","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-backend/protocols.html","searchKeys":["protocols","open override val protocols: Set<ProtocolName>","io.github.aplcornell.viaduct.backends.aby.ABYBackend.protocols"]},{"name":"open override val protocols: Set<ProtocolName>","description":"io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocols","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-cleartext-backend/protocols.html","searchKeys":["protocols","open override val protocols: Set<ProtocolName>","io.github.aplcornell.viaduct.backends.cleartext.CleartextBackend.protocols"]},{"name":"open override val protocols: Set<ProtocolName>","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocols","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-backend/protocols.html","searchKeys":["protocols","open override val protocols: Set<ProtocolName>","io.github.aplcornell.viaduct.backends.commitment.CommitmentBackend.protocols"]},{"name":"open override val protocols: Set<ProtocolName>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocols","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-backend/protocols.html","searchKeys":["protocols","open override val protocols: Set<ProtocolName>","io.github.aplcornell.viaduct.backends.zkp.ZKPBackend.protocols"]},{"name":"open override val size: Int","description":"io.github.aplcornell.viaduct.util.UniqueQueue.size","location":"compiler/io.github.aplcornell.viaduct.util/-unique-queue/size.html","searchKeys":["size","open override val size: Int","io.github.aplcornell.viaduct.util.UniqueQueue.size"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.Arguments.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax/-arguments/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.Arguments.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.Located.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax/-located/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.Located.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.NamedArguments.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax/-named-arguments/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.NamedArguments.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.ObjectTypeNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-bound-parameter-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.BoundParameterNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-block-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-host-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-index-parameter-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.LetNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-let-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.LetNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-literal-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.LookupNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-lookup-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.LookupNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-application-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-parameter-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-program-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reference-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-return-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-assertion-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-break-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-host-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.InputNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-literal-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-declaration-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.ObjectDeclarationArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-reference-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-read-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.AssertionNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-assertion-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.AssertionNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-authority-delegation-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.BlockNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-block-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.BlockNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.BreakNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-break-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.BreakNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-constructor-call-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declassification-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-delegation-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-endorsement-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-expression-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-call-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-host-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-i-f-c-delegation-declaration-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.IfNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-if-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.IfNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-infinite-loop-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.InfiniteLoopNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.InputNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-input-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.InputNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.LetNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-let-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.LetNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.LiteralNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-literal-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.LiteralNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-declaration-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-reference-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-operator-application-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-argument-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-initialization-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.OutputNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-output-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.OutputNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ParameterNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ProgramNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-program-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ProgramNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.QueryNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-query-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.QueryNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.ReadNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-read-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.ReadNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.SkipNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-skip-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.SkipNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.UpdateNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-update-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.UpdateNode.sourceLocation"]},{"name":"open override val sourceLocation: SourceLocation","description":"io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.sourceLocation","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-while-loop-node/source-location.html","searchKeys":["sourceLocation","open override val sourceLocation: SourceLocation","io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.sourceLocation"]},{"name":"open override val strongest: SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.strongest","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-bounds/strongest.html","searchKeys":["strongest","open override val strongest: SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.strongest"]},{"name":"open override val to: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.to","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-authority-delegation-declaration-node/to.html","searchKeys":["to","open override val to: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.AuthorityDelegationDeclarationNode.to"]},{"name":"open override val to: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.to","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-i-f-c-delegation-declaration-node/to.html","searchKeys":["to","open override val to: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.IFCDelegationDeclarationNode.to"]},{"name":"open override val to: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.to","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-authority-delegation-declaration-node/to.html","searchKeys":["to","open override val to: LabelNode","io.github.aplcornell.viaduct.syntax.surface.AuthorityDelegationDeclarationNode.to"]},{"name":"open override val to: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.to","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-i-f-c-delegation-declaration-node/to.html","searchKeys":["to","open override val to: LabelNode","io.github.aplcornell.viaduct.syntax.surface.IFCDelegationDeclarationNode.to"]},{"name":"open override val toLabel: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.toLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declassification-node/to-label.html","searchKeys":["toLabel","open override val toLabel: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclassificationNode.toLabel"]},{"name":"open override val toLabel: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.toLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declassification-node/to-label.html","searchKeys":["toLabel","open override val toLabel: LabelNode","io.github.aplcornell.viaduct.syntax.surface.DeclassificationNode.toLabel"]},{"name":"open override val toLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.toLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-endorsement-node/to-label.html","searchKeys":["toLabel","open override val toLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.intermediate.EndorsementNode.toLabel"]},{"name":"open override val toLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.toLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-endorsement-node/to-label.html","searchKeys":["toLabel","open override val toLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.surface.EndorsementNode.toLabel"]},{"name":"open override val top: SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.top","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-bounds/top.html","searchKeys":["top","open override val top: SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.top"]},{"name":"open override val top: Term<C, V>","description":"io.github.aplcornell.viaduct.algebra.solver.Term.Bounds.top","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/-bounds/top.html","searchKeys":["top","open override val top: Term<C, V>","io.github.aplcornell.viaduct.algebra.solver.Term.Bounds.top"]},{"name":"open override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.Maximum.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-maximum/type.html","searchKeys":["type","open override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.Maximum.type"]},{"name":"open override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.Minimum.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-minimum/type.html","searchKeys":["type","open override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.Minimum.type"]},{"name":"open override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.Mux.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-mux/type.html","searchKeys":["type","open override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.Mux.type"]},{"name":"open override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.Negation.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-negation/type.html","searchKeys":["type","open override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.Negation.type"]},{"name":"open override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.Not.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-not/type.html","searchKeys":["type","open override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.Not.type"]},{"name":"open override val type: ValueType","description":"io.github.aplcornell.viaduct.syntax.values.ByteVecValue.type","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-byte-vec-value/type.html","searchKeys":["type","open override val type: ValueType","io.github.aplcornell.viaduct.syntax.values.ByteVecValue.type"]},{"name":"open override val type: ValueType","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.type","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/type.html","searchKeys":["type","open override val type: ValueType","io.github.aplcornell.viaduct.syntax.values.HostSetValue.type"]},{"name":"open override val type: ValueType","description":"io.github.aplcornell.viaduct.syntax.values.HostValue.type","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-value/type.html","searchKeys":["type","open override val type: ValueType","io.github.aplcornell.viaduct.syntax.values.HostValue.type"]},{"name":"open override val type: ValueType","description":"io.github.aplcornell.viaduct.syntax.values.StringValue.type","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-string-value/type.html","searchKeys":["type","open override val type: ValueType","io.github.aplcornell.viaduct.syntax.values.StringValue.type"]},{"name":"open override val typeArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.typeArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/type-arguments.html","searchKeys":["typeArguments","open override val typeArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.typeArguments"]},{"name":"open override val typeArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType.typeArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/type-arguments.html","searchKeys":["typeArguments","open override val typeArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.MutableCellType.typeArguments"]},{"name":"open override val typeArguments: List<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.VectorType.typeArguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/type-arguments.html","searchKeys":["typeArguments","open override val typeArguments: List<ValueType>","io.github.aplcornell.viaduct.syntax.types.VectorType.typeArguments"]},{"name":"open override val weakest: SecurityLattice<T>","description":"io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.weakest","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/-bounds/weakest.html","searchKeys":["weakest","open override val weakest: SecurityLattice<T>","io.github.aplcornell.viaduct.security.SecurityLattice.Bounds.weakest"]},{"name":"open val delegationProjection: DelegationProjection","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.delegationProjection","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/delegation-projection.html","searchKeys":["delegationProjection","open val delegationProjection: DelegationProjection","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.delegationProjection"]},{"name":"open val delegationProjection: DelegationProjection","description":"io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.delegationProjection","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-delegation-declaration-node/delegation-projection.html","searchKeys":["delegationProjection","open val delegationProjection: DelegationProjection","io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.delegationProjection"]},{"name":"open val from: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.from","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/from.html","searchKeys":["from","open val from: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.from"]},{"name":"open val from: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.from","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-delegation-declaration-node/from.html","searchKeys":["from","open val from: LabelNode","io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.from"]},{"name":"open val to: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.to","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-delegation-declaration-node/to.html","searchKeys":["to","open val to: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.DelegationDeclarationNode.to"]},{"name":"open val to: LabelNode","description":"io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.to","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-delegation-declaration-node/to.html","searchKeys":["to","open val to: LabelNode","io.github.aplcornell.viaduct.syntax.surface.DelegationDeclarationNode.to"]},{"name":"operator fun <T> invoke(arguments: List<Pair<ArgumentLabelNode, T>>, sourceLocation: SourceLocation): NamedArguments<T>","description":"io.github.aplcornell.viaduct.syntax.NamedArguments.Companion.invoke","location":"compiler/io.github.aplcornell.viaduct.syntax/-named-arguments/-companion/invoke.html","searchKeys":["invoke","operator fun <T> invoke(arguments: List<Pair<ArgumentLabelNode, T>>, sourceLocation: SourceLocation): NamedArguments<T>","io.github.aplcornell.viaduct.syntax.NamedArguments.Companion.invoke"]},{"name":"operator fun get(label: ArgumentLabel): T","description":"io.github.aplcornell.viaduct.syntax.NamedArguments.get","location":"compiler/io.github.aplcornell.viaduct.syntax/-named-arguments/get.html","searchKeys":["get","operator fun get(label: ArgumentLabel): T","io.github.aplcornell.viaduct.syntax.NamedArguments.get"]},{"name":"operator fun invoke(hosts: List<HostNode>): HostSetValue","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.Companion.invoke","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(hosts: List<HostNode>): HostSetValue","io.github.aplcornell.viaduct.syntax.values.HostSetValue.Companion.invoke"]},{"name":"operator fun plus(other: FreeDistributiveLatticeCongruence<A>): FreeDistributiveLatticeCongruence<A>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.plus","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice-congruence/plus.html","searchKeys":["plus","operator fun plus(other: FreeDistributiveLatticeCongruence<A>): FreeDistributiveLatticeCongruence<A>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLatticeCongruence.plus"]},{"name":"operator override fun compareTo(other: Protocol): Int","description":"io.github.aplcornell.viaduct.syntax.Protocol.compareTo","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/compare-to.html","searchKeys":["compareTo","operator override fun compareTo(other: Protocol): Int","io.github.aplcornell.viaduct.syntax.Protocol.compareTo"]},{"name":"operator override fun equals(other: Any?): Boolean","description":"io.github.aplcornell.viaduct.syntax.Protocol.equals","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/equals.html","searchKeys":["equals","operator override fun equals(other: Any?): Boolean","io.github.aplcornell.viaduct.syntax.Protocol.equals"]},{"name":"operator override fun getValue(thisRef: Node, property: KProperty<*>): T","description":"io.github.aplcornell.viaduct.attributes.Attribute.getValue","location":"compiler/io.github.aplcornell.viaduct.attributes/-attribute/get-value.html","searchKeys":["getValue","operator override fun getValue(thisRef: Node, property: KProperty<*>): T","io.github.aplcornell.viaduct.attributes.Attribute.getValue"]},{"name":"override fun apply(argument1: Value, argument2: Value): Value","description":"io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-arithmetic-operator/apply.html","searchKeys":["apply","override fun apply(argument1: Value, argument2: Value): Value","io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.apply"]},{"name":"override fun apply(argument1: Value, argument2: Value): Value","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator/apply.html","searchKeys":["apply","override fun apply(argument1: Value, argument2: Value): Value","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.apply"]},{"name":"override fun apply(argument1: Value, argument2: Value): Value","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.apply","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator/apply.html","searchKeys":["apply","override fun apply(argument1: Value, argument2: Value): Value","io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.apply"]},{"name":"override fun communicateOrNull(source: Protocol, destination: Protocol): ProtocolCommunication?","description":"io.github.aplcornell.viaduct.selection.AbstractProtocolComposer.communicateOrNull","location":"compiler/io.github.aplcornell.viaduct.selection/-abstract-protocol-composer/communicate-or-null.html","searchKeys":["communicateOrNull","override fun communicateOrNull(source: Protocol, destination: Protocol): ProtocolCommunication?","io.github.aplcornell.viaduct.selection.AbstractProtocolComposer.communicateOrNull"]},{"name":"override fun constructorCall(protocol: Protocol, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.constructorCall","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/constructor-call.html","searchKeys":["constructorCall","override fun constructorCall(protocol: Protocol, objectType: ObjectTypeNode, arguments: Arguments<AtomicExpressionNode>): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.constructorCall"]},{"name":"override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.exp","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/exp.html","searchKeys":["exp","override fun exp(protocol: Protocol, expr: ExpressionNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.exp"]},{"name":"override fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.guard","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/guard.html","searchKeys":["guard","override fun guard(protocol: Protocol, expr: AtomicExpressionNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.guard"]},{"name":"override fun hashCode(): Int","description":"io.github.aplcornell.viaduct.syntax.Protocol.hashCode","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/hash-code.html","searchKeys":["hashCode","override fun hashCode(): Int","io.github.aplcornell.viaduct.syntax.Protocol.hashCode"]},{"name":"override fun kotlinType(protocol: Protocol, sourceType: ObjectType): TypeName","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.kotlinType","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/kotlin-type.html","searchKeys":["kotlinType","override fun kotlinType(protocol: Protocol, sourceType: ObjectType): TypeName","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.kotlinType"]},{"name":"override fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.kotlinType","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/kotlin-type.html","searchKeys":["kotlinType","override fun kotlinType(protocol: Protocol, sourceType: ValueType): TypeName","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.kotlinType"]},{"name":"override fun mandatoryParticipatingHosts(protocol: Protocol, statement: SimpleStatementNode): Set<Host>","description":"io.github.aplcornell.viaduct.selection.AbstractProtocolComposer.mandatoryParticipatingHosts","location":"compiler/io.github.aplcornell.viaduct.selection/-abstract-protocol-composer/mandatory-participating-hosts.html","searchKeys":["mandatoryParticipatingHosts","override fun mandatoryParticipatingHosts(protocol: Protocol, statement: SimpleStatementNode): Set<Host>","io.github.aplcornell.viaduct.selection.AbstractProtocolComposer.mandatoryParticipatingHosts"]},{"name":"override fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.receive","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/receive.html","searchKeys":["receive","override fun receive(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.receive"]},{"name":"override fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.send","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/send.html","searchKeys":["send","override fun send(sender: LetNode, sendProtocol: Protocol, receiveProtocol: Protocol, events: ProtocolCommunication): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.send"]},{"name":"override fun setup(protocol: Protocol): Iterable<PropertySpec>","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.setup","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/setup.html","searchKeys":["setup","override fun setup(protocol: Protocol): Iterable<PropertySpec>","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.setup"]},{"name":"override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.errors.CompilationError.toDocument","location":"compiler/io.github.aplcornell.viaduct.errors/-compilation-error/to-document.html","searchKeys":["toDocument","override fun toDocument(): Document","io.github.aplcornell.viaduct.errors.CompilationError.toDocument"]},{"name":"override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.intermediate.Node.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-node/to-document.html","searchKeys":["toDocument","override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.intermediate.Node.toDocument"]},{"name":"override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.surface.Node.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-node/to-document.html","searchKeys":["toDocument","override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.surface.Node.toDocument"]},{"name":"override fun toDocument(): Document","description":"io.github.aplcornell.viaduct.syntax.types.ObjectType.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-object-type/to-document.html","searchKeys":["toDocument","override fun toDocument(): Document","io.github.aplcornell.viaduct.syntax.types.ObjectType.toDocument"]},{"name":"override fun toDocument(argument1: PrettyPrintable, argument2: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.syntax.operators.BinaryInfixOperator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-binary-infix-operator/to-document.html","searchKeys":["toDocument","override fun toDocument(argument1: PrettyPrintable, argument2: PrettyPrintable): Document","io.github.aplcornell.viaduct.syntax.operators.BinaryInfixOperator.toDocument"]},{"name":"override fun toDocument(argument1: PrettyPrintable, argument2: PrettyPrintable): Document","description":"io.github.aplcornell.viaduct.syntax.operators.BinaryPrefixOperator.toDocument","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-binary-prefix-operator/to-document.html","searchKeys":["toDocument","override fun toDocument(argument1: PrettyPrintable, argument2: PrettyPrintable): Document","io.github.aplcornell.viaduct.syntax.operators.BinaryPrefixOperator.toDocument"]},{"name":"override fun toString(): String","description":"io.github.aplcornell.viaduct.errors.CompilationError.toString","location":"compiler/io.github.aplcornell.viaduct.errors/-compilation-error/to-string.html","searchKeys":["toString","override fun toString(): String","io.github.aplcornell.viaduct.errors.CompilationError.toString"]},{"name":"override fun toSurfaceNode(metadata: Metadata): ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-node/to-surface-node.html","searchKeys":["toSurfaceNode","override fun toSurfaceNode(metadata: Metadata): ExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode.toSurfaceNode"]},{"name":"override fun toSurfaceNode(metadata: Metadata): ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializerNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initializer-node/to-surface-node.html","searchKeys":["toSurfaceNode","override fun toSurfaceNode(metadata: Metadata): ExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializerNode.toSurfaceNode"]},{"name":"override fun toSurfaceNode(metadata: Metadata): FunctionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionArgumentNode.toSurfaceNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-argument-node/to-surface-node.html","searchKeys":["toSurfaceNode","override fun toSurfaceNode(metadata: Metadata): FunctionArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionArgumentNode.toSurfaceNode"]},{"name":"override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","description":"io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.update","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-code-generator-dispatcher/update.html","searchKeys":["update","override fun update(protocol: Protocol, stmt: UpdateNode): CodeBlock","io.github.aplcornell.viaduct.codegeneration.CodeGeneratorDispatcher.update"]},{"name":"override val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-arithmetic-operator/associativity.html","searchKeys":["associativity","override val associativity: Associativity","io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.associativity"]},{"name":"override val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator/associativity.html","searchKeys":["associativity","override val associativity: Associativity","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.associativity"]},{"name":"override val associativity: Associativity","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.associativity","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator/associativity.html","searchKeys":["associativity","override val associativity: Associativity","io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.associativity"]},{"name":"override val children: Iterable<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-downgrade-node/children.html","searchKeys":["children","override val children: Iterable<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode.children"]},{"name":"override val children: Iterable<Nothing>","description":"io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode.children","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-atomic-expression-node/children.html","searchKeys":["children","override val children: Iterable<Nothing>","io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode.children"]},{"name":"override val comment: String?","description":"io.github.aplcornell.viaduct.syntax.surface.ExpressionNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-expression-node/comment.html","searchKeys":["comment","override val comment: String?","io.github.aplcornell.viaduct.syntax.surface.ExpressionNode.comment"]},{"name":"override val comment: String?","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionArgumentNode.comment","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-argument-node/comment.html","searchKeys":["comment","override val comment: String?","io.github.aplcornell.viaduct.syntax.surface.FunctionArgumentNode.comment"]},{"name":"override val name: String","description":"io.github.aplcornell.viaduct.syntax.Protocol.name","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/name.html","searchKeys":["name","override val name: String","io.github.aplcornell.viaduct.syntax.Protocol.name"]},{"name":"override val nameCategory: String","description":"io.github.aplcornell.viaduct.syntax.Protocol.nameCategory","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/name-category.html","searchKeys":["nameCategory","override val nameCategory: String","io.github.aplcornell.viaduct.syntax.Protocol.nameCategory"]},{"name":"override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator/precedence.html","searchKeys":["precedence","override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.precedence"]},{"name":"override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator/precedence.html","searchKeys":["precedence","override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.precedence"]},{"name":"override val precedence: Precedence","description":"io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator.precedence","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-unary-prefix-operator/precedence.html","searchKeys":["precedence","override val precedence: Precedence","io.github.aplcornell.viaduct.syntax.operators.UnaryPrefixOperator.precedence"]},{"name":"override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-arithmetic-operator/type.html","searchKeys":["type","override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.ArithmeticOperator.type"]},{"name":"override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-comparison-operator/type.html","searchKeys":["type","override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.ComparisonOperator.type"]},{"name":"override val type: FunctionType","description":"io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.type","location":"compiler/io.github.aplcornell.viaduct.syntax.operators/-logical-operator/type.html","searchKeys":["type","override val type: FunctionType","io.github.aplcornell.viaduct.syntax.operators.LogicalOperator.type"]},{"name":"sealed class ABY : Protocol","description":"io.github.aplcornell.viaduct.backends.aby.ABY","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/index.html","searchKeys":["ABY","sealed class ABY : Protocol","io.github.aplcornell.viaduct.backends.aby.ABY"]},{"name":"sealed class AtomicExpressionNode : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.AtomicExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-atomic-expression-node/index.html","searchKeys":["AtomicExpressionNode","sealed class AtomicExpressionNode : ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.AtomicExpressionNode"]},{"name":"sealed class AtomicExpressionNode : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-atomic-expression-node/index.html","searchKeys":["AtomicExpressionNode","sealed class AtomicExpressionNode : PureExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.AtomicExpressionNode"]},{"name":"sealed class CircuitStatementNode : StatementNode","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitStatementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-statement-node/index.html","searchKeys":["CircuitStatementNode","sealed class CircuitStatementNode : StatementNode","io.github.aplcornell.viaduct.syntax.circuit.CircuitStatementNode"]},{"name":"sealed class Component<A>","description":"io.github.aplcornell.viaduct.security.Component","location":"compiler/io.github.aplcornell.viaduct.security/-component/index.html","searchKeys":["Component","sealed class Component<A>","io.github.aplcornell.viaduct.security.Component"]},{"name":"sealed class ComponentVariable<V>","description":"io.github.aplcornell.viaduct.security.solver.ComponentVariable","location":"compiler/io.github.aplcornell.viaduct.security.solver/-component-variable/index.html","searchKeys":["ComponentVariable","sealed class ComponentVariable<V>","io.github.aplcornell.viaduct.security.solver.ComponentVariable"]},{"name":"sealed class Constraint<C, V, T>","description":"io.github.aplcornell.viaduct.algebra.solver.Constraint","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-constraint/index.html","searchKeys":["Constraint","sealed class Constraint<C, V, T>","io.github.aplcornell.viaduct.algebra.solver.Constraint"]},{"name":"sealed class ControlNode : StatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ControlNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-control-node/index.html","searchKeys":["ControlNode","sealed class ControlNode : StatementNode","io.github.aplcornell.viaduct.syntax.intermediate.ControlNode"]},{"name":"sealed class DowngradeNode : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.DowngradeNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-downgrade-node/index.html","searchKeys":["DowngradeNode","sealed class DowngradeNode : ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.DowngradeNode"]},{"name":"sealed class DowngradeNode : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-downgrade-node/index.html","searchKeys":["DowngradeNode","sealed class DowngradeNode : PureExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.DowngradeNode"]},{"name":"sealed class ExpressionNode : Node","description":"io.github.aplcornell.viaduct.syntax.circuit.ExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-expression-node/index.html","searchKeys":["ExpressionNode","sealed class ExpressionNode : Node","io.github.aplcornell.viaduct.syntax.circuit.ExpressionNode"]},{"name":"sealed class ExpressionNode : Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-node/index.html","searchKeys":["ExpressionNode","sealed class ExpressionNode : Node","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionNode"]},{"name":"sealed class ExpressionNode : Node","description":"io.github.aplcornell.viaduct.syntax.surface.ExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-expression-node/index.html","searchKeys":["ExpressionNode","sealed class ExpressionNode : Node","io.github.aplcornell.viaduct.syntax.surface.ExpressionNode"]},{"name":"sealed class FunctionArgumentNode : Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-argument-node/index.html","searchKeys":["FunctionArgumentNode","sealed class FunctionArgumentNode : Node","io.github.aplcornell.viaduct.syntax.intermediate.FunctionArgumentNode"]},{"name":"sealed class FunctionArgumentNode : Node","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-argument-node/index.html","searchKeys":["FunctionArgumentNode","sealed class FunctionArgumentNode : Node","io.github.aplcornell.viaduct.syntax.surface.FunctionArgumentNode"]},{"name":"sealed class FunctionInputArgumentNode : FunctionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionInputArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-input-argument-node/index.html","searchKeys":["FunctionInputArgumentNode","sealed class FunctionInputArgumentNode : FunctionArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionInputArgumentNode"]},{"name":"sealed class FunctionOutputArgumentNode : FunctionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionOutputArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-output-argument-node/index.html","searchKeys":["FunctionOutputArgumentNode","sealed class FunctionOutputArgumentNode : FunctionArgumentNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionOutputArgumentNode"]},{"name":"sealed class FunctionReturnArgumentNode : FunctionArgumentNode","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionReturnArgumentNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-return-argument-node/index.html","searchKeys":["FunctionReturnArgumentNode","sealed class FunctionReturnArgumentNode : FunctionArgumentNode","io.github.aplcornell.viaduct.syntax.surface.FunctionReturnArgumentNode"]},{"name":"sealed class IndexExpressionNode : PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.IndexExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-index-expression-node/index.html","searchKeys":["IndexExpressionNode","sealed class IndexExpressionNode : PureExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.IndexExpressionNode"]},{"name":"sealed class LabelExpression : PrettyPrintable","description":"io.github.aplcornell.viaduct.security.LabelExpression","location":"compiler/io.github.aplcornell.viaduct.security/-label-expression/index.html","searchKeys":["LabelExpression","sealed class LabelExpression : PrettyPrintable","io.github.aplcornell.viaduct.security.LabelExpression"]},{"name":"sealed class LoopNode : StatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.LoopNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-loop-node/index.html","searchKeys":["LoopNode","sealed class LoopNode : StatementNode","io.github.aplcornell.viaduct.syntax.surface.LoopNode"]},{"name":"sealed class Node : HasSourceLocation, PrettyPrintable","description":"io.github.aplcornell.viaduct.syntax.circuit.Node","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-node/index.html","searchKeys":["Node","sealed class Node : HasSourceLocation, PrettyPrintable","io.github.aplcornell.viaduct.syntax.circuit.Node"]},{"name":"sealed class OutParameterInitializerNode : Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializerNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initializer-node/index.html","searchKeys":["OutParameterInitializerNode","sealed class OutParameterInitializerNode : Node","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializerNode"]},{"name":"sealed class Principal : PrettyPrintable","description":"io.github.aplcornell.viaduct.security.Principal","location":"compiler/io.github.aplcornell.viaduct.security/-principal/index.html","searchKeys":["Principal","sealed class Principal : PrettyPrintable","io.github.aplcornell.viaduct.security.Principal"]},{"name":"sealed class PureExpressionNode : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.PureExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-pure-expression-node/index.html","searchKeys":["PureExpressionNode","sealed class PureExpressionNode : ExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.PureExpressionNode"]},{"name":"sealed class PureExpressionNode : ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.PureExpressionNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-pure-expression-node/index.html","searchKeys":["PureExpressionNode","sealed class PureExpressionNode : ExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.PureExpressionNode"]},{"name":"sealed class SelectionConstraint : PrettyPrintable","description":"io.github.aplcornell.viaduct.selection.SelectionConstraint","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-constraint/index.html","searchKeys":["SelectionConstraint","sealed class SelectionConstraint : PrettyPrintable","io.github.aplcornell.viaduct.selection.SelectionConstraint"]},{"name":"sealed class SimpleStatementNode : StatementNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-simple-statement-node/index.html","searchKeys":["SimpleStatementNode","sealed class SimpleStatementNode : StatementNode","io.github.aplcornell.viaduct.syntax.intermediate.SimpleStatementNode"]},{"name":"sealed class SimpleStatementNode : StatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.SimpleStatementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-simple-statement-node/index.html","searchKeys":["SimpleStatementNode","sealed class SimpleStatementNode : StatementNode","io.github.aplcornell.viaduct.syntax.surface.SimpleStatementNode"]},{"name":"sealed class StatementNode : Node","description":"io.github.aplcornell.viaduct.syntax.circuit.StatementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-statement-node/index.html","searchKeys":["StatementNode","sealed class StatementNode : Node","io.github.aplcornell.viaduct.syntax.circuit.StatementNode"]},{"name":"sealed class StatementNode : Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.StatementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-statement-node/index.html","searchKeys":["StatementNode","sealed class StatementNode : Node","io.github.aplcornell.viaduct.syntax.intermediate.StatementNode"]},{"name":"sealed class StatementNode : Node","description":"io.github.aplcornell.viaduct.syntax.surface.StatementNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-statement-node/index.html","searchKeys":["StatementNode","sealed class StatementNode : Node","io.github.aplcornell.viaduct.syntax.surface.StatementNode"]},{"name":"sealed class SymbolicCost : CostMonoid<SymbolicCost> ","description":"io.github.aplcornell.viaduct.selection.SymbolicCost","location":"compiler/io.github.aplcornell.viaduct.selection/-symbolic-cost/index.html","searchKeys":["SymbolicCost","sealed class SymbolicCost : CostMonoid<SymbolicCost> ","io.github.aplcornell.viaduct.selection.SymbolicCost"]},{"name":"sealed class Term<C, V> : Lattice<Term<C, V>> ","description":"io.github.aplcornell.viaduct.algebra.solver.Term","location":"compiler/io.github.aplcornell.viaduct.algebra.solver/-term/index.html","searchKeys":["Term","sealed class Term<C, V> : Lattice<Term<C, V>> ","io.github.aplcornell.viaduct.algebra.solver.Term"]},{"name":"sealed class TopLevelDeclarationNode : Node","description":"io.github.aplcornell.viaduct.syntax.circuit.TopLevelDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-top-level-declaration-node/index.html","searchKeys":["TopLevelDeclarationNode","sealed class TopLevelDeclarationNode : Node","io.github.aplcornell.viaduct.syntax.circuit.TopLevelDeclarationNode"]},{"name":"sealed class TopLevelDeclarationNode : Node","description":"io.github.aplcornell.viaduct.syntax.intermediate.TopLevelDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-top-level-declaration-node/index.html","searchKeys":["TopLevelDeclarationNode","sealed class TopLevelDeclarationNode : Node","io.github.aplcornell.viaduct.syntax.intermediate.TopLevelDeclarationNode"]},{"name":"sealed class TopLevelDeclarationNode : Node","description":"io.github.aplcornell.viaduct.syntax.surface.TopLevelDeclarationNode","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-top-level-declaration-node/index.html","searchKeys":["TopLevelDeclarationNode","sealed class TopLevelDeclarationNode : Node","io.github.aplcornell.viaduct.syntax.surface.TopLevelDeclarationNode"]},{"name":"sealed class Variable : Name","description":"io.github.aplcornell.viaduct.syntax.Variable","location":"compiler/io.github.aplcornell.viaduct.syntax/-variable/index.html","searchKeys":["Variable","sealed class Variable : Name","io.github.aplcornell.viaduct.syntax.Variable"]},{"name":"val A2BInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.A2BInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-a2-b-input-ports.html","searchKeys":["A2BInputPorts","val A2BInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.BoolABY.A2BInputPorts"]},{"name":"val A2BOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.A2BOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-a2-b-output-ports.html","searchKeys":["A2BOutputPorts","val A2BOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.aby.ArithABY.A2BOutputPorts"]},{"name":"val A2YInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.A2YInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-a2-y-input-ports.html","searchKeys":["A2YInputPorts","val A2YInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.YaoABY.A2YInputPorts"]},{"name":"val A2YOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.A2YOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-a2-y-output-ports.html","searchKeys":["A2YOutputPorts","val A2YOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.aby.ArithABY.A2YOutputPorts"]},{"name":"val B2AInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.B2AInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-b2-a-input-ports.html","searchKeys":["B2AInputPorts","val B2AInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.ArithABY.B2AInputPorts"]},{"name":"val B2AOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.B2AOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-b2-a-output-ports.html","searchKeys":["B2AOutputPorts","val B2AOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.aby.BoolABY.B2AOutputPorts"]},{"name":"val B2YInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.B2YInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-b2-y-input-ports.html","searchKeys":["B2YInputPorts","val B2YInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.YaoABY.B2YInputPorts"]},{"name":"val B2YOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.B2YOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-b2-y-output-ports.html","searchKeys":["B2YOutputPorts","val B2YOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.aby.BoolABY.B2YOutputPorts"]},{"name":"val Host.label: SecurityLattice<FreeDistributiveLattice<Component<Principal>>>","description":"io.github.aplcornell.viaduct.security.label","location":"compiler/io.github.aplcornell.viaduct.security/label.html","searchKeys":["label","val Host.label: SecurityLattice<FreeDistributiveLattice<Component<Principal>>>","io.github.aplcornell.viaduct.security.label"]},{"name":"val ImmutableCell: ClassName","description":"io.github.aplcornell.viaduct.syntax.datatypes.ImmutableCell","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-immutable-cell.html","searchKeys":["ImmutableCell","val ImmutableCell: ClassName","io.github.aplcornell.viaduct.syntax.datatypes.ImmutableCell"]},{"name":"val LabelVariable.label: SecurityLattice<FreeDistributiveLattice<Component<Principal>>>","description":"io.github.aplcornell.viaduct.security.label","location":"compiler/io.github.aplcornell.viaduct.security/label.html","searchKeys":["label","val LabelVariable.label: SecurityLattice<FreeDistributiveLattice<Component<Principal>>>","io.github.aplcornell.viaduct.security.label"]},{"name":"val MutableCell: ClassName","description":"io.github.aplcornell.viaduct.syntax.datatypes.MutableCell","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-mutable-cell.html","searchKeys":["MutableCell","val MutableCell: ClassName","io.github.aplcornell.viaduct.syntax.datatypes.MutableCell"]},{"name":"val Operator.arity: Int","description":"io.github.aplcornell.viaduct.syntax.arity","location":"compiler/io.github.aplcornell.viaduct.syntax/arity.html","searchKeys":["arity","val Operator.arity: Int","io.github.aplcornell.viaduct.syntax.arity"]},{"name":"val ProgramNode.main: FunctionDeclarationNode","description":"io.github.aplcornell.viaduct.analysis.main","location":"compiler/io.github.aplcornell.viaduct.analysis/main.html","searchKeys":["main","val ProgramNode.main: FunctionDeclarationNode","io.github.aplcornell.viaduct.analysis.main"]},{"name":"val ValueType.valueClass: KClass<out Value>","description":"io.github.aplcornell.viaduct.codegeneration.valueClass","location":"compiler/io.github.aplcornell.viaduct.codegeneration/value-class.html","searchKeys":["valueClass","val ValueType.valueClass: KClass<out Value>","io.github.aplcornell.viaduct.codegeneration.valueClass"]},{"name":"val Vector: ClassName","description":"io.github.aplcornell.viaduct.syntax.datatypes.Vector","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-vector.html","searchKeys":["Vector","val Vector: ClassName","io.github.aplcornell.viaduct.syntax.datatypes.Vector"]},{"name":"val Y2AInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.Y2AInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-y2-a-input-ports.html","searchKeys":["Y2AInputPorts","val Y2AInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.ArithABY.Y2AInputPorts"]},{"name":"val Y2AOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Y2AOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-y2-a-output-ports.html","searchKeys":["Y2AOutputPorts","val Y2AOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.aby.YaoABY.Y2AOutputPorts"]},{"name":"val Y2BInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.Y2BInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-y2-b-input-ports.html","searchKeys":["Y2BInputPorts","val Y2BInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.BoolABY.Y2BInputPorts"]},{"name":"val Y2BOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Y2BOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-y2-b-output-ports.html","searchKeys":["Y2BOutputPorts","val Y2BOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.aby.YaoABY.Y2BOutputPorts"]},{"name":"val arguments: Arguments<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.arguments"]},{"name":"val arguments: Arguments<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.arguments"]},{"name":"val arguments: Arguments<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.arguments"]},{"name":"val arguments: Arguments<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.arguments"]},{"name":"val arguments: Arguments<AtomicExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<AtomicExpressionNode>","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.arguments"]},{"name":"val arguments: Arguments<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-constructor-call-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<ExpressionNode>","io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.arguments"]},{"name":"val arguments: Arguments<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-operator-application-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<ExpressionNode>","io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.arguments"]},{"name":"val arguments: Arguments<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.surface.QueryNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-query-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<ExpressionNode>","io.github.aplcornell.viaduct.syntax.surface.QueryNode.arguments"]},{"name":"val arguments: Arguments<ExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.surface.UpdateNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-update-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<ExpressionNode>","io.github.aplcornell.viaduct.syntax.surface.UpdateNode.arguments"]},{"name":"val arguments: Arguments<FunctionArgumentNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<FunctionArgumentNode>","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.arguments"]},{"name":"val arguments: Arguments<FunctionArgumentNode>","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-call-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<FunctionArgumentNode>","io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.arguments"]},{"name":"val arguments: Arguments<PureExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-application-node/arguments.html","searchKeys":["arguments","val arguments: Arguments<PureExpressionNode>","io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.arguments"]},{"name":"val arguments: PersistentList<ValueType>","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType.arguments","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/arguments.html","searchKeys":["arguments","val arguments: PersistentList<ValueType>","io.github.aplcornell.viaduct.syntax.types.FunctionType.arguments"]},{"name":"val assignment: Map<FunctionVariable, Protocol>","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.assignment","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/assignment.html","searchKeys":["assignment","val assignment: Map<FunctionVariable, Protocol>","io.github.aplcornell.viaduct.selection.ProtocolAssignment.assignment"]},{"name":"val body: BlockNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/body.html","searchKeys":["body","val body: BlockNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.body"]},{"name":"val body: BlockNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/body.html","searchKeys":["body","val body: BlockNode","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.body"]},{"name":"val body: BlockNode","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/body.html","searchKeys":["body","val body: BlockNode","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.body"]},{"name":"val body: CircuitBlockNode","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/body.html","searchKeys":["body","val body: CircuitBlockNode","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.body"]},{"name":"val body: PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.body","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/body.html","searchKeys":["body","val body: PureExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.body"]},{"name":"val bound: IndexExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.bound","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-index-parameter-node/bound.html","searchKeys":["bound","val bound: IndexExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.IndexParameterNode.bound"]},{"name":"val bounds: Arguments<BoundParameterNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.bounds","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/bounds.html","searchKeys":["bounds","val bounds: Arguments<BoundParameterNode>","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.bounds"]},{"name":"val choices: List<Pair<SelectionConstraint, SymbolicCost>>","description":"io.github.aplcornell.viaduct.selection.CostChoice.choices","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-choice/choices.html","searchKeys":["choices","val choices: List<Pair<SelectionConstraint, SymbolicCost>>","io.github.aplcornell.viaduct.selection.CostChoice.choices"]},{"name":"val className: ClassNameNode","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode.className","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/class-name.html","searchKeys":["className","val className: ClassNameNode","io.github.aplcornell.viaduct.syntax.ObjectTypeNode.className"]},{"name":"val cleartextCommitmentInputPort: InputPort","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.cleartextCommitmentInputPort","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/cleartext-commitment-input-port.html","searchKeys":["cleartextCommitmentInputPort","val cleartextCommitmentInputPort: InputPort","io.github.aplcornell.viaduct.backends.cleartext.Local.cleartextCommitmentInputPort"]},{"name":"val cleartextHost: Host","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.cleartextHost","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/cleartext-host.html","searchKeys":["cleartextHost","val cleartextHost: Host","io.github.aplcornell.viaduct.backends.commitment.Commitment.cleartextHost"]},{"name":"val cleartextInput: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.cleartextInput","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/cleartext-input.html","searchKeys":["cleartextInput","val cleartextInput: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.zkp.ZKP.cleartextInput"]},{"name":"val cleartextInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.ABY.cleartextInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/cleartext-input-ports.html","searchKeys":["cleartextInputPorts","val cleartextInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.ABY.cleartextInputPorts"]},{"name":"val cleartextInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.cleartextInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/cleartext-input-ports.html","searchKeys":["cleartextInputPorts","val cleartextInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.commitment.Commitment.cleartextInputPorts"]},{"name":"val cleartextOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.aby.ABY.cleartextOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/cleartext-output-ports.html","searchKeys":["cleartextOutputPorts","val cleartextOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.aby.ABY.cleartextOutputPorts"]},{"name":"val client: Host","description":"io.github.aplcornell.viaduct.backends.aby.ABY.client","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/client.html","searchKeys":["client","val client: Host","io.github.aplcornell.viaduct.backends.aby.ABY.client"]},{"name":"val column: Int","description":"io.github.aplcornell.viaduct.parsing.SourcePosition.column","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/column.html","searchKeys":["column","val column: Int","io.github.aplcornell.viaduct.parsing.SourcePosition.column"]},{"name":"val condition: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.condition","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-assertion-node/condition.html","searchKeys":["condition","val condition: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.AssertionNode.condition"]},{"name":"val condition: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.AssertionNode.condition","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-assertion-node/condition.html","searchKeys":["condition","val condition: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.AssertionNode.condition"]},{"name":"val confidentialityComponent: T","description":"io.github.aplcornell.viaduct.security.SecurityLattice.confidentialityComponent","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/confidentiality-component.html","searchKeys":["confidentialityComponent","val confidentialityComponent: T","io.github.aplcornell.viaduct.security.SecurityLattice.confidentialityComponent"]},{"name":"val congruence: FreeDistributiveLatticeCongruence<Component<Principal>>","description":"io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.congruence","location":"compiler/io.github.aplcornell.viaduct.syntax/-host-trust-configuration/congruence.html","searchKeys":["congruence","val congruence: FreeDistributiveLatticeCongruence<Component<Principal>>","io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.congruence"]},{"name":"val constraints: Set<SelectionConstraint>","description":"io.github.aplcornell.viaduct.selection.SelectionProblem.constraints","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-problem/constraints.html","searchKeys":["constraints","val constraints: Set<SelectionConstraint>","io.github.aplcornell.viaduct.selection.SelectionProblem.constraints"]},{"name":"val containedProtocolCheck: (Protocol) -> Boolean","description":"io.github.aplcornell.viaduct.passes.MuxPostprocessor.containedProtocolCheck","location":"compiler/io.github.aplcornell.viaduct.passes/-mux-postprocessor/contained-protocol-check.html","searchKeys":["containedProtocolCheck","val containedProtocolCheck: (Protocol) -> Boolean","io.github.aplcornell.viaduct.passes.MuxPostprocessor.containedProtocolCheck"]},{"name":"val context: CodeGeneratorContext","description":"io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.context","location":"compiler/io.github.aplcornell.viaduct.codegeneration/-abstract-code-generator/context.html","searchKeys":["context","val context: CodeGeneratorContext","io.github.aplcornell.viaduct.codegeneration.AbstractCodeGenerator.context"]},{"name":"val cost: Int","description":"io.github.aplcornell.viaduct.selection.CostLiteral.cost","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-literal/cost.html","searchKeys":["cost","val cost: Int","io.github.aplcornell.viaduct.selection.CostLiteral.cost"]},{"name":"val cost: Int","description":"io.github.aplcornell.viaduct.selection.IntegerCost.cost","location":"compiler/io.github.aplcornell.viaduct.selection/-integer-cost/cost.html","searchKeys":["cost","val cost: Int","io.github.aplcornell.viaduct.selection.IntegerCost.cost"]},{"name":"val cost: SymbolicCost","description":"io.github.aplcornell.viaduct.selection.SelectionProblem.cost","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-problem/cost.html","searchKeys":["cost","val cost: SymbolicCost","io.github.aplcornell.viaduct.selection.SelectionProblem.cost"]},{"name":"val costMap: Map<Node, SymbolicCost>","description":"io.github.aplcornell.viaduct.selection.SelectionProblem.costMap","location":"compiler/io.github.aplcornell.viaduct.selection/-selection-problem/cost-map.html","searchKeys":["costMap","val costMap: Map<Node, SymbolicCost>","io.github.aplcornell.viaduct.selection.SelectionProblem.costMap"]},{"name":"val declarations: PersistentList<TopLevelDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.declarations","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-program-node/declarations.html","searchKeys":["declarations","val declarations: PersistentList<TopLevelDeclarationNode>","io.github.aplcornell.viaduct.syntax.circuit.ProgramNode.declarations"]},{"name":"val declarations: PersistentList<TopLevelDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.declarations","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/declarations.html","searchKeys":["declarations","val declarations: PersistentList<TopLevelDeclarationNode>","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.declarations"]},{"name":"val declarations: PersistentList<TopLevelDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.surface.ProgramNode.declarations","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-program-node/declarations.html","searchKeys":["declarations","val declarations: PersistentList<TopLevelDeclarationNode>","io.github.aplcornell.viaduct.syntax.surface.ProgramNode.declarations"]},{"name":"val defaultProtocolParsers: PersistentMap<ProtocolName, ProtocolParser<Protocol>>","description":"io.github.aplcornell.viaduct.parsing.defaultProtocolParsers","location":"compiler/io.github.aplcornell.viaduct.parsing/default-protocol-parsers.html","searchKeys":["defaultProtocolParsers","val defaultProtocolParsers: PersistentMap<ProtocolName, ProtocolParser<Protocol>>","io.github.aplcornell.viaduct.parsing.defaultProtocolParsers"]},{"name":"val defaultSelectionProblemSolver: SelectionProblemSolver","description":"io.github.aplcornell.viaduct.selection.defaultSelectionProblemSolver","location":"compiler/io.github.aplcornell.viaduct.selection/default-selection-problem-solver.html","searchKeys":["defaultSelectionProblemSolver","val defaultSelectionProblemSolver: SelectionProblemSolver","io.github.aplcornell.viaduct.selection.defaultSelectionProblemSolver"]},{"name":"val defaultValue: PureExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.defaultValue","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/default-value.html","searchKeys":["defaultValue","val defaultValue: PureExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.defaultValue"]},{"name":"val elementType: ValueType","description":"io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.elementType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-immutable-cell-type/element-type.html","searchKeys":["elementType","val elementType: ValueType","io.github.aplcornell.viaduct.syntax.types.ImmutableCellType.elementType"]},{"name":"val elementType: ValueType","description":"io.github.aplcornell.viaduct.syntax.types.MutableCellType.elementType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-mutable-cell-type/element-type.html","searchKeys":["elementType","val elementType: ValueType","io.github.aplcornell.viaduct.syntax.types.MutableCellType.elementType"]},{"name":"val elementType: ValueType","description":"io.github.aplcornell.viaduct.syntax.types.VectorType.elementType","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-vector-type/element-type.html","searchKeys":["elementType","val elementType: ValueType","io.github.aplcornell.viaduct.syntax.types.VectorType.elementType"]},{"name":"val elementType: ValueTypeNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ArrayType.elementType","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-array-type/element-type.html","searchKeys":["elementType","val elementType: ValueTypeNode","io.github.aplcornell.viaduct.syntax.circuit.ArrayType.elementType"]},{"name":"val elseBranch: BlockNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.elseBranch","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/else-branch.html","searchKeys":["elseBranch","val elseBranch: BlockNode","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.elseBranch"]},{"name":"val elseBranch: BlockNode","description":"io.github.aplcornell.viaduct.syntax.surface.IfNode.elseBranch","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-if-node/else-branch.html","searchKeys":["elseBranch","val elseBranch: BlockNode","io.github.aplcornell.viaduct.syntax.surface.IfNode.elseBranch"]},{"name":"val end: SourcePosition","description":"io.github.aplcornell.viaduct.parsing.SourceRange.end","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/end.html","searchKeys":["end","val end: SourcePosition","io.github.aplcornell.viaduct.parsing.SourceRange.end"]},{"name":"val events: Set<CommunicationEvent>","description":"io.github.aplcornell.viaduct.selection.ProtocolCommunication.events","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-communication/events.html","searchKeys":["events","val events: Set<CommunicationEvent>","io.github.aplcornell.viaduct.selection.ProtocolCommunication.events"]},{"name":"val expression: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-expression-argument-node/expression.html","searchKeys":["expression","val expression: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.ExpressionArgumentNode.expression"]},{"name":"val expression: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-expression-initializer-node/expression.html","searchKeys":["expression","val expression: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterExpressionInitializerNode.expression"]},{"name":"val expression: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode.expression","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-expression-argument-node/expression.html","searchKeys":["expression","val expression: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.ExpressionArgumentNode.expression"]},{"name":"val features: PersistentMap<CostFeature, C>","description":"io.github.aplcornell.viaduct.selection.Cost.features","location":"compiler/io.github.aplcornell.viaduct.selection/-cost/features.html","searchKeys":["features","val features: PersistentMap<CostFeature, C>","io.github.aplcornell.viaduct.selection.Cost.features"]},{"name":"val from: FreeDistributiveLattice<A>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo.from","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/-less-than-or-equal-to/from.html","searchKeys":["from","val from: FreeDistributiveLattice<A>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo.from"]},{"name":"val function: FunctionName","description":"io.github.aplcornell.viaduct.selection.FunctionVariable.function","location":"compiler/io.github.aplcornell.viaduct.selection/-function-variable/function.html","searchKeys":["function","val function: FunctionName","io.github.aplcornell.viaduct.selection.FunctionVariable.function"]},{"name":"val functionMap: Map<FunctionName, FunctionDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.functionMap","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/function-map.html","searchKeys":["functionMap","val functionMap: Map<FunctionName, FunctionDeclarationNode>","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.functionMap"]},{"name":"val functions: Iterable<FunctionDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.functions","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/functions.html","searchKeys":["functions","val functions: Iterable<FunctionDeclarationNode>","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.functions"]},{"name":"val guard: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.guard","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/guard.html","searchKeys":["guard","val guard: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.guard"]},{"name":"val guard: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.guard","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/guard.html","searchKeys":["guard","val guard: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.guard"]},{"name":"val guard: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.IfNode.guard","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-if-node/guard.html","searchKeys":["guard","val guard: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.IfNode.guard"]},{"name":"val guard: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.guard","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-while-loop-node/guard.html","searchKeys":["guard","val guard: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.WhileLoopNode.guard"]},{"name":"val hashCommitmentInputPort: InputPort","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.hashCommitmentInputPort","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/hash-commitment-input-port.html","searchKeys":["hashCommitmentInputPort","val hashCommitmentInputPort: InputPort","io.github.aplcornell.viaduct.backends.cleartext.Local.hashCommitmentInputPort"]},{"name":"val hashHosts: Set<Host>","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.hashHosts","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/hash-hosts.html","searchKeys":["hashHosts","val hashHosts: Set<Host>","io.github.aplcornell.viaduct.backends.commitment.Commitment.hashHosts"]},{"name":"val host: Host","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.host","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/host.html","searchKeys":["host","val host: Host","io.github.aplcornell.viaduct.backends.cleartext.Local.host"]},{"name":"val host: Host","description":"io.github.aplcornell.viaduct.security.HostPrincipal.host","location":"compiler/io.github.aplcornell.viaduct.security/-host-principal/host.html","searchKeys":["host","val host: Host","io.github.aplcornell.viaduct.security.HostPrincipal.host"]},{"name":"val host: Host","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.host","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/host.html","searchKeys":["host","val host: Host","io.github.aplcornell.viaduct.syntax.ProtocolProjection.host"]},{"name":"val host: HostNode","description":"io.github.aplcornell.viaduct.syntax.surface.InputNode.host","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-input-node/host.html","searchKeys":["host","val host: HostNode","io.github.aplcornell.viaduct.syntax.surface.InputNode.host"]},{"name":"val host: HostNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutputNode.host","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-output-node/host.html","searchKeys":["host","val host: HostNode","io.github.aplcornell.viaduct.syntax.surface.OutputNode.host"]},{"name":"val hostCleartextCommitmentInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.hostCleartextCommitmentInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/host-cleartext-commitment-input-ports.html","searchKeys":["hostCleartextCommitmentInputPorts","val hostCleartextCommitmentInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.cleartext.Replication.hostCleartextCommitmentInputPorts"]},{"name":"val hostDeclarations: Iterable<HostDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.hostDeclarations","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/host-declarations.html","searchKeys":["hostDeclarations","val hostDeclarations: Iterable<HostDeclarationNode>","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.hostDeclarations"]},{"name":"val hostHashCommitmentInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.hostHashCommitmentInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/host-hash-commitment-input-ports.html","searchKeys":["hostHashCommitmentInputPorts","val hostHashCommitmentInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.cleartext.Replication.hostHashCommitmentInputPorts"]},{"name":"val hostInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.hostInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/host-input-ports.html","searchKeys":["hostInputPorts","val hostInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.cleartext.Replication.hostInputPorts"]},{"name":"val hostOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.hostOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/host-output-ports.html","searchKeys":["hostOutputPorts","val hostOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.cleartext.Replication.hostOutputPorts"]},{"name":"val hosts: HostSetValue","description":"io.github.aplcornell.viaduct.syntax.Protocol.hosts","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/hosts.html","searchKeys":["hosts","val hosts: HostSetValue","io.github.aplcornell.viaduct.syntax.Protocol.hosts"]},{"name":"val hosts: PersistentSet<Host>","description":"io.github.aplcornell.viaduct.syntax.values.HostSetValue.hosts","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-set-value/hosts.html","searchKeys":["hosts","val hosts: PersistentSet<Host>","io.github.aplcornell.viaduct.syntax.values.HostSetValue.hosts"]},{"name":"val hosts: Set<Host>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.hosts","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/hosts.html","searchKeys":["hosts","val hosts: Set<Host>","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.hosts"]},{"name":"val indices: Arguments<IndexParameterNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.LetNode.indices","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-let-node/indices.html","searchKeys":["indices","val indices: Arguments<IndexParameterNode>","io.github.aplcornell.viaduct.syntax.circuit.LetNode.indices"]},{"name":"val indices: Arguments<IndexParameterNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.indices","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/indices.html","searchKeys":["indices","val indices: Arguments<IndexParameterNode>","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.indices"]},{"name":"val information: String","description":"io.github.aplcornell.viaduct.errors.RuntimeError.information","location":"compiler/io.github.aplcornell.viaduct.errors/-runtime-error/information.html","searchKeys":["information","val information: String","io.github.aplcornell.viaduct.errors.RuntimeError.information"]},{"name":"val information: String","description":"io.github.aplcornell.viaduct.errors.ViaductInterpreterError.information","location":"compiler/io.github.aplcornell.viaduct.errors/-viaduct-interpreter-error/information.html","searchKeys":["information","val information: String","io.github.aplcornell.viaduct.errors.ViaductInterpreterError.information"]},{"name":"val initialize: SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.initialize","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/initialize.html","searchKeys":["initialize","val initialize: SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.initialize"]},{"name":"val initializer: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.initializer","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declaration-node/initializer.html","searchKeys":["initializer","val initializer: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.initializer"]},{"name":"val initializer: OutParameterInitializerNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.initializer","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/initializer.html","searchKeys":["initializer","val initializer: OutParameterInitializerNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.initializer"]},{"name":"val inputPort: InputPort","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.inputPort","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/input-port.html","searchKeys":["inputPort","val inputPort: InputPort","io.github.aplcornell.viaduct.backends.cleartext.Local.inputPort"]},{"name":"val inputPort: InputPort","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.inputPort","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/input-port.html","searchKeys":["inputPort","val inputPort: InputPort","io.github.aplcornell.viaduct.backends.commitment.Commitment.inputPort"]},{"name":"val inputs: Arguments<ParameterNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.inputs","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/inputs.html","searchKeys":["inputs","val inputs: Arguments<ParameterNode>","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.inputs"]},{"name":"val integrityComponent: T","description":"io.github.aplcornell.viaduct.security.SecurityLattice.integrityComponent","location":"compiler/io.github.aplcornell.viaduct.security/-security-lattice/integrity-component.html","searchKeys":["integrityComponent","val integrityComponent: T","io.github.aplcornell.viaduct.security.SecurityLattice.integrityComponent"]},{"name":"val internalInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.syntax.Protocol.internalInputPorts","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/internal-input-ports.html","searchKeys":["internalInputPorts","val internalInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.syntax.Protocol.internalInputPorts"]},{"name":"val internalOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.syntax.Protocol.internalOutputPorts","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol/internal-output-ports.html","searchKeys":["internalOutputPorts","val internalOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.syntax.Protocol.internalOutputPorts"]},{"name":"val isInParameter: Boolean","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.isInParameter","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/is-in-parameter.html","searchKeys":["isInParameter","val isInParameter: Boolean","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.isInParameter"]},{"name":"val isOutParameter: Boolean","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.isOutParameter","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/is-out-parameter.html","searchKeys":["isOutParameter","val isOutParameter: Boolean","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.isOutParameter"]},{"name":"val joinOfMeets: PersistentSet<Meet<A>>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.joinOfMeets","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/join-of-meets.html","searchKeys":["joinOfMeets","val joinOfMeets: PersistentSet<Meet<A>>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.joinOfMeets"]},{"name":"val jumpLabel: JumpLabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.jumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-break-node/jump-label.html","searchKeys":["jumpLabel","val jumpLabel: JumpLabelNode","io.github.aplcornell.viaduct.syntax.intermediate.BreakNode.jumpLabel"]},{"name":"val jumpLabel: JumpLabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.jumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-infinite-loop-node/jump-label.html","searchKeys":["jumpLabel","val jumpLabel: JumpLabelNode","io.github.aplcornell.viaduct.syntax.intermediate.InfiniteLoopNode.jumpLabel"]},{"name":"val jumpLabel: JumpLabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.BreakNode.jumpLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-break-node/jump-label.html","searchKeys":["jumpLabel","val jumpLabel: JumpLabelNode?","io.github.aplcornell.viaduct.syntax.surface.BreakNode.jumpLabel"]},{"name":"val labelArguments: Arguments<LabelNode>?","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode.labelArguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/label-arguments.html","searchKeys":["labelArguments","val labelArguments: Arguments<LabelNode>?","io.github.aplcornell.viaduct.syntax.ObjectTypeNode.labelArguments"]},{"name":"val labelConstraints: Arguments<IFCDelegationDeclarationNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.labelConstraints","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/label-constraints.html","searchKeys":["labelConstraints","val labelConstraints: Arguments<IFCDelegationDeclarationNode>","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.labelConstraints"]},{"name":"val labelConstraints: Arguments<IFCDelegationDeclarationNode>?","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.labelConstraints","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/label-constraints.html","searchKeys":["labelConstraints","val labelConstraints: Arguments<IFCDelegationDeclarationNode>?","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.labelConstraints"]},{"name":"val labelParameters: Arguments<LabelVariableNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.labelParameters","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/label-parameters.html","searchKeys":["labelParameters","val labelParameters: Arguments<LabelVariableNode>","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.labelParameters"]},{"name":"val labelParameters: Arguments<LabelVariableNode>?","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.labelParameters","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/label-parameters.html","searchKeys":["labelParameters","val labelParameters: Arguments<LabelVariableNode>?","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.labelParameters"]},{"name":"val labelVariable: LabelVariable","description":"io.github.aplcornell.viaduct.security.PolymorphicPrincipal.labelVariable","location":"compiler/io.github.aplcornell.viaduct.security/-polymorphic-principal/label-variable.html","searchKeys":["labelVariable","val labelVariable: LabelVariable","io.github.aplcornell.viaduct.security.PolymorphicPrincipal.labelVariable"]},{"name":"val length: Int","description":"io.github.aplcornell.viaduct.parsing.SourceFile.length","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/length.html","searchKeys":["length","val length: Int","io.github.aplcornell.viaduct.parsing.SourceFile.length"]},{"name":"val lhs: Int","description":"io.github.aplcornell.viaduct.selection.CostMul.lhs","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-mul/lhs.html","searchKeys":["lhs","val lhs: Int","io.github.aplcornell.viaduct.selection.CostMul.lhs"]},{"name":"val lhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelAnd.lhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-and/lhs.html","searchKeys":["lhs","val lhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelAnd.lhs"]},{"name":"val lhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelJoin.lhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-join/lhs.html","searchKeys":["lhs","val lhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelJoin.lhs"]},{"name":"val lhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelMeet.lhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-meet/lhs.html","searchKeys":["lhs","val lhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelMeet.lhs"]},{"name":"val lhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelOr.lhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-or/lhs.html","searchKeys":["lhs","val lhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelOr.lhs"]},{"name":"val lhs: SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.Implies.lhs","location":"compiler/io.github.aplcornell.viaduct.selection/-implies/lhs.html","searchKeys":["lhs","val lhs: SelectionConstraint","io.github.aplcornell.viaduct.selection.Implies.lhs"]},{"name":"val lhs: SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostAdd.lhs","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-add/lhs.html","searchKeys":["lhs","val lhs: SymbolicCost","io.github.aplcornell.viaduct.selection.CostAdd.lhs"]},{"name":"val lhs: SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostMax.lhs","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-max/lhs.html","searchKeys":["lhs","val lhs: SymbolicCost","io.github.aplcornell.viaduct.selection.CostMax.lhs"]},{"name":"val line: Int","description":"io.github.aplcornell.viaduct.parsing.SourcePosition.line","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/line.html","searchKeys":["line","val line: Int","io.github.aplcornell.viaduct.parsing.SourcePosition.line"]},{"name":"val literalValue: Boolean","description":"io.github.aplcornell.viaduct.selection.Literal.literalValue","location":"compiler/io.github.aplcornell.viaduct.selection/-literal/literal-value.html","searchKeys":["literalValue","val literalValue: Boolean","io.github.aplcornell.viaduct.selection.Literal.literalValue"]},{"name":"val mainFunction: FunctionName","description":"io.github.aplcornell.viaduct.analysis.mainFunction","location":"compiler/io.github.aplcornell.viaduct.analysis/main-function.html","searchKeys":["mainFunction","val mainFunction: FunctionName","io.github.aplcornell.viaduct.analysis.mainFunction"]},{"name":"val message: AtomicExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.message","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-output-node/message.html","searchKeys":["message","val message: AtomicExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.OutputNode.message"]},{"name":"val message: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutputNode.message","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-output-node/message.html","searchKeys":["message","val message: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.OutputNode.message"]},{"name":"val name: FunctionNameNode","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/name.html","searchKeys":["name","val name: FunctionNameNode","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.name"]},{"name":"val name: FunctionNameNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-call-node/name.html","searchKeys":["name","val name: FunctionNameNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionCallNode.name"]},{"name":"val name: FunctionNameNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/name.html","searchKeys":["name","val name: FunctionNameNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.name"]},{"name":"val name: FunctionNameNode","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-call-node/name.html","searchKeys":["name","val name: FunctionNameNode","io.github.aplcornell.viaduct.syntax.surface.FunctionCallNode.name"]},{"name":"val name: FunctionNameNode","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/name.html","searchKeys":["name","val name: FunctionNameNode","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.name"]},{"name":"val name: Host","description":"io.github.aplcornell.viaduct.security.LabelLiteral.name","location":"compiler/io.github.aplcornell.viaduct.security/-label-literal/name.html","searchKeys":["name","val name: Host","io.github.aplcornell.viaduct.security.LabelLiteral.name"]},{"name":"val name: HostNode","description":"io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-host-declaration-node/name.html","searchKeys":["name","val name: HostNode","io.github.aplcornell.viaduct.syntax.circuit.HostDeclarationNode.name"]},{"name":"val name: HostNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-host-declaration-node/name.html","searchKeys":["name","val name: HostNode","io.github.aplcornell.viaduct.syntax.intermediate.HostDeclarationNode.name"]},{"name":"val name: HostNode","description":"io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-host-declaration-node/name.html","searchKeys":["name","val name: HostNode","io.github.aplcornell.viaduct.syntax.surface.HostDeclarationNode.name"]},{"name":"val name: LabelVariable","description":"io.github.aplcornell.viaduct.security.LabelParameter.name","location":"compiler/io.github.aplcornell.viaduct.security/-label-parameter/name.html","searchKeys":["name","val name: LabelVariable","io.github.aplcornell.viaduct.security.LabelParameter.name"]},{"name":"val name: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-initialization-node/name.html","searchKeys":["name","val name: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterInitializationNode.name"]},{"name":"val name: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-initialization-node/name.html","searchKeys":["name","val name: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.name"]},{"name":"val name: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/name.html","searchKeys":["name","val name: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.ParameterNode.name"]},{"name":"val name: VariableNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.name","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reference-node/name.html","searchKeys":["name","val name: VariableNode","io.github.aplcornell.viaduct.syntax.circuit.ReferenceNode.name"]},{"name":"val node: HasSourceLocation","description":"io.github.aplcornell.viaduct.errors.JumpOutsideLoopScopeError.node","location":"compiler/io.github.aplcornell.viaduct.errors/-jump-outside-loop-scope-error/node.html","searchKeys":["node","val node: HasSourceLocation","io.github.aplcornell.viaduct.errors.JumpOutsideLoopScopeError.node"]},{"name":"val node: HasSourceLocation? = null","description":"io.github.aplcornell.viaduct.errors.RuntimeError.node","location":"compiler/io.github.aplcornell.viaduct.errors/-runtime-error/node.html","searchKeys":["node","val node: HasSourceLocation? = null","io.github.aplcornell.viaduct.errors.RuntimeError.node"]},{"name":"val node: HasSourceLocation? = null","description":"io.github.aplcornell.viaduct.errors.ViaductInterpreterError.node","location":"compiler/io.github.aplcornell.viaduct.errors/-viaduct-interpreter-error/node.html","searchKeys":["node","val node: HasSourceLocation? = null","io.github.aplcornell.viaduct.errors.ViaductInterpreterError.node"]},{"name":"val numberOfLines: Int","description":"io.github.aplcornell.viaduct.parsing.SourceFile.numberOfLines","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/number-of-lines.html","searchKeys":["numberOfLines","val numberOfLines: Int","io.github.aplcornell.viaduct.parsing.SourceFile.numberOfLines"]},{"name":"val objectType: ObjectTypeNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.objectType","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-declaration-node/object-type.html","searchKeys":["objectType","val objectType: ObjectTypeNode","io.github.aplcornell.viaduct.syntax.intermediate.DeclarationNode.objectType"]},{"name":"val objectType: ObjectTypeNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.objectType","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-constructor-initializer-node/object-type.html","searchKeys":["objectType","val objectType: ObjectTypeNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterConstructorInitializerNode.objectType"]},{"name":"val objectType: ObjectTypeNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.objectType","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/object-type.html","searchKeys":["objectType","val objectType: ObjectTypeNode","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.objectType"]},{"name":"val objectType: ObjectTypeNode","description":"io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.objectType","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-constructor-call-node/object-type.html","searchKeys":["objectType","val objectType: ObjectTypeNode","io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.objectType"]},{"name":"val objectType: ObjectTypeNode","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode.objectType","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/object-type.html","searchKeys":["objectType","val objectType: ObjectTypeNode","io.github.aplcornell.viaduct.syntax.surface.ParameterNode.objectType"]},{"name":"val offset: Int","description":"io.github.aplcornell.viaduct.parsing.SourcePosition.offset","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/offset.html","searchKeys":["offset","val offset: Int","io.github.aplcornell.viaduct.parsing.SourcePosition.offset"]},{"name":"val openCleartextOutputPort: OutputPort","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.openCleartextOutputPort","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/open-cleartext-output-port.html","searchKeys":["openCleartextOutputPort","val openCleartextOutputPort: OutputPort","io.github.aplcornell.viaduct.backends.commitment.Commitment.openCleartextOutputPort"]},{"name":"val openCommitmentOutputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.openCommitmentOutputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/open-commitment-output-ports.html","searchKeys":["openCommitmentOutputPorts","val openCommitmentOutputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.commitment.Commitment.openCommitmentOutputPorts"]},{"name":"val operator: BinaryOperator","description":"io.github.aplcornell.viaduct.syntax.datatypes.Modify.operator","location":"compiler/io.github.aplcornell.viaduct.syntax.datatypes/-modify/operator.html","searchKeys":["operator","val operator: BinaryOperator","io.github.aplcornell.viaduct.syntax.datatypes.Modify.operator"]},{"name":"val operator: Operator","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.operator","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-application-node/operator.html","searchKeys":["operator","val operator: Operator","io.github.aplcornell.viaduct.syntax.circuit.OperatorApplicationNode.operator"]},{"name":"val operator: Operator","description":"io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.operator","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-operator-node/operator.html","searchKeys":["operator","val operator: Operator","io.github.aplcornell.viaduct.syntax.circuit.OperatorNode.operator"]},{"name":"val operator: Operator","description":"io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.operator","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-operator-application-node/operator.html","searchKeys":["operator","val operator: Operator","io.github.aplcornell.viaduct.syntax.intermediate.OperatorApplicationNode.operator"]},{"name":"val operator: Operator","description":"io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.operator","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-operator-application-node/operator.html","searchKeys":["operator","val operator: Operator","io.github.aplcornell.viaduct.syntax.surface.OperatorApplicationNode.operator"]},{"name":"val operator: OperatorNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.operator","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-reduce-node/operator.html","searchKeys":["operator","val operator: OperatorNode","io.github.aplcornell.viaduct.syntax.circuit.ReduceNode.operator"]},{"name":"val outputPort: OutputPort","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.outputPort","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/output-port.html","searchKeys":["outputPort","val outputPort: OutputPort","io.github.aplcornell.viaduct.backends.cleartext.Local.outputPort"]},{"name":"val outputPorts: Map<Host, OutputPort>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.outputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/output-ports.html","searchKeys":["outputPorts","val outputPorts: Map<Host, OutputPort>","io.github.aplcornell.viaduct.backends.zkp.ZKP.outputPorts"]},{"name":"val outputs: Arguments<ParameterNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.outputs","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/outputs.html","searchKeys":["outputs","val outputs: Arguments<ParameterNode>","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.outputs"]},{"name":"val parameter: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.parameter","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-out-parameter-argument-node/parameter.html","searchKeys":["parameter","val parameter: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.OutParameterArgumentNode.parameter"]},{"name":"val parameter: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode.parameter","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-argument-node/parameter.html","searchKeys":["parameter","val parameter: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.OutParameterArgumentNode.parameter"]},{"name":"val parameterDirection: ParameterDirection","description":"io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.parameterDirection","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-parameter-node/parameter-direction.html","searchKeys":["parameterDirection","val parameterDirection: ParameterDirection","io.github.aplcornell.viaduct.syntax.intermediate.ParameterNode.parameterDirection"]},{"name":"val parameterDirection: ParameterDirection","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode.parameterDirection","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/parameter-direction.html","searchKeys":["parameterDirection","val parameterDirection: ParameterDirection","io.github.aplcornell.viaduct.syntax.surface.ParameterNode.parameterDirection"]},{"name":"val parameters: Arguments<ParameterNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.parameters","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/parameters.html","searchKeys":["parameters","val parameters: Arguments<ParameterNode>","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.parameters"]},{"name":"val parameters: Arguments<ParameterNode>","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.parameters","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/parameters.html","searchKeys":["parameters","val parameters: Arguments<ParameterNode>","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.parameters"]},{"name":"val path: String","description":"io.github.aplcornell.viaduct.parsing.SourceFile.path","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-file/path.html","searchKeys":["path","val path: String","io.github.aplcornell.viaduct.parsing.SourceFile.path"]},{"name":"val pcLabel: LabelNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.pcLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-function-declaration-node/pc-label.html","searchKeys":["pcLabel","val pcLabel: LabelNode","io.github.aplcornell.viaduct.syntax.intermediate.FunctionDeclarationNode.pcLabel"]},{"name":"val pcLabel: LabelNode?","description":"io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.pcLabel","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-function-declaration-node/pc-label.html","searchKeys":["pcLabel","val pcLabel: LabelNode?","io.github.aplcornell.viaduct.syntax.surface.FunctionDeclarationNode.pcLabel"]},{"name":"val problem: SelectionProblem","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.problem","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/problem.html","searchKeys":["problem","val problem: SelectionProblem","io.github.aplcornell.viaduct.selection.ProtocolAssignment.problem"]},{"name":"val program: ProgramNode","description":"io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.program","location":"compiler/io.github.aplcornell.viaduct.analysis/-protocol-analysis/program.html","searchKeys":["program","val program: ProgramNode","io.github.aplcornell.viaduct.analysis.ProtocolAnalysis.program"]},{"name":"val program: ProgramNode","description":"io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.program","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local-protocol-factory/program.html","searchKeys":["program","val program: ProgramNode","io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.program"]},{"name":"val program: ProgramNode","description":"io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.program","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication-protocol-factory/program.html","searchKeys":["program","val program: ProgramNode","io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.program"]},{"name":"val program: ProgramNode","description":"io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory.program","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment-protocol-factory/program.html","searchKeys":["program","val program: ProgramNode","io.github.aplcornell.viaduct.backends.commitment.CommitmentProtocolFactory.program"]},{"name":"val program: ProgramNode","description":"io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.program","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p-protocol-factory/program.html","searchKeys":["program","val program: ProgramNode","io.github.aplcornell.viaduct.backends.zkp.ZKPProtocolFactory.program"]},{"name":"val program: ProgramNode","description":"io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.program","location":"compiler/io.github.aplcornell.viaduct.syntax/-host-trust-configuration/program.html","searchKeys":["program","val program: ProgramNode","io.github.aplcornell.viaduct.syntax.HostTrustConfiguration.program"]},{"name":"val propModel: Map<String, Boolean>","description":"io.github.aplcornell.viaduct.selection.ProtocolAssignment.propModel","location":"compiler/io.github.aplcornell.viaduct.selection/-protocol-assignment/prop-model.html","searchKeys":["propModel","val propModel: Map<String, Boolean>","io.github.aplcornell.viaduct.selection.ProtocolAssignment.propModel"]},{"name":"val props: List<SelectionConstraint>","description":"io.github.aplcornell.viaduct.selection.And.props","location":"compiler/io.github.aplcornell.viaduct.selection/-and/props.html","searchKeys":["props","val props: List<SelectionConstraint>","io.github.aplcornell.viaduct.selection.And.props"]},{"name":"val props: List<SelectionConstraint>","description":"io.github.aplcornell.viaduct.selection.Or.props","location":"compiler/io.github.aplcornell.viaduct.selection/-or/props.html","searchKeys":["props","val props: List<SelectionConstraint>","io.github.aplcornell.viaduct.selection.Or.props"]},{"name":"val protocol: Protocol","description":"io.github.aplcornell.viaduct.selection.VariableIn.protocol","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-in/protocol.html","searchKeys":["protocol","val protocol: Protocol","io.github.aplcornell.viaduct.selection.VariableIn.protocol"]},{"name":"val protocol: Protocol","description":"io.github.aplcornell.viaduct.syntax.ProtocolProjection.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax/-protocol-projection/protocol.html","searchKeys":["protocol","val protocol: Protocol","io.github.aplcornell.viaduct.syntax.ProtocolProjection.protocol"]},{"name":"val protocol: ProtocolNode","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-declaration-node/protocol.html","searchKeys":["protocol","val protocol: ProtocolNode","io.github.aplcornell.viaduct.syntax.circuit.CircuitDeclarationNode.protocol"]},{"name":"val protocol: ProtocolNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-parameter-node/protocol.html","searchKeys":["protocol","val protocol: ProtocolNode","io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.protocol"]},{"name":"val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-constructor-call-node/protocol.html","searchKeys":["protocol","val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.surface.ConstructorCallNode.protocol"]},{"name":"val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.surface.LetNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-let-node/protocol.html","searchKeys":["protocol","val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.surface.LetNode.protocol"]},{"name":"val protocol: ProtocolNode?","description":"io.github.aplcornell.viaduct.syntax.surface.ParameterNode.protocol","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-parameter-node/protocol.html","searchKeys":["protocol","val protocol: ProtocolNode?","io.github.aplcornell.viaduct.syntax.surface.ParameterNode.protocol"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-arith-a-b-y/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.aby.ArithABY.Companion.protocolName"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-bool-a-b-y/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.aby.BoolABY.Companion.protocolName"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-yao-a-b-y/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.aby.YaoABY.Companion.protocolName"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.cleartext.Local.Companion.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.cleartext.Local.Companion.protocolName"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.cleartext.Replication.Companion.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.cleartext.Replication.Companion.protocolName"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.commitment/-commitment/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.commitment.Commitment.Companion.protocolName"]},{"name":"val protocolName: ProtocolName","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.Companion.protocolName","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/-companion/protocol-name.html","searchKeys":["protocolName","val protocolName: ProtocolName","io.github.aplcornell.viaduct.backends.zkp.ZKP.Companion.protocolName"]},{"name":"val protocols: Set<Protocol>","description":"io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.protocols","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-local-protocol-factory/protocols.html","searchKeys":["protocols","val protocols: Set<Protocol>","io.github.aplcornell.viaduct.backends.cleartext.LocalProtocolFactory.protocols"]},{"name":"val protocols: Set<Protocol>","description":"io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.protocols","location":"compiler/io.github.aplcornell.viaduct.backends.cleartext/-replication-protocol-factory/protocols.html","searchKeys":["protocols","val protocols: Set<Protocol>","io.github.aplcornell.viaduct.backends.cleartext.ReplicationProtocolFactory.protocols"]},{"name":"val prover: Host","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.prover","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/prover.html","searchKeys":["prover","val prover: Host","io.github.aplcornell.viaduct.backends.zkp.ZKP.prover"]},{"name":"val query: QueryNameNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.query","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/query.html","searchKeys":["query","val query: QueryNameNode","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.query"]},{"name":"val query: QueryNameNode","description":"io.github.aplcornell.viaduct.syntax.surface.QueryNode.query","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-query-node/query.html","searchKeys":["query","val query: QueryNameNode","io.github.aplcornell.viaduct.syntax.surface.QueryNode.query"]},{"name":"val recv: InputPort","description":"io.github.aplcornell.viaduct.selection.CommunicationEvent.recv","location":"compiler/io.github.aplcornell.viaduct.selection/-communication-event/recv.html","searchKeys":["recv","val recv: InputPort","io.github.aplcornell.viaduct.selection.CommunicationEvent.recv"]},{"name":"val result: ValueType","description":"io.github.aplcornell.viaduct.syntax.types.FunctionType.result","location":"compiler/io.github.aplcornell.viaduct.syntax.types/-function-type/result.html","searchKeys":["result","val result: ValueType","io.github.aplcornell.viaduct.syntax.types.FunctionType.result"]},{"name":"val returnStatement: ReturnNode","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.returnStatement","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-block-node/return-statement.html","searchKeys":["returnStatement","val returnStatement: ReturnNode","io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.returnStatement"]},{"name":"val rhs: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.rhs","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-out-parameter-initialization-node/rhs.html","searchKeys":["rhs","val rhs: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.OutParameterInitializationNode.rhs"]},{"name":"val rhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelAnd.rhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-and/rhs.html","searchKeys":["rhs","val rhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelAnd.rhs"]},{"name":"val rhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelJoin.rhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-join/rhs.html","searchKeys":["rhs","val rhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelJoin.rhs"]},{"name":"val rhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelMeet.rhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-meet/rhs.html","searchKeys":["rhs","val rhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelMeet.rhs"]},{"name":"val rhs: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelOr.rhs","location":"compiler/io.github.aplcornell.viaduct.security/-label-or/rhs.html","searchKeys":["rhs","val rhs: LabelExpression","io.github.aplcornell.viaduct.security.LabelOr.rhs"]},{"name":"val rhs: SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.Implies.rhs","location":"compiler/io.github.aplcornell.viaduct.selection/-implies/rhs.html","searchKeys":["rhs","val rhs: SelectionConstraint","io.github.aplcornell.viaduct.selection.Implies.rhs"]},{"name":"val rhs: SelectionConstraint","description":"io.github.aplcornell.viaduct.selection.Not.rhs","location":"compiler/io.github.aplcornell.viaduct.selection/-not/rhs.html","searchKeys":["rhs","val rhs: SelectionConstraint","io.github.aplcornell.viaduct.selection.Not.rhs"]},{"name":"val rhs: SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostAdd.rhs","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-add/rhs.html","searchKeys":["rhs","val rhs: SymbolicCost","io.github.aplcornell.viaduct.selection.CostAdd.rhs"]},{"name":"val rhs: SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostMax.rhs","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-max/rhs.html","searchKeys":["rhs","val rhs: SymbolicCost","io.github.aplcornell.viaduct.selection.CostMax.rhs"]},{"name":"val rhs: SymbolicCost","description":"io.github.aplcornell.viaduct.selection.CostMul.rhs","location":"compiler/io.github.aplcornell.viaduct.selection/-cost-mul/rhs.html","searchKeys":["rhs","val rhs: SymbolicCost","io.github.aplcornell.viaduct.selection.CostMul.rhs"]},{"name":"val root: RootNode","description":"io.github.aplcornell.viaduct.attributes.Tree.root","location":"compiler/io.github.aplcornell.viaduct.attributes/-tree/root.html","searchKeys":["root","val root: RootNode","io.github.aplcornell.viaduct.attributes.Tree.root"]},{"name":"val secretInputPort: InputPort","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.secretInputPort","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/secret-input-port.html","searchKeys":["secretInputPort","val secretInputPort: InputPort","io.github.aplcornell.viaduct.backends.zkp.ZKP.secretInputPort"]},{"name":"val secretInputPorts: Map<Host, InputPort>","description":"io.github.aplcornell.viaduct.backends.aby.ABY.secretInputPorts","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/secret-input-ports.html","searchKeys":["secretInputPorts","val secretInputPorts: Map<Host, InputPort>","io.github.aplcornell.viaduct.backends.aby.ABY.secretInputPorts"]},{"name":"val selection: ProtocolAssignment","description":"io.github.aplcornell.viaduct.passes.MuxPostprocessor.selection","location":"compiler/io.github.aplcornell.viaduct.passes/-mux-postprocessor/selection.html","searchKeys":["selection","val selection: ProtocolAssignment","io.github.aplcornell.viaduct.passes.MuxPostprocessor.selection"]},{"name":"val selectionProblemSolvers: List<Pair<String, SelectionProblemSolver>>","description":"io.github.aplcornell.viaduct.selection.selectionProblemSolvers","location":"compiler/io.github.aplcornell.viaduct.selection/selection-problem-solvers.html","searchKeys":["selectionProblemSolvers","val selectionProblemSolvers: List<Pair<String, SelectionProblemSolver>>","io.github.aplcornell.viaduct.selection.selectionProblemSolvers"]},{"name":"val send: OutputPort","description":"io.github.aplcornell.viaduct.selection.CommunicationEvent.send","location":"compiler/io.github.aplcornell.viaduct.selection/-communication-event/send.html","searchKeys":["send","val send: OutputPort","io.github.aplcornell.viaduct.selection.CommunicationEvent.send"]},{"name":"val server: Host","description":"io.github.aplcornell.viaduct.backends.aby.ABY.server","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y/server.html","searchKeys":["server","val server: Host","io.github.aplcornell.viaduct.backends.aby.ABY.server"]},{"name":"val shape: Arguments<IndexExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.ArrayType.shape","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-array-type/shape.html","searchKeys":["shape","val shape: Arguments<IndexExpressionNode>","io.github.aplcornell.viaduct.syntax.circuit.ArrayType.shape"]},{"name":"val sourcePath: String","description":"io.github.aplcornell.viaduct.parsing.SourcePosition.sourcePath","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-position/source-path.html","searchKeys":["sourcePath","val sourcePath: String","io.github.aplcornell.viaduct.parsing.SourcePosition.sourcePath"]},{"name":"val sourcePath: String","description":"io.github.aplcornell.viaduct.parsing.SourceRange.sourcePath","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/source-path.html","searchKeys":["sourcePath","val sourcePath: String","io.github.aplcornell.viaduct.parsing.SourceRange.sourcePath"]},{"name":"val start: SourcePosition","description":"io.github.aplcornell.viaduct.parsing.SourceRange.start","location":"compiler/io.github.aplcornell.viaduct.parsing/-source-range/start.html","searchKeys":["start","val start: SourcePosition","io.github.aplcornell.viaduct.parsing.SourceRange.start"]},{"name":"val statements: PersistentList<CircuitStatementNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.statements","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-circuit-block-node/statements.html","searchKeys":["statements","val statements: PersistentList<CircuitStatementNode>","io.github.aplcornell.viaduct.syntax.circuit.CircuitBlockNode.statements"]},{"name":"val statements: PersistentList<StatementNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.statements","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-block-node/statements.html","searchKeys":["statements","val statements: PersistentList<StatementNode>","io.github.aplcornell.viaduct.syntax.intermediate.BlockNode.statements"]},{"name":"val statements: PersistentList<StatementNode>","description":"io.github.aplcornell.viaduct.syntax.surface.BlockNode.statements","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-block-node/statements.html","searchKeys":["statements","val statements: PersistentList<StatementNode>","io.github.aplcornell.viaduct.syntax.surface.BlockNode.statements"]},{"name":"val temporary: TemporaryNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.temporary","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-read-node/temporary.html","searchKeys":["temporary","val temporary: TemporaryNode","io.github.aplcornell.viaduct.syntax.intermediate.ReadNode.temporary"]},{"name":"val temporary: TemporaryNode","description":"io.github.aplcornell.viaduct.syntax.surface.LetNode.temporary","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-let-node/temporary.html","searchKeys":["temporary","val temporary: TemporaryNode","io.github.aplcornell.viaduct.syntax.surface.LetNode.temporary"]},{"name":"val temporary: TemporaryNode","description":"io.github.aplcornell.viaduct.syntax.surface.ReadNode.temporary","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-read-node/temporary.html","searchKeys":["temporary","val temporary: TemporaryNode","io.github.aplcornell.viaduct.syntax.surface.ReadNode.temporary"]},{"name":"val thenBranch: BlockNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.IfNode.thenBranch","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-if-node/then-branch.html","searchKeys":["thenBranch","val thenBranch: BlockNode","io.github.aplcornell.viaduct.syntax.intermediate.IfNode.thenBranch"]},{"name":"val thenBranch: BlockNode","description":"io.github.aplcornell.viaduct.syntax.surface.IfNode.thenBranch","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-if-node/then-branch.html","searchKeys":["thenBranch","val thenBranch: BlockNode","io.github.aplcornell.viaduct.syntax.surface.IfNode.thenBranch"]},{"name":"val to: FreeDistributiveLattice<A>","description":"io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo.to","location":"compiler/io.github.aplcornell.viaduct.algebra/-free-distributive-lattice/-less-than-or-equal-to/to.html","searchKeys":["to","val to: FreeDistributiveLattice<A>","io.github.aplcornell.viaduct.algebra.FreeDistributiveLattice.LessThanOrEqualTo.to"]},{"name":"val tree: Tree<Node, ProgramNode>","description":"io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.tree","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-program-node/tree.html","searchKeys":["tree","val tree: Tree<Node, ProgramNode>","io.github.aplcornell.viaduct.syntax.intermediate.ProgramNode.tree"]},{"name":"val type: ArrayTypeNode","description":"io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.type","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-parameter-node/type.html","searchKeys":["type","val type: ArrayTypeNode","io.github.aplcornell.viaduct.syntax.circuit.ParameterNode.type"]},{"name":"val type: ValueTypeNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.InputNode.type","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-input-node/type.html","searchKeys":["type","val type: ValueTypeNode","io.github.aplcornell.viaduct.syntax.intermediate.InputNode.type"]},{"name":"val type: ValueTypeNode","description":"io.github.aplcornell.viaduct.syntax.surface.InputNode.type","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-input-node/type.html","searchKeys":["type","val type: ValueTypeNode","io.github.aplcornell.viaduct.syntax.surface.InputNode.type"]},{"name":"val typeArguments: Arguments<ValueTypeNode>","description":"io.github.aplcornell.viaduct.syntax.ObjectTypeNode.typeArguments","location":"compiler/io.github.aplcornell.viaduct.syntax/-object-type-node/type-arguments.html","searchKeys":["typeArguments","val typeArguments: Arguments<ValueTypeNode>","io.github.aplcornell.viaduct.syntax.ObjectTypeNode.typeArguments"]},{"name":"val unicodeLineBreak: Regex","description":"io.github.aplcornell.viaduct.util.unicodeLineBreak","location":"compiler/io.github.aplcornell.viaduct.util/unicode-line-break.html","searchKeys":["unicodeLineBreak","val unicodeLineBreak: Regex","io.github.aplcornell.viaduct.util.unicodeLineBreak"]},{"name":"val update: SimpleStatementNode","description":"io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.update","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-for-loop-node/update.html","searchKeys":["update","val update: SimpleStatementNode","io.github.aplcornell.viaduct.syntax.surface.ForLoopNode.update"]},{"name":"val update: UpdateNameNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.update","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/update.html","searchKeys":["update","val update: UpdateNameNode","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.update"]},{"name":"val update: UpdateNameNode","description":"io.github.aplcornell.viaduct.syntax.surface.UpdateNode.update","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-update-node/update.html","searchKeys":["update","val update: UpdateNameNode","io.github.aplcornell.viaduct.syntax.surface.UpdateNode.update"]},{"name":"val value: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.circuit.LetNode.value","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-let-node/value.html","searchKeys":["value","val value: ExpressionNode","io.github.aplcornell.viaduct.syntax.circuit.LetNode.value"]},{"name":"val value: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.LetNode.value","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-let-node/value.html","searchKeys":["value","val value: ExpressionNode","io.github.aplcornell.viaduct.syntax.intermediate.LetNode.value"]},{"name":"val value: ExpressionNode","description":"io.github.aplcornell.viaduct.syntax.surface.LetNode.value","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-let-node/value.html","searchKeys":["value","val value: ExpressionNode","io.github.aplcornell.viaduct.syntax.surface.LetNode.value"]},{"name":"val value: Host","description":"io.github.aplcornell.viaduct.syntax.values.HostValue.value","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-host-value/value.html","searchKeys":["value","val value: Host","io.github.aplcornell.viaduct.syntax.values.HostValue.value"]},{"name":"val value: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelConfidentiality.value","location":"compiler/io.github.aplcornell.viaduct.security/-label-confidentiality/value.html","searchKeys":["value","val value: LabelExpression","io.github.aplcornell.viaduct.security.LabelConfidentiality.value"]},{"name":"val value: LabelExpression","description":"io.github.aplcornell.viaduct.security.LabelIntegrity.value","location":"compiler/io.github.aplcornell.viaduct.security/-label-integrity/value.html","searchKeys":["value","val value: LabelExpression","io.github.aplcornell.viaduct.security.LabelIntegrity.value"]},{"name":"val value: List<Byte>","description":"io.github.aplcornell.viaduct.syntax.values.ByteVecValue.value","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-byte-vec-value/value.html","searchKeys":["value","val value: List<Byte>","io.github.aplcornell.viaduct.syntax.values.ByteVecValue.value"]},{"name":"val value: String","description":"io.github.aplcornell.viaduct.syntax.values.StringValue.value","location":"compiler/io.github.aplcornell.viaduct.syntax.values/-string-value/value.html","searchKeys":["value","val value: String","io.github.aplcornell.viaduct.syntax.values.StringValue.value"]},{"name":"val value: T","description":"io.github.aplcornell.viaduct.syntax.Located.value","location":"compiler/io.github.aplcornell.viaduct.syntax/-located/value.html","searchKeys":["value","val value: T","io.github.aplcornell.viaduct.syntax.Located.value"]},{"name":"val value: Value","description":"io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.value","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-literal-node/value.html","searchKeys":["value","val value: Value","io.github.aplcornell.viaduct.syntax.circuit.LiteralNode.value"]},{"name":"val value: Value","description":"io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.value","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-literal-node/value.html","searchKeys":["value","val value: Value","io.github.aplcornell.viaduct.syntax.intermediate.LiteralNode.value"]},{"name":"val value: Value","description":"io.github.aplcornell.viaduct.syntax.surface.LiteralNode.value","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-literal-node/value.html","searchKeys":["value","val value: Value","io.github.aplcornell.viaduct.syntax.surface.LiteralNode.value"]},{"name":"val values: Arguments<PureExpressionNode>","description":"io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.values","location":"compiler/io.github.aplcornell.viaduct.syntax.circuit/-return-node/values.html","searchKeys":["values","val values: Arguments<PureExpressionNode>","io.github.aplcornell.viaduct.syntax.circuit.ReturnNode.values"]},{"name":"val var1: FunctionVariable","description":"io.github.aplcornell.viaduct.selection.VariableEquals.var1","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-equals/var1.html","searchKeys":["var1","val var1: FunctionVariable","io.github.aplcornell.viaduct.selection.VariableEquals.var1"]},{"name":"val var2: FunctionVariable","description":"io.github.aplcornell.viaduct.selection.VariableEquals.var2","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-equals/var2.html","searchKeys":["var2","val var2: FunctionVariable","io.github.aplcornell.viaduct.selection.VariableEquals.var2"]},{"name":"val variable: FunctionVariable","description":"io.github.aplcornell.viaduct.selection.VariableIn.variable","location":"compiler/io.github.aplcornell.viaduct.selection/-variable-in/variable.html","searchKeys":["variable","val variable: FunctionVariable","io.github.aplcornell.viaduct.selection.VariableIn.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-object-reference-argument-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.ObjectReferenceArgumentNode.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-query-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.QueryNode.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.intermediate/-update-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.intermediate.UpdateNode.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-declaration-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.DeclarationNode.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-declaration-argument-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.ObjectDeclarationArgumentNode.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-object-reference-argument-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.ObjectReferenceArgumentNode.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.QueryNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-query-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.QueryNode.variable"]},{"name":"val variable: ObjectVariableNode","description":"io.github.aplcornell.viaduct.syntax.surface.UpdateNode.variable","location":"compiler/io.github.aplcornell.viaduct.syntax.surface/-update-node/variable.html","searchKeys":["variable","val variable: ObjectVariableNode","io.github.aplcornell.viaduct.syntax.surface.UpdateNode.variable"]},{"name":"val variable: String","description":"io.github.aplcornell.viaduct.selection.GuardVisibilityFlag.variable","location":"compiler/io.github.aplcornell.viaduct.selection/-guard-visibility-flag/variable.html","searchKeys":["variable","val variable: String","io.github.aplcornell.viaduct.selection.GuardVisibilityFlag.variable"]},{"name":"val variable: String","description":"io.github.aplcornell.viaduct.selection.HostVariable.variable","location":"compiler/io.github.aplcornell.viaduct.selection/-host-variable/variable.html","searchKeys":["variable","val variable: String","io.github.aplcornell.viaduct.selection.HostVariable.variable"]},{"name":"val variable: Variable","description":"io.github.aplcornell.viaduct.selection.FunctionVariable.variable","location":"compiler/io.github.aplcornell.viaduct.selection/-function-variable/variable.html","searchKeys":["variable","val variable: Variable","io.github.aplcornell.viaduct.selection.FunctionVariable.variable"]},{"name":"val verifiers: Set<Host>","description":"io.github.aplcornell.viaduct.backends.zkp.ZKP.verifiers","location":"compiler/io.github.aplcornell.viaduct.backends.zkp/-z-k-p/verifiers.html","searchKeys":["verifiers","val verifiers: Set<Host>","io.github.aplcornell.viaduct.backends.zkp.ZKP.verifiers"]},{"name":"var parentFactory: ProtocolFactory? = null","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.parentFactory","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/parent-factory.html","searchKeys":["parentFactory","var parentFactory: ProtocolFactory? = null","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.parentFactory"]},{"name":"var protocolComposer: ProtocolComposer? = null","description":"io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.protocolComposer","location":"compiler/io.github.aplcornell.viaduct.backends.aby/-a-b-y-protocol-factory/protocol-composer.html","searchKeys":["protocolComposer","var protocolComposer: ProtocolComposer? = null","io.github.aplcornell.viaduct.backends.aby.ABYProtocolFactory.protocolComposer"]}]